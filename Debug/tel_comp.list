
tel_comp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001161c  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001c88  080118f0  080118f0  000218f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08013578  08013578  00023578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000014  08013580  08013580  00023580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08013594  08013594  00023594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000007c  24000000  08013598  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000022cc  24000080  08013614  00030080  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  2400234c  08013614  0003234c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0003007c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003091f  00000000  00000000  000300aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005138  00000000  00000000  000609c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000016b0  00000000  00000000  00065b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001518  00000000  00000000  000671b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00036eda  00000000  00000000  000686d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00021a68  00000000  00000000  0009f5aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00154a03  00000000  00000000  000c1012  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00215a15  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006654  00000000  00000000  00215a68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000080 	.word	0x24000080
 80002ec:	00000000 	.word	0x00000000
 80002f0:	080118d4 	.word	0x080118d4

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000084 	.word	0x24000084
 800030c:	080118d4 	.word	0x080118d4

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b974 	b.w	8000620 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468e      	mov	lr, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	d14d      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035e:	428a      	cmp	r2, r1
 8000360:	4694      	mov	ip, r2
 8000362:	d969      	bls.n	8000438 <__udivmoddi4+0xe8>
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	b152      	cbz	r2, 8000380 <__udivmoddi4+0x30>
 800036a:	fa01 f302 	lsl.w	r3, r1, r2
 800036e:	f1c2 0120 	rsb	r1, r2, #32
 8000372:	fa20 f101 	lsr.w	r1, r0, r1
 8000376:	fa0c fc02 	lsl.w	ip, ip, r2
 800037a:	ea41 0e03 	orr.w	lr, r1, r3
 800037e:	4094      	lsls	r4, r2
 8000380:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000384:	0c21      	lsrs	r1, r4, #16
 8000386:	fbbe f6f8 	udiv	r6, lr, r8
 800038a:	fa1f f78c 	uxth.w	r7, ip
 800038e:	fb08 e316 	mls	r3, r8, r6, lr
 8000392:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000396:	fb06 f107 	mul.w	r1, r6, r7
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 30ff 	add.w	r0, r6, #4294967295
 80003a6:	f080 811f 	bcs.w	80005e8 <__udivmoddi4+0x298>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 811c 	bls.w	80005e8 <__udivmoddi4+0x298>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c4:	fb00 f707 	mul.w	r7, r0, r7
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	d90a      	bls.n	80003e2 <__udivmoddi4+0x92>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	f080 810a 	bcs.w	80005ec <__udivmoddi4+0x29c>
 80003d8:	42a7      	cmp	r7, r4
 80003da:	f240 8107 	bls.w	80005ec <__udivmoddi4+0x29c>
 80003de:	4464      	add	r4, ip
 80003e0:	3802      	subs	r0, #2
 80003e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e6:	1be4      	subs	r4, r4, r7
 80003e8:	2600      	movs	r6, #0
 80003ea:	b11d      	cbz	r5, 80003f4 <__udivmoddi4+0xa4>
 80003ec:	40d4      	lsrs	r4, r2
 80003ee:	2300      	movs	r3, #0
 80003f0:	e9c5 4300 	strd	r4, r3, [r5]
 80003f4:	4631      	mov	r1, r6
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0xc2>
 80003fe:	2d00      	cmp	r5, #0
 8000400:	f000 80ef 	beq.w	80005e2 <__udivmoddi4+0x292>
 8000404:	2600      	movs	r6, #0
 8000406:	e9c5 0100 	strd	r0, r1, [r5]
 800040a:	4630      	mov	r0, r6
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	fab3 f683 	clz	r6, r3
 8000416:	2e00      	cmp	r6, #0
 8000418:	d14a      	bne.n	80004b0 <__udivmoddi4+0x160>
 800041a:	428b      	cmp	r3, r1
 800041c:	d302      	bcc.n	8000424 <__udivmoddi4+0xd4>
 800041e:	4282      	cmp	r2, r0
 8000420:	f200 80f9 	bhi.w	8000616 <__udivmoddi4+0x2c6>
 8000424:	1a84      	subs	r4, r0, r2
 8000426:	eb61 0303 	sbc.w	r3, r1, r3
 800042a:	2001      	movs	r0, #1
 800042c:	469e      	mov	lr, r3
 800042e:	2d00      	cmp	r5, #0
 8000430:	d0e0      	beq.n	80003f4 <__udivmoddi4+0xa4>
 8000432:	e9c5 4e00 	strd	r4, lr, [r5]
 8000436:	e7dd      	b.n	80003f4 <__udivmoddi4+0xa4>
 8000438:	b902      	cbnz	r2, 800043c <__udivmoddi4+0xec>
 800043a:	deff      	udf	#255	; 0xff
 800043c:	fab2 f282 	clz	r2, r2
 8000440:	2a00      	cmp	r2, #0
 8000442:	f040 8092 	bne.w	800056a <__udivmoddi4+0x21a>
 8000446:	eba1 010c 	sub.w	r1, r1, ip
 800044a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044e:	fa1f fe8c 	uxth.w	lr, ip
 8000452:	2601      	movs	r6, #1
 8000454:	0c20      	lsrs	r0, r4, #16
 8000456:	fbb1 f3f7 	udiv	r3, r1, r7
 800045a:	fb07 1113 	mls	r1, r7, r3, r1
 800045e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000462:	fb0e f003 	mul.w	r0, lr, r3
 8000466:	4288      	cmp	r0, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x12c>
 800046a:	eb1c 0101 	adds.w	r1, ip, r1
 800046e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x12a>
 8000474:	4288      	cmp	r0, r1
 8000476:	f200 80cb 	bhi.w	8000610 <__udivmoddi4+0x2c0>
 800047a:	4643      	mov	r3, r8
 800047c:	1a09      	subs	r1, r1, r0
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb1 f0f7 	udiv	r0, r1, r7
 8000484:	fb07 1110 	mls	r1, r7, r0, r1
 8000488:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800048c:	fb0e fe00 	mul.w	lr, lr, r0
 8000490:	45a6      	cmp	lr, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x156>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f100 31ff 	add.w	r1, r0, #4294967295
 800049c:	d202      	bcs.n	80004a4 <__udivmoddi4+0x154>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f200 80bb 	bhi.w	800061a <__udivmoddi4+0x2ca>
 80004a4:	4608      	mov	r0, r1
 80004a6:	eba4 040e 	sub.w	r4, r4, lr
 80004aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004ae:	e79c      	b.n	80003ea <__udivmoddi4+0x9a>
 80004b0:	f1c6 0720 	rsb	r7, r6, #32
 80004b4:	40b3      	lsls	r3, r6
 80004b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80004be:	fa20 f407 	lsr.w	r4, r0, r7
 80004c2:	fa01 f306 	lsl.w	r3, r1, r6
 80004c6:	431c      	orrs	r4, r3
 80004c8:	40f9      	lsrs	r1, r7
 80004ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ce:	fa00 f306 	lsl.w	r3, r0, r6
 80004d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004d6:	0c20      	lsrs	r0, r4, #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fb09 1118 	mls	r1, r9, r8, r1
 80004e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e4:	fb08 f00e 	mul.w	r0, r8, lr
 80004e8:	4288      	cmp	r0, r1
 80004ea:	fa02 f206 	lsl.w	r2, r2, r6
 80004ee:	d90b      	bls.n	8000508 <__udivmoddi4+0x1b8>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004f8:	f080 8088 	bcs.w	800060c <__udivmoddi4+0x2bc>
 80004fc:	4288      	cmp	r0, r1
 80004fe:	f240 8085 	bls.w	800060c <__udivmoddi4+0x2bc>
 8000502:	f1a8 0802 	sub.w	r8, r8, #2
 8000506:	4461      	add	r1, ip
 8000508:	1a09      	subs	r1, r1, r0
 800050a:	b2a4      	uxth	r4, r4
 800050c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000510:	fb09 1110 	mls	r1, r9, r0, r1
 8000514:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000518:	fb00 fe0e 	mul.w	lr, r0, lr
 800051c:	458e      	cmp	lr, r1
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x1e2>
 8000520:	eb1c 0101 	adds.w	r1, ip, r1
 8000524:	f100 34ff 	add.w	r4, r0, #4294967295
 8000528:	d26c      	bcs.n	8000604 <__udivmoddi4+0x2b4>
 800052a:	458e      	cmp	lr, r1
 800052c:	d96a      	bls.n	8000604 <__udivmoddi4+0x2b4>
 800052e:	3802      	subs	r0, #2
 8000530:	4461      	add	r1, ip
 8000532:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000536:	fba0 9402 	umull	r9, r4, r0, r2
 800053a:	eba1 010e 	sub.w	r1, r1, lr
 800053e:	42a1      	cmp	r1, r4
 8000540:	46c8      	mov	r8, r9
 8000542:	46a6      	mov	lr, r4
 8000544:	d356      	bcc.n	80005f4 <__udivmoddi4+0x2a4>
 8000546:	d053      	beq.n	80005f0 <__udivmoddi4+0x2a0>
 8000548:	b15d      	cbz	r5, 8000562 <__udivmoddi4+0x212>
 800054a:	ebb3 0208 	subs.w	r2, r3, r8
 800054e:	eb61 010e 	sbc.w	r1, r1, lr
 8000552:	fa01 f707 	lsl.w	r7, r1, r7
 8000556:	fa22 f306 	lsr.w	r3, r2, r6
 800055a:	40f1      	lsrs	r1, r6
 800055c:	431f      	orrs	r7, r3
 800055e:	e9c5 7100 	strd	r7, r1, [r5]
 8000562:	2600      	movs	r6, #0
 8000564:	4631      	mov	r1, r6
 8000566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	40d8      	lsrs	r0, r3
 8000570:	fa0c fc02 	lsl.w	ip, ip, r2
 8000574:	fa21 f303 	lsr.w	r3, r1, r3
 8000578:	4091      	lsls	r1, r2
 800057a:	4301      	orrs	r1, r0
 800057c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000580:	fa1f fe8c 	uxth.w	lr, ip
 8000584:	fbb3 f0f7 	udiv	r0, r3, r7
 8000588:	fb07 3610 	mls	r6, r7, r0, r3
 800058c:	0c0b      	lsrs	r3, r1, #16
 800058e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000592:	fb00 f60e 	mul.w	r6, r0, lr
 8000596:	429e      	cmp	r6, r3
 8000598:	fa04 f402 	lsl.w	r4, r4, r2
 800059c:	d908      	bls.n	80005b0 <__udivmoddi4+0x260>
 800059e:	eb1c 0303 	adds.w	r3, ip, r3
 80005a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80005a6:	d22f      	bcs.n	8000608 <__udivmoddi4+0x2b8>
 80005a8:	429e      	cmp	r6, r3
 80005aa:	d92d      	bls.n	8000608 <__udivmoddi4+0x2b8>
 80005ac:	3802      	subs	r0, #2
 80005ae:	4463      	add	r3, ip
 80005b0:	1b9b      	subs	r3, r3, r6
 80005b2:	b289      	uxth	r1, r1
 80005b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005b8:	fb07 3316 	mls	r3, r7, r6, r3
 80005bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005c0:	fb06 f30e 	mul.w	r3, r6, lr
 80005c4:	428b      	cmp	r3, r1
 80005c6:	d908      	bls.n	80005da <__udivmoddi4+0x28a>
 80005c8:	eb1c 0101 	adds.w	r1, ip, r1
 80005cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005d0:	d216      	bcs.n	8000600 <__udivmoddi4+0x2b0>
 80005d2:	428b      	cmp	r3, r1
 80005d4:	d914      	bls.n	8000600 <__udivmoddi4+0x2b0>
 80005d6:	3e02      	subs	r6, #2
 80005d8:	4461      	add	r1, ip
 80005da:	1ac9      	subs	r1, r1, r3
 80005dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005e0:	e738      	b.n	8000454 <__udivmoddi4+0x104>
 80005e2:	462e      	mov	r6, r5
 80005e4:	4628      	mov	r0, r5
 80005e6:	e705      	b.n	80003f4 <__udivmoddi4+0xa4>
 80005e8:	4606      	mov	r6, r0
 80005ea:	e6e3      	b.n	80003b4 <__udivmoddi4+0x64>
 80005ec:	4618      	mov	r0, r3
 80005ee:	e6f8      	b.n	80003e2 <__udivmoddi4+0x92>
 80005f0:	454b      	cmp	r3, r9
 80005f2:	d2a9      	bcs.n	8000548 <__udivmoddi4+0x1f8>
 80005f4:	ebb9 0802 	subs.w	r8, r9, r2
 80005f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005fc:	3801      	subs	r0, #1
 80005fe:	e7a3      	b.n	8000548 <__udivmoddi4+0x1f8>
 8000600:	4646      	mov	r6, r8
 8000602:	e7ea      	b.n	80005da <__udivmoddi4+0x28a>
 8000604:	4620      	mov	r0, r4
 8000606:	e794      	b.n	8000532 <__udivmoddi4+0x1e2>
 8000608:	4640      	mov	r0, r8
 800060a:	e7d1      	b.n	80005b0 <__udivmoddi4+0x260>
 800060c:	46d0      	mov	r8, sl
 800060e:	e77b      	b.n	8000508 <__udivmoddi4+0x1b8>
 8000610:	3b02      	subs	r3, #2
 8000612:	4461      	add	r1, ip
 8000614:	e732      	b.n	800047c <__udivmoddi4+0x12c>
 8000616:	4630      	mov	r0, r6
 8000618:	e709      	b.n	800042e <__udivmoddi4+0xde>
 800061a:	4464      	add	r4, ip
 800061c:	3802      	subs	r0, #2
 800061e:	e742      	b.n	80004a6 <__udivmoddi4+0x156>

08000620 <__aeabi_idiv0>:
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop

08000624 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	0a5a      	lsrs	r2, r3, #9
 8000634:	490f      	ldr	r1, [pc, #60]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000636:	fba1 1202 	umull	r1, r2, r1, r2
 800063a:	09d2      	lsrs	r2, r2, #7
 800063c:	490e      	ldr	r1, [pc, #56]	; (8000678 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800063e:	fb01 f202 	mul.w	r2, r1, r2
 8000642:	1a9b      	subs	r3, r3, r2
 8000644:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	0a5b      	lsrs	r3, r3, #9
 800064c:	4a09      	ldr	r2, [pc, #36]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800064e:	fba2 2303 	umull	r2, r3, r2, r3
 8000652:	09db      	lsrs	r3, r3, #7
 8000654:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	441a      	add	r2, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	68fa      	ldr	r2, [r7, #12]
 8000666:	601a      	str	r2, [r3, #0]
}
 8000668:	bf00      	nop
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	00044b83 	.word	0x00044b83
 8000678:	3b9aca00 	.word	0x3b9aca00

0800067c <_Z13DC_motor_initv>:
//DC_motor fl(5.5, 85, 0, 0.001, 43193, 200);
//DC_motor br(148.3, 2813.3, 0.537, 0.001, 26734, 200);
//DC_motor bl(0, 0, 0, 0.001, 41296, 200);


void DC_motor_init(){
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1);
 8000680:	2100      	movs	r1, #0
 8000682:	4822      	ldr	r0, [pc, #136]	; (800070c <_Z13DC_motor_initv+0x90>)
 8000684:	f00c fef0 	bl	800d468 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_2);
 8000688:	2104      	movs	r1, #4
 800068a:	4820      	ldr	r0, [pc, #128]	; (800070c <_Z13DC_motor_initv+0x90>)
 800068c:	f00c feec 	bl	800d468 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_1);
 8000690:	2100      	movs	r1, #0
 8000692:	481f      	ldr	r0, [pc, #124]	; (8000710 <_Z13DC_motor_initv+0x94>)
 8000694:	f00c fee8 	bl	800d468 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_2);
 8000698:	2104      	movs	r1, #4
 800069a:	481d      	ldr	r0, [pc, #116]	; (8000710 <_Z13DC_motor_initv+0x94>)
 800069c:	f00c fee4 	bl	800d468 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1);
 80006a0:	2100      	movs	r1, #0
 80006a2:	481c      	ldr	r0, [pc, #112]	; (8000714 <_Z13DC_motor_initv+0x98>)
 80006a4:	f00c fee0 	bl	800d468 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_2);
 80006a8:	2104      	movs	r1, #4
 80006aa:	481a      	ldr	r0, [pc, #104]	; (8000714 <_Z13DC_motor_initv+0x98>)
 80006ac:	f00c fedc 	bl	800d468 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 80006b0:	2100      	movs	r1, #0
 80006b2:	4819      	ldr	r0, [pc, #100]	; (8000718 <_Z13DC_motor_initv+0x9c>)
 80006b4:	f00c fed8 	bl	800d468 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_2);
 80006b8:	2104      	movs	r1, #4
 80006ba:	4817      	ldr	r0, [pc, #92]	; (8000718 <_Z13DC_motor_initv+0x9c>)
 80006bc:	f00c fed4 	bl	800d468 <HAL_TIM_Encoder_Start>

	HAL_TIM_PWM_Start_IT(&htim12, TIM_CHANNEL_2);
 80006c0:	2104      	movs	r1, #4
 80006c2:	4816      	ldr	r0, [pc, #88]	; (800071c <_Z13DC_motor_initv+0xa0>)
 80006c4:	f00c fcc2 	bl	800d04c <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim12, TIM_CHANNEL_1);
 80006c8:	2100      	movs	r1, #0
 80006ca:	4814      	ldr	r0, [pc, #80]	; (800071c <_Z13DC_motor_initv+0xa0>)
 80006cc:	f00c fcbe 	bl	800d04c <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim15, TIM_CHANNEL_2);
 80006d0:	2104      	movs	r1, #4
 80006d2:	4813      	ldr	r0, [pc, #76]	; (8000720 <_Z13DC_motor_initv+0xa4>)
 80006d4:	f00c fcba 	bl	800d04c <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim15, TIM_CHANNEL_1);
 80006d8:	2100      	movs	r1, #0
 80006da:	4811      	ldr	r0, [pc, #68]	; (8000720 <_Z13DC_motor_initv+0xa4>)
 80006dc:	f00c fcb6 	bl	800d04c <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start(&htim23, TIM_CHANNEL_1);
 80006e0:	2100      	movs	r1, #0
 80006e2:	4810      	ldr	r0, [pc, #64]	; (8000724 <_Z13DC_motor_initv+0xa8>)
 80006e4:	f00c fb96 	bl	800ce14 <HAL_TIM_PWM_Start>

	HAL_TIM_Base_Start_IT(&htim7);
 80006e8:	480f      	ldr	r0, [pc, #60]	; (8000728 <_Z13DC_motor_initv+0xac>)
 80006ea:	f00c fab5 	bl	800cc58 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim8);
 80006ee:	480f      	ldr	r0, [pc, #60]	; (800072c <_Z13DC_motor_initv+0xb0>)
 80006f0:	f00c fab2 	bl	800cc58 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 80006f4:	480e      	ldr	r0, [pc, #56]	; (8000730 <_Z13DC_motor_initv+0xb4>)
 80006f6:	f00c faaf 	bl	800cc58 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim14);
 80006fa:	480e      	ldr	r0, [pc, #56]	; (8000734 <_Z13DC_motor_initv+0xb8>)
 80006fc:	f00c faac 	bl	800cc58 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim23);
 8000700:	4808      	ldr	r0, [pc, #32]	; (8000724 <_Z13DC_motor_initv+0xa8>)
 8000702:	f00c faa9 	bl	800cc58 <HAL_TIM_Base_Start_IT>
}
 8000706:	bf00      	nop
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	24000280 	.word	0x24000280
 8000710:	24000364 	.word	0x24000364
 8000714:	240002cc 	.word	0x240002cc
 8000718:	24000318 	.word	0x24000318
 800071c:	24000448 	.word	0x24000448
 8000720:	2400052c 	.word	0x2400052c
 8000724:	24000578 	.word	0x24000578
 8000728:	240003b0 	.word	0x240003b0
 800072c:	240003fc 	.word	0x240003fc
 8000730:	24000494 	.word	0x24000494
 8000734:	240004e0 	.word	0x240004e0

08000738 <_ZN8DC_motorC1Edddddd>:

DC_motor::DC_motor(double p, double i, double d, double time, double res, double ratio){
 8000738:	b480      	push	{r7}
 800073a:	b08f      	sub	sp, #60	; 0x3c
 800073c:	af00      	add	r7, sp, #0
 800073e:	6378      	str	r0, [r7, #52]	; 0x34
 8000740:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 8000744:	ed87 1b08 	vstr	d1, [r7, #32]
 8000748:	ed87 2b06 	vstr	d2, [r7, #24]
 800074c:	ed87 3b04 	vstr	d3, [r7, #16]
 8000750:	ed87 4b02 	vstr	d4, [r7, #8]
 8000754:	ed87 5b00 	vstr	d5, [r7]
	this->kp = p;
 8000758:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800075a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800075e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	this->ki = i;
 8000762:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000764:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000768:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	this->kd = d;
 800076c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800076e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000772:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	this->time = time;
 8000776:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000778:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800077c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	this->res_encoder = res;
 8000780:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000782:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000786:	e9c1 2300 	strd	r2, r3, [r1]
	this->sr_ratio = ratio;
 800078a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800078c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000790:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 8000794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000796:	4618      	mov	r0, r3
 8000798:	373c      	adds	r7, #60	; 0x3c
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr

080007a2 <_ZN8DC_motor10PIDControlEv>:
//	if(PID<-1) PID=-1;
//
//	return rps_now;
//}

void DC_motor::PIDControl(void){
 80007a2:	b480      	push	{r7}
 80007a4:	b083      	sub	sp, #12
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	6078      	str	r0, [r7, #4]
	rps_now = (double) CountNow / 4 / res_encoder / sr_ratio / time;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 80007b0:	ee07 3a90 	vmov	s15, r3
 80007b4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80007b8:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 80007bc:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	ed93 7b00 	vldr	d7, [r3]
 80007c6:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	ed93 7b02 	vldr	d7, [r3, #8]
 80007d0:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	ed93 6b0c 	vldr	d6, [r3, #48]	; 0x30
 80007da:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40

	error = rps_goal - rps_now;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	ed93 6b0e 	vldr	d6, [r3, #56]	; 0x38
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80007f0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	ed83 7b04 	vstr	d7, [r3, #16]
	error_total += error;
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	ed93 6b06 	vldr	d6, [r3, #24]
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	ed93 7b04 	vldr	d7, [r3, #16]
 8000806:	ee36 7b07 	vadd.f64	d7, d6, d7
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	ed83 7b06 	vstr	d7, [r3, #24]
	PWM = error*kp + error_total*ki + error_last*kd;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	ed93 6b04 	vldr	d6, [r3, #16]
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 800081c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	ed93 5b06 	vldr	d5, [r3, #24]
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 800082c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000830:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	ed93 5b08 	vldr	d5, [r3, #32]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 8000840:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000844:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	ed83 7b1a 	vstr	d7, [r3, #104]	; 0x68
	error_last = error;
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8000854:	6879      	ldr	r1, [r7, #4]
 8000856:	e9c1 2308 	strd	r2, r3, [r1, #32]
}
 800085a:	bf00      	nop
 800085c:	370c      	adds	r7, #12
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
	...

08000868 <_Z41__static_initialization_and_destruction_0ii>:
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
 8000870:	6039      	str	r1, [r7, #0]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	2b01      	cmp	r3, #1
 8000876:	d140      	bne.n	80008fa <_Z41__static_initialization_and_destruction_0ii+0x92>
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800087e:	4293      	cmp	r3, r2
 8000880:	d13b      	bne.n	80008fa <_Z41__static_initialization_and_destruction_0ii+0x92>
DC_motor fr(2500,0.6,0, 0.001,512,20.8);
 8000882:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8000908 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 8000886:	ed9f 4b22 	vldr	d4, [pc, #136]	; 8000910 <_Z41__static_initialization_and_destruction_0ii+0xa8>
 800088a:	ed9f 3b23 	vldr	d3, [pc, #140]	; 8000918 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 800088e:	ed9f 2b24 	vldr	d2, [pc, #144]	; 8000920 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 8000892:	ed9f 1b25 	vldr	d1, [pc, #148]	; 8000928 <_Z41__static_initialization_and_destruction_0ii+0xc0>
 8000896:	ed9f 0b26 	vldr	d0, [pc, #152]	; 8000930 <_Z41__static_initialization_and_destruction_0ii+0xc8>
 800089a:	482f      	ldr	r0, [pc, #188]	; (8000958 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 800089c:	f7ff ff4c 	bl	8000738 <_ZN8DC_motorC1Edddddd>
DC_motor fl(1500,0.6,0, 0.001,512,20.8);
 80008a0:	ed9f 5b19 	vldr	d5, [pc, #100]	; 8000908 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 80008a4:	ed9f 4b1a 	vldr	d4, [pc, #104]	; 8000910 <_Z41__static_initialization_and_destruction_0ii+0xa8>
 80008a8:	ed9f 3b1b 	vldr	d3, [pc, #108]	; 8000918 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 80008ac:	ed9f 2b1c 	vldr	d2, [pc, #112]	; 8000920 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 80008b0:	ed9f 1b1d 	vldr	d1, [pc, #116]	; 8000928 <_Z41__static_initialization_and_destruction_0ii+0xc0>
 80008b4:	ed9f 0b20 	vldr	d0, [pc, #128]	; 8000938 <_Z41__static_initialization_and_destruction_0ii+0xd0>
 80008b8:	4828      	ldr	r0, [pc, #160]	; (800095c <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 80008ba:	f7ff ff3d 	bl	8000738 <_ZN8DC_motorC1Edddddd>
DC_motor br(3500,0.6,0.002, 0.001,512,20.8);
 80008be:	ed9f 5b12 	vldr	d5, [pc, #72]	; 8000908 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 80008c2:	ed9f 4b13 	vldr	d4, [pc, #76]	; 8000910 <_Z41__static_initialization_and_destruction_0ii+0xa8>
 80008c6:	ed9f 3b14 	vldr	d3, [pc, #80]	; 8000918 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 80008ca:	ed9f 2b1d 	vldr	d2, [pc, #116]	; 8000940 <_Z41__static_initialization_and_destruction_0ii+0xd8>
 80008ce:	ed9f 1b16 	vldr	d1, [pc, #88]	; 8000928 <_Z41__static_initialization_and_destruction_0ii+0xc0>
 80008d2:	ed9f 0b1d 	vldr	d0, [pc, #116]	; 8000948 <_Z41__static_initialization_and_destruction_0ii+0xe0>
 80008d6:	4822      	ldr	r0, [pc, #136]	; (8000960 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 80008d8:	f7ff ff2e 	bl	8000738 <_ZN8DC_motorC1Edddddd>
DC_motor bl(3000,0.6,0, 0.001,512,20.8);
 80008dc:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 8000908 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 80008e0:	ed9f 4b0b 	vldr	d4, [pc, #44]	; 8000910 <_Z41__static_initialization_and_destruction_0ii+0xa8>
 80008e4:	ed9f 3b0c 	vldr	d3, [pc, #48]	; 8000918 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 80008e8:	ed9f 2b0d 	vldr	d2, [pc, #52]	; 8000920 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 80008ec:	ed9f 1b0e 	vldr	d1, [pc, #56]	; 8000928 <_Z41__static_initialization_and_destruction_0ii+0xc0>
 80008f0:	ed9f 0b17 	vldr	d0, [pc, #92]	; 8000950 <_Z41__static_initialization_and_destruction_0ii+0xe8>
 80008f4:	481b      	ldr	r0, [pc, #108]	; (8000964 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 80008f6:	f7ff ff1f 	bl	8000738 <_ZN8DC_motorC1Edddddd>
}
 80008fa:	bf00      	nop
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	f3af 8000 	nop.w
 8000908:	cccccccd 	.word	0xcccccccd
 800090c:	4034cccc 	.word	0x4034cccc
 8000910:	00000000 	.word	0x00000000
 8000914:	40800000 	.word	0x40800000
 8000918:	d2f1a9fc 	.word	0xd2f1a9fc
 800091c:	3f50624d 	.word	0x3f50624d
	...
 8000928:	33333333 	.word	0x33333333
 800092c:	3fe33333 	.word	0x3fe33333
 8000930:	00000000 	.word	0x00000000
 8000934:	40a38800 	.word	0x40a38800
 8000938:	00000000 	.word	0x00000000
 800093c:	40977000 	.word	0x40977000
 8000940:	d2f1a9fc 	.word	0xd2f1a9fc
 8000944:	3f60624d 	.word	0x3f60624d
 8000948:	00000000 	.word	0x00000000
 800094c:	40ab5800 	.word	0x40ab5800
 8000950:	00000000 	.word	0x00000000
 8000954:	40a77000 	.word	0x40a77000
 8000958:	240000a0 	.word	0x240000a0
 800095c:	24000110 	.word	0x24000110
 8000960:	24000180 	.word	0x24000180
 8000964:	240001f0 	.word	0x240001f0

08000968 <_GLOBAL__sub_I_fr>:
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
 800096c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000970:	2001      	movs	r0, #1
 8000972:	f7ff ff79 	bl	8000868 <_Z41__static_initialization_and_destruction_0ii>
 8000976:	bd80      	pop	{r7, pc}

08000978 <_Z10debug_loopv>:
bool mecanum_debug = false;
bool intake_debug = false;
bool scara_debug = true;


void debug_loop(){
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
	while(1){
		if(mecanum_debug) mecanum.run();
 800097c:	4b0a      	ldr	r3, [pc, #40]	; (80009a8 <_Z10debug_loopv+0x30>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d002      	beq.n	800098a <_Z10debug_loopv+0x12>
 8000984:	4809      	ldr	r0, [pc, #36]	; (80009ac <_Z10debug_loopv+0x34>)
 8000986:	f000 fef1 	bl	800176c <_ZN7Mecanum3runEv>
		if(intake_debug) INTAKE::run();
 800098a:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <_Z10debug_loopv+0x38>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <_Z10debug_loopv+0x1e>
 8000992:	f000 f813 	bl	80009bc <_ZN6INTAKE3runEv>
		if(scara_debug) sc.run();
 8000996:	4b07      	ldr	r3, [pc, #28]	; (80009b4 <_Z10debug_loopv+0x3c>)
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d0ee      	beq.n	800097c <_Z10debug_loopv+0x4>
 800099e:	4806      	ldr	r0, [pc, #24]	; (80009b8 <_Z10debug_loopv+0x40>)
 80009a0:	f004 fb12 	bl	8004fc8 <_ZN5SCARA3runEv>
		if(mecanum_debug) mecanum.run();
 80009a4:	e7ea      	b.n	800097c <_Z10debug_loopv+0x4>
 80009a6:	bf00      	nop
 80009a8:	24000261 	.word	0x24000261
 80009ac:	24000748 	.word	0x24000748
 80009b0:	24000262 	.word	0x24000262
 80009b4:	24000000 	.word	0x24000000
 80009b8:	24002250 	.word	0x24002250

080009bc <_ZN6INTAKE3runEv>:
namespace INTAKE{
	double tilt, stretch, suck;
}


void INTAKE::run(void){
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
	 /*stretch*/
	    if (INTAKE::stretch == 0){
 80009c0:	4b5c      	ldr	r3, [pc, #368]	; (8000b34 <_ZN6INTAKE3runEv+0x178>)
 80009c2:	ed93 7b00 	vldr	d7, [r3]
 80009c6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80009ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009ce:	d10a      	bne.n	80009e6 <_ZN6INTAKE3runEv+0x2a>
	    	HAL_GPIO_WritePin(STRETCH_INA_PORT, STRETCH_INA_PIN, GPIO_PIN_RESET);
 80009d0:	2200      	movs	r2, #0
 80009d2:	2140      	movs	r1, #64	; 0x40
 80009d4:	4858      	ldr	r0, [pc, #352]	; (8000b38 <_ZN6INTAKE3runEv+0x17c>)
 80009d6:	f009 fe3d 	bl	800a654 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(STRETCH_INB_PORT, STRETCH_INB_PIN, GPIO_PIN_RESET);
 80009da:	2200      	movs	r2, #0
 80009dc:	2180      	movs	r1, #128	; 0x80
 80009de:	4856      	ldr	r0, [pc, #344]	; (8000b38 <_ZN6INTAKE3runEv+0x17c>)
 80009e0:	f009 fe38 	bl	800a654 <HAL_GPIO_WritePin>
 80009e4:	e028      	b.n	8000a38 <_ZN6INTAKE3runEv+0x7c>
	    } else if (INTAKE::stretch == -1){
 80009e6:	4b53      	ldr	r3, [pc, #332]	; (8000b34 <_ZN6INTAKE3runEv+0x178>)
 80009e8:	ed93 7b00 	vldr	d7, [r3]
 80009ec:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 80009f0:	eeb4 7b46 	vcmp.f64	d7, d6
 80009f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009f8:	d10a      	bne.n	8000a10 <_ZN6INTAKE3runEv+0x54>
	    	HAL_GPIO_WritePin(STRETCH_INA_PORT, STRETCH_INA_PIN, GPIO_PIN_SET);
 80009fa:	2201      	movs	r2, #1
 80009fc:	2140      	movs	r1, #64	; 0x40
 80009fe:	484e      	ldr	r0, [pc, #312]	; (8000b38 <_ZN6INTAKE3runEv+0x17c>)
 8000a00:	f009 fe28 	bl	800a654 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(STRETCH_INB_PORT, STRETCH_INB_PIN, GPIO_PIN_RESET);
 8000a04:	2200      	movs	r2, #0
 8000a06:	2180      	movs	r1, #128	; 0x80
 8000a08:	484b      	ldr	r0, [pc, #300]	; (8000b38 <_ZN6INTAKE3runEv+0x17c>)
 8000a0a:	f009 fe23 	bl	800a654 <HAL_GPIO_WritePin>
 8000a0e:	e013      	b.n	8000a38 <_ZN6INTAKE3runEv+0x7c>
	    } else if (INTAKE::stretch == 1){
 8000a10:	4b48      	ldr	r3, [pc, #288]	; (8000b34 <_ZN6INTAKE3runEv+0x178>)
 8000a12:	ed93 7b00 	vldr	d7, [r3]
 8000a16:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000a1a:	eeb4 7b46 	vcmp.f64	d7, d6
 8000a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a22:	d109      	bne.n	8000a38 <_ZN6INTAKE3runEv+0x7c>
	    	HAL_GPIO_WritePin(STRETCH_INA_PORT, STRETCH_INA_PIN, GPIO_PIN_RESET);
 8000a24:	2200      	movs	r2, #0
 8000a26:	2140      	movs	r1, #64	; 0x40
 8000a28:	4843      	ldr	r0, [pc, #268]	; (8000b38 <_ZN6INTAKE3runEv+0x17c>)
 8000a2a:	f009 fe13 	bl	800a654 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(STRETCH_INB_PORT, STRETCH_INB_PIN, GPIO_PIN_SET);
 8000a2e:	2201      	movs	r2, #1
 8000a30:	2180      	movs	r1, #128	; 0x80
 8000a32:	4841      	ldr	r0, [pc, #260]	; (8000b38 <_ZN6INTAKE3runEv+0x17c>)
 8000a34:	f009 fe0e 	bl	800a654 <HAL_GPIO_WritePin>
	    }

	/*tilt*/
	    if (INTAKE::tilt == 0){
 8000a38:	4b40      	ldr	r3, [pc, #256]	; (8000b3c <_ZN6INTAKE3runEv+0x180>)
 8000a3a:	ed93 7b00 	vldr	d7, [r3]
 8000a3e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8000a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a46:	d10b      	bne.n	8000a60 <_ZN6INTAKE3runEv+0xa4>
	    	HAL_GPIO_WritePin(TILT_INA_PORT, TILT_INA_PIN, GPIO_PIN_RESET);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a4e:	483a      	ldr	r0, [pc, #232]	; (8000b38 <_ZN6INTAKE3runEv+0x17c>)
 8000a50:	f009 fe00 	bl	800a654 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(TILT_INB_PORT, TILT_INB_PIN, GPIO_PIN_RESET);
 8000a54:	2200      	movs	r2, #0
 8000a56:	2110      	movs	r1, #16
 8000a58:	4839      	ldr	r0, [pc, #228]	; (8000b40 <_ZN6INTAKE3runEv+0x184>)
 8000a5a:	f009 fdfb 	bl	800a654 <HAL_GPIO_WritePin>
 8000a5e:	e02a      	b.n	8000ab6 <_ZN6INTAKE3runEv+0xfa>
	    } else if (INTAKE::tilt == 1){
 8000a60:	4b36      	ldr	r3, [pc, #216]	; (8000b3c <_ZN6INTAKE3runEv+0x180>)
 8000a62:	ed93 7b00 	vldr	d7, [r3]
 8000a66:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000a6a:	eeb4 7b46 	vcmp.f64	d7, d6
 8000a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a72:	d10b      	bne.n	8000a8c <_ZN6INTAKE3runEv+0xd0>
	    	HAL_GPIO_WritePin(TILT_INA_PORT, TILT_INA_PIN, GPIO_PIN_RESET);
 8000a74:	2200      	movs	r2, #0
 8000a76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a7a:	482f      	ldr	r0, [pc, #188]	; (8000b38 <_ZN6INTAKE3runEv+0x17c>)
 8000a7c:	f009 fdea 	bl	800a654 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(TILT_INB_PORT, TILT_INB_PIN, GPIO_PIN_SET);
 8000a80:	2201      	movs	r2, #1
 8000a82:	2110      	movs	r1, #16
 8000a84:	482e      	ldr	r0, [pc, #184]	; (8000b40 <_ZN6INTAKE3runEv+0x184>)
 8000a86:	f009 fde5 	bl	800a654 <HAL_GPIO_WritePin>
 8000a8a:	e014      	b.n	8000ab6 <_ZN6INTAKE3runEv+0xfa>
	    } else if (INTAKE::tilt == -1){
 8000a8c:	4b2b      	ldr	r3, [pc, #172]	; (8000b3c <_ZN6INTAKE3runEv+0x180>)
 8000a8e:	ed93 7b00 	vldr	d7, [r3]
 8000a92:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8000a96:	eeb4 7b46 	vcmp.f64	d7, d6
 8000a9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a9e:	d10a      	bne.n	8000ab6 <_ZN6INTAKE3runEv+0xfa>
	    	HAL_GPIO_WritePin(TILT_INA_PORT, TILT_INA_PIN, GPIO_PIN_SET);
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000aa6:	4824      	ldr	r0, [pc, #144]	; (8000b38 <_ZN6INTAKE3runEv+0x17c>)
 8000aa8:	f009 fdd4 	bl	800a654 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(TILT_INB_PORT, TILT_INB_PIN, GPIO_PIN_RESET);
 8000aac:	2200      	movs	r2, #0
 8000aae:	2110      	movs	r1, #16
 8000ab0:	4823      	ldr	r0, [pc, #140]	; (8000b40 <_ZN6INTAKE3runEv+0x184>)
 8000ab2:	f009 fdcf 	bl	800a654 <HAL_GPIO_WritePin>
	    }

    /*suck*/
	    if (INTAKE::suck == 0){
 8000ab6:	4b23      	ldr	r3, [pc, #140]	; (8000b44 <_ZN6INTAKE3runEv+0x188>)
 8000ab8:	ed93 7b00 	vldr	d7, [r3]
 8000abc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8000ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ac4:	d10a      	bne.n	8000adc <_ZN6INTAKE3runEv+0x120>
	    	HAL_GPIO_WritePin(SUCK_INA_PORT, SUCK_INA_PIN, GPIO_PIN_RESET);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2140      	movs	r1, #64	; 0x40
 8000aca:	481f      	ldr	r0, [pc, #124]	; (8000b48 <_ZN6INTAKE3runEv+0x18c>)
 8000acc:	f009 fdc2 	bl	800a654 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(SUCK_INB_PORT, SUCK_INB_PIN, GPIO_PIN_RESET);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	2180      	movs	r1, #128	; 0x80
 8000ad4:	481c      	ldr	r0, [pc, #112]	; (8000b48 <_ZN6INTAKE3runEv+0x18c>)
 8000ad6:	f009 fdbd 	bl	800a654 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(SUCK_INB_PORT, SUCK_INB_PIN, GPIO_PIN_RESET);
	    } else if (INTAKE::suck == -1){
	    	HAL_GPIO_WritePin(SUCK_INA_PORT, SUCK_INA_PIN, GPIO_PIN_RESET);
	    	HAL_GPIO_WritePin(SUCK_INB_PORT, SUCK_INB_PIN, GPIO_PIN_SET);
	    }
}
 8000ada:	e028      	b.n	8000b2e <_ZN6INTAKE3runEv+0x172>
	    } else if (INTAKE::suck == 1){
 8000adc:	4b19      	ldr	r3, [pc, #100]	; (8000b44 <_ZN6INTAKE3runEv+0x188>)
 8000ade:	ed93 7b00 	vldr	d7, [r3]
 8000ae2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000ae6:	eeb4 7b46 	vcmp.f64	d7, d6
 8000aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000aee:	d10a      	bne.n	8000b06 <_ZN6INTAKE3runEv+0x14a>
	    	HAL_GPIO_WritePin(SUCK_INA_PORT, SUCK_INA_PIN, GPIO_PIN_SET);
 8000af0:	2201      	movs	r2, #1
 8000af2:	2140      	movs	r1, #64	; 0x40
 8000af4:	4814      	ldr	r0, [pc, #80]	; (8000b48 <_ZN6INTAKE3runEv+0x18c>)
 8000af6:	f009 fdad 	bl	800a654 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(SUCK_INB_PORT, SUCK_INB_PIN, GPIO_PIN_RESET);
 8000afa:	2200      	movs	r2, #0
 8000afc:	2180      	movs	r1, #128	; 0x80
 8000afe:	4812      	ldr	r0, [pc, #72]	; (8000b48 <_ZN6INTAKE3runEv+0x18c>)
 8000b00:	f009 fda8 	bl	800a654 <HAL_GPIO_WritePin>
}
 8000b04:	e013      	b.n	8000b2e <_ZN6INTAKE3runEv+0x172>
	    } else if (INTAKE::suck == -1){
 8000b06:	4b0f      	ldr	r3, [pc, #60]	; (8000b44 <_ZN6INTAKE3runEv+0x188>)
 8000b08:	ed93 7b00 	vldr	d7, [r3]
 8000b0c:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8000b10:	eeb4 7b46 	vcmp.f64	d7, d6
 8000b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b18:	d109      	bne.n	8000b2e <_ZN6INTAKE3runEv+0x172>
	    	HAL_GPIO_WritePin(SUCK_INA_PORT, SUCK_INA_PIN, GPIO_PIN_RESET);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2140      	movs	r1, #64	; 0x40
 8000b1e:	480a      	ldr	r0, [pc, #40]	; (8000b48 <_ZN6INTAKE3runEv+0x18c>)
 8000b20:	f009 fd98 	bl	800a654 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(SUCK_INB_PORT, SUCK_INB_PIN, GPIO_PIN_SET);
 8000b24:	2201      	movs	r2, #1
 8000b26:	2180      	movs	r1, #128	; 0x80
 8000b28:	4807      	ldr	r0, [pc, #28]	; (8000b48 <_ZN6INTAKE3runEv+0x18c>)
 8000b2a:	f009 fd93 	bl	800a654 <HAL_GPIO_WritePin>
}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	24000270 	.word	0x24000270
 8000b38:	58020400 	.word	0x58020400
 8000b3c:	24000268 	.word	0x24000268
 8000b40:	58020800 	.word	0x58020800
 8000b44:	24000278 	.word	0x24000278
 8000b48:	58020000 	.word	0x58020000

08000b4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b50:	f006 f8fa 	bl	8006d48 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b54:	f000 f820 	bl	8000b98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b58:	f000 fc64 	bl	8001424 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000b5c:	f000 f88c 	bl	8000c78 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000b60:	f000 f8de 	bl	8000d20 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000b64:	f000 f932 	bl	8000dcc <MX_TIM4_Init>
  MX_TIM5_Init();
 8000b68:	f000 f986 	bl	8000e78 <MX_TIM5_Init>
  MX_TIM12_Init();
 8000b6c:	f000 fa64 	bl	8001038 <MX_TIM12_Init>
  MX_TIM13_Init();
 8000b70:	f000 fab2 	bl	80010d8 <MX_TIM13_Init>
  MX_TIM15_Init();
 8000b74:	f000 faf6 	bl	8001164 <MX_TIM15_Init>
  MX_DMA_Init();
 8000b78:	f000 fc2c 	bl	80013d4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000b7c:	f000 fbde 	bl	800133c <MX_USART1_UART_Init>
  MX_TIM8_Init();
 8000b80:	f000 fa06 	bl	8000f90 <MX_TIM8_Init>
  MX_TIM14_Init();
 8000b84:	f000 facc 	bl	8001120 <MX_TIM14_Init>
  MX_TIM7_Init();
 8000b88:	f000 f9cc 	bl	8000f24 <MX_TIM7_Init>
  MX_TIM23_Init();
 8000b8c:	f000 fb7c 	bl	8001288 <MX_TIM23_Init>
  /* USER CODE BEGIN 2 */
  main_function();
 8000b90:	f000 fd86 	bl	80016a0 <main_function>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b94:	e7fe      	b.n	8000b94 <main+0x48>
	...

08000b98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b09c      	sub	sp, #112	; 0x70
 8000b9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba2:	224c      	movs	r2, #76	; 0x4c
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f010 fd0a 	bl	80115c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bac:	1d3b      	adds	r3, r7, #4
 8000bae:	2220      	movs	r2, #32
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f010 fd04 	bl	80115c0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000bb8:	2002      	movs	r0, #2
 8000bba:	f009 fd65 	bl	800a688 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	603b      	str	r3, [r7, #0]
 8000bc2:	4b2c      	ldr	r3, [pc, #176]	; (8000c74 <SystemClock_Config+0xdc>)
 8000bc4:	699b      	ldr	r3, [r3, #24]
 8000bc6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000bca:	4a2a      	ldr	r2, [pc, #168]	; (8000c74 <SystemClock_Config+0xdc>)
 8000bcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bd0:	6193      	str	r3, [r2, #24]
 8000bd2:	4b28      	ldr	r3, [pc, #160]	; (8000c74 <SystemClock_Config+0xdc>)
 8000bd4:	699b      	ldr	r3, [r3, #24]
 8000bd6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bda:	603b      	str	r3, [r7, #0]
 8000bdc:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000bde:	bf00      	nop
 8000be0:	4b24      	ldr	r3, [pc, #144]	; (8000c74 <SystemClock_Config+0xdc>)
 8000be2:	699b      	ldr	r3, [r3, #24]
 8000be4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000be8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000bec:	d1f8      	bne.n	8000be0 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bf2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bf6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c00:	2301      	movs	r3, #1
 8000c02:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 42;
 8000c04:	232a      	movs	r3, #42	; 0x2a
 8000c06:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c10:	2302      	movs	r3, #2
 8000c12:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000c14:	230c      	movs	r3, #12
 8000c16:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c24:	4618      	mov	r0, r3
 8000c26:	f009 fd69 	bl	800a6fc <HAL_RCC_OscConfig>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000c30:	f000 fd30 	bl	8001694 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c34:	233f      	movs	r3, #63	; 0x3f
 8000c36:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c38:	2303      	movs	r3, #3
 8000c3a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV2;
 8000c3c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c40:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000c42:	2308      	movs	r3, #8
 8000c44:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000c46:	2340      	movs	r3, #64	; 0x40
 8000c48:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000c4a:	2340      	movs	r3, #64	; 0x40
 8000c4c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000c4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c52:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000c54:	2340      	movs	r3, #64	; 0x40
 8000c56:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c58:	1d3b      	adds	r3, r7, #4
 8000c5a:	2102      	movs	r1, #2
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f00a f8fb 	bl	800ae58 <HAL_RCC_ClockConfig>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000c68:	f000 fd14 	bl	8001694 <Error_Handler>
  }
}
 8000c6c:	bf00      	nop
 8000c6e:	3770      	adds	r7, #112	; 0x70
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	58024800 	.word	0x58024800

08000c78 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08c      	sub	sp, #48	; 0x30
 8000c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c7e:	f107 030c 	add.w	r3, r7, #12
 8000c82:	2224      	movs	r2, #36	; 0x24
 8000c84:	2100      	movs	r1, #0
 8000c86:	4618      	mov	r0, r3
 8000c88:	f010 fc9a 	bl	80115c0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c8c:	463b      	mov	r3, r7
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	605a      	str	r2, [r3, #4]
 8000c94:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c96:	4b21      	ldr	r3, [pc, #132]	; (8000d1c <MX_TIM2_Init+0xa4>)
 8000c98:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c9c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000c9e:	4b1f      	ldr	r3, [pc, #124]	; (8000d1c <MX_TIM2_Init+0xa4>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca4:	4b1d      	ldr	r3, [pc, #116]	; (8000d1c <MX_TIM2_Init+0xa4>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000caa:	4b1c      	ldr	r3, [pc, #112]	; (8000d1c <MX_TIM2_Init+0xa4>)
 8000cac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cb0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cb2:	4b1a      	ldr	r3, [pc, #104]	; (8000d1c <MX_TIM2_Init+0xa4>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cb8:	4b18      	ldr	r3, [pc, #96]	; (8000d1c <MX_TIM2_Init+0xa4>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000cbe:	2303      	movs	r3, #3
 8000cc0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000ce2:	f107 030c 	add.w	r3, r7, #12
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	480c      	ldr	r0, [pc, #48]	; (8000d1c <MX_TIM2_Init+0xa4>)
 8000cea:	f00c fb17 	bl	800d31c <HAL_TIM_Encoder_Init>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000cf4:	f000 fcce 	bl	8001694 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d00:	463b      	mov	r3, r7
 8000d02:	4619      	mov	r1, r3
 8000d04:	4805      	ldr	r0, [pc, #20]	; (8000d1c <MX_TIM2_Init+0xa4>)
 8000d06:	f00d fbd1 	bl	800e4ac <HAL_TIMEx_MasterConfigSynchronization>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000d10:	f000 fcc0 	bl	8001694 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d14:	bf00      	nop
 8000d16:	3730      	adds	r7, #48	; 0x30
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	24000280 	.word	0x24000280

08000d20 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b08c      	sub	sp, #48	; 0x30
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000d26:	f107 030c 	add.w	r3, r7, #12
 8000d2a:	2224      	movs	r2, #36	; 0x24
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f010 fc46 	bl	80115c0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d34:	463b      	mov	r3, r7
 8000d36:	2200      	movs	r2, #0
 8000d38:	601a      	str	r2, [r3, #0]
 8000d3a:	605a      	str	r2, [r3, #4]
 8000d3c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d3e:	4b21      	ldr	r3, [pc, #132]	; (8000dc4 <MX_TIM3_Init+0xa4>)
 8000d40:	4a21      	ldr	r2, [pc, #132]	; (8000dc8 <MX_TIM3_Init+0xa8>)
 8000d42:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000d44:	4b1f      	ldr	r3, [pc, #124]	; (8000dc4 <MX_TIM3_Init+0xa4>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d4a:	4b1e      	ldr	r3, [pc, #120]	; (8000dc4 <MX_TIM3_Init+0xa4>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000d50:	4b1c      	ldr	r3, [pc, #112]	; (8000dc4 <MX_TIM3_Init+0xa4>)
 8000d52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d56:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d58:	4b1a      	ldr	r3, [pc, #104]	; (8000dc4 <MX_TIM3_Init+0xa4>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d5e:	4b19      	ldr	r3, [pc, #100]	; (8000dc4 <MX_TIM3_Init+0xa4>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000d64:	2303      	movs	r3, #3
 8000d66:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000d70:	2300      	movs	r3, #0
 8000d72:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000d74:	2300      	movs	r3, #0
 8000d76:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d80:	2300      	movs	r3, #0
 8000d82:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000d84:	2300      	movs	r3, #0
 8000d86:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000d88:	f107 030c 	add.w	r3, r7, #12
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	480d      	ldr	r0, [pc, #52]	; (8000dc4 <MX_TIM3_Init+0xa4>)
 8000d90:	f00c fac4 	bl	800d31c <HAL_TIM_Encoder_Init>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000d9a:	f000 fc7b 	bl	8001694 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000da2:	2300      	movs	r3, #0
 8000da4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000da6:	463b      	mov	r3, r7
 8000da8:	4619      	mov	r1, r3
 8000daa:	4806      	ldr	r0, [pc, #24]	; (8000dc4 <MX_TIM3_Init+0xa4>)
 8000dac:	f00d fb7e 	bl	800e4ac <HAL_TIMEx_MasterConfigSynchronization>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000db6:	f000 fc6d 	bl	8001694 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000dba:	bf00      	nop
 8000dbc:	3730      	adds	r7, #48	; 0x30
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	240002cc 	.word	0x240002cc
 8000dc8:	40000400 	.word	0x40000400

08000dcc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b08c      	sub	sp, #48	; 0x30
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000dd2:	f107 030c 	add.w	r3, r7, #12
 8000dd6:	2224      	movs	r2, #36	; 0x24
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f010 fbf0 	bl	80115c0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000de0:	463b      	mov	r3, r7
 8000de2:	2200      	movs	r2, #0
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	605a      	str	r2, [r3, #4]
 8000de8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000dea:	4b21      	ldr	r3, [pc, #132]	; (8000e70 <MX_TIM4_Init+0xa4>)
 8000dec:	4a21      	ldr	r2, [pc, #132]	; (8000e74 <MX_TIM4_Init+0xa8>)
 8000dee:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000df0:	4b1f      	ldr	r3, [pc, #124]	; (8000e70 <MX_TIM4_Init+0xa4>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000df6:	4b1e      	ldr	r3, [pc, #120]	; (8000e70 <MX_TIM4_Init+0xa4>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000dfc:	4b1c      	ldr	r3, [pc, #112]	; (8000e70 <MX_TIM4_Init+0xa4>)
 8000dfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e02:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e04:	4b1a      	ldr	r3, [pc, #104]	; (8000e70 <MX_TIM4_Init+0xa4>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e0a:	4b19      	ldr	r3, [pc, #100]	; (8000e70 <MX_TIM4_Init+0xa4>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000e10:	2303      	movs	r3, #3
 8000e12:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000e14:	2300      	movs	r3, #0
 8000e16:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000e20:	2300      	movs	r3, #0
 8000e22:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000e24:	2300      	movs	r3, #0
 8000e26:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000e30:	2300      	movs	r3, #0
 8000e32:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000e34:	f107 030c 	add.w	r3, r7, #12
 8000e38:	4619      	mov	r1, r3
 8000e3a:	480d      	ldr	r0, [pc, #52]	; (8000e70 <MX_TIM4_Init+0xa4>)
 8000e3c:	f00c fa6e 	bl	800d31c <HAL_TIM_Encoder_Init>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000e46:	f000 fc25 	bl	8001694 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e52:	463b      	mov	r3, r7
 8000e54:	4619      	mov	r1, r3
 8000e56:	4806      	ldr	r0, [pc, #24]	; (8000e70 <MX_TIM4_Init+0xa4>)
 8000e58:	f00d fb28 	bl	800e4ac <HAL_TIMEx_MasterConfigSynchronization>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000e62:	f000 fc17 	bl	8001694 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000e66:	bf00      	nop
 8000e68:	3730      	adds	r7, #48	; 0x30
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	24000318 	.word	0x24000318
 8000e74:	40000800 	.word	0x40000800

08000e78 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b08c      	sub	sp, #48	; 0x30
 8000e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000e7e:	f107 030c 	add.w	r3, r7, #12
 8000e82:	2224      	movs	r2, #36	; 0x24
 8000e84:	2100      	movs	r1, #0
 8000e86:	4618      	mov	r0, r3
 8000e88:	f010 fb9a 	bl	80115c0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e8c:	463b      	mov	r3, r7
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	605a      	str	r2, [r3, #4]
 8000e94:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000e96:	4b21      	ldr	r3, [pc, #132]	; (8000f1c <MX_TIM5_Init+0xa4>)
 8000e98:	4a21      	ldr	r2, [pc, #132]	; (8000f20 <MX_TIM5_Init+0xa8>)
 8000e9a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000e9c:	4b1f      	ldr	r3, [pc, #124]	; (8000f1c <MX_TIM5_Init+0xa4>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ea2:	4b1e      	ldr	r3, [pc, #120]	; (8000f1c <MX_TIM5_Init+0xa4>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8000ea8:	4b1c      	ldr	r3, [pc, #112]	; (8000f1c <MX_TIM5_Init+0xa4>)
 8000eaa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000eae:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eb0:	4b1a      	ldr	r3, [pc, #104]	; (8000f1c <MX_TIM5_Init+0xa4>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eb6:	4b19      	ldr	r3, [pc, #100]	; (8000f1c <MX_TIM5_Init+0xa4>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000edc:	2300      	movs	r3, #0
 8000ede:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000ee0:	f107 030c 	add.w	r3, r7, #12
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	480d      	ldr	r0, [pc, #52]	; (8000f1c <MX_TIM5_Init+0xa4>)
 8000ee8:	f00c fa18 	bl	800d31c <HAL_TIM_Encoder_Init>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8000ef2:	f000 fbcf 	bl	8001694 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000efa:	2300      	movs	r3, #0
 8000efc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000efe:	463b      	mov	r3, r7
 8000f00:	4619      	mov	r1, r3
 8000f02:	4806      	ldr	r0, [pc, #24]	; (8000f1c <MX_TIM5_Init+0xa4>)
 8000f04:	f00d fad2 	bl	800e4ac <HAL_TIMEx_MasterConfigSynchronization>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8000f0e:	f000 fbc1 	bl	8001694 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000f12:	bf00      	nop
 8000f14:	3730      	adds	r7, #48	; 0x30
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	24000364 	.word	0x24000364
 8000f20:	40000c00 	.word	0x40000c00

08000f24 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f2a:	1d3b      	adds	r3, r7, #4
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000f34:	4b14      	ldr	r3, [pc, #80]	; (8000f88 <MX_TIM7_Init+0x64>)
 8000f36:	4a15      	ldr	r2, [pc, #84]	; (8000f8c <MX_TIM7_Init+0x68>)
 8000f38:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 63;
 8000f3a:	4b13      	ldr	r3, [pc, #76]	; (8000f88 <MX_TIM7_Init+0x64>)
 8000f3c:	223f      	movs	r2, #63	; 0x3f
 8000f3e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f40:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <MX_TIM7_Init+0x64>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8000f46:	4b10      	ldr	r3, [pc, #64]	; (8000f88 <MX_TIM7_Init+0x64>)
 8000f48:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f4c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f4e:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <MX_TIM7_Init+0x64>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000f54:	480c      	ldr	r0, [pc, #48]	; (8000f88 <MX_TIM7_Init+0x64>)
 8000f56:	f00b fe27 	bl	800cba8 <HAL_TIM_Base_Init>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000f60:	f000 fb98 	bl	8001694 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f64:	2300      	movs	r3, #0
 8000f66:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000f6c:	1d3b      	adds	r3, r7, #4
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4805      	ldr	r0, [pc, #20]	; (8000f88 <MX_TIM7_Init+0x64>)
 8000f72:	f00d fa9b 	bl	800e4ac <HAL_TIMEx_MasterConfigSynchronization>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000f7c:	f000 fb8a 	bl	8001694 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000f80:	bf00      	nop
 8000f82:	3710      	adds	r7, #16
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	240003b0 	.word	0x240003b0
 8000f8c:	40001400 	.word	0x40001400

08000f90 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b088      	sub	sp, #32
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f96:	f107 0310 	add.w	r3, r7, #16
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	605a      	str	r2, [r3, #4]
 8000fa0:	609a      	str	r2, [r3, #8]
 8000fa2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fa4:	1d3b      	adds	r3, r7, #4
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	605a      	str	r2, [r3, #4]
 8000fac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000fae:	4b20      	ldr	r3, [pc, #128]	; (8001030 <MX_TIM8_Init+0xa0>)
 8000fb0:	4a20      	ldr	r2, [pc, #128]	; (8001034 <MX_TIM8_Init+0xa4>)
 8000fb2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 31;
 8000fb4:	4b1e      	ldr	r3, [pc, #120]	; (8001030 <MX_TIM8_Init+0xa0>)
 8000fb6:	221f      	movs	r2, #31
 8000fb8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fba:	4b1d      	ldr	r3, [pc, #116]	; (8001030 <MX_TIM8_Init+0xa0>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 999;
 8000fc0:	4b1b      	ldr	r3, [pc, #108]	; (8001030 <MX_TIM8_Init+0xa0>)
 8000fc2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000fc6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fc8:	4b19      	ldr	r3, [pc, #100]	; (8001030 <MX_TIM8_Init+0xa0>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000fce:	4b18      	ldr	r3, [pc, #96]	; (8001030 <MX_TIM8_Init+0xa0>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fd4:	4b16      	ldr	r3, [pc, #88]	; (8001030 <MX_TIM8_Init+0xa0>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000fda:	4815      	ldr	r0, [pc, #84]	; (8001030 <MX_TIM8_Init+0xa0>)
 8000fdc:	f00b fde4 	bl	800cba8 <HAL_TIM_Base_Init>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8000fe6:	f000 fb55 	bl	8001694 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000ff0:	f107 0310 	add.w	r3, r7, #16
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	480e      	ldr	r0, [pc, #56]	; (8001030 <MX_TIM8_Init+0xa0>)
 8000ff8:	f00c fcf8 	bl	800d9ec <HAL_TIM_ConfigClockSource>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8001002:	f000 fb47 	bl	8001694 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001006:	2300      	movs	r3, #0
 8001008:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800100a:	2300      	movs	r3, #0
 800100c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800100e:	2300      	movs	r3, #0
 8001010:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001012:	1d3b      	adds	r3, r7, #4
 8001014:	4619      	mov	r1, r3
 8001016:	4806      	ldr	r0, [pc, #24]	; (8001030 <MX_TIM8_Init+0xa0>)
 8001018:	f00d fa48 	bl	800e4ac <HAL_TIMEx_MasterConfigSynchronization>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001022:	f000 fb37 	bl	8001694 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001026:	bf00      	nop
 8001028:	3720      	adds	r7, #32
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	240003fc 	.word	0x240003fc
 8001034:	40010400 	.word	0x40010400

08001038 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b088      	sub	sp, #32
 800103c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800103e:	1d3b      	adds	r3, r7, #4
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
 800104a:	611a      	str	r2, [r3, #16]
 800104c:	615a      	str	r2, [r3, #20]
 800104e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001050:	4b1f      	ldr	r3, [pc, #124]	; (80010d0 <MX_TIM12_Init+0x98>)
 8001052:	4a20      	ldr	r2, [pc, #128]	; (80010d4 <MX_TIM12_Init+0x9c>)
 8001054:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 3;
 8001056:	4b1e      	ldr	r3, [pc, #120]	; (80010d0 <MX_TIM12_Init+0x98>)
 8001058:	2203      	movs	r2, #3
 800105a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800105c:	4b1c      	ldr	r3, [pc, #112]	; (80010d0 <MX_TIM12_Init+0x98>)
 800105e:	2200      	movs	r2, #0
 8001060:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 999;
 8001062:	4b1b      	ldr	r3, [pc, #108]	; (80010d0 <MX_TIM12_Init+0x98>)
 8001064:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001068:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800106a:	4b19      	ldr	r3, [pc, #100]	; (80010d0 <MX_TIM12_Init+0x98>)
 800106c:	2200      	movs	r2, #0
 800106e:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001070:	4b17      	ldr	r3, [pc, #92]	; (80010d0 <MX_TIM12_Init+0x98>)
 8001072:	2200      	movs	r2, #0
 8001074:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001076:	4816      	ldr	r0, [pc, #88]	; (80010d0 <MX_TIM12_Init+0x98>)
 8001078:	f00b fe74 	bl	800cd64 <HAL_TIM_PWM_Init>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8001082:	f000 fb07 	bl	8001694 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001086:	2360      	movs	r3, #96	; 0x60
 8001088:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800108a:	2300      	movs	r3, #0
 800108c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800108e:	2300      	movs	r3, #0
 8001090:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001092:	2300      	movs	r3, #0
 8001094:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001096:	1d3b      	adds	r3, r7, #4
 8001098:	2200      	movs	r2, #0
 800109a:	4619      	mov	r1, r3
 800109c:	480c      	ldr	r0, [pc, #48]	; (80010d0 <MX_TIM12_Init+0x98>)
 800109e:	f00c fb91 	bl	800d7c4 <HAL_TIM_PWM_ConfigChannel>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 80010a8:	f000 faf4 	bl	8001694 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010ac:	1d3b      	adds	r3, r7, #4
 80010ae:	2204      	movs	r2, #4
 80010b0:	4619      	mov	r1, r3
 80010b2:	4807      	ldr	r0, [pc, #28]	; (80010d0 <MX_TIM12_Init+0x98>)
 80010b4:	f00c fb86 	bl	800d7c4 <HAL_TIM_PWM_ConfigChannel>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 80010be:	f000 fae9 	bl	8001694 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80010c2:	4803      	ldr	r0, [pc, #12]	; (80010d0 <MX_TIM12_Init+0x98>)
 80010c4:	f005 f8d8 	bl	8006278 <HAL_TIM_MspPostInit>

}
 80010c8:	bf00      	nop
 80010ca:	3720      	adds	r7, #32
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	24000448 	.word	0x24000448
 80010d4:	40001800 	.word	0x40001800

080010d8 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80010dc:	4b0e      	ldr	r3, [pc, #56]	; (8001118 <MX_TIM13_Init+0x40>)
 80010de:	4a0f      	ldr	r2, [pc, #60]	; (800111c <MX_TIM13_Init+0x44>)
 80010e0:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 83;
 80010e2:	4b0d      	ldr	r3, [pc, #52]	; (8001118 <MX_TIM13_Init+0x40>)
 80010e4:	2253      	movs	r2, #83	; 0x53
 80010e6:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010e8:	4b0b      	ldr	r3, [pc, #44]	; (8001118 <MX_TIM13_Init+0x40>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 999;
 80010ee:	4b0a      	ldr	r3, [pc, #40]	; (8001118 <MX_TIM13_Init+0x40>)
 80010f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010f4:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010f6:	4b08      	ldr	r3, [pc, #32]	; (8001118 <MX_TIM13_Init+0x40>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010fc:	4b06      	ldr	r3, [pc, #24]	; (8001118 <MX_TIM13_Init+0x40>)
 80010fe:	2200      	movs	r2, #0
 8001100:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001102:	4805      	ldr	r0, [pc, #20]	; (8001118 <MX_TIM13_Init+0x40>)
 8001104:	f00b fd50 	bl	800cba8 <HAL_TIM_Base_Init>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 800110e:	f000 fac1 	bl	8001694 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	24000494 	.word	0x24000494
 800111c:	40001c00 	.word	0x40001c00

08001120 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001124:	4b0d      	ldr	r3, [pc, #52]	; (800115c <MX_TIM14_Init+0x3c>)
 8001126:	4a0e      	ldr	r2, [pc, #56]	; (8001160 <MX_TIM14_Init+0x40>)
 8001128:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 31;
 800112a:	4b0c      	ldr	r3, [pc, #48]	; (800115c <MX_TIM14_Init+0x3c>)
 800112c:	221f      	movs	r2, #31
 800112e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001130:	4b0a      	ldr	r3, [pc, #40]	; (800115c <MX_TIM14_Init+0x3c>)
 8001132:	2200      	movs	r2, #0
 8001134:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 99;
 8001136:	4b09      	ldr	r3, [pc, #36]	; (800115c <MX_TIM14_Init+0x3c>)
 8001138:	2263      	movs	r2, #99	; 0x63
 800113a:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800113c:	4b07      	ldr	r3, [pc, #28]	; (800115c <MX_TIM14_Init+0x3c>)
 800113e:	2200      	movs	r2, #0
 8001140:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001142:	4b06      	ldr	r3, [pc, #24]	; (800115c <MX_TIM14_Init+0x3c>)
 8001144:	2200      	movs	r2, #0
 8001146:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001148:	4804      	ldr	r0, [pc, #16]	; (800115c <MX_TIM14_Init+0x3c>)
 800114a:	f00b fd2d 	bl	800cba8 <HAL_TIM_Base_Init>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8001154:	f000 fa9e 	bl	8001694 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001158:	bf00      	nop
 800115a:	bd80      	pop	{r7, pc}
 800115c:	240004e0 	.word	0x240004e0
 8001160:	40002000 	.word	0x40002000

08001164 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b098      	sub	sp, #96	; 0x60
 8001168:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800116a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001176:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	605a      	str	r2, [r3, #4]
 8001180:	609a      	str	r2, [r3, #8]
 8001182:	60da      	str	r2, [r3, #12]
 8001184:	611a      	str	r2, [r3, #16]
 8001186:	615a      	str	r2, [r3, #20]
 8001188:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800118a:	1d3b      	adds	r3, r7, #4
 800118c:	2234      	movs	r2, #52	; 0x34
 800118e:	2100      	movs	r1, #0
 8001190:	4618      	mov	r0, r3
 8001192:	f010 fa15 	bl	80115c0 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001196:	4b3a      	ldr	r3, [pc, #232]	; (8001280 <MX_TIM15_Init+0x11c>)
 8001198:	4a3a      	ldr	r2, [pc, #232]	; (8001284 <MX_TIM15_Init+0x120>)
 800119a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 3;
 800119c:	4b38      	ldr	r3, [pc, #224]	; (8001280 <MX_TIM15_Init+0x11c>)
 800119e:	2203      	movs	r2, #3
 80011a0:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011a2:	4b37      	ldr	r3, [pc, #220]	; (8001280 <MX_TIM15_Init+0x11c>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 80011a8:	4b35      	ldr	r3, [pc, #212]	; (8001280 <MX_TIM15_Init+0x11c>)
 80011aa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011ae:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011b0:	4b33      	ldr	r3, [pc, #204]	; (8001280 <MX_TIM15_Init+0x11c>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80011b6:	4b32      	ldr	r3, [pc, #200]	; (8001280 <MX_TIM15_Init+0x11c>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011bc:	4b30      	ldr	r3, [pc, #192]	; (8001280 <MX_TIM15_Init+0x11c>)
 80011be:	2200      	movs	r2, #0
 80011c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80011c2:	482f      	ldr	r0, [pc, #188]	; (8001280 <MX_TIM15_Init+0x11c>)
 80011c4:	f00b fdce 	bl	800cd64 <HAL_TIM_PWM_Init>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 80011ce:	f000 fa61 	bl	8001694 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011d2:	2300      	movs	r3, #0
 80011d4:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011d6:	2300      	movs	r3, #0
 80011d8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80011da:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011de:	4619      	mov	r1, r3
 80011e0:	4827      	ldr	r0, [pc, #156]	; (8001280 <MX_TIM15_Init+0x11c>)
 80011e2:	f00d f963 	bl	800e4ac <HAL_TIMEx_MasterConfigSynchronization>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 80011ec:	f000 fa52 	bl	8001694 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011f0:	2360      	movs	r3, #96	; 0x60
 80011f2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011f8:	2300      	movs	r3, #0
 80011fa:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011fc:	2300      	movs	r3, #0
 80011fe:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001200:	2300      	movs	r3, #0
 8001202:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001204:	2300      	movs	r3, #0
 8001206:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001208:	2300      	movs	r3, #0
 800120a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800120c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001210:	2200      	movs	r2, #0
 8001212:	4619      	mov	r1, r3
 8001214:	481a      	ldr	r0, [pc, #104]	; (8001280 <MX_TIM15_Init+0x11c>)
 8001216:	f00c fad5 	bl	800d7c4 <HAL_TIM_PWM_ConfigChannel>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8001220:	f000 fa38 	bl	8001694 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001224:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001228:	2204      	movs	r2, #4
 800122a:	4619      	mov	r1, r3
 800122c:	4814      	ldr	r0, [pc, #80]	; (8001280 <MX_TIM15_Init+0x11c>)
 800122e:	f00c fac9 	bl	800d7c4 <HAL_TIM_PWM_ConfigChannel>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 8001238:	f000 fa2c 	bl	8001694 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800123c:	2300      	movs	r3, #0
 800123e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001240:	2300      	movs	r3, #0
 8001242:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001244:	2300      	movs	r3, #0
 8001246:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001248:	2300      	movs	r3, #0
 800124a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800124c:	2300      	movs	r3, #0
 800124e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001250:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001254:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800125a:	2300      	movs	r3, #0
 800125c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800125e:	1d3b      	adds	r3, r7, #4
 8001260:	4619      	mov	r1, r3
 8001262:	4807      	ldr	r0, [pc, #28]	; (8001280 <MX_TIM15_Init+0x11c>)
 8001264:	f00d f9be 	bl	800e5e4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 800126e:	f000 fa11 	bl	8001694 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001272:	4803      	ldr	r0, [pc, #12]	; (8001280 <MX_TIM15_Init+0x11c>)
 8001274:	f005 f800 	bl	8006278 <HAL_TIM_MspPostInit>

}
 8001278:	bf00      	nop
 800127a:	3760      	adds	r7, #96	; 0x60
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	2400052c 	.word	0x2400052c
 8001284:	40014000 	.word	0x40014000

08001288 <MX_TIM23_Init>:
  * @brief TIM23 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM23_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b08a      	sub	sp, #40	; 0x28
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800128e:	f107 031c 	add.w	r3, r7, #28
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	605a      	str	r2, [r3, #4]
 8001298:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800129a:	463b      	mov	r3, r7
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	60da      	str	r2, [r3, #12]
 80012a6:	611a      	str	r2, [r3, #16]
 80012a8:	615a      	str	r2, [r3, #20]
 80012aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 80012ac:	4b21      	ldr	r3, [pc, #132]	; (8001334 <MX_TIM23_Init+0xac>)
 80012ae:	4a22      	ldr	r2, [pc, #136]	; (8001338 <MX_TIM23_Init+0xb0>)
 80012b0:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 63;
 80012b2:	4b20      	ldr	r3, [pc, #128]	; (8001334 <MX_TIM23_Init+0xac>)
 80012b4:	223f      	movs	r2, #63	; 0x3f
 80012b6:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b8:	4b1e      	ldr	r3, [pc, #120]	; (8001334 <MX_TIM23_Init+0xac>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 19999;
 80012be:	4b1d      	ldr	r3, [pc, #116]	; (8001334 <MX_TIM23_Init+0xac>)
 80012c0:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80012c4:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012c6:	4b1b      	ldr	r3, [pc, #108]	; (8001334 <MX_TIM23_Init+0xac>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012cc:	4b19      	ldr	r3, [pc, #100]	; (8001334 <MX_TIM23_Init+0xac>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim23) != HAL_OK)
 80012d2:	4818      	ldr	r0, [pc, #96]	; (8001334 <MX_TIM23_Init+0xac>)
 80012d4:	f00b fd46 	bl	800cd64 <HAL_TIM_PWM_Init>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_TIM23_Init+0x5a>
  {
    Error_Handler();
 80012de:	f000 f9d9 	bl	8001694 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012e2:	2300      	movs	r3, #0
 80012e4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012e6:	2300      	movs	r3, #0
 80012e8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 80012ea:	f107 031c 	add.w	r3, r7, #28
 80012ee:	4619      	mov	r1, r3
 80012f0:	4810      	ldr	r0, [pc, #64]	; (8001334 <MX_TIM23_Init+0xac>)
 80012f2:	f00d f8db 	bl	800e4ac <HAL_TIMEx_MasterConfigSynchronization>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_TIM23_Init+0x78>
  {
    Error_Handler();
 80012fc:	f000 f9ca 	bl	8001694 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001300:	2360      	movs	r3, #96	; 0x60
 8001302:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001304:	2300      	movs	r3, #0
 8001306:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001308:	2300      	movs	r3, #0
 800130a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800130c:	2300      	movs	r3, #0
 800130e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim23, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001310:	463b      	mov	r3, r7
 8001312:	2200      	movs	r2, #0
 8001314:	4619      	mov	r1, r3
 8001316:	4807      	ldr	r0, [pc, #28]	; (8001334 <MX_TIM23_Init+0xac>)
 8001318:	f00c fa54 	bl	800d7c4 <HAL_TIM_PWM_ConfigChannel>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_TIM23_Init+0x9e>
  {
    Error_Handler();
 8001322:	f000 f9b7 	bl	8001694 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */
  HAL_TIM_MspPostInit(&htim23);
 8001326:	4803      	ldr	r0, [pc, #12]	; (8001334 <MX_TIM23_Init+0xac>)
 8001328:	f004 ffa6 	bl	8006278 <HAL_TIM_MspPostInit>

}
 800132c:	bf00      	nop
 800132e:	3728      	adds	r7, #40	; 0x28
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	24000578 	.word	0x24000578
 8001338:	4000e000 	.word	0x4000e000

0800133c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001340:	4b22      	ldr	r3, [pc, #136]	; (80013cc <MX_USART1_UART_Init+0x90>)
 8001342:	4a23      	ldr	r2, [pc, #140]	; (80013d0 <MX_USART1_UART_Init+0x94>)
 8001344:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001346:	4b21      	ldr	r3, [pc, #132]	; (80013cc <MX_USART1_UART_Init+0x90>)
 8001348:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800134c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800134e:	4b1f      	ldr	r3, [pc, #124]	; (80013cc <MX_USART1_UART_Init+0x90>)
 8001350:	2200      	movs	r2, #0
 8001352:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001354:	4b1d      	ldr	r3, [pc, #116]	; (80013cc <MX_USART1_UART_Init+0x90>)
 8001356:	2200      	movs	r2, #0
 8001358:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800135a:	4b1c      	ldr	r3, [pc, #112]	; (80013cc <MX_USART1_UART_Init+0x90>)
 800135c:	2200      	movs	r2, #0
 800135e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001360:	4b1a      	ldr	r3, [pc, #104]	; (80013cc <MX_USART1_UART_Init+0x90>)
 8001362:	220c      	movs	r2, #12
 8001364:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001366:	4b19      	ldr	r3, [pc, #100]	; (80013cc <MX_USART1_UART_Init+0x90>)
 8001368:	2200      	movs	r2, #0
 800136a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800136c:	4b17      	ldr	r3, [pc, #92]	; (80013cc <MX_USART1_UART_Init+0x90>)
 800136e:	2200      	movs	r2, #0
 8001370:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001372:	4b16      	ldr	r3, [pc, #88]	; (80013cc <MX_USART1_UART_Init+0x90>)
 8001374:	2200      	movs	r2, #0
 8001376:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001378:	4b14      	ldr	r3, [pc, #80]	; (80013cc <MX_USART1_UART_Init+0x90>)
 800137a:	2200      	movs	r2, #0
 800137c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800137e:	4b13      	ldr	r3, [pc, #76]	; (80013cc <MX_USART1_UART_Init+0x90>)
 8001380:	2200      	movs	r2, #0
 8001382:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001384:	4811      	ldr	r0, [pc, #68]	; (80013cc <MX_USART1_UART_Init+0x90>)
 8001386:	f00d f9eb 	bl	800e760 <HAL_UART_Init>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001390:	f000 f980 	bl	8001694 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001394:	2100      	movs	r1, #0
 8001396:	480d      	ldr	r0, [pc, #52]	; (80013cc <MX_USART1_UART_Init+0x90>)
 8001398:	f00f fa6e 	bl	8010878 <HAL_UARTEx_SetTxFifoThreshold>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80013a2:	f000 f977 	bl	8001694 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013a6:	2100      	movs	r1, #0
 80013a8:	4808      	ldr	r0, [pc, #32]	; (80013cc <MX_USART1_UART_Init+0x90>)
 80013aa:	f00f faa3 	bl	80108f4 <HAL_UARTEx_SetRxFifoThreshold>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80013b4:	f000 f96e 	bl	8001694 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80013b8:	4804      	ldr	r0, [pc, #16]	; (80013cc <MX_USART1_UART_Init+0x90>)
 80013ba:	f00f fa24 	bl	8010806 <HAL_UARTEx_DisableFifoMode>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80013c4:	f000 f966 	bl	8001694 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013c8:	bf00      	nop
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	240005c4 	.word	0x240005c4
 80013d0:	40011000 	.word	0x40011000

080013d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013da:	4b11      	ldr	r3, [pc, #68]	; (8001420 <MX_DMA_Init+0x4c>)
 80013dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013e0:	4a0f      	ldr	r2, [pc, #60]	; (8001420 <MX_DMA_Init+0x4c>)
 80013e2:	f043 0301 	orr.w	r3, r3, #1
 80013e6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80013ea:	4b0d      	ldr	r3, [pc, #52]	; (8001420 <MX_DMA_Init+0x4c>)
 80013ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013f0:	f003 0301 	and.w	r3, r3, #1
 80013f4:	607b      	str	r3, [r7, #4]
 80013f6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80013f8:	2200      	movs	r2, #0
 80013fa:	2100      	movs	r1, #0
 80013fc:	200b      	movs	r0, #11
 80013fe:	f005 fe34 	bl	800706a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001402:	200b      	movs	r0, #11
 8001404:	f005 fe4b 	bl	800709e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001408:	2200      	movs	r2, #0
 800140a:	2100      	movs	r1, #0
 800140c:	200c      	movs	r0, #12
 800140e:	f005 fe2c 	bl	800706a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001412:	200c      	movs	r0, #12
 8001414:	f005 fe43 	bl	800709e <HAL_NVIC_EnableIRQ>

}
 8001418:	bf00      	nop
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	58024400 	.word	0x58024400

08001424 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b08e      	sub	sp, #56	; 0x38
 8001428:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	605a      	str	r2, [r3, #4]
 8001434:	609a      	str	r2, [r3, #8]
 8001436:	60da      	str	r2, [r3, #12]
 8001438:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800143a:	4b8e      	ldr	r3, [pc, #568]	; (8001674 <MX_GPIO_Init+0x250>)
 800143c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001440:	4a8c      	ldr	r2, [pc, #560]	; (8001674 <MX_GPIO_Init+0x250>)
 8001442:	f043 0310 	orr.w	r3, r3, #16
 8001446:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800144a:	4b8a      	ldr	r3, [pc, #552]	; (8001674 <MX_GPIO_Init+0x250>)
 800144c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001450:	f003 0310 	and.w	r3, r3, #16
 8001454:	623b      	str	r3, [r7, #32]
 8001456:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001458:	4b86      	ldr	r3, [pc, #536]	; (8001674 <MX_GPIO_Init+0x250>)
 800145a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800145e:	4a85      	ldr	r2, [pc, #532]	; (8001674 <MX_GPIO_Init+0x250>)
 8001460:	f043 0304 	orr.w	r3, r3, #4
 8001464:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001468:	4b82      	ldr	r3, [pc, #520]	; (8001674 <MX_GPIO_Init+0x250>)
 800146a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800146e:	f003 0304 	and.w	r3, r3, #4
 8001472:	61fb      	str	r3, [r7, #28]
 8001474:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001476:	4b7f      	ldr	r3, [pc, #508]	; (8001674 <MX_GPIO_Init+0x250>)
 8001478:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800147c:	4a7d      	ldr	r2, [pc, #500]	; (8001674 <MX_GPIO_Init+0x250>)
 800147e:	f043 0320 	orr.w	r3, r3, #32
 8001482:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001486:	4b7b      	ldr	r3, [pc, #492]	; (8001674 <MX_GPIO_Init+0x250>)
 8001488:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800148c:	f003 0320 	and.w	r3, r3, #32
 8001490:	61bb      	str	r3, [r7, #24]
 8001492:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001494:	4b77      	ldr	r3, [pc, #476]	; (8001674 <MX_GPIO_Init+0x250>)
 8001496:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800149a:	4a76      	ldr	r2, [pc, #472]	; (8001674 <MX_GPIO_Init+0x250>)
 800149c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014a4:	4b73      	ldr	r3, [pc, #460]	; (8001674 <MX_GPIO_Init+0x250>)
 80014a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ae:	617b      	str	r3, [r7, #20]
 80014b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b2:	4b70      	ldr	r3, [pc, #448]	; (8001674 <MX_GPIO_Init+0x250>)
 80014b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014b8:	4a6e      	ldr	r2, [pc, #440]	; (8001674 <MX_GPIO_Init+0x250>)
 80014ba:	f043 0301 	orr.w	r3, r3, #1
 80014be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014c2:	4b6c      	ldr	r3, [pc, #432]	; (8001674 <MX_GPIO_Init+0x250>)
 80014c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014c8:	f003 0301 	and.w	r3, r3, #1
 80014cc:	613b      	str	r3, [r7, #16]
 80014ce:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d0:	4b68      	ldr	r3, [pc, #416]	; (8001674 <MX_GPIO_Init+0x250>)
 80014d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014d6:	4a67      	ldr	r2, [pc, #412]	; (8001674 <MX_GPIO_Init+0x250>)
 80014d8:	f043 0302 	orr.w	r3, r3, #2
 80014dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014e0:	4b64      	ldr	r3, [pc, #400]	; (8001674 <MX_GPIO_Init+0x250>)
 80014e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ee:	4b61      	ldr	r3, [pc, #388]	; (8001674 <MX_GPIO_Init+0x250>)
 80014f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014f4:	4a5f      	ldr	r2, [pc, #380]	; (8001674 <MX_GPIO_Init+0x250>)
 80014f6:	f043 0308 	orr.w	r3, r3, #8
 80014fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014fe:	4b5d      	ldr	r3, [pc, #372]	; (8001674 <MX_GPIO_Init+0x250>)
 8001500:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001504:	f003 0308 	and.w	r3, r3, #8
 8001508:	60bb      	str	r3, [r7, #8]
 800150a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800150c:	4b59      	ldr	r3, [pc, #356]	; (8001674 <MX_GPIO_Init+0x250>)
 800150e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001512:	4a58      	ldr	r2, [pc, #352]	; (8001674 <MX_GPIO_Init+0x250>)
 8001514:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001518:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800151c:	4b55      	ldr	r3, [pc, #340]	; (8001674 <MX_GPIO_Init+0x250>)
 800151e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001526:	607b      	str	r3, [r7, #4]
 8001528:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8, GPIO_PIN_RESET);
 800152a:	2200      	movs	r2, #0
 800152c:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8001530:	4851      	ldr	r0, [pc, #324]	; (8001678 <MX_GPIO_Init+0x254>)
 8001532:	f009 f88f 	bl	800a654 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001536:	2200      	movs	r2, #0
 8001538:	f242 0130 	movw	r1, #8240	; 0x2030
 800153c:	484f      	ldr	r0, [pc, #316]	; (800167c <MX_GPIO_Init+0x258>)
 800153e:	f009 f889 	bl	800a654 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_15, GPIO_PIN_RESET);
 8001542:	2200      	movs	r2, #0
 8001544:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
 8001548:	484d      	ldr	r0, [pc, #308]	; (8001680 <MX_GPIO_Init+0x25c>)
 800154a:	f009 f883 	bl	800a654 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800154e:	2200      	movs	r2, #0
 8001550:	21f0      	movs	r1, #240	; 0xf0
 8001552:	484c      	ldr	r0, [pc, #304]	; (8001684 <MX_GPIO_Init+0x260>)
 8001554:	f009 f87e 	bl	800a654 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_6
 8001558:	2200      	movs	r2, #0
 800155a:	f44f 515f 	mov.w	r1, #14272	; 0x37c0
 800155e:	484a      	ldr	r0, [pc, #296]	; (8001688 <MX_GPIO_Init+0x264>)
 8001560:	f009 f878 	bl	800a654 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_14, GPIO_PIN_RESET);
 8001564:	2200      	movs	r2, #0
 8001566:	f44f 4182 	mov.w	r1, #16640	; 0x4100
 800156a:	4848      	ldr	r0, [pc, #288]	; (800168c <MX_GPIO_Init+0x268>)
 800156c:	f009 f872 	bl	800a654 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE8 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8;
 8001570:	f44f 738e 	mov.w	r3, #284	; 0x11c
 8001574:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001576:	2301      	movs	r3, #1
 8001578:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157a:	2300      	movs	r3, #0
 800157c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157e:	2300      	movs	r3, #0
 8001580:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001582:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001586:	4619      	mov	r1, r3
 8001588:	483b      	ldr	r0, [pc, #236]	; (8001678 <MX_GPIO_Init+0x254>)
 800158a:	f008 fda1 	bl	800a0d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_5;
 800158e:	f242 0330 	movw	r3, #8240	; 0x2030
 8001592:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001594:	2301      	movs	r3, #1
 8001596:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159c:	2300      	movs	r3, #0
 800159e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015a4:	4619      	mov	r1, r3
 80015a6:	4835      	ldr	r0, [pc, #212]	; (800167c <MX_GPIO_Init+0x258>)
 80015a8:	f008 fd92 	bl	800a0d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80015ac:	2308      	movs	r3, #8
 80015ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015b0:	2300      	movs	r3, #0
 80015b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015bc:	4619      	mov	r1, r3
 80015be:	4830      	ldr	r0, [pc, #192]	; (8001680 <MX_GPIO_Init+0x25c>)
 80015c0:	f008 fd86 	bl	800a0d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF8 PF9 PF11 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_15;
 80015c4:	f44f 430b 	mov.w	r3, #35584	; 0x8b00
 80015c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ca:	2301      	movs	r3, #1
 80015cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d2:	2300      	movs	r3, #0
 80015d4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015da:	4619      	mov	r1, r3
 80015dc:	4828      	ldr	r0, [pc, #160]	; (8001680 <MX_GPIO_Init+0x25c>)
 80015de:	f008 fd77 	bl	800a0d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80015e2:	2303      	movs	r3, #3
 80015e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015e6:	2300      	movs	r3, #0
 80015e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015f2:	4619      	mov	r1, r3
 80015f4:	4821      	ldr	r0, [pc, #132]	; (800167c <MX_GPIO_Init+0x258>)
 80015f6:	f008 fd6b 	bl	800a0d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80015fa:	23f0      	movs	r3, #240	; 0xf0
 80015fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015fe:	2301      	movs	r3, #1
 8001600:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001602:	2300      	movs	r3, #0
 8001604:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001606:	2300      	movs	r3, #0
 8001608:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800160e:	4619      	mov	r1, r3
 8001610:	481c      	ldr	r0, [pc, #112]	; (8001684 <MX_GPIO_Init+0x260>)
 8001612:	f008 fd5d 	bl	800a0d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB12 PB13 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_6
 8001616:	f44f 535f 	mov.w	r3, #14272	; 0x37c0
 800161a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800161c:	2301      	movs	r3, #1
 800161e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001624:	2300      	movs	r3, #0
 8001626:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001628:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800162c:	4619      	mov	r1, r3
 800162e:	4816      	ldr	r0, [pc, #88]	; (8001688 <MX_GPIO_Init+0x264>)
 8001630:	f008 fd4e 	bl	800a0d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_14;
 8001634:	f44f 4382 	mov.w	r3, #16640	; 0x4100
 8001638:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800163a:	2301      	movs	r3, #1
 800163c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163e:	2300      	movs	r3, #0
 8001640:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001642:	2300      	movs	r3, #0
 8001644:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001646:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800164a:	4619      	mov	r1, r3
 800164c:	480f      	ldr	r0, [pc, #60]	; (800168c <MX_GPIO_Init+0x268>)
 800164e:	f008 fd3f 	bl	800a0d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG3 PG4 PG5 PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001652:	2378      	movs	r3, #120	; 0x78
 8001654:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001656:	2300      	movs	r3, #0
 8001658:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165a:	2300      	movs	r3, #0
 800165c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800165e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001662:	4619      	mov	r1, r3
 8001664:	480a      	ldr	r0, [pc, #40]	; (8001690 <MX_GPIO_Init+0x26c>)
 8001666:	f008 fd33 	bl	800a0d0 <HAL_GPIO_Init>

}
 800166a:	bf00      	nop
 800166c:	3738      	adds	r7, #56	; 0x38
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	58024400 	.word	0x58024400
 8001678:	58021000 	.word	0x58021000
 800167c:	58020800 	.word	0x58020800
 8001680:	58021400 	.word	0x58021400
 8001684:	58020000 	.word	0x58020000
 8001688:	58020400 	.word	0x58020400
 800168c:	58020c00 	.word	0x58020c00
 8001690:	58021800 	.word	0x58021800

08001694 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001698:	b672      	cpsid	i
}
 800169a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800169c:	e7fe      	b.n	800169c <Error_Handler+0x8>
	...

080016a0 <main_function>:
#include "debug.h"
#include "ros_main.h"
#include "stm_main.h"


void main_function(){
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
	ROS::setup();
 80016a4:	f002 fba8 	bl	8003df8 <_ZN3ROS5setupEv>
	STM::setup();
 80016a8:	f005 f80e 	bl	80066c8 <_ZN3STM5setupEv>

	while(1){
		if(debug_mode) debug_loop();
 80016ac:	4b04      	ldr	r3, [pc, #16]	; (80016c0 <main_function+0x20>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d002      	beq.n	80016ba <main_function+0x1a>
 80016b4:	f7ff f960 	bl	8000978 <_Z10debug_loopv>
 80016b8:	e7f8      	b.n	80016ac <main_function+0xc>
		else ROS::loop();
 80016ba:	f002 fbcb 	bl	8003e54 <_ZN3ROS4loopEv>
		if(debug_mode) debug_loop();
 80016be:	e7f5      	b.n	80016ac <main_function+0xc>
 80016c0:	24000260 	.word	0x24000260

080016c4 <_ZN8CAR_INFOC1Ev>:

typedef struct{
	double Vx=0;
	double Vy=0;
	double Omega=0;
} CAR_INFO;
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	6879      	ldr	r1, [r7, #4]
 80016ce:	f04f 0200 	mov.w	r2, #0
 80016d2:	f04f 0300 	mov.w	r3, #0
 80016d6:	e9c1 2300 	strd	r2, r3, [r1]
 80016da:	6879      	ldr	r1, [r7, #4]
 80016dc:	f04f 0200 	mov.w	r2, #0
 80016e0:	f04f 0300 	mov.w	r3, #0
 80016e4:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80016e8:	6879      	ldr	r1, [r7, #4]
 80016ea:	f04f 0200 	mov.w	r2, #0
 80016ee:	f04f 0300 	mov.w	r3, #0
 80016f2:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4618      	mov	r0, r3
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	0000      	movs	r0, r0
	...

08001708 <_ZN7MecanumC1Ev>:
#include "mecanum.h"
#include "dc_motor.h"

Mecanum mecanum;

Mecanum::Mecanum(void){
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff ffd6 	bl	80016c4 <_ZN8CAR_INFOC1Ev>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	3318      	adds	r3, #24
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff ffd1 	bl	80016c4 <_ZN8CAR_INFOC1Ev>
 8001722:	6879      	ldr	r1, [r7, #4]
 8001724:	f04f 0200 	mov.w	r2, #0
 8001728:	4b0f      	ldr	r3, [pc, #60]	; (8001768 <_ZN7MecanumC1Ev+0x60>)
 800172a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 800172e:	6879      	ldr	r1, [r7, #4]
 8001730:	a309      	add	r3, pc, #36	; (adr r3, 8001758 <_ZN7MecanumC1Ev+0x50>)
 8001732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001736:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 800173a:	6879      	ldr	r1, [r7, #4]
 800173c:	a308      	add	r3, pc, #32	; (adr r3, 8001760 <_ZN7MecanumC1Ev+0x58>)
 800173e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001742:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	DC_motor_init();
 8001746:	f7fe ff99 	bl	800067c <_Z13DC_motor_initv>
}
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4618      	mov	r0, r3
 800174e:	3708      	adds	r7, #8
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	f3af 8000 	nop.w
 8001758:	cccccccd 	.word	0xcccccccd
 800175c:	4020cccc 	.word	0x4020cccc
 8001760:	39581062 	.word	0x39581062
 8001764:	400d48b4 	.word	0x400d48b4
 8001768:	40270000 	.word	0x40270000

0800176c <_ZN7Mecanum3runEv>:

// calculate wheel (-> PID) -> calculate car -> pub
void Mecanum::run(void){
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
	tf2_wheel_speed();
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f000 f807 	bl	8001788 <_ZN7Mecanum15tf2_wheel_speedEv>
	tf2_car_speed();
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f000 f89a 	bl	80018b4 <_ZN7Mecanum13tf2_car_speedEv>
}
 8001780:	bf00      	nop
 8001782:	3708      	adds	r7, #8
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}

08001788 <_ZN7Mecanum15tf2_wheel_speedEv>:


// alter wheel speed
void Mecanum::tf2_wheel_speed(void){
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
	fl.rps_goal = -(CAR_Goal.Vy + CAR_Goal.Vx - CAR_Goal.Omega*(a+b) )/radius;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	ed93 6b02 	vldr	d6, [r3, #8]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	ed93 7b00 	vldr	d7, [r3]
 800179c:	ee36 6b07 	vadd.f64	d6, d6, d7
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	ed93 5b04 	vldr	d5, [r3, #16]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	ed93 4b0c 	vldr	d4, [r3, #48]	; 0x30
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 80017b2:	ee34 7b07 	vadd.f64	d7, d4, d7
 80017b6:	ee25 7b07 	vmul.f64	d7, d5, d7
 80017ba:	ee36 7b47 	vsub.f64	d7, d6, d7
 80017be:	eeb1 5b47 	vneg.f64	d5, d7
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 80017c8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80017cc:	4b35      	ldr	r3, [pc, #212]	; (80018a4 <_ZN7Mecanum15tf2_wheel_speedEv+0x11c>)
 80017ce:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
	fr.rps_goal = -(CAR_Goal.Vy - CAR_Goal.Vx + CAR_Goal.Omega*(a+b) )/radius;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	ed93 6b02 	vldr	d6, [r3, #8]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	ed93 7b00 	vldr	d7, [r3]
 80017de:	ee36 6b47 	vsub.f64	d6, d6, d7
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	ed93 5b04 	vldr	d5, [r3, #16]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	ed93 4b0c 	vldr	d4, [r3, #48]	; 0x30
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 80017f4:	ee34 7b07 	vadd.f64	d7, d4, d7
 80017f8:	ee25 7b07 	vmul.f64	d7, d5, d7
 80017fc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001800:	eeb1 5b47 	vneg.f64	d5, d7
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 800180a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800180e:	4b26      	ldr	r3, [pc, #152]	; (80018a8 <_ZN7Mecanum15tf2_wheel_speedEv+0x120>)
 8001810:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
	bl.rps_goal = -(CAR_Goal.Vy - CAR_Goal.Vx - CAR_Goal.Omega*(a+b) )/radius;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	ed93 6b02 	vldr	d6, [r3, #8]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	ed93 7b00 	vldr	d7, [r3]
 8001820:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	ed93 5b04 	vldr	d5, [r3, #16]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	ed93 4b0c 	vldr	d4, [r3, #48]	; 0x30
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8001836:	ee34 7b07 	vadd.f64	d7, d4, d7
 800183a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800183e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001842:	eeb1 5b47 	vneg.f64	d5, d7
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 800184c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001850:	4b16      	ldr	r3, [pc, #88]	; (80018ac <_ZN7Mecanum15tf2_wheel_speedEv+0x124>)
 8001852:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
	br.rps_goal = -(CAR_Goal.Vy + CAR_Goal.Vx + CAR_Goal.Omega*(a+b) )/radius;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	ed93 6b02 	vldr	d6, [r3, #8]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	ed93 7b00 	vldr	d7, [r3]
 8001862:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	ed93 5b04 	vldr	d5, [r3, #16]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	ed93 4b0c 	vldr	d4, [r3, #48]	; 0x30
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8001878:	ee34 7b07 	vadd.f64	d7, d4, d7
 800187c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001880:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001884:	eeb1 5b47 	vneg.f64	d5, d7
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 800188e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001892:	4b07      	ldr	r3, [pc, #28]	; (80018b0 <_ZN7Mecanum15tf2_wheel_speedEv+0x128>)
 8001894:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	24000110 	.word	0x24000110
 80018a8:	240000a0 	.word	0x240000a0
 80018ac:	240001f0 	.word	0x240001f0
 80018b0:	24000180 	.word	0x24000180

080018b4 <_ZN7Mecanum13tf2_car_speedEv>:


// give current car speed
void Mecanum::tf2_car_speed(void){
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
	CAR_Now.Vy = -(0.25)*radius*(fl.rps_now + fr.rps_now + bl.rps_now + br.rps_now);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80018c2:	eebd 6b00 	vmov.f64	d6, #208	; 0xbe800000 -0.250
 80018c6:	ee27 6b06 	vmul.f64	d6, d7, d6
 80018ca:	4b33      	ldr	r3, [pc, #204]	; (8001998 <_ZN7Mecanum13tf2_car_speedEv+0xe4>)
 80018cc:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
 80018d0:	4b32      	ldr	r3, [pc, #200]	; (800199c <_ZN7Mecanum13tf2_car_speedEv+0xe8>)
 80018d2:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80018d6:	ee35 5b07 	vadd.f64	d5, d5, d7
 80018da:	4b31      	ldr	r3, [pc, #196]	; (80019a0 <_ZN7Mecanum13tf2_car_speedEv+0xec>)
 80018dc:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80018e0:	ee35 5b07 	vadd.f64	d5, d5, d7
 80018e4:	4b2f      	ldr	r3, [pc, #188]	; (80019a4 <_ZN7Mecanum13tf2_car_speedEv+0xf0>)
 80018e6:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80018ea:	ee35 7b07 	vadd.f64	d7, d5, d7
 80018ee:	ee26 7b07 	vmul.f64	d7, d6, d7
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	ed83 7b08 	vstr	d7, [r3, #32]
	CAR_Now.Vx = -(0.25)*radius*(fl.rps_now - fr.rps_now - bl.rps_now + br.rps_now);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80018fe:	eebd 6b00 	vmov.f64	d6, #208	; 0xbe800000 -0.250
 8001902:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001906:	4b24      	ldr	r3, [pc, #144]	; (8001998 <_ZN7Mecanum13tf2_car_speedEv+0xe4>)
 8001908:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
 800190c:	4b23      	ldr	r3, [pc, #140]	; (800199c <_ZN7Mecanum13tf2_car_speedEv+0xe8>)
 800190e:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001912:	ee35 5b47 	vsub.f64	d5, d5, d7
 8001916:	4b22      	ldr	r3, [pc, #136]	; (80019a0 <_ZN7Mecanum13tf2_car_speedEv+0xec>)
 8001918:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 800191c:	ee35 5b47 	vsub.f64	d5, d5, d7
 8001920:	4b20      	ldr	r3, [pc, #128]	; (80019a4 <_ZN7Mecanum13tf2_car_speedEv+0xf0>)
 8001922:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001926:	ee35 7b07 	vadd.f64	d7, d5, d7
 800192a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	ed83 7b06 	vstr	d7, [r3, #24]
	CAR_Now.Omega = -(0.25)*radius*(1/(a+b))*(-fl.rps_now + fr.rps_now - bl.rps_now + br.rps_now);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 800193a:	eebd 6b00 	vmov.f64	d6, #208	; 0xbe800000 -0.250
 800193e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	ed93 5b0c 	vldr	d5, [r3, #48]	; 0x30
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 800194e:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001952:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8001956:	ee84 7b05 	vdiv.f64	d7, d4, d5
 800195a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800195e:	4b0f      	ldr	r3, [pc, #60]	; (800199c <_ZN7Mecanum13tf2_car_speedEv+0xe8>)
 8001960:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
 8001964:	4b0c      	ldr	r3, [pc, #48]	; (8001998 <_ZN7Mecanum13tf2_car_speedEv+0xe4>)
 8001966:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 800196a:	ee35 5b47 	vsub.f64	d5, d5, d7
 800196e:	4b0c      	ldr	r3, [pc, #48]	; (80019a0 <_ZN7Mecanum13tf2_car_speedEv+0xec>)
 8001970:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001974:	ee35 5b47 	vsub.f64	d5, d5, d7
 8001978:	4b0a      	ldr	r3, [pc, #40]	; (80019a4 <_ZN7Mecanum13tf2_car_speedEv+0xf0>)
 800197a:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 800197e:	ee35 7b07 	vadd.f64	d7, d5, d7
 8001982:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
}
 800198c:	bf00      	nop
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr
 8001998:	24000110 	.word	0x24000110
 800199c:	240000a0 	.word	0x240000a0
 80019a0:	240001f0 	.word	0x240001f0
 80019a4:	24000180 	.word	0x24000180

080019a8 <_Z41__static_initialization_and_destruction_0ii>:
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d107      	bne.n	80019c8 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019be:	4293      	cmp	r3, r2
 80019c0:	d102      	bne.n	80019c8 <_Z41__static_initialization_and_destruction_0ii+0x20>
Mecanum mecanum;
 80019c2:	4803      	ldr	r0, [pc, #12]	; (80019d0 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 80019c4:	f7ff fea0 	bl	8001708 <_ZN7MecanumC1Ev>
}
 80019c8:	bf00      	nop
 80019ca:	3708      	adds	r7, #8
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	24000748 	.word	0x24000748

080019d4 <_GLOBAL__sub_I_mecanum>:
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80019dc:	2001      	movs	r0, #1
 80019de:	f7ff ffe3 	bl	80019a8 <_Z41__static_initialization_and_destruction_0ii>
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <_ZN7MYRESET7receiveEv>:

namespace MYRESET{
	int state=0;
}

void MYRESET::receive(void){
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
	/* first part*/
	if (HAL_GPIO_ReadPin(THIRD_PART_PORT, THIRD_PART_PIN) == 0)MYRESET::state=3;
 80019e8:	2102      	movs	r1, #2
 80019ea:	481a      	ldr	r0, [pc, #104]	; (8001a54 <_ZN7MYRESET7receiveEv+0x70>)
 80019ec:	f008 fe1a 	bl	800a624 <HAL_GPIO_ReadPin>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	bf0c      	ite	eq
 80019f6:	2301      	moveq	r3, #1
 80019f8:	2300      	movne	r3, #0
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d003      	beq.n	8001a08 <_ZN7MYRESET7receiveEv+0x24>
 8001a00:	4b15      	ldr	r3, [pc, #84]	; (8001a58 <_ZN7MYRESET7receiveEv+0x74>)
 8001a02:	2203      	movs	r2, #3
 8001a04:	601a      	str	r2, [r3, #0]

	/* third part*/
	else if (HAL_GPIO_ReadPin(FIRST_PART_PORT, FIRST_PART_PIN) == 0) MYRESET::state=1;

	else MYRESET::state=0;
}
 8001a06:	e022      	b.n	8001a4e <_ZN7MYRESET7receiveEv+0x6a>
	else if (HAL_GPIO_ReadPin(SECOND_PART_PORT, SECOND_PART_PIN) == 0) MYRESET::state=2;
 8001a08:	2101      	movs	r1, #1
 8001a0a:	4812      	ldr	r0, [pc, #72]	; (8001a54 <_ZN7MYRESET7receiveEv+0x70>)
 8001a0c:	f008 fe0a 	bl	800a624 <HAL_GPIO_ReadPin>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	bf0c      	ite	eq
 8001a16:	2301      	moveq	r3, #1
 8001a18:	2300      	movne	r3, #0
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d003      	beq.n	8001a28 <_ZN7MYRESET7receiveEv+0x44>
 8001a20:	4b0d      	ldr	r3, [pc, #52]	; (8001a58 <_ZN7MYRESET7receiveEv+0x74>)
 8001a22:	2202      	movs	r2, #2
 8001a24:	601a      	str	r2, [r3, #0]
}
 8001a26:	e012      	b.n	8001a4e <_ZN7MYRESET7receiveEv+0x6a>
	else if (HAL_GPIO_ReadPin(FIRST_PART_PORT, FIRST_PART_PIN) == 0) MYRESET::state=1;
 8001a28:	2108      	movs	r1, #8
 8001a2a:	480c      	ldr	r0, [pc, #48]	; (8001a5c <_ZN7MYRESET7receiveEv+0x78>)
 8001a2c:	f008 fdfa 	bl	800a624 <HAL_GPIO_ReadPin>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	bf0c      	ite	eq
 8001a36:	2301      	moveq	r3, #1
 8001a38:	2300      	movne	r3, #0
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d003      	beq.n	8001a48 <_ZN7MYRESET7receiveEv+0x64>
 8001a40:	4b05      	ldr	r3, [pc, #20]	; (8001a58 <_ZN7MYRESET7receiveEv+0x74>)
 8001a42:	2201      	movs	r2, #1
 8001a44:	601a      	str	r2, [r3, #0]
}
 8001a46:	e002      	b.n	8001a4e <_ZN7MYRESET7receiveEv+0x6a>
	else MYRESET::state=0;
 8001a48:	4b03      	ldr	r3, [pc, #12]	; (8001a58 <_ZN7MYRESET7receiveEv+0x74>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	601a      	str	r2, [r3, #0]
}
 8001a4e:	bf00      	nop
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	58020800 	.word	0x58020800
 8001a58:	240007a8 	.word	0x240007a8
 8001a5c:	58021400 	.word	0x58021400

08001a60 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2200      	movs	r2, #0
 8001a72:	605a      	str	r2, [r3, #4]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	4618      	mov	r0, r3
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
	...

08001a84 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	4a04      	ldr	r2, [pc, #16]	; (8001aa0 <_ZN3ros3MsgC1Ev+0x1c>)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	601a      	str	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4618      	mov	r0, r3
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	08011c28 	.word	0x08011c28

08001aa4 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
      data()
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff ffe8 	bl	8001a84 <_ZN3ros3MsgC1Ev>
 8001ab4:	4a06      	ldr	r2, [pc, #24]	; (8001ad0 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	601a      	str	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	3304      	adds	r3, #4
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7ff ffce 	bl	8001a60 <_ZN3ros4TimeC1Ev>
    {
    }
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	08011c10 	.word	0x08011c10

08001ad4 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001ad4:	b480      	push	{r7}
 8001ad6:	b085      	sub	sp, #20
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6859      	ldr	r1, [r3, #4]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	683a      	ldr	r2, [r7, #0]
 8001aea:	4413      	add	r3, r2
 8001aec:	b2ca      	uxtb	r2, r1
 8001aee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	0a19      	lsrs	r1, r3, #8
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	3301      	adds	r3, #1
 8001afa:	683a      	ldr	r2, [r7, #0]
 8001afc:	4413      	add	r3, r2
 8001afe:	b2ca      	uxtb	r2, r1
 8001b00:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	0c19      	lsrs	r1, r3, #16
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	3302      	adds	r3, #2
 8001b0c:	683a      	ldr	r2, [r7, #0]
 8001b0e:	4413      	add	r3, r2
 8001b10:	b2ca      	uxtb	r2, r1
 8001b12:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	0e19      	lsrs	r1, r3, #24
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	3303      	adds	r3, #3
 8001b1e:	683a      	ldr	r2, [r7, #0]
 8001b20:	4413      	add	r3, r2
 8001b22:	b2ca      	uxtb	r2, r1
 8001b24:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	3304      	adds	r3, #4
 8001b2a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6899      	ldr	r1, [r3, #8]
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	683a      	ldr	r2, [r7, #0]
 8001b34:	4413      	add	r3, r2
 8001b36:	b2ca      	uxtb	r2, r1
 8001b38:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	0a19      	lsrs	r1, r3, #8
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	3301      	adds	r3, #1
 8001b44:	683a      	ldr	r2, [r7, #0]
 8001b46:	4413      	add	r3, r2
 8001b48:	b2ca      	uxtb	r2, r1
 8001b4a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	0c19      	lsrs	r1, r3, #16
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	3302      	adds	r3, #2
 8001b56:	683a      	ldr	r2, [r7, #0]
 8001b58:	4413      	add	r3, r2
 8001b5a:	b2ca      	uxtb	r2, r1
 8001b5c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	0e19      	lsrs	r1, r3, #24
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	3303      	adds	r3, #3
 8001b68:	683a      	ldr	r2, [r7, #0]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	b2ca      	uxtb	r2, r1
 8001b6e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	3304      	adds	r3, #4
 8001b74:	60fb      	str	r3, [r7, #12]
      return offset;
 8001b76:	68fb      	ldr	r3, [r7, #12]
    }
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3714      	adds	r7, #20
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001b84:	b480      	push	{r7}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	683a      	ldr	r2, [r7, #0]
 8001b96:	4413      	add	r3, r2
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685a      	ldr	r2, [r3, #4]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	6839      	ldr	r1, [r7, #0]
 8001baa:	440b      	add	r3, r1
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	021b      	lsls	r3, r3, #8
 8001bb0:	431a      	orrs	r2, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685a      	ldr	r2, [r3, #4]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	3302      	adds	r3, #2
 8001bbe:	6839      	ldr	r1, [r7, #0]
 8001bc0:	440b      	add	r3, r1
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	041b      	lsls	r3, r3, #16
 8001bc6:	431a      	orrs	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685a      	ldr	r2, [r3, #4]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	3303      	adds	r3, #3
 8001bd4:	6839      	ldr	r1, [r7, #0]
 8001bd6:	440b      	add	r3, r1
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	061b      	lsls	r3, r3, #24
 8001bdc:	431a      	orrs	r2, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	3304      	adds	r3, #4
 8001be6:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	683a      	ldr	r2, [r7, #0]
 8001bec:	4413      	add	r3, r2
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	689a      	ldr	r2, [r3, #8]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	6839      	ldr	r1, [r7, #0]
 8001c00:	440b      	add	r3, r1
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	021b      	lsls	r3, r3, #8
 8001c06:	431a      	orrs	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689a      	ldr	r2, [r3, #8]
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	3302      	adds	r3, #2
 8001c14:	6839      	ldr	r1, [r7, #0]
 8001c16:	440b      	add	r3, r1
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	041b      	lsls	r3, r3, #16
 8001c1c:	431a      	orrs	r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	689a      	ldr	r2, [r3, #8]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	3303      	adds	r3, #3
 8001c2a:	6839      	ldr	r1, [r7, #0]
 8001c2c:	440b      	add	r3, r1
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	061b      	lsls	r3, r3, #24
 8001c32:	431a      	orrs	r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	3304      	adds	r3, #4
 8001c3c:	60fb      	str	r3, [r7, #12]
     return offset;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
    }
 8001c40:	4618      	mov	r0, r3
 8001c42:	3714      	adds	r7, #20
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	4b03      	ldr	r3, [pc, #12]	; (8001c64 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8001c56:	4618      	mov	r0, r3
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	080118f0 	.word	0x080118f0

08001c68 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	4b03      	ldr	r3, [pc, #12]	; (8001c80 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8001c72:	4618      	mov	r0, r3
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	08011900 	.word	0x08011900

08001c84 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff fef8 	bl	8001a84 <_ZN3ros3MsgC1Ev>
 8001c94:	4a0b      	ldr	r2, [pc, #44]	; (8001cc4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	601a      	str	r2, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	809a      	strh	r2, [r3, #4]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4a09      	ldr	r2, [pc, #36]	; (8001cc8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001ca4:	609a      	str	r2, [r3, #8]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4a07      	ldr	r2, [pc, #28]	; (8001cc8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001caa:	60da      	str	r2, [r3, #12]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	4a06      	ldr	r2, [pc, #24]	; (8001cc8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001cb0:	611a      	str	r2, [r3, #16]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	615a      	str	r2, [r3, #20]
    {
    }
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	08011bf8 	.word	0x08011bf8
 8001cc8:	08011924 	.word	0x08011924

08001ccc <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b088      	sub	sp, #32
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	8899      	ldrh	r1, [r3, #4]
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	683a      	ldr	r2, [r7, #0]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	b2ca      	uxtb	r2, r1
 8001ce6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	889b      	ldrh	r3, [r3, #4]
 8001cec:	0a1b      	lsrs	r3, r3, #8
 8001cee:	b299      	uxth	r1, r3
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	683a      	ldr	r2, [r7, #0]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	b2ca      	uxtb	r2, r1
 8001cfa:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	3302      	adds	r3, #2
 8001d00:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7fe fb02 	bl	8000310 <strlen>
 8001d0c:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	683a      	ldr	r2, [r7, #0]
 8001d12:	4413      	add	r3, r2
 8001d14:	69b9      	ldr	r1, [r7, #24]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f002 f948 	bl	8003fac <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	3304      	adds	r3, #4
 8001d20:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	683a      	ldr	r2, [r7, #0]
 8001d26:	18d0      	adds	r0, r2, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	4619      	mov	r1, r3
 8001d30:	f00f fc38 	bl	80115a4 <memcpy>
      offset += length_topic_name;
 8001d34:	69fa      	ldr	r2, [r7, #28]
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	4413      	add	r3, r2
 8001d3a:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7fe fae5 	bl	8000310 <strlen>
 8001d46:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	683a      	ldr	r2, [r7, #0]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	6979      	ldr	r1, [r7, #20]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f002 f92b 	bl	8003fac <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	3304      	adds	r3, #4
 8001d5a:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	683a      	ldr	r2, [r7, #0]
 8001d60:	18d0      	adds	r0, r2, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	697a      	ldr	r2, [r7, #20]
 8001d68:	4619      	mov	r1, r3
 8001d6a:	f00f fc1b 	bl	80115a4 <memcpy>
      offset += length_message_type;
 8001d6e:	69fa      	ldr	r2, [r7, #28]
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	4413      	add	r3, r2
 8001d74:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	691b      	ldr	r3, [r3, #16]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7fe fac8 	bl	8000310 <strlen>
 8001d80:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	683a      	ldr	r2, [r7, #0]
 8001d86:	4413      	add	r3, r2
 8001d88:	6939      	ldr	r1, [r7, #16]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f002 f90e 	bl	8003fac <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	3304      	adds	r3, #4
 8001d94:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	683a      	ldr	r2, [r7, #0]
 8001d9a:	18d0      	adds	r0, r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	691b      	ldr	r3, [r3, #16]
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	4619      	mov	r1, r3
 8001da4:	f00f fbfe 	bl	80115a4 <memcpy>
      offset += length_md5sum;
 8001da8:	69fa      	ldr	r2, [r7, #28]
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	4413      	add	r3, r2
 8001dae:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	695b      	ldr	r3, [r3, #20]
 8001db4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8001db6:	68f9      	ldr	r1, [r7, #12]
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	683a      	ldr	r2, [r7, #0]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	b2ca      	uxtb	r2, r1
 8001dc0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	0a19      	lsrs	r1, r3, #8
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	683a      	ldr	r2, [r7, #0]
 8001dcc:	4413      	add	r3, r2
 8001dce:	b2ca      	uxtb	r2, r1
 8001dd0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	0c19      	lsrs	r1, r3, #16
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	3302      	adds	r3, #2
 8001dda:	683a      	ldr	r2, [r7, #0]
 8001ddc:	4413      	add	r3, r2
 8001dde:	b2ca      	uxtb	r2, r1
 8001de0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	0e19      	lsrs	r1, r3, #24
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	3303      	adds	r3, #3
 8001dea:	683a      	ldr	r2, [r7, #0]
 8001dec:	4413      	add	r3, r2
 8001dee:	b2ca      	uxtb	r2, r1
 8001df0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	3304      	adds	r3, #4
 8001df6:	61fb      	str	r3, [r7, #28]
      return offset;
 8001df8:	69fb      	ldr	r3, [r7, #28]
    }
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3720      	adds	r7, #32
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b08a      	sub	sp, #40	; 0x28
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
 8001e0a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	683a      	ldr	r2, [r7, #0]
 8001e14:	4413      	add	r3, r2
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	b29a      	uxth	r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	889b      	ldrh	r3, [r3, #4]
 8001e22:	b21a      	sxth	r2, r3
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	3301      	adds	r3, #1
 8001e28:	6839      	ldr	r1, [r7, #0]
 8001e2a:	440b      	add	r3, r1
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	021b      	lsls	r3, r3, #8
 8001e30:	b21b      	sxth	r3, r3
 8001e32:	4313      	orrs	r3, r2
 8001e34:	b21b      	sxth	r3, r3
 8001e36:	b29a      	uxth	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	3302      	adds	r3, #2
 8001e40:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	683a      	ldr	r2, [r7, #0]
 8001e46:	441a      	add	r2, r3
 8001e48:	f107 0314 	add.w	r3, r7, #20
 8001e4c:	4611      	mov	r1, r2
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f002 f8ca 	bl	8003fe8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	3304      	adds	r3, #4
 8001e58:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001e5a:	69bb      	ldr	r3, [r7, #24]
 8001e5c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	4413      	add	r3, r2
 8001e64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d20c      	bcs.n	8001e84 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8001e6a:	683a      	ldr	r2, [r7, #0]
 8001e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6e:	441a      	add	r2, r3
 8001e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e72:	3b01      	subs	r3, #1
 8001e74:	6839      	ldr	r1, [r7, #0]
 8001e76:	440b      	add	r3, r1
 8001e78:	7812      	ldrb	r2, [r2, #0]
 8001e7a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7e:	3301      	adds	r3, #1
 8001e80:	627b      	str	r3, [r7, #36]	; 0x24
 8001e82:	e7ec      	b.n	8001e5e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	4413      	add	r3, r2
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	683a      	ldr	r2, [r7, #0]
 8001e8e:	4413      	add	r3, r2
 8001e90:	2200      	movs	r2, #0
 8001e92:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	3b01      	subs	r3, #1
 8001e98:	683a      	ldr	r2, [r7, #0]
 8001e9a:	441a      	add	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	683a      	ldr	r2, [r7, #0]
 8001eac:	441a      	add	r2, r3
 8001eae:	f107 0310 	add.w	r3, r7, #16
 8001eb2:	4611      	mov	r1, r2
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f002 f897 	bl	8003fe8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	3304      	adds	r3, #4
 8001ebe:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	623b      	str	r3, [r7, #32]
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	4413      	add	r3, r2
 8001eca:	6a3a      	ldr	r2, [r7, #32]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d20c      	bcs.n	8001eea <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8001ed0:	683a      	ldr	r2, [r7, #0]
 8001ed2:	6a3b      	ldr	r3, [r7, #32]
 8001ed4:	441a      	add	r2, r3
 8001ed6:	6a3b      	ldr	r3, [r7, #32]
 8001ed8:	3b01      	subs	r3, #1
 8001eda:	6839      	ldr	r1, [r7, #0]
 8001edc:	440b      	add	r3, r1
 8001ede:	7812      	ldrb	r2, [r2, #0]
 8001ee0:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001ee2:	6a3b      	ldr	r3, [r7, #32]
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	623b      	str	r3, [r7, #32]
 8001ee8:	e7ec      	b.n	8001ec4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	4413      	add	r3, r2
 8001ef0:	3b01      	subs	r3, #1
 8001ef2:	683a      	ldr	r2, [r7, #0]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	3b01      	subs	r3, #1
 8001efe:	683a      	ldr	r2, [r7, #0]
 8001f00:	441a      	add	r2, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8001f06:	69ba      	ldr	r2, [r7, #24]
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	683a      	ldr	r2, [r7, #0]
 8001f12:	441a      	add	r2, r3
 8001f14:	f107 030c 	add.w	r3, r7, #12
 8001f18:	4611      	mov	r1, r2
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f002 f864 	bl	8003fe8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	3304      	adds	r3, #4
 8001f24:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	61fb      	str	r3, [r7, #28]
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	4413      	add	r3, r2
 8001f30:	69fa      	ldr	r2, [r7, #28]
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d20c      	bcs.n	8001f50 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8001f36:	683a      	ldr	r2, [r7, #0]
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	441a      	add	r2, r3
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	6839      	ldr	r1, [r7, #0]
 8001f42:	440b      	add	r3, r1
 8001f44:	7812      	ldrb	r2, [r2, #0]
 8001f46:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	61fb      	str	r3, [r7, #28]
 8001f4e:	e7ec      	b.n	8001f2a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	4413      	add	r3, r2
 8001f56:	3b01      	subs	r3, #1
 8001f58:	683a      	ldr	r2, [r7, #0]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	3b01      	subs	r3, #1
 8001f64:	683a      	ldr	r2, [r7, #0]
 8001f66:	441a      	add	r2, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	4413      	add	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8001f74:	2300      	movs	r3, #0
 8001f76:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	6839      	ldr	r1, [r7, #0]
 8001f7e:	440a      	add	r2, r1
 8001f80:	7812      	ldrb	r2, [r2, #0]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001f86:	68ba      	ldr	r2, [r7, #8]
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	6839      	ldr	r1, [r7, #0]
 8001f8e:	440b      	add	r3, r1
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	021b      	lsls	r3, r3, #8
 8001f94:	4313      	orrs	r3, r2
 8001f96:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001f98:	68ba      	ldr	r2, [r7, #8]
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	3302      	adds	r3, #2
 8001f9e:	6839      	ldr	r1, [r7, #0]
 8001fa0:	440b      	add	r3, r1
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	041b      	lsls	r3, r3, #16
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001faa:	68ba      	ldr	r2, [r7, #8]
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	3303      	adds	r3, #3
 8001fb0:	6839      	ldr	r1, [r7, #0]
 8001fb2:	440b      	add	r3, r1
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	061b      	lsls	r3, r3, #24
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8001fbc:	68ba      	ldr	r2, [r7, #8]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	3304      	adds	r3, #4
 8001fc6:	61bb      	str	r3, [r7, #24]
     return offset;
 8001fc8:	69bb      	ldr	r3, [r7, #24]
    }
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3728      	adds	r7, #40	; 0x28
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
	...

08001fd4 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	4b03      	ldr	r3, [pc, #12]	; (8001fec <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8001fde:	4618      	mov	r0, r3
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	08011928 	.word	0x08011928

08001ff0 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	4b03      	ldr	r3, [pc, #12]	; (8002008 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	370c      	adds	r7, #12
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	08011944 	.word	0x08011944

0800200c <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4618      	mov	r0, r3
 8002018:	f7ff fd34 	bl	8001a84 <_ZN3ros3MsgC1Ev>
 800201c:	4a06      	ldr	r2, [pc, #24]	; (8002038 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	601a      	str	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	711a      	strb	r2, [r3, #4]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4a04      	ldr	r2, [pc, #16]	; (800203c <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 800202c:	609a      	str	r2, [r3, #8]
    {
    }
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4618      	mov	r0, r3
 8002032:	3708      	adds	r7, #8
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	08011be0 	.word	0x08011be0
 800203c:	08011924 	.word	0x08011924

08002040 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800204a:	2300      	movs	r3, #0
 800204c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	683a      	ldr	r2, [r7, #0]
 8002052:	4413      	add	r3, r2
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	7912      	ldrb	r2, [r2, #4]
 8002058:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	3301      	adds	r3, #1
 800205e:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	4618      	mov	r0, r3
 8002066:	f7fe f953 	bl	8000310 <strlen>
 800206a:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	683a      	ldr	r2, [r7, #0]
 8002070:	4413      	add	r3, r2
 8002072:	68b9      	ldr	r1, [r7, #8]
 8002074:	4618      	mov	r0, r3
 8002076:	f001 ff99 	bl	8003fac <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	3304      	adds	r3, #4
 800207e:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	683a      	ldr	r2, [r7, #0]
 8002084:	18d0      	adds	r0, r2, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	68ba      	ldr	r2, [r7, #8]
 800208c:	4619      	mov	r1, r3
 800208e:	f00f fa89 	bl	80115a4 <memcpy>
      offset += length_msg;
 8002092:	68fa      	ldr	r2, [r7, #12]
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	4413      	add	r3, r2
 8002098:	60fb      	str	r3, [r7, #12]
      return offset;
 800209a:	68fb      	ldr	r3, [r7, #12]
    }
 800209c:	4618      	mov	r0, r3
 800209e:	3710      	adds	r7, #16
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b086      	sub	sp, #24
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80020ae:	2300      	movs	r3, #0
 80020b0:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	683a      	ldr	r2, [r7, #0]
 80020b6:	4413      	add	r3, r2
 80020b8:	781a      	ldrb	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	3301      	adds	r3, #1
 80020c2:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	683a      	ldr	r2, [r7, #0]
 80020c8:	441a      	add	r2, r3
 80020ca:	f107 030c 	add.w	r3, r7, #12
 80020ce:	4611      	mov	r1, r2
 80020d0:	4618      	mov	r0, r3
 80020d2:	f001 ff89 	bl	8003fe8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	3304      	adds	r3, #4
 80020da:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	617b      	str	r3, [r7, #20]
 80020e0:	693a      	ldr	r2, [r7, #16]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	4413      	add	r3, r2
 80020e6:	697a      	ldr	r2, [r7, #20]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d20c      	bcs.n	8002106 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 80020ec:	683a      	ldr	r2, [r7, #0]
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	441a      	add	r2, r3
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	3b01      	subs	r3, #1
 80020f6:	6839      	ldr	r1, [r7, #0]
 80020f8:	440b      	add	r3, r1
 80020fa:	7812      	ldrb	r2, [r2, #0]
 80020fc:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	3301      	adds	r3, #1
 8002102:	617b      	str	r3, [r7, #20]
 8002104:	e7ec      	b.n	80020e0 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8002106:	693a      	ldr	r2, [r7, #16]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	4413      	add	r3, r2
 800210c:	3b01      	subs	r3, #1
 800210e:	683a      	ldr	r2, [r7, #0]
 8002110:	4413      	add	r3, r2
 8002112:	2200      	movs	r2, #0
 8002114:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	3b01      	subs	r3, #1
 800211a:	683a      	ldr	r2, [r7, #0]
 800211c:	441a      	add	r2, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8002122:	693a      	ldr	r2, [r7, #16]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	4413      	add	r3, r2
 8002128:	613b      	str	r3, [r7, #16]
     return offset;
 800212a:	693b      	ldr	r3, [r7, #16]
    }
 800212c:	4618      	mov	r0, r3
 800212e:	3718      	adds	r7, #24
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	4b03      	ldr	r3, [pc, #12]	; (800214c <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 800213e:	4618      	mov	r0, r3
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	08011968 	.word	0x08011968

08002150 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	4b03      	ldr	r3, [pc, #12]	; (8002168 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 800215a:	4618      	mov	r0, r3
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	0801197c 	.word	0x0801197c

0800216c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	4618      	mov	r0, r3
 8002178:	f7ff fc84 	bl	8001a84 <_ZN3ros3MsgC1Ev>
 800217c:	4a0c      	ldr	r2, [pc, #48]	; (80021b0 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	601a      	str	r2, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	605a      	str	r2, [r3, #4]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	60da      	str	r2, [r3, #12]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	611a      	str	r2, [r3, #16]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	619a      	str	r2, [r3, #24]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	61da      	str	r2, [r3, #28]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4618      	mov	r0, r3
 80021aa:	3708      	adds	r7, #8
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	08011bc8 	.word	0x08011bc8

080021b4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b08a      	sub	sp, #40	; 0x28
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80021be:	2300      	movs	r3, #0
 80021c0:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6859      	ldr	r1, [r3, #4]
 80021c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c8:	683a      	ldr	r2, [r7, #0]
 80021ca:	4413      	add	r3, r2
 80021cc:	b2ca      	uxtb	r2, r1
 80021ce:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	0a19      	lsrs	r1, r3, #8
 80021d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d8:	3301      	adds	r3, #1
 80021da:	683a      	ldr	r2, [r7, #0]
 80021dc:	4413      	add	r3, r2
 80021de:	b2ca      	uxtb	r2, r1
 80021e0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	0c19      	lsrs	r1, r3, #16
 80021e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ea:	3302      	adds	r3, #2
 80021ec:	683a      	ldr	r2, [r7, #0]
 80021ee:	4413      	add	r3, r2
 80021f0:	b2ca      	uxtb	r2, r1
 80021f2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	0e19      	lsrs	r1, r3, #24
 80021fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fc:	3303      	adds	r3, #3
 80021fe:	683a      	ldr	r2, [r7, #0]
 8002200:	4413      	add	r3, r2
 8002202:	b2ca      	uxtb	r2, r1
 8002204:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8002206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002208:	3304      	adds	r3, #4
 800220a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 800220c:	2300      	movs	r3, #0
 800220e:	623b      	str	r3, [r7, #32]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	6a3a      	ldr	r2, [r7, #32]
 8002216:	429a      	cmp	r2, r3
 8002218:	d22b      	bcs.n	8002272 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	68da      	ldr	r2, [r3, #12]
 800221e:	6a3b      	ldr	r3, [r7, #32]
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	4413      	add	r3, r2
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8002228:	6939      	ldr	r1, [r7, #16]
 800222a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222c:	683a      	ldr	r2, [r7, #0]
 800222e:	4413      	add	r3, r2
 8002230:	b2ca      	uxtb	r2, r1
 8002232:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	0a19      	lsrs	r1, r3, #8
 8002238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223a:	3301      	adds	r3, #1
 800223c:	683a      	ldr	r2, [r7, #0]
 800223e:	4413      	add	r3, r2
 8002240:	b2ca      	uxtb	r2, r1
 8002242:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	0c19      	lsrs	r1, r3, #16
 8002248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224a:	3302      	adds	r3, #2
 800224c:	683a      	ldr	r2, [r7, #0]
 800224e:	4413      	add	r3, r2
 8002250:	b2ca      	uxtb	r2, r1
 8002252:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	0e19      	lsrs	r1, r3, #24
 8002258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225a:	3303      	adds	r3, #3
 800225c:	683a      	ldr	r2, [r7, #0]
 800225e:	4413      	add	r3, r2
 8002260:	b2ca      	uxtb	r2, r1
 8002262:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8002264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002266:	3304      	adds	r3, #4
 8002268:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 800226a:	6a3b      	ldr	r3, [r7, #32]
 800226c:	3301      	adds	r3, #1
 800226e:	623b      	str	r3, [r7, #32]
 8002270:	e7ce      	b.n	8002210 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6919      	ldr	r1, [r3, #16]
 8002276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002278:	683a      	ldr	r2, [r7, #0]
 800227a:	4413      	add	r3, r2
 800227c:	b2ca      	uxtb	r2, r1
 800227e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	691b      	ldr	r3, [r3, #16]
 8002284:	0a19      	lsrs	r1, r3, #8
 8002286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002288:	3301      	adds	r3, #1
 800228a:	683a      	ldr	r2, [r7, #0]
 800228c:	4413      	add	r3, r2
 800228e:	b2ca      	uxtb	r2, r1
 8002290:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	0c19      	lsrs	r1, r3, #16
 8002298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229a:	3302      	adds	r3, #2
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	4413      	add	r3, r2
 80022a0:	b2ca      	uxtb	r2, r1
 80022a2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	691b      	ldr	r3, [r3, #16]
 80022a8:	0e19      	lsrs	r1, r3, #24
 80022aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ac:	3303      	adds	r3, #3
 80022ae:	683a      	ldr	r2, [r7, #0]
 80022b0:	4413      	add	r3, r2
 80022b2:	b2ca      	uxtb	r2, r1
 80022b4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 80022b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b8:	3304      	adds	r3, #4
 80022ba:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80022bc:	2300      	movs	r3, #0
 80022be:	61fb      	str	r3, [r7, #28]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	691b      	ldr	r3, [r3, #16]
 80022c4:	69fa      	ldr	r2, [r7, #28]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d22b      	bcs.n	8002322 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	699a      	ldr	r2, [r3, #24]
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	4413      	add	r3, r2
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 80022d8:	68f9      	ldr	r1, [r7, #12]
 80022da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022dc:	683a      	ldr	r2, [r7, #0]
 80022de:	4413      	add	r3, r2
 80022e0:	b2ca      	uxtb	r2, r1
 80022e2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	0a19      	lsrs	r1, r3, #8
 80022e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ea:	3301      	adds	r3, #1
 80022ec:	683a      	ldr	r2, [r7, #0]
 80022ee:	4413      	add	r3, r2
 80022f0:	b2ca      	uxtb	r2, r1
 80022f2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	0c19      	lsrs	r1, r3, #16
 80022f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fa:	3302      	adds	r3, #2
 80022fc:	683a      	ldr	r2, [r7, #0]
 80022fe:	4413      	add	r3, r2
 8002300:	b2ca      	uxtb	r2, r1
 8002302:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	0e19      	lsrs	r1, r3, #24
 8002308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230a:	3303      	adds	r3, #3
 800230c:	683a      	ldr	r2, [r7, #0]
 800230e:	4413      	add	r3, r2
 8002310:	b2ca      	uxtb	r2, r1
 8002312:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8002314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002316:	3304      	adds	r3, #4
 8002318:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	3301      	adds	r3, #1
 800231e:	61fb      	str	r3, [r7, #28]
 8002320:	e7ce      	b.n	80022c0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	69d9      	ldr	r1, [r3, #28]
 8002326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002328:	683a      	ldr	r2, [r7, #0]
 800232a:	4413      	add	r3, r2
 800232c:	b2ca      	uxtb	r2, r1
 800232e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	69db      	ldr	r3, [r3, #28]
 8002334:	0a19      	lsrs	r1, r3, #8
 8002336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002338:	3301      	adds	r3, #1
 800233a:	683a      	ldr	r2, [r7, #0]
 800233c:	4413      	add	r3, r2
 800233e:	b2ca      	uxtb	r2, r1
 8002340:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	69db      	ldr	r3, [r3, #28]
 8002346:	0c19      	lsrs	r1, r3, #16
 8002348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234a:	3302      	adds	r3, #2
 800234c:	683a      	ldr	r2, [r7, #0]
 800234e:	4413      	add	r3, r2
 8002350:	b2ca      	uxtb	r2, r1
 8002352:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	69db      	ldr	r3, [r3, #28]
 8002358:	0e19      	lsrs	r1, r3, #24
 800235a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235c:	3303      	adds	r3, #3
 800235e:	683a      	ldr	r2, [r7, #0]
 8002360:	4413      	add	r3, r2
 8002362:	b2ca      	uxtb	r2, r1
 8002364:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8002366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002368:	3304      	adds	r3, #4
 800236a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 800236c:	2300      	movs	r3, #0
 800236e:	61bb      	str	r3, [r7, #24]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	69db      	ldr	r3, [r3, #28]
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	429a      	cmp	r2, r3
 8002378:	d228      	bcs.n	80023cc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	4413      	add	r3, r2
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4618      	mov	r0, r3
 8002388:	f7fd ffc2 	bl	8000310 <strlen>
 800238c:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 800238e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002390:	683a      	ldr	r2, [r7, #0]
 8002392:	4413      	add	r3, r2
 8002394:	6979      	ldr	r1, [r7, #20]
 8002396:	4618      	mov	r0, r3
 8002398:	f001 fe08 	bl	8003fac <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800239c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239e:	3304      	adds	r3, #4
 80023a0:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 80023a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a4:	683a      	ldr	r2, [r7, #0]
 80023a6:	18d0      	adds	r0, r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	4413      	add	r3, r2
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	697a      	ldr	r2, [r7, #20]
 80023b6:	4619      	mov	r1, r3
 80023b8:	f00f f8f4 	bl	80115a4 <memcpy>
      offset += length_stringsi;
 80023bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	4413      	add	r3, r2
 80023c2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	3301      	adds	r3, #1
 80023c8:	61bb      	str	r3, [r7, #24]
 80023ca:	e7d1      	b.n	8002370 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 80023cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80023ce:	4618      	mov	r0, r3
 80023d0:	3728      	adds	r7, #40	; 0x28
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}

080023d6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80023d6:	b580      	push	{r7, lr}
 80023d8:	b08e      	sub	sp, #56	; 0x38
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
 80023de:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80023e0:	2300      	movs	r3, #0
 80023e2:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80023e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023e6:	683a      	ldr	r2, [r7, #0]
 80023e8:	4413      	add	r3, r2
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80023ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023f0:	3301      	adds	r3, #1
 80023f2:	683a      	ldr	r2, [r7, #0]
 80023f4:	4413      	add	r3, r2
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	021b      	lsls	r3, r3, #8
 80023fa:	6a3a      	ldr	r2, [r7, #32]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002402:	3302      	adds	r3, #2
 8002404:	683a      	ldr	r2, [r7, #0]
 8002406:	4413      	add	r3, r2
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	041b      	lsls	r3, r3, #16
 800240c:	6a3a      	ldr	r2, [r7, #32]
 800240e:	4313      	orrs	r3, r2
 8002410:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002414:	3303      	adds	r3, #3
 8002416:	683a      	ldr	r2, [r7, #0]
 8002418:	4413      	add	r3, r2
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	061b      	lsls	r3, r3, #24
 800241e:	6a3a      	ldr	r2, [r7, #32]
 8002420:	4313      	orrs	r3, r2
 8002422:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8002424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002426:	3304      	adds	r3, #4
 8002428:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	6a3a      	ldr	r2, [r7, #32]
 8002430:	429a      	cmp	r2, r3
 8002432:	d90a      	bls.n	800244a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	68da      	ldr	r2, [r3, #12]
 8002438:	6a3b      	ldr	r3, [r7, #32]
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	4619      	mov	r1, r3
 800243e:	4610      	mov	r0, r2
 8002440:	f00f f8c6 	bl	80115d0 <realloc>
 8002444:	4602      	mov	r2, r0
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a3a      	ldr	r2, [r7, #32]
 800244e:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8002450:	2300      	movs	r3, #0
 8002452:	633b      	str	r3, [r7, #48]	; 0x30
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800245a:	429a      	cmp	r2, r3
 800245c:	d236      	bcs.n	80024cc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 800245e:	2300      	movs	r3, #0
 8002460:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002466:	6839      	ldr	r1, [r7, #0]
 8002468:	440a      	add	r2, r1
 800246a:	7812      	ldrb	r2, [r2, #0]
 800246c:	4313      	orrs	r3, r2
 800246e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002470:	697a      	ldr	r2, [r7, #20]
 8002472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002474:	3301      	adds	r3, #1
 8002476:	6839      	ldr	r1, [r7, #0]
 8002478:	440b      	add	r3, r1
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	021b      	lsls	r3, r3, #8
 800247e:	4313      	orrs	r3, r2
 8002480:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002482:	697a      	ldr	r2, [r7, #20]
 8002484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002486:	3302      	adds	r3, #2
 8002488:	6839      	ldr	r1, [r7, #0]
 800248a:	440b      	add	r3, r1
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	041b      	lsls	r3, r3, #16
 8002490:	4313      	orrs	r3, r2
 8002492:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002494:	697a      	ldr	r2, [r7, #20]
 8002496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002498:	3303      	adds	r3, #3
 800249a:	6839      	ldr	r1, [r7, #0]
 800249c:	440b      	add	r3, r1
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	061b      	lsls	r3, r3, #24
 80024a2:	4313      	orrs	r3, r2
 80024a4:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 80024a6:	697a      	ldr	r2, [r7, #20]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 80024ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024ae:	3304      	adds	r3, #4
 80024b0:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	68da      	ldr	r2, [r3, #12]
 80024b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	4413      	add	r3, r2
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	3208      	adds	r2, #8
 80024c0:	6812      	ldr	r2, [r2, #0]
 80024c2:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 80024c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c6:	3301      	adds	r3, #1
 80024c8:	633b      	str	r3, [r7, #48]	; 0x30
 80024ca:	e7c3      	b.n	8002454 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80024cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	4413      	add	r3, r2
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80024d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024d8:	3301      	adds	r3, #1
 80024da:	683a      	ldr	r2, [r7, #0]
 80024dc:	4413      	add	r3, r2
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	021b      	lsls	r3, r3, #8
 80024e2:	69fa      	ldr	r2, [r7, #28]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80024e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024ea:	3302      	adds	r3, #2
 80024ec:	683a      	ldr	r2, [r7, #0]
 80024ee:	4413      	add	r3, r2
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	041b      	lsls	r3, r3, #16
 80024f4:	69fa      	ldr	r2, [r7, #28]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80024fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024fc:	3303      	adds	r3, #3
 80024fe:	683a      	ldr	r2, [r7, #0]
 8002500:	4413      	add	r3, r2
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	061b      	lsls	r3, r3, #24
 8002506:	69fa      	ldr	r2, [r7, #28]
 8002508:	4313      	orrs	r3, r2
 800250a:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 800250c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800250e:	3304      	adds	r3, #4
 8002510:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	69fa      	ldr	r2, [r7, #28]
 8002518:	429a      	cmp	r2, r3
 800251a:	d90a      	bls.n	8002532 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	699a      	ldr	r2, [r3, #24]
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	4619      	mov	r1, r3
 8002526:	4610      	mov	r0, r2
 8002528:	f00f f852 	bl	80115d0 <realloc>
 800252c:	4602      	mov	r2, r0
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	69fa      	ldr	r2, [r7, #28]
 8002536:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8002538:	2300      	movs	r3, #0
 800253a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	691b      	ldr	r3, [r3, #16]
 8002540:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002542:	429a      	cmp	r2, r3
 8002544:	d236      	bcs.n	80025b4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8002546:	2300      	movs	r3, #0
 8002548:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800254e:	6839      	ldr	r1, [r7, #0]
 8002550:	440a      	add	r2, r1
 8002552:	7812      	ldrb	r2, [r2, #0]
 8002554:	4313      	orrs	r3, r2
 8002556:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002558:	693a      	ldr	r2, [r7, #16]
 800255a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800255c:	3301      	adds	r3, #1
 800255e:	6839      	ldr	r1, [r7, #0]
 8002560:	440b      	add	r3, r1
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	021b      	lsls	r3, r3, #8
 8002566:	4313      	orrs	r3, r2
 8002568:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800256e:	3302      	adds	r3, #2
 8002570:	6839      	ldr	r1, [r7, #0]
 8002572:	440b      	add	r3, r1
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	041b      	lsls	r3, r3, #16
 8002578:	4313      	orrs	r3, r2
 800257a:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800257c:	693a      	ldr	r2, [r7, #16]
 800257e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002580:	3303      	adds	r3, #3
 8002582:	6839      	ldr	r1, [r7, #0]
 8002584:	440b      	add	r3, r1
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	061b      	lsls	r3, r3, #24
 800258a:	4313      	orrs	r3, r2
 800258c:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 800258e:	693a      	ldr	r2, [r7, #16]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8002594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002596:	3304      	adds	r3, #4
 8002598:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	699a      	ldr	r2, [r3, #24]
 800259e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	4413      	add	r3, r2
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	3214      	adds	r2, #20
 80025a8:	6812      	ldr	r2, [r2, #0]
 80025aa:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 80025ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ae:	3301      	adds	r3, #1
 80025b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025b2:	e7c3      	b.n	800253c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80025b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025b6:	683a      	ldr	r2, [r7, #0]
 80025b8:	4413      	add	r3, r2
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80025be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025c0:	3301      	adds	r3, #1
 80025c2:	683a      	ldr	r2, [r7, #0]
 80025c4:	4413      	add	r3, r2
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	021b      	lsls	r3, r3, #8
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80025d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025d2:	3302      	adds	r3, #2
 80025d4:	683a      	ldr	r2, [r7, #0]
 80025d6:	4413      	add	r3, r2
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	041b      	lsls	r3, r3, #16
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	4313      	orrs	r3, r2
 80025e0:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80025e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025e4:	3303      	adds	r3, #3
 80025e6:	683a      	ldr	r2, [r7, #0]
 80025e8:	4413      	add	r3, r2
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	061b      	lsls	r3, r3, #24
 80025ee:	69ba      	ldr	r2, [r7, #24]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 80025f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025f6:	3304      	adds	r3, #4
 80025f8:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	69db      	ldr	r3, [r3, #28]
 80025fe:	69ba      	ldr	r2, [r7, #24]
 8002600:	429a      	cmp	r2, r3
 8002602:	d90a      	bls.n	800261a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	4619      	mov	r1, r3
 800260e:	4610      	mov	r0, r2
 8002610:	f00e ffde 	bl	80115d0 <realloc>
 8002614:	4602      	mov	r2, r0
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8002620:	2300      	movs	r3, #0
 8002622:	62bb      	str	r3, [r7, #40]	; 0x28
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	69db      	ldr	r3, [r3, #28]
 8002628:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800262a:	429a      	cmp	r2, r3
 800262c:	d23f      	bcs.n	80026ae <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 800262e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002630:	683a      	ldr	r2, [r7, #0]
 8002632:	441a      	add	r2, r3
 8002634:	f107 030c 	add.w	r3, r7, #12
 8002638:	4611      	mov	r1, r2
 800263a:	4618      	mov	r0, r3
 800263c:	f001 fcd4 	bl	8003fe8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002642:	3304      	adds	r3, #4
 8002644:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002648:	627b      	str	r3, [r7, #36]	; 0x24
 800264a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	4413      	add	r3, r2
 8002650:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002652:	429a      	cmp	r2, r3
 8002654:	d20c      	bcs.n	8002670 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8002656:	683a      	ldr	r2, [r7, #0]
 8002658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265a:	441a      	add	r2, r3
 800265c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265e:	3b01      	subs	r3, #1
 8002660:	6839      	ldr	r1, [r7, #0]
 8002662:	440b      	add	r3, r1
 8002664:	7812      	ldrb	r2, [r2, #0]
 8002666:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266a:	3301      	adds	r3, #1
 800266c:	627b      	str	r3, [r7, #36]	; 0x24
 800266e:	e7ec      	b.n	800264a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8002670:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	4413      	add	r3, r2
 8002676:	3b01      	subs	r3, #1
 8002678:	683a      	ldr	r2, [r7, #0]
 800267a:	4413      	add	r3, r2
 800267c:	2200      	movs	r2, #0
 800267e:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8002680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002682:	3b01      	subs	r3, #1
 8002684:	683a      	ldr	r2, [r7, #0]
 8002686:	441a      	add	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 800268c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	4413      	add	r3, r2
 8002692:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	4413      	add	r3, r2
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	3220      	adds	r2, #32
 80026a2:	6812      	ldr	r2, [r2, #0]
 80026a4:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 80026a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a8:	3301      	adds	r3, #1
 80026aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80026ac:	e7ba      	b.n	8002624 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 80026ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 80026b0:	4618      	mov	r0, r3
 80026b2:	3738      	adds	r7, #56	; 0x38
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	4b03      	ldr	r3, [pc, #12]	; (80026d0 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 80026c2:	4618      	mov	r0, r3
 80026c4:	370c      	adds	r7, #12
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	08011b04 	.word	0x08011b04

080026d4 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	4b03      	ldr	r3, [pc, #12]	; (80026ec <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 80026de:	4618      	mov	r0, r3
 80026e0:	370c      	adds	r7, #12
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	080119a0 	.word	0x080119a0

080026f0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 80026f0:	b480      	push	{r7}
 80026f2:	b085      	sub	sp, #20
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	60b9      	str	r1, [r7, #8]
 80026fa:	607a      	str	r2, [r7, #4]
 80026fc:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	68ba      	ldr	r2, [r7, #8]
 8002702:	601a      	str	r2, [r3, #0]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	605a      	str	r2, [r3, #4]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	683a      	ldr	r2, [r7, #0]
 800270e:	611a      	str	r2, [r3, #16]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	4618      	mov	r0, r3
 8002714:	3714      	adds	r7, #20
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr

0800271e <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 800271e:	b580      	push	{r7, lr}
 8002720:	b082      	sub	sp, #8
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
 8002726:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	68d8      	ldr	r0, [r3, #12]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	6891      	ldr	r1, [r2, #8]
 8002738:	683a      	ldr	r2, [r7, #0]
 800273a:	4798      	blx	r3
 800273c:	4603      	mov	r3, r0
  };
 800273e:	4618      	mov	r0, r3
 8002740:	3708      	adds	r7, #8
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}

08002746 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8002746:	b480      	push	{r7}
 8002748:	b083      	sub	sp, #12
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	691b      	ldr	r3, [r3, #16]
  }
 8002752:	4618      	mov	r0, r3
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
	...

08002760 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 2048;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a42      	ldr	r2, [pc, #264]	; (800287c <_ZN13STM32Hardware10getRdmaIndEv+0x11c>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d068      	beq.n	8002848 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a40      	ldr	r2, [pc, #256]	; (8002880 <_ZN13STM32Hardware10getRdmaIndEv+0x120>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d061      	beq.n	8002848 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a3d      	ldr	r2, [pc, #244]	; (8002884 <_ZN13STM32Hardware10getRdmaIndEv+0x124>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d05a      	beq.n	8002848 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a3b      	ldr	r2, [pc, #236]	; (8002888 <_ZN13STM32Hardware10getRdmaIndEv+0x128>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d053      	beq.n	8002848 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a38      	ldr	r2, [pc, #224]	; (800288c <_ZN13STM32Hardware10getRdmaIndEv+0x12c>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d04c      	beq.n	8002848 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a36      	ldr	r2, [pc, #216]	; (8002890 <_ZN13STM32Hardware10getRdmaIndEv+0x130>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d045      	beq.n	8002848 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a33      	ldr	r2, [pc, #204]	; (8002894 <_ZN13STM32Hardware10getRdmaIndEv+0x134>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d03e      	beq.n	8002848 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a31      	ldr	r2, [pc, #196]	; (8002898 <_ZN13STM32Hardware10getRdmaIndEv+0x138>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d037      	beq.n	8002848 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a2e      	ldr	r2, [pc, #184]	; (800289c <_ZN13STM32Hardware10getRdmaIndEv+0x13c>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d030      	beq.n	8002848 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a2c      	ldr	r2, [pc, #176]	; (80028a0 <_ZN13STM32Hardware10getRdmaIndEv+0x140>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d029      	beq.n	8002848 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a29      	ldr	r2, [pc, #164]	; (80028a4 <_ZN13STM32Hardware10getRdmaIndEv+0x144>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d022      	beq.n	8002848 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a27      	ldr	r2, [pc, #156]	; (80028a8 <_ZN13STM32Hardware10getRdmaIndEv+0x148>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d01b      	beq.n	8002848 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a24      	ldr	r2, [pc, #144]	; (80028ac <_ZN13STM32Hardware10getRdmaIndEv+0x14c>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d014      	beq.n	8002848 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a22      	ldr	r2, [pc, #136]	; (80028b0 <_ZN13STM32Hardware10getRdmaIndEv+0x150>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d00d      	beq.n	8002848 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a1f      	ldr	r2, [pc, #124]	; (80028b4 <_ZN13STM32Hardware10getRdmaIndEv+0x154>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d006      	beq.n	8002848 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a1d      	ldr	r2, [pc, #116]	; (80028b8 <_ZN13STM32Hardware10getRdmaIndEv+0x158>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d109      	bne.n	800285c <_ZN13STM32Hardware10getRdmaIndEv+0xfc>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002856:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800285a:	e008      	b.n	800286e <_ZN13STM32Hardware10getRdmaIndEv+0x10e>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 800286a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800286e:	4618      	mov	r0, r3
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	40020010 	.word	0x40020010
 8002880:	40020028 	.word	0x40020028
 8002884:	40020040 	.word	0x40020040
 8002888:	40020058 	.word	0x40020058
 800288c:	40020070 	.word	0x40020070
 8002890:	40020088 	.word	0x40020088
 8002894:	400200a0 	.word	0x400200a0
 8002898:	400200b8 	.word	0x400200b8
 800289c:	40020410 	.word	0x40020410
 80028a0:	40020428 	.word	0x40020428
 80028a4:	40020440 	.word	0x40020440
 80028a8:	40020458 	.word	0x40020458
 80028ac:	40020470 	.word	0x40020470
 80028b0:	40020488 	.word	0x40020488
 80028b4:	400204a0 	.word	0x400204a0
 80028b8:	400204b8 	.word	0x400204b8

080028bc <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 2048;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
      huart(&huart1), rind(0), twind(0), tfind(0){
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	4a0c      	ldr	r2, [pc, #48]	; (80028f8 <_ZN13STM32HardwareC1Ev+0x3c>)
 80028c8:	601a      	str	r2, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028d8:	461a      	mov	r2, r3
 80028da:	2300      	movs	r3, #0
 80028dc:	6093      	str	r3, [r2, #8]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028e4:	461a      	mov	r2, r3
 80028e6:	2300      	movs	r3, #0
 80028e8:	60d3      	str	r3, [r2, #12]
    }
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4618      	mov	r0, r3
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr
 80028f8:	240005c4 	.word	0x240005c4

080028fc <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f000 f804 	bl	8002912 <_ZN13STM32Hardware10reset_rbufEv>
    }
 800290a:	bf00      	nop
 800290c:	3708      	adds	r7, #8
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}

08002912 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8002912:	b580      	push	{r7, lr}
 8002914:	b082      	sub	sp, #8
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6818      	ldr	r0, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	3304      	adds	r3, #4
 8002922:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002926:	4619      	mov	r1, r3
 8002928:	f00c f838 	bl	800e99c <HAL_UART_Receive_DMA>
    }
 800292c:	bf00      	nop
 800292e:	3708      	adds	r7, #8
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <_ZN13STM32Hardware4readEv>:

    int read(){
 8002934:	b590      	push	{r4, r7, lr}
 8002936:	b085      	sub	sp, #20
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
      int c = -1;
 800293c:	f04f 33ff 	mov.w	r3, #4294967295
 8002940:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f7ff ff09 	bl	8002760 <_ZN13STM32Hardware10getRdmaIndEv>
 800294e:	4603      	mov	r3, r0
 8002950:	429c      	cmp	r4, r3
 8002952:	bf14      	ite	ne
 8002954:	2301      	movne	r3, #1
 8002956:	2300      	moveq	r3, #0
 8002958:	b2db      	uxtb	r3, r3
 800295a:	2b00      	cmp	r3, #0
 800295c:	d012      	beq.n	8002984 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8002964:	1c59      	adds	r1, r3, #1
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	f8c2 1804 	str.w	r1, [r2, #2052]	; 0x804
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	4413      	add	r3, r2
 8002970:	791b      	ldrb	r3, [r3, #4]
 8002972:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 800297a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
      }
      return c;
 8002984:	68fb      	ldr	r3, [r7, #12]
    }
 8002986:	4618      	mov	r0, r3
 8002988:	3714      	adds	r7, #20
 800298a:	46bd      	mov	sp, r7
 800298c:	bd90      	pop	{r4, r7, pc}
	...

08002990 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029a0:	2b20      	cmp	r3, #32
 80029a2:	d108      	bne.n	80029b6 <_ZN13STM32Hardware5flushEv+0x26>
 80029a4:	4b2c      	ldr	r3, [pc, #176]	; (8002a58 <_ZN13STM32Hardware5flushEv+0xc8>)
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	f083 0301 	eor.w	r3, r3, #1
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d001      	beq.n	80029b6 <_ZN13STM32Hardware5flushEv+0x26>
 80029b2:	2301      	movs	r3, #1
 80029b4:	e000      	b.n	80029b8 <_ZN13STM32Hardware5flushEv+0x28>
 80029b6:	2300      	movs	r3, #0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d049      	beq.n	8002a50 <_ZN13STM32Hardware5flushEv+0xc0>
        mutex = true;
 80029bc:	4b26      	ldr	r3, [pc, #152]	; (8002a58 <_ZN13STM32Hardware5flushEv+0xc8>)
 80029be:	2201      	movs	r2, #1
 80029c0:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029c8:	689a      	ldr	r2, [r3, #8]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d039      	beq.n	8002a4a <_ZN13STM32Hardware5flushEv+0xba>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029dc:	68da      	ldr	r2, [r3, #12]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d20c      	bcs.n	8002a04 <_ZN13STM32Hardware5flushEv+0x74>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	b29a      	uxth	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	e007      	b.n	8002a14 <_ZN13STM32Hardware5flushEv+0x84>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6818      	ldr	r0, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	f603 0308 	addw	r3, r3, #2056	; 0x808
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	4413      	add	r3, r2
 8002a2a:	89fa      	ldrh	r2, [r7, #14]
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	f00b ff23 	bl	800e878 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a38:	68da      	ldr	r2, [r3, #12]
 8002a3a:	89fb      	ldrh	r3, [r7, #14]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002a48:	60d3      	str	r3, [r2, #12]
        }
        mutex = false;
 8002a4a:	4b03      	ldr	r3, [pc, #12]	; (8002a58 <_ZN13STM32Hardware5flushEv+0xc8>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	701a      	strb	r2, [r3, #0]
      }
    }
 8002a50:	bf00      	nop
 8002a52:	3710      	adds	r7, #16
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	240007ac 	.word	0x240007ac

08002a5c <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b086      	sub	sp, #24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	607a      	str	r2, [r7, #4]
      int n = length;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a72:	bfa8      	it	ge
 8002a74:	f44f 6300 	movge.w	r3, #2048	; 0x800
 8002a78:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f5c3 6200 	rsb	r2, r3, #2048	; 0x800
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	bf28      	it	cs
 8002a8c:	4613      	movcs	r3, r2
 8002a8e:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f603 0308 	addw	r3, r3, #2056	; 0x808
 8002a9c:	68fa      	ldr	r2, [r7, #12]
 8002a9e:	4413      	add	r3, r2
 8002aa0:	693a      	ldr	r2, [r7, #16]
 8002aa2:	68b9      	ldr	r1, [r7, #8]
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f00e fd7d 	bl	80115a4 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ab0:	689a      	ldr	r2, [r3, #8]
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	4413      	add	r3, r2
 8002ab6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002ac0:	6093      	str	r3, [r2, #8]

      if(n != n_tail){
 8002ac2:	697a      	ldr	r2, [r7, #20]
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d00b      	beq.n	8002ae2 <_ZN13STM32Hardware5writeEPhi+0x86>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f603 0008 	addw	r0, r3, #2056	; 0x808
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	68ba      	ldr	r2, [r7, #8]
 8002ad4:	18d1      	adds	r1, r2, r3
 8002ad6:	697a      	ldr	r2, [r7, #20]
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	461a      	mov	r2, r3
 8002ade:	f00e fd61 	bl	80115a4 <memcpy>
      }

      flush();
 8002ae2:	68f8      	ldr	r0, [r7, #12]
 8002ae4:	f7ff ff54 	bl	8002990 <_ZN13STM32Hardware5flushEv>
    }
 8002ae8:	bf00      	nop
 8002aea:	3718      	adds	r7, #24
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	f004 f9ac 	bl	8006e54 <HAL_GetTick>
 8002afc:	4603      	mov	r3, r0
 8002afe:	4618      	mov	r0, r3
 8002b00:	3708      	adds	r7, #8
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
	...

08002b08 <_ZN13geometry_msgs5PointC1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Point():
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7fe ffb6 	bl	8001a84 <_ZN3ros3MsgC1Ev>
 8002b18:	4a0e      	ldr	r2, [pc, #56]	; (8002b54 <_ZN13geometry_msgs5PointC1Ev+0x4c>)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	601a      	str	r2, [r3, #0]
 8002b1e:	6879      	ldr	r1, [r7, #4]
 8002b20:	f04f 0200 	mov.w	r2, #0
 8002b24:	f04f 0300 	mov.w	r3, #0
 8002b28:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8002b2c:	6879      	ldr	r1, [r7, #4]
 8002b2e:	f04f 0200 	mov.w	r2, #0
 8002b32:	f04f 0300 	mov.w	r3, #0
 8002b36:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8002b3a:	6879      	ldr	r1, [r7, #4]
 8002b3c:	f04f 0200 	mov.w	r2, #0
 8002b40:	f04f 0300 	mov.w	r3, #0
 8002b44:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3708      	adds	r7, #8
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	08011b84 	.word	0x08011b84

08002b58 <_ZNK13geometry_msgs5Point9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002b58:	b480      	push	{r7}
 8002b5a:	b08b      	sub	sp, #44	; 0x2c
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002b62:	2300      	movs	r3, #0
 8002b64:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002b6c:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8002b70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b76:	6838      	ldr	r0, [r7, #0]
 8002b78:	4401      	add	r1, r0
 8002b7a:	b2d3      	uxtb	r3, r2
 8002b7c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8002b7e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002b82:	f04f 0200 	mov.w	r2, #0
 8002b86:	f04f 0300 	mov.w	r3, #0
 8002b8a:	0a02      	lsrs	r2, r0, #8
 8002b8c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002b90:	0a0b      	lsrs	r3, r1, #8
 8002b92:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b94:	3101      	adds	r1, #1
 8002b96:	6838      	ldr	r0, [r7, #0]
 8002b98:	4401      	add	r1, r0
 8002b9a:	b2d3      	uxtb	r3, r2
 8002b9c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8002b9e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002ba2:	f04f 0200 	mov.w	r2, #0
 8002ba6:	f04f 0300 	mov.w	r3, #0
 8002baa:	0c02      	lsrs	r2, r0, #16
 8002bac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002bb0:	0c0b      	lsrs	r3, r1, #16
 8002bb2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bb4:	3102      	adds	r1, #2
 8002bb6:	6838      	ldr	r0, [r7, #0]
 8002bb8:	4401      	add	r1, r0
 8002bba:	b2d3      	uxtb	r3, r2
 8002bbc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8002bbe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002bc2:	f04f 0200 	mov.w	r2, #0
 8002bc6:	f04f 0300 	mov.w	r3, #0
 8002bca:	0e02      	lsrs	r2, r0, #24
 8002bcc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002bd0:	0e0b      	lsrs	r3, r1, #24
 8002bd2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bd4:	3103      	adds	r1, #3
 8002bd6:	6838      	ldr	r0, [r7, #0]
 8002bd8:	4401      	add	r1, r0
 8002bda:	b2d3      	uxtb	r3, r2
 8002bdc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8002bde:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002be2:	f04f 0200 	mov.w	r2, #0
 8002be6:	f04f 0300 	mov.w	r3, #0
 8002bea:	000a      	movs	r2, r1
 8002bec:	2300      	movs	r3, #0
 8002bee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bf0:	3104      	adds	r1, #4
 8002bf2:	6838      	ldr	r0, [r7, #0]
 8002bf4:	4401      	add	r1, r0
 8002bf6:	b2d3      	uxtb	r3, r2
 8002bf8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8002bfa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002bfe:	f04f 0200 	mov.w	r2, #0
 8002c02:	f04f 0300 	mov.w	r3, #0
 8002c06:	0a0a      	lsrs	r2, r1, #8
 8002c08:	2300      	movs	r3, #0
 8002c0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c0c:	3105      	adds	r1, #5
 8002c0e:	6838      	ldr	r0, [r7, #0]
 8002c10:	4401      	add	r1, r0
 8002c12:	b2d3      	uxtb	r3, r2
 8002c14:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8002c16:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002c1a:	f04f 0200 	mov.w	r2, #0
 8002c1e:	f04f 0300 	mov.w	r3, #0
 8002c22:	0c0a      	lsrs	r2, r1, #16
 8002c24:	2300      	movs	r3, #0
 8002c26:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c28:	3106      	adds	r1, #6
 8002c2a:	6838      	ldr	r0, [r7, #0]
 8002c2c:	4401      	add	r1, r0
 8002c2e:	b2d3      	uxtb	r3, r2
 8002c30:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8002c32:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002c36:	f04f 0200 	mov.w	r2, #0
 8002c3a:	f04f 0300 	mov.w	r3, #0
 8002c3e:	0e0a      	lsrs	r2, r1, #24
 8002c40:	2300      	movs	r3, #0
 8002c42:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c44:	3107      	adds	r1, #7
 8002c46:	6838      	ldr	r0, [r7, #0]
 8002c48:	4401      	add	r1, r0
 8002c4a:	b2d3      	uxtb	r3, r2
 8002c4c:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 8002c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c50:	3308      	adds	r3, #8
 8002c52:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002c5a:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8002c5e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002c62:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c64:	6838      	ldr	r0, [r7, #0]
 8002c66:	4401      	add	r1, r0
 8002c68:	b2d3      	uxtb	r3, r2
 8002c6a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8002c6c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002c70:	f04f 0200 	mov.w	r2, #0
 8002c74:	f04f 0300 	mov.w	r3, #0
 8002c78:	0a02      	lsrs	r2, r0, #8
 8002c7a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002c7e:	0a0b      	lsrs	r3, r1, #8
 8002c80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c82:	3101      	adds	r1, #1
 8002c84:	6838      	ldr	r0, [r7, #0]
 8002c86:	4401      	add	r1, r0
 8002c88:	b2d3      	uxtb	r3, r2
 8002c8a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8002c8c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002c90:	f04f 0200 	mov.w	r2, #0
 8002c94:	f04f 0300 	mov.w	r3, #0
 8002c98:	0c02      	lsrs	r2, r0, #16
 8002c9a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002c9e:	0c0b      	lsrs	r3, r1, #16
 8002ca0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ca2:	3102      	adds	r1, #2
 8002ca4:	6838      	ldr	r0, [r7, #0]
 8002ca6:	4401      	add	r1, r0
 8002ca8:	b2d3      	uxtb	r3, r2
 8002caa:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8002cac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002cb0:	f04f 0200 	mov.w	r2, #0
 8002cb4:	f04f 0300 	mov.w	r3, #0
 8002cb8:	0e02      	lsrs	r2, r0, #24
 8002cba:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002cbe:	0e0b      	lsrs	r3, r1, #24
 8002cc0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cc2:	3103      	adds	r1, #3
 8002cc4:	6838      	ldr	r0, [r7, #0]
 8002cc6:	4401      	add	r1, r0
 8002cc8:	b2d3      	uxtb	r3, r2
 8002cca:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8002ccc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002cd0:	f04f 0200 	mov.w	r2, #0
 8002cd4:	f04f 0300 	mov.w	r3, #0
 8002cd8:	000a      	movs	r2, r1
 8002cda:	2300      	movs	r3, #0
 8002cdc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cde:	3104      	adds	r1, #4
 8002ce0:	6838      	ldr	r0, [r7, #0]
 8002ce2:	4401      	add	r1, r0
 8002ce4:	b2d3      	uxtb	r3, r2
 8002ce6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8002ce8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002cec:	f04f 0200 	mov.w	r2, #0
 8002cf0:	f04f 0300 	mov.w	r3, #0
 8002cf4:	0a0a      	lsrs	r2, r1, #8
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cfa:	3105      	adds	r1, #5
 8002cfc:	6838      	ldr	r0, [r7, #0]
 8002cfe:	4401      	add	r1, r0
 8002d00:	b2d3      	uxtb	r3, r2
 8002d02:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8002d04:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002d08:	f04f 0200 	mov.w	r2, #0
 8002d0c:	f04f 0300 	mov.w	r3, #0
 8002d10:	0c0a      	lsrs	r2, r1, #16
 8002d12:	2300      	movs	r3, #0
 8002d14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d16:	3106      	adds	r1, #6
 8002d18:	6838      	ldr	r0, [r7, #0]
 8002d1a:	4401      	add	r1, r0
 8002d1c:	b2d3      	uxtb	r3, r2
 8002d1e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8002d20:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002d24:	f04f 0200 	mov.w	r2, #0
 8002d28:	f04f 0300 	mov.w	r3, #0
 8002d2c:	0e0a      	lsrs	r2, r1, #24
 8002d2e:	2300      	movs	r3, #0
 8002d30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d32:	3107      	adds	r1, #7
 8002d34:	6838      	ldr	r0, [r7, #0]
 8002d36:	4401      	add	r1, r0
 8002d38:	b2d3      	uxtb	r3, r2
 8002d3a:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8002d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3e:	3308      	adds	r3, #8
 8002d40:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002d48:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8002d4c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d52:	6838      	ldr	r0, [r7, #0]
 8002d54:	4401      	add	r1, r0
 8002d56:	b2d3      	uxtb	r3, r2
 8002d58:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8002d5a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002d5e:	f04f 0200 	mov.w	r2, #0
 8002d62:	f04f 0300 	mov.w	r3, #0
 8002d66:	0a02      	lsrs	r2, r0, #8
 8002d68:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002d6c:	0a0b      	lsrs	r3, r1, #8
 8002d6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d70:	3101      	adds	r1, #1
 8002d72:	6838      	ldr	r0, [r7, #0]
 8002d74:	4401      	add	r1, r0
 8002d76:	b2d3      	uxtb	r3, r2
 8002d78:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8002d7a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002d7e:	f04f 0200 	mov.w	r2, #0
 8002d82:	f04f 0300 	mov.w	r3, #0
 8002d86:	0c02      	lsrs	r2, r0, #16
 8002d88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002d8c:	0c0b      	lsrs	r3, r1, #16
 8002d8e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d90:	3102      	adds	r1, #2
 8002d92:	6838      	ldr	r0, [r7, #0]
 8002d94:	4401      	add	r1, r0
 8002d96:	b2d3      	uxtb	r3, r2
 8002d98:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8002d9a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002d9e:	f04f 0200 	mov.w	r2, #0
 8002da2:	f04f 0300 	mov.w	r3, #0
 8002da6:	0e02      	lsrs	r2, r0, #24
 8002da8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002dac:	0e0b      	lsrs	r3, r1, #24
 8002dae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002db0:	3103      	adds	r1, #3
 8002db2:	6838      	ldr	r0, [r7, #0]
 8002db4:	4401      	add	r1, r0
 8002db6:	b2d3      	uxtb	r3, r2
 8002db8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8002dba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002dbe:	f04f 0200 	mov.w	r2, #0
 8002dc2:	f04f 0300 	mov.w	r3, #0
 8002dc6:	000a      	movs	r2, r1
 8002dc8:	2300      	movs	r3, #0
 8002dca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002dcc:	3104      	adds	r1, #4
 8002dce:	6838      	ldr	r0, [r7, #0]
 8002dd0:	4401      	add	r1, r0
 8002dd2:	b2d3      	uxtb	r3, r2
 8002dd4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8002dd6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002dda:	f04f 0200 	mov.w	r2, #0
 8002dde:	f04f 0300 	mov.w	r3, #0
 8002de2:	0a0a      	lsrs	r2, r1, #8
 8002de4:	2300      	movs	r3, #0
 8002de6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002de8:	3105      	adds	r1, #5
 8002dea:	6838      	ldr	r0, [r7, #0]
 8002dec:	4401      	add	r1, r0
 8002dee:	b2d3      	uxtb	r3, r2
 8002df0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8002df2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002df6:	f04f 0200 	mov.w	r2, #0
 8002dfa:	f04f 0300 	mov.w	r3, #0
 8002dfe:	0c0a      	lsrs	r2, r1, #16
 8002e00:	2300      	movs	r3, #0
 8002e02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e04:	3106      	adds	r1, #6
 8002e06:	6838      	ldr	r0, [r7, #0]
 8002e08:	4401      	add	r1, r0
 8002e0a:	b2d3      	uxtb	r3, r2
 8002e0c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8002e0e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002e12:	f04f 0200 	mov.w	r2, #0
 8002e16:	f04f 0300 	mov.w	r3, #0
 8002e1a:	0e0a      	lsrs	r2, r1, #24
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e20:	3107      	adds	r1, #7
 8002e22:	6838      	ldr	r0, [r7, #0]
 8002e24:	4401      	add	r1, r0
 8002e26:	b2d3      	uxtb	r3, r2
 8002e28:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 8002e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2c:	3308      	adds	r3, #8
 8002e2e:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 8002e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002e32:	4618      	mov	r0, r3
 8002e34:	372c      	adds	r7, #44	; 0x2c
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr

08002e3e <_ZN13geometry_msgs5Point11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002e3e:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002e42:	b0eb      	sub	sp, #428	; 0x1ac
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 8002e4a:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8002e54:	f04f 0200 	mov.w	r2, #0
 8002e58:	f04f 0300 	mov.w	r3, #0
 8002e5c:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002e60:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002e64:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002e68:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002e6c:	4413      	add	r3, r2
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	2200      	movs	r2, #0
 8002e74:	461c      	mov	r4, r3
 8002e76:	4615      	mov	r5, r2
 8002e78:	ea40 0804 	orr.w	r8, r0, r4
 8002e7c:	ea41 0905 	orr.w	r9, r1, r5
 8002e80:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002e84:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002e88:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002e8c:	1c5a      	adds	r2, r3, #1
 8002e8e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002e92:	4413      	add	r3, r2
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	2200      	movs	r2, #0
 8002e9a:	469a      	mov	sl, r3
 8002e9c:	4693      	mov	fp, r2
 8002e9e:	f04f 0200 	mov.w	r2, #0
 8002ea2:	f04f 0300 	mov.w	r3, #0
 8002ea6:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8002eaa:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8002eae:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8002eb2:	ea40 0402 	orr.w	r4, r0, r2
 8002eb6:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 8002eba:	430b      	orrs	r3, r1
 8002ebc:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002ec0:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8002ec4:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002ec8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002ecc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002ed0:	1c9a      	adds	r2, r3, #2
 8002ed2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002ed6:	4413      	add	r3, r2
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	2200      	movs	r2, #0
 8002ede:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8002ee2:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8002ee6:	f04f 0200 	mov.w	r2, #0
 8002eea:	f04f 0300 	mov.w	r3, #0
 8002eee:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 8002ef2:	464c      	mov	r4, r9
 8002ef4:	0423      	lsls	r3, r4, #16
 8002ef6:	4644      	mov	r4, r8
 8002ef8:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002efc:	4644      	mov	r4, r8
 8002efe:	0422      	lsls	r2, r4, #16
 8002f00:	ea40 0402 	orr.w	r4, r0, r2
 8002f04:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 8002f08:	430b      	orrs	r3, r1
 8002f0a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8002f0e:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 8002f12:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002f16:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002f1a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002f1e:	1cda      	adds	r2, r3, #3
 8002f20:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002f24:	4413      	add	r3, r2
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8002f30:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8002f34:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8002f38:	4623      	mov	r3, r4
 8002f3a:	0a1b      	lsrs	r3, r3, #8
 8002f3c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8002f40:	4623      	mov	r3, r4
 8002f42:	061b      	lsls	r3, r3, #24
 8002f44:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002f48:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 8002f4c:	4623      	mov	r3, r4
 8002f4e:	4303      	orrs	r3, r0
 8002f50:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002f54:	462b      	mov	r3, r5
 8002f56:	430b      	orrs	r3, r1
 8002f58:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002f5c:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 8002f60:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002f64:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002f68:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002f6c:	1d1a      	adds	r2, r3, #4
 8002f6e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002f72:	4413      	add	r3, r2
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8002f7e:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002f82:	f04f 0200 	mov.w	r2, #0
 8002f86:	f04f 0300 	mov.w	r3, #0
 8002f8a:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 8002f8e:	0023      	movs	r3, r4
 8002f90:	2200      	movs	r2, #0
 8002f92:	ea40 0402 	orr.w	r4, r0, r2
 8002f96:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8002f9a:	430b      	orrs	r3, r1
 8002f9c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8002fa0:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8002fa4:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002fa8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002fac:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002fb0:	1d5a      	adds	r2, r3, #5
 8002fb2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002fb6:	4413      	add	r3, r2
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8002fc2:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8002fc6:	f04f 0200 	mov.w	r2, #0
 8002fca:	f04f 0300 	mov.w	r3, #0
 8002fce:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 8002fd2:	0223      	lsls	r3, r4, #8
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	ea40 0402 	orr.w	r4, r0, r2
 8002fda:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 8002fde:	430b      	orrs	r3, r1
 8002fe0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8002fe4:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8002fe8:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002fec:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002ff0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002ff4:	1d9a      	adds	r2, r3, #6
 8002ff6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002ffa:	4413      	add	r3, r2
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	2200      	movs	r2, #0
 8003002:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003006:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 800300a:	f04f 0200 	mov.w	r2, #0
 800300e:	f04f 0300 	mov.w	r3, #0
 8003012:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 8003016:	0423      	lsls	r3, r4, #16
 8003018:	2200      	movs	r2, #0
 800301a:	ea40 0402 	orr.w	r4, r0, r2
 800301e:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 8003022:	430b      	orrs	r3, r1
 8003024:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003028:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 800302c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003030:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003034:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003038:	1dda      	adds	r2, r3, #7
 800303a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800303e:	4413      	add	r3, r2
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	b2db      	uxtb	r3, r3
 8003044:	2200      	movs	r2, #0
 8003046:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800304a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800304e:	f04f 0200 	mov.w	r2, #0
 8003052:	f04f 0300 	mov.w	r3, #0
 8003056:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 800305a:	0623      	lsls	r3, r4, #24
 800305c:	2200      	movs	r2, #0
 800305e:	ea40 0402 	orr.w	r4, r0, r2
 8003062:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 8003066:	430b      	orrs	r3, r1
 8003068:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800306c:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8003070:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 8003074:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003078:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800307c:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8003080:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003084:	3308      	adds	r3, #8
 8003086:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 800308a:	f04f 0200 	mov.w	r2, #0
 800308e:	f04f 0300 	mov.w	r3, #0
 8003092:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003096:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800309a:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 800309e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80030a2:	4413      	add	r3, r2
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	2200      	movs	r2, #0
 80030aa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80030ae:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 80030b2:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 80030b6:	4623      	mov	r3, r4
 80030b8:	4303      	orrs	r3, r0
 80030ba:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80030be:	462b      	mov	r3, r5
 80030c0:	430b      	orrs	r3, r1
 80030c2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80030c6:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 80030ca:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80030ce:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80030d2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80030d6:	1c5a      	adds	r2, r3, #1
 80030d8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80030dc:	4413      	add	r3, r2
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	2200      	movs	r2, #0
 80030e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80030e8:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 80030ec:	f04f 0200 	mov.w	r2, #0
 80030f0:	f04f 0300 	mov.w	r3, #0
 80030f4:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 80030f8:	464c      	mov	r4, r9
 80030fa:	0223      	lsls	r3, r4, #8
 80030fc:	4644      	mov	r4, r8
 80030fe:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003102:	4644      	mov	r4, r8
 8003104:	0222      	lsls	r2, r4, #8
 8003106:	ea40 0402 	orr.w	r4, r0, r2
 800310a:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 800310e:	430b      	orrs	r3, r1
 8003110:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003114:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8003118:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800311c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003120:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003124:	1c9a      	adds	r2, r3, #2
 8003126:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800312a:	4413      	add	r3, r2
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	b2db      	uxtb	r3, r3
 8003130:	2200      	movs	r2, #0
 8003132:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003136:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800313a:	f04f 0200 	mov.w	r2, #0
 800313e:	f04f 0300 	mov.w	r3, #0
 8003142:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8003146:	464c      	mov	r4, r9
 8003148:	0423      	lsls	r3, r4, #16
 800314a:	4644      	mov	r4, r8
 800314c:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003150:	4644      	mov	r4, r8
 8003152:	0422      	lsls	r2, r4, #16
 8003154:	ea40 0402 	orr.w	r4, r0, r2
 8003158:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 800315c:	430b      	orrs	r3, r1
 800315e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003162:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8003166:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800316a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800316e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003172:	1cda      	adds	r2, r3, #3
 8003174:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003178:	4413      	add	r3, r2
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2200      	movs	r2, #0
 8003180:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003184:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003188:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800318c:	4623      	mov	r3, r4
 800318e:	0a1b      	lsrs	r3, r3, #8
 8003190:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003194:	4623      	mov	r3, r4
 8003196:	061b      	lsls	r3, r3, #24
 8003198:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800319c:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80031a0:	4623      	mov	r3, r4
 80031a2:	4303      	orrs	r3, r0
 80031a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80031a8:	462b      	mov	r3, r5
 80031aa:	430b      	orrs	r3, r1
 80031ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80031b0:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 80031b4:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80031b8:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80031bc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80031c0:	1d1a      	adds	r2, r3, #4
 80031c2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80031c6:	4413      	add	r3, r2
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	2200      	movs	r2, #0
 80031ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80031d2:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80031d6:	f04f 0200 	mov.w	r2, #0
 80031da:	f04f 0300 	mov.w	r3, #0
 80031de:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 80031e2:	0023      	movs	r3, r4
 80031e4:	2200      	movs	r2, #0
 80031e6:	ea40 0402 	orr.w	r4, r0, r2
 80031ea:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 80031ee:	430b      	orrs	r3, r1
 80031f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80031f4:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 80031f8:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80031fc:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003200:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003204:	1d5a      	adds	r2, r3, #5
 8003206:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800320a:	4413      	add	r3, r2
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	b2db      	uxtb	r3, r3
 8003210:	2200      	movs	r2, #0
 8003212:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003216:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800321a:	f04f 0200 	mov.w	r2, #0
 800321e:	f04f 0300 	mov.w	r3, #0
 8003222:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8003226:	0223      	lsls	r3, r4, #8
 8003228:	2200      	movs	r2, #0
 800322a:	ea40 0402 	orr.w	r4, r0, r2
 800322e:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8003232:	430b      	orrs	r3, r1
 8003234:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003238:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 800323c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003240:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003244:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003248:	1d9a      	adds	r2, r3, #6
 800324a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800324e:	4413      	add	r3, r2
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	b2db      	uxtb	r3, r3
 8003254:	2200      	movs	r2, #0
 8003256:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800325a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800325e:	f04f 0200 	mov.w	r2, #0
 8003262:	f04f 0300 	mov.w	r3, #0
 8003266:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 800326a:	0423      	lsls	r3, r4, #16
 800326c:	2200      	movs	r2, #0
 800326e:	ea40 0402 	orr.w	r4, r0, r2
 8003272:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8003276:	430b      	orrs	r3, r1
 8003278:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800327c:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8003280:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003284:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003288:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800328c:	1dda      	adds	r2, r3, #7
 800328e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003292:	4413      	add	r3, r2
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	b2db      	uxtb	r3, r3
 8003298:	2200      	movs	r2, #0
 800329a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800329e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80032a2:	f04f 0200 	mov.w	r2, #0
 80032a6:	f04f 0300 	mov.w	r3, #0
 80032aa:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 80032ae:	0623      	lsls	r3, r4, #24
 80032b0:	2200      	movs	r2, #0
 80032b2:	ea40 0402 	orr.w	r4, r0, r2
 80032b6:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 80032ba:	430b      	orrs	r3, r1
 80032bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80032c0:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 80032c4:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 80032c8:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80032cc:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80032d0:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 80032d4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80032d8:	3308      	adds	r3, #8
 80032da:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 80032de:	f04f 0200 	mov.w	r2, #0
 80032e2:	f04f 0300 	mov.w	r3, #0
 80032e6:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80032ea:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80032ee:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80032f2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80032f6:	4413      	add	r3, r2
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	2200      	movs	r2, #0
 80032fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003302:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003306:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800330a:	4623      	mov	r3, r4
 800330c:	4303      	orrs	r3, r0
 800330e:	67bb      	str	r3, [r7, #120]	; 0x78
 8003310:	462b      	mov	r3, r5
 8003312:	430b      	orrs	r3, r1
 8003314:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003316:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800331a:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800331e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003322:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003326:	1c5a      	adds	r2, r3, #1
 8003328:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800332c:	4413      	add	r3, r2
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2200      	movs	r2, #0
 8003334:	673b      	str	r3, [r7, #112]	; 0x70
 8003336:	677a      	str	r2, [r7, #116]	; 0x74
 8003338:	f04f 0200 	mov.w	r2, #0
 800333c:	f04f 0300 	mov.w	r3, #0
 8003340:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003344:	464c      	mov	r4, r9
 8003346:	0223      	lsls	r3, r4, #8
 8003348:	4644      	mov	r4, r8
 800334a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800334e:	4644      	mov	r4, r8
 8003350:	0222      	lsls	r2, r4, #8
 8003352:	ea40 0402 	orr.w	r4, r0, r2
 8003356:	66bc      	str	r4, [r7, #104]	; 0x68
 8003358:	430b      	orrs	r3, r1
 800335a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800335c:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8003360:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003364:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003368:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800336c:	1c9a      	adds	r2, r3, #2
 800336e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003372:	4413      	add	r3, r2
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	b2db      	uxtb	r3, r3
 8003378:	2200      	movs	r2, #0
 800337a:	663b      	str	r3, [r7, #96]	; 0x60
 800337c:	667a      	str	r2, [r7, #100]	; 0x64
 800337e:	f04f 0200 	mov.w	r2, #0
 8003382:	f04f 0300 	mov.w	r3, #0
 8003386:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800338a:	464c      	mov	r4, r9
 800338c:	0423      	lsls	r3, r4, #16
 800338e:	4644      	mov	r4, r8
 8003390:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003394:	4644      	mov	r4, r8
 8003396:	0422      	lsls	r2, r4, #16
 8003398:	ea40 0402 	orr.w	r4, r0, r2
 800339c:	65bc      	str	r4, [r7, #88]	; 0x58
 800339e:	430b      	orrs	r3, r1
 80033a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80033a2:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 80033a6:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80033aa:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80033ae:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80033b2:	1cda      	adds	r2, r3, #3
 80033b4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80033b8:	4413      	add	r3, r2
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	2200      	movs	r2, #0
 80033c0:	653b      	str	r3, [r7, #80]	; 0x50
 80033c2:	657a      	str	r2, [r7, #84]	; 0x54
 80033c4:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80033c8:	4623      	mov	r3, r4
 80033ca:	0a1b      	lsrs	r3, r3, #8
 80033cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033ce:	4623      	mov	r3, r4
 80033d0:	061b      	lsls	r3, r3, #24
 80033d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80033d4:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80033d8:	4623      	mov	r3, r4
 80033da:	4303      	orrs	r3, r0
 80033dc:	643b      	str	r3, [r7, #64]	; 0x40
 80033de:	462b      	mov	r3, r5
 80033e0:	430b      	orrs	r3, r1
 80033e2:	647b      	str	r3, [r7, #68]	; 0x44
 80033e4:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80033e8:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80033ec:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80033f0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80033f4:	1d1a      	adds	r2, r3, #4
 80033f6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80033fa:	4413      	add	r3, r2
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	2200      	movs	r2, #0
 8003402:	63bb      	str	r3, [r7, #56]	; 0x38
 8003404:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003406:	f04f 0200 	mov.w	r2, #0
 800340a:	f04f 0300 	mov.w	r3, #0
 800340e:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8003410:	0023      	movs	r3, r4
 8003412:	2200      	movs	r2, #0
 8003414:	ea40 0402 	orr.w	r4, r0, r2
 8003418:	633c      	str	r4, [r7, #48]	; 0x30
 800341a:	430b      	orrs	r3, r1
 800341c:	637b      	str	r3, [r7, #52]	; 0x34
 800341e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8003422:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003426:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800342a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800342e:	1d5a      	adds	r2, r3, #5
 8003430:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003434:	4413      	add	r3, r2
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	b2db      	uxtb	r3, r3
 800343a:	2200      	movs	r2, #0
 800343c:	62bb      	str	r3, [r7, #40]	; 0x28
 800343e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003440:	f04f 0200 	mov.w	r2, #0
 8003444:	f04f 0300 	mov.w	r3, #0
 8003448:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800344a:	0223      	lsls	r3, r4, #8
 800344c:	2200      	movs	r2, #0
 800344e:	ea40 0402 	orr.w	r4, r0, r2
 8003452:	623c      	str	r4, [r7, #32]
 8003454:	430b      	orrs	r3, r1
 8003456:	627b      	str	r3, [r7, #36]	; 0x24
 8003458:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800345c:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003460:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003464:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003468:	3306      	adds	r3, #6
 800346a:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 800346e:	4413      	add	r3, r2
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	b2db      	uxtb	r3, r3
 8003474:	2200      	movs	r2, #0
 8003476:	61bb      	str	r3, [r7, #24]
 8003478:	61fa      	str	r2, [r7, #28]
 800347a:	f04f 0200 	mov.w	r2, #0
 800347e:	f04f 0300 	mov.w	r3, #0
 8003482:	69bc      	ldr	r4, [r7, #24]
 8003484:	0423      	lsls	r3, r4, #16
 8003486:	2200      	movs	r2, #0
 8003488:	ea40 0402 	orr.w	r4, r0, r2
 800348c:	613c      	str	r4, [r7, #16]
 800348e:	430b      	orrs	r3, r1
 8003490:	617b      	str	r3, [r7, #20]
 8003492:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003496:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800349a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800349e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80034a2:	3307      	adds	r3, #7
 80034a4:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 80034a8:	4413      	add	r3, r2
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	2200      	movs	r2, #0
 80034b0:	60bb      	str	r3, [r7, #8]
 80034b2:	60fa      	str	r2, [r7, #12]
 80034b4:	f04f 0200 	mov.w	r2, #0
 80034b8:	f04f 0300 	mov.w	r3, #0
 80034bc:	68bc      	ldr	r4, [r7, #8]
 80034be:	0623      	lsls	r3, r4, #24
 80034c0:	2200      	movs	r2, #0
 80034c2:	ea40 0402 	orr.w	r4, r0, r2
 80034c6:	603c      	str	r4, [r7, #0]
 80034c8:	430b      	orrs	r3, r1
 80034ca:	607b      	str	r3, [r7, #4]
 80034cc:	e9d7 3400 	ldrd	r3, r4, [r7]
 80034d0:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 80034d4:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 80034d8:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 80034dc:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 80034e0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80034e4:	3308      	adds	r3, #8
 80034e6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 80034ea:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 80034ee:	4618      	mov	r0, r3
 80034f0:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 80034f4:	46bd      	mov	sp, r7
 80034f6:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80034fa:	4770      	bx	lr

080034fc <_ZN13geometry_msgs5Point7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Point"; };
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	4b03      	ldr	r3, [pc, #12]	; (8003514 <_ZN13geometry_msgs5Point7getTypeEv+0x18>)
 8003506:	4618      	mov	r0, r3
 8003508:	370c      	adds	r7, #12
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
 8003512:	bf00      	nop
 8003514:	080119c4 	.word	0x080119c4

08003518 <_ZN13geometry_msgs5Point6getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	4b03      	ldr	r3, [pc, #12]	; (8003530 <_ZN13geometry_msgs5Point6getMD5Ev+0x18>)
 8003522:	4618      	mov	r0, r3
 8003524:	370c      	adds	r7, #12
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	080119d8 	.word	0x080119d8

08003534 <_ZN8std_msgs5Int64C1Ev>:
  {
    public:
      typedef int64_t _data_type;
      _data_type data;

    Int64():
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
      data(0)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4618      	mov	r0, r3
 8003540:	f7fe faa0 	bl	8001a84 <_ZN3ros3MsgC1Ev>
 8003544:	4a07      	ldr	r2, [pc, #28]	; (8003564 <_ZN8std_msgs5Int64C1Ev+0x30>)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	601a      	str	r2, [r3, #0]
 800354a:	6879      	ldr	r1, [r7, #4]
 800354c:	f04f 0200 	mov.w	r2, #0
 8003550:	f04f 0300 	mov.w	r3, #0
 8003554:	e9c1 2302 	strd	r2, r3, [r1, #8]
    {
    }
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4618      	mov	r0, r3
 800355c:	3708      	adds	r7, #8
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	08011b6c 	.word	0x08011b6c

08003568 <_ZNK8std_msgs5Int649serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003568:	b480      	push	{r7}
 800356a:	b087      	sub	sp, #28
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003572:	2300      	movs	r3, #0
 8003574:	617b      	str	r3, [r7, #20]
      union {
        int64_t real;
        uint64_t base;
      } u_data;
      u_data.real = this->data;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800357c:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8003580:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003584:	6979      	ldr	r1, [r7, #20]
 8003586:	6838      	ldr	r0, [r7, #0]
 8003588:	4401      	add	r1, r0
 800358a:	b2d3      	uxtb	r3, r2
 800358c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 800358e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003592:	f04f 0200 	mov.w	r2, #0
 8003596:	f04f 0300 	mov.w	r3, #0
 800359a:	0a02      	lsrs	r2, r0, #8
 800359c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80035a0:	0a0b      	lsrs	r3, r1, #8
 80035a2:	6979      	ldr	r1, [r7, #20]
 80035a4:	3101      	adds	r1, #1
 80035a6:	6838      	ldr	r0, [r7, #0]
 80035a8:	4401      	add	r1, r0
 80035aa:	b2d3      	uxtb	r3, r2
 80035ac:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 80035ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80035b2:	f04f 0200 	mov.w	r2, #0
 80035b6:	f04f 0300 	mov.w	r3, #0
 80035ba:	0c02      	lsrs	r2, r0, #16
 80035bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80035c0:	0c0b      	lsrs	r3, r1, #16
 80035c2:	6979      	ldr	r1, [r7, #20]
 80035c4:	3102      	adds	r1, #2
 80035c6:	6838      	ldr	r0, [r7, #0]
 80035c8:	4401      	add	r1, r0
 80035ca:	b2d3      	uxtb	r3, r2
 80035cc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 80035ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80035d2:	f04f 0200 	mov.w	r2, #0
 80035d6:	f04f 0300 	mov.w	r3, #0
 80035da:	0e02      	lsrs	r2, r0, #24
 80035dc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80035e0:	0e0b      	lsrs	r3, r1, #24
 80035e2:	6979      	ldr	r1, [r7, #20]
 80035e4:	3103      	adds	r1, #3
 80035e6:	6838      	ldr	r0, [r7, #0]
 80035e8:	4401      	add	r1, r0
 80035ea:	b2d3      	uxtb	r3, r2
 80035ec:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_data.base >> (8 * 4)) & 0xFF;
 80035ee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80035f2:	f04f 0200 	mov.w	r2, #0
 80035f6:	f04f 0300 	mov.w	r3, #0
 80035fa:	000a      	movs	r2, r1
 80035fc:	2300      	movs	r3, #0
 80035fe:	6979      	ldr	r1, [r7, #20]
 8003600:	3104      	adds	r1, #4
 8003602:	6838      	ldr	r0, [r7, #0]
 8003604:	4401      	add	r1, r0
 8003606:	b2d3      	uxtb	r3, r2
 8003608:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_data.base >> (8 * 5)) & 0xFF;
 800360a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800360e:	f04f 0200 	mov.w	r2, #0
 8003612:	f04f 0300 	mov.w	r3, #0
 8003616:	0a0a      	lsrs	r2, r1, #8
 8003618:	2300      	movs	r3, #0
 800361a:	6979      	ldr	r1, [r7, #20]
 800361c:	3105      	adds	r1, #5
 800361e:	6838      	ldr	r0, [r7, #0]
 8003620:	4401      	add	r1, r0
 8003622:	b2d3      	uxtb	r3, r2
 8003624:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_data.base >> (8 * 6)) & 0xFF;
 8003626:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800362a:	f04f 0200 	mov.w	r2, #0
 800362e:	f04f 0300 	mov.w	r3, #0
 8003632:	0c0a      	lsrs	r2, r1, #16
 8003634:	2300      	movs	r3, #0
 8003636:	6979      	ldr	r1, [r7, #20]
 8003638:	3106      	adds	r1, #6
 800363a:	6838      	ldr	r0, [r7, #0]
 800363c:	4401      	add	r1, r0
 800363e:	b2d3      	uxtb	r3, r2
 8003640:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_data.base >> (8 * 7)) & 0xFF;
 8003642:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003646:	f04f 0200 	mov.w	r2, #0
 800364a:	f04f 0300 	mov.w	r3, #0
 800364e:	0e0a      	lsrs	r2, r1, #24
 8003650:	2300      	movs	r3, #0
 8003652:	6979      	ldr	r1, [r7, #20]
 8003654:	3107      	adds	r1, #7
 8003656:	6838      	ldr	r0, [r7, #0]
 8003658:	4401      	add	r1, r0
 800365a:	b2d3      	uxtb	r3, r2
 800365c:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->data);
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	3308      	adds	r3, #8
 8003662:	617b      	str	r3, [r7, #20]
      return offset;
 8003664:	697b      	ldr	r3, [r7, #20]
    }
 8003666:	4618      	mov	r0, r3
 8003668:	371c      	adds	r7, #28
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr

08003672 <_ZN8std_msgs5Int6411deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003672:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003676:	b0a3      	sub	sp, #140	; 0x8c
 8003678:	af00      	add	r7, sp, #0
 800367a:	6778      	str	r0, [r7, #116]	; 0x74
 800367c:	6739      	str	r1, [r7, #112]	; 0x70
    {
      int offset = 0;
 800367e:	2300      	movs	r3, #0
 8003680:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      union {
        int64_t real;
        uint64_t base;
      } u_data;
      u_data.base = 0;
 8003684:	f04f 0200 	mov.w	r2, #0
 8003688:	f04f 0300 	mov.w	r3, #0
 800368c:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003690:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003694:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003698:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800369a:	4413      	add	r3, r2
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	2200      	movs	r2, #0
 80036a2:	461c      	mov	r4, r3
 80036a4:	4615      	mov	r5, r2
 80036a6:	ea40 0804 	orr.w	r8, r0, r4
 80036aa:	ea41 0905 	orr.w	r9, r1, r5
 80036ae:	e9c7 891e 	strd	r8, r9, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80036b2:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80036b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80036ba:	1c5a      	adds	r2, r3, #1
 80036bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036be:	4413      	add	r3, r2
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	2200      	movs	r2, #0
 80036c6:	469a      	mov	sl, r3
 80036c8:	4693      	mov	fp, r2
 80036ca:	f04f 0200 	mov.w	r2, #0
 80036ce:	f04f 0300 	mov.w	r3, #0
 80036d2:	ea4f 230b 	mov.w	r3, fp, lsl #8
 80036d6:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 80036da:	ea4f 220a 	mov.w	r2, sl, lsl #8
 80036de:	ea40 0402 	orr.w	r4, r0, r2
 80036e2:	66bc      	str	r4, [r7, #104]	; 0x68
 80036e4:	430b      	orrs	r3, r1
 80036e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80036e8:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 80036ec:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80036f0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80036f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80036f8:	1c9a      	adds	r2, r3, #2
 80036fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036fc:	4413      	add	r3, r2
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2200      	movs	r2, #0
 8003704:	663b      	str	r3, [r7, #96]	; 0x60
 8003706:	667a      	str	r2, [r7, #100]	; 0x64
 8003708:	f04f 0200 	mov.w	r2, #0
 800370c:	f04f 0300 	mov.w	r3, #0
 8003710:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003714:	464c      	mov	r4, r9
 8003716:	0423      	lsls	r3, r4, #16
 8003718:	4644      	mov	r4, r8
 800371a:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 800371e:	4644      	mov	r4, r8
 8003720:	0422      	lsls	r2, r4, #16
 8003722:	ea40 0402 	orr.w	r4, r0, r2
 8003726:	65bc      	str	r4, [r7, #88]	; 0x58
 8003728:	430b      	orrs	r3, r1
 800372a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800372c:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8003730:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003734:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003738:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800373c:	1cda      	adds	r2, r3, #3
 800373e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003740:	4413      	add	r3, r2
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	b2db      	uxtb	r3, r3
 8003746:	2200      	movs	r2, #0
 8003748:	653b      	str	r3, [r7, #80]	; 0x50
 800374a:	657a      	str	r2, [r7, #84]	; 0x54
 800374c:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8003750:	4623      	mov	r3, r4
 8003752:	0a1b      	lsrs	r3, r3, #8
 8003754:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003756:	4623      	mov	r3, r4
 8003758:	061b      	lsls	r3, r3, #24
 800375a:	64bb      	str	r3, [r7, #72]	; 0x48
 800375c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8003760:	4623      	mov	r3, r4
 8003762:	4303      	orrs	r3, r0
 8003764:	643b      	str	r3, [r7, #64]	; 0x40
 8003766:	462b      	mov	r3, r5
 8003768:	430b      	orrs	r3, r1
 800376a:	647b      	str	r3, [r7, #68]	; 0x44
 800376c:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8003770:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003774:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003778:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800377c:	1d1a      	adds	r2, r3, #4
 800377e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003780:	4413      	add	r3, r2
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	b2db      	uxtb	r3, r3
 8003786:	2200      	movs	r2, #0
 8003788:	63bb      	str	r3, [r7, #56]	; 0x38
 800378a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800378c:	f04f 0200 	mov.w	r2, #0
 8003790:	f04f 0300 	mov.w	r3, #0
 8003794:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8003796:	0023      	movs	r3, r4
 8003798:	2200      	movs	r2, #0
 800379a:	ea40 0402 	orr.w	r4, r0, r2
 800379e:	633c      	str	r4, [r7, #48]	; 0x30
 80037a0:	430b      	orrs	r3, r1
 80037a2:	637b      	str	r3, [r7, #52]	; 0x34
 80037a4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80037a8:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80037ac:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80037b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80037b4:	1d5a      	adds	r2, r3, #5
 80037b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037b8:	4413      	add	r3, r2
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	2200      	movs	r2, #0
 80037c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80037c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037c4:	f04f 0200 	mov.w	r2, #0
 80037c8:	f04f 0300 	mov.w	r3, #0
 80037cc:	6abc      	ldr	r4, [r7, #40]	; 0x28
 80037ce:	0223      	lsls	r3, r4, #8
 80037d0:	2200      	movs	r2, #0
 80037d2:	ea40 0402 	orr.w	r4, r0, r2
 80037d6:	623c      	str	r4, [r7, #32]
 80037d8:	430b      	orrs	r3, r1
 80037da:	627b      	str	r3, [r7, #36]	; 0x24
 80037dc:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80037e0:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80037e4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80037e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80037ec:	3306      	adds	r3, #6
 80037ee:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80037f0:	4413      	add	r3, r2
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2200      	movs	r2, #0
 80037f8:	61bb      	str	r3, [r7, #24]
 80037fa:	61fa      	str	r2, [r7, #28]
 80037fc:	f04f 0200 	mov.w	r2, #0
 8003800:	f04f 0300 	mov.w	r3, #0
 8003804:	69bc      	ldr	r4, [r7, #24]
 8003806:	0423      	lsls	r3, r4, #16
 8003808:	2200      	movs	r2, #0
 800380a:	ea40 0402 	orr.w	r4, r0, r2
 800380e:	613c      	str	r4, [r7, #16]
 8003810:	430b      	orrs	r3, r1
 8003812:	617b      	str	r3, [r7, #20]
 8003814:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003818:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800381c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003820:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003824:	3307      	adds	r3, #7
 8003826:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003828:	4413      	add	r3, r2
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	b2db      	uxtb	r3, r3
 800382e:	2200      	movs	r2, #0
 8003830:	60bb      	str	r3, [r7, #8]
 8003832:	60fa      	str	r2, [r7, #12]
 8003834:	f04f 0200 	mov.w	r2, #0
 8003838:	f04f 0300 	mov.w	r3, #0
 800383c:	68bc      	ldr	r4, [r7, #8]
 800383e:	0623      	lsls	r3, r4, #24
 8003840:	2200      	movs	r2, #0
 8003842:	ea40 0402 	orr.w	r4, r0, r2
 8003846:	603c      	str	r4, [r7, #0]
 8003848:	430b      	orrs	r3, r1
 800384a:	607b      	str	r3, [r7, #4]
 800384c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003850:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      this->data = u_data.real;
 8003854:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8003858:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800385a:	e9c1 2302 	strd	r2, r3, [r1, #8]
      offset += sizeof(this->data);
 800385e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003862:	3308      	adds	r3, #8
 8003864:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
     return offset;
 8003868:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    }
 800386c:	4618      	mov	r0, r3
 800386e:	378c      	adds	r7, #140	; 0x8c
 8003870:	46bd      	mov	sp, r7
 8003872:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003876:	4770      	bx	lr

08003878 <_ZN8std_msgs5Int647getTypeEv>:

    const char * getType(){ return "std_msgs/Int64"; };
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	4b03      	ldr	r3, [pc, #12]	; (8003890 <_ZN8std_msgs5Int647getTypeEv+0x18>)
 8003882:	4618      	mov	r0, r3
 8003884:	370c      	adds	r7, #12
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop
 8003890:	080119fc 	.word	0x080119fc

08003894 <_ZN8std_msgs5Int646getMD5Ev>:
    const char * getMD5(){ return "34add168574510e6e17f5d23ecc077ef"; };
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	4b03      	ldr	r3, [pc, #12]	; (80038ac <_ZN8std_msgs5Int646getMD5Ev+0x18>)
 800389e:	4618      	mov	r0, r3
 80038a0:	370c      	adds	r7, #12
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	08011a0c 	.word	0x08011a0c

080038b0 <_ZN8std_msgs7Float64C1Ev>:
  {
    public:
      typedef double _data_type;
      _data_type data;

    Float64():
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
      data(0)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4618      	mov	r0, r3
 80038bc:	f7fe f8e2 	bl	8001a84 <_ZN3ros3MsgC1Ev>
 80038c0:	4a07      	ldr	r2, [pc, #28]	; (80038e0 <_ZN8std_msgs7Float64C1Ev+0x30>)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	601a      	str	r2, [r3, #0]
 80038c6:	6879      	ldr	r1, [r7, #4]
 80038c8:	f04f 0200 	mov.w	r2, #0
 80038cc:	f04f 0300 	mov.w	r3, #0
 80038d0:	e9c1 2302 	strd	r2, r3, [r1, #8]
    {
    }
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4618      	mov	r0, r3
 80038d8:	3708      	adds	r7, #8
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	08011b54 	.word	0x08011b54

080038e4 <_ZNK8std_msgs7Float649serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80038e4:	b480      	push	{r7}
 80038e6:	b087      	sub	sp, #28
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80038ee:	2300      	movs	r3, #0
 80038f0:	617b      	str	r3, [r7, #20]
      union {
        double real;
        uint64_t base;
      } u_data;
      u_data.real = this->data;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80038f8:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 80038fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003900:	6979      	ldr	r1, [r7, #20]
 8003902:	6838      	ldr	r0, [r7, #0]
 8003904:	4401      	add	r1, r0
 8003906:	b2d3      	uxtb	r3, r2
 8003908:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 800390a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800390e:	f04f 0200 	mov.w	r2, #0
 8003912:	f04f 0300 	mov.w	r3, #0
 8003916:	0a02      	lsrs	r2, r0, #8
 8003918:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800391c:	0a0b      	lsrs	r3, r1, #8
 800391e:	6979      	ldr	r1, [r7, #20]
 8003920:	3101      	adds	r1, #1
 8003922:	6838      	ldr	r0, [r7, #0]
 8003924:	4401      	add	r1, r0
 8003926:	b2d3      	uxtb	r3, r2
 8003928:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 800392a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800392e:	f04f 0200 	mov.w	r2, #0
 8003932:	f04f 0300 	mov.w	r3, #0
 8003936:	0c02      	lsrs	r2, r0, #16
 8003938:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800393c:	0c0b      	lsrs	r3, r1, #16
 800393e:	6979      	ldr	r1, [r7, #20]
 8003940:	3102      	adds	r1, #2
 8003942:	6838      	ldr	r0, [r7, #0]
 8003944:	4401      	add	r1, r0
 8003946:	b2d3      	uxtb	r3, r2
 8003948:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 800394a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800394e:	f04f 0200 	mov.w	r2, #0
 8003952:	f04f 0300 	mov.w	r3, #0
 8003956:	0e02      	lsrs	r2, r0, #24
 8003958:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800395c:	0e0b      	lsrs	r3, r1, #24
 800395e:	6979      	ldr	r1, [r7, #20]
 8003960:	3103      	adds	r1, #3
 8003962:	6838      	ldr	r0, [r7, #0]
 8003964:	4401      	add	r1, r0
 8003966:	b2d3      	uxtb	r3, r2
 8003968:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_data.base >> (8 * 4)) & 0xFF;
 800396a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800396e:	f04f 0200 	mov.w	r2, #0
 8003972:	f04f 0300 	mov.w	r3, #0
 8003976:	000a      	movs	r2, r1
 8003978:	2300      	movs	r3, #0
 800397a:	6979      	ldr	r1, [r7, #20]
 800397c:	3104      	adds	r1, #4
 800397e:	6838      	ldr	r0, [r7, #0]
 8003980:	4401      	add	r1, r0
 8003982:	b2d3      	uxtb	r3, r2
 8003984:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_data.base >> (8 * 5)) & 0xFF;
 8003986:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800398a:	f04f 0200 	mov.w	r2, #0
 800398e:	f04f 0300 	mov.w	r3, #0
 8003992:	0a0a      	lsrs	r2, r1, #8
 8003994:	2300      	movs	r3, #0
 8003996:	6979      	ldr	r1, [r7, #20]
 8003998:	3105      	adds	r1, #5
 800399a:	6838      	ldr	r0, [r7, #0]
 800399c:	4401      	add	r1, r0
 800399e:	b2d3      	uxtb	r3, r2
 80039a0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_data.base >> (8 * 6)) & 0xFF;
 80039a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80039a6:	f04f 0200 	mov.w	r2, #0
 80039aa:	f04f 0300 	mov.w	r3, #0
 80039ae:	0c0a      	lsrs	r2, r1, #16
 80039b0:	2300      	movs	r3, #0
 80039b2:	6979      	ldr	r1, [r7, #20]
 80039b4:	3106      	adds	r1, #6
 80039b6:	6838      	ldr	r0, [r7, #0]
 80039b8:	4401      	add	r1, r0
 80039ba:	b2d3      	uxtb	r3, r2
 80039bc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_data.base >> (8 * 7)) & 0xFF;
 80039be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80039c2:	f04f 0200 	mov.w	r2, #0
 80039c6:	f04f 0300 	mov.w	r3, #0
 80039ca:	0e0a      	lsrs	r2, r1, #24
 80039cc:	2300      	movs	r3, #0
 80039ce:	6979      	ldr	r1, [r7, #20]
 80039d0:	3107      	adds	r1, #7
 80039d2:	6838      	ldr	r0, [r7, #0]
 80039d4:	4401      	add	r1, r0
 80039d6:	b2d3      	uxtb	r3, r2
 80039d8:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->data);
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	3308      	adds	r3, #8
 80039de:	617b      	str	r3, [r7, #20]
      return offset;
 80039e0:	697b      	ldr	r3, [r7, #20]
    }
 80039e2:	4618      	mov	r0, r3
 80039e4:	371c      	adds	r7, #28
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr

080039ee <_ZN8std_msgs7Float6411deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80039ee:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80039f2:	b0a3      	sub	sp, #140	; 0x8c
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6778      	str	r0, [r7, #116]	; 0x74
 80039f8:	6739      	str	r1, [r7, #112]	; 0x70
    {
      int offset = 0;
 80039fa:	2300      	movs	r3, #0
 80039fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      union {
        double real;
        uint64_t base;
      } u_data;
      u_data.base = 0;
 8003a00:	f04f 0200 	mov.w	r2, #0
 8003a04:	f04f 0300 	mov.w	r3, #0
 8003a08:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003a0c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003a10:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003a14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a16:	4413      	add	r3, r2
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	461c      	mov	r4, r3
 8003a20:	4615      	mov	r5, r2
 8003a22:	ea40 0804 	orr.w	r8, r0, r4
 8003a26:	ea41 0905 	orr.w	r9, r1, r5
 8003a2a:	e9c7 891e 	strd	r8, r9, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003a2e:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003a32:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a36:	1c5a      	adds	r2, r3, #1
 8003a38:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a3a:	4413      	add	r3, r2
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	2200      	movs	r2, #0
 8003a42:	469a      	mov	sl, r3
 8003a44:	4693      	mov	fp, r2
 8003a46:	f04f 0200 	mov.w	r2, #0
 8003a4a:	f04f 0300 	mov.w	r3, #0
 8003a4e:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8003a52:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8003a56:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8003a5a:	ea40 0402 	orr.w	r4, r0, r2
 8003a5e:	66bc      	str	r4, [r7, #104]	; 0x68
 8003a60:	430b      	orrs	r3, r1
 8003a62:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a64:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8003a68:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003a6c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003a70:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a74:	1c9a      	adds	r2, r3, #2
 8003a76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a78:	4413      	add	r3, r2
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	2200      	movs	r2, #0
 8003a80:	663b      	str	r3, [r7, #96]	; 0x60
 8003a82:	667a      	str	r2, [r7, #100]	; 0x64
 8003a84:	f04f 0200 	mov.w	r2, #0
 8003a88:	f04f 0300 	mov.w	r3, #0
 8003a8c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003a90:	464c      	mov	r4, r9
 8003a92:	0423      	lsls	r3, r4, #16
 8003a94:	4644      	mov	r4, r8
 8003a96:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003a9a:	4644      	mov	r4, r8
 8003a9c:	0422      	lsls	r2, r4, #16
 8003a9e:	ea40 0402 	orr.w	r4, r0, r2
 8003aa2:	65bc      	str	r4, [r7, #88]	; 0x58
 8003aa4:	430b      	orrs	r3, r1
 8003aa6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003aa8:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8003aac:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003ab0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003ab4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ab8:	1cda      	adds	r2, r3, #3
 8003aba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003abc:	4413      	add	r3, r2
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	653b      	str	r3, [r7, #80]	; 0x50
 8003ac6:	657a      	str	r2, [r7, #84]	; 0x54
 8003ac8:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8003acc:	4623      	mov	r3, r4
 8003ace:	0a1b      	lsrs	r3, r3, #8
 8003ad0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ad2:	4623      	mov	r3, r4
 8003ad4:	061b      	lsls	r3, r3, #24
 8003ad6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ad8:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8003adc:	4623      	mov	r3, r4
 8003ade:	4303      	orrs	r3, r0
 8003ae0:	643b      	str	r3, [r7, #64]	; 0x40
 8003ae2:	462b      	mov	r3, r5
 8003ae4:	430b      	orrs	r3, r1
 8003ae6:	647b      	str	r3, [r7, #68]	; 0x44
 8003ae8:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8003aec:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003af0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003af4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003af8:	1d1a      	adds	r2, r3, #4
 8003afa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003afc:	4413      	add	r3, r2
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	2200      	movs	r2, #0
 8003b04:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b06:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003b08:	f04f 0200 	mov.w	r2, #0
 8003b0c:	f04f 0300 	mov.w	r3, #0
 8003b10:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8003b12:	0023      	movs	r3, r4
 8003b14:	2200      	movs	r2, #0
 8003b16:	ea40 0402 	orr.w	r4, r0, r2
 8003b1a:	633c      	str	r4, [r7, #48]	; 0x30
 8003b1c:	430b      	orrs	r3, r1
 8003b1e:	637b      	str	r3, [r7, #52]	; 0x34
 8003b20:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8003b24:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003b28:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003b2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b30:	1d5a      	adds	r2, r3, #5
 8003b32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b34:	4413      	add	r3, r2
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b3e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b40:	f04f 0200 	mov.w	r2, #0
 8003b44:	f04f 0300 	mov.w	r3, #0
 8003b48:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8003b4a:	0223      	lsls	r3, r4, #8
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	ea40 0402 	orr.w	r4, r0, r2
 8003b52:	623c      	str	r4, [r7, #32]
 8003b54:	430b      	orrs	r3, r1
 8003b56:	627b      	str	r3, [r7, #36]	; 0x24
 8003b58:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003b5c:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003b60:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003b64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b68:	3306      	adds	r3, #6
 8003b6a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003b6c:	4413      	add	r3, r2
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	2200      	movs	r2, #0
 8003b74:	61bb      	str	r3, [r7, #24]
 8003b76:	61fa      	str	r2, [r7, #28]
 8003b78:	f04f 0200 	mov.w	r2, #0
 8003b7c:	f04f 0300 	mov.w	r3, #0
 8003b80:	69bc      	ldr	r4, [r7, #24]
 8003b82:	0423      	lsls	r3, r4, #16
 8003b84:	2200      	movs	r2, #0
 8003b86:	ea40 0402 	orr.w	r4, r0, r2
 8003b8a:	613c      	str	r4, [r7, #16]
 8003b8c:	430b      	orrs	r3, r1
 8003b8e:	617b      	str	r3, [r7, #20]
 8003b90:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003b94:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003b98:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003b9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ba0:	3307      	adds	r3, #7
 8003ba2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003ba4:	4413      	add	r3, r2
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	2200      	movs	r2, #0
 8003bac:	60bb      	str	r3, [r7, #8]
 8003bae:	60fa      	str	r2, [r7, #12]
 8003bb0:	f04f 0200 	mov.w	r2, #0
 8003bb4:	f04f 0300 	mov.w	r3, #0
 8003bb8:	68bc      	ldr	r4, [r7, #8]
 8003bba:	0623      	lsls	r3, r4, #24
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	ea40 0402 	orr.w	r4, r0, r2
 8003bc2:	603c      	str	r4, [r7, #0]
 8003bc4:	430b      	orrs	r3, r1
 8003bc6:	607b      	str	r3, [r7, #4]
 8003bc8:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003bcc:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      this->data = u_data.real;
 8003bd0:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8003bd4:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8003bd6:	e9c1 2302 	strd	r2, r3, [r1, #8]
      offset += sizeof(this->data);
 8003bda:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003bde:	3308      	adds	r3, #8
 8003be0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
     return offset;
 8003be4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    }
 8003be8:	4618      	mov	r0, r3
 8003bea:	378c      	adds	r7, #140	; 0x8c
 8003bec:	46bd      	mov	sp, r7
 8003bee:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003bf2:	4770      	bx	lr

08003bf4 <_ZN8std_msgs7Float647getTypeEv>:

    const char * getType(){ return "std_msgs/Float64"; };
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	4b03      	ldr	r3, [pc, #12]	; (8003c0c <_ZN8std_msgs7Float647getTypeEv+0x18>)
 8003bfe:	4618      	mov	r0, r3
 8003c00:	370c      	adds	r7, #12
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop
 8003c0c:	08011a30 	.word	0x08011a30

08003c10 <_ZN8std_msgs7Float646getMD5Ev>:
    const char * getMD5(){ return "fdb28210bfa9d7c91146260178d9a584"; };
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	4b03      	ldr	r3, [pc, #12]	; (8003c28 <_ZN8std_msgs7Float646getMD5Ev+0x18>)
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	370c      	adds	r7, #12
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr
 8003c26:	bf00      	nop
 8003c28:	08011a44 	.word	0x08011a44

08003c2c <_ZN3ROS9pub_resetEv>:
ros::Publisher reset_pub("reset_fromSTM", &reset);
//ros::Publisher micro_pub("microswitch_fromSTM", &microswitch);
ros::Publisher scara_pub("scaraflag_fromSTM", &scaraflag);

/** RESET **/
void ROS::pub_reset(void){
 8003c2c:	b5b0      	push	{r4, r5, r7, lr}
 8003c2e:	af00      	add	r7, sp, #0
	MYRESET::receive();
 8003c30:	f7fd fed8 	bl	80019e4 <_ZN7MYRESET7receiveEv>
	reset.data = MYRESET::state;
 8003c34:	4b06      	ldr	r3, [pc, #24]	; (8003c50 <_ZN3ROS9pub_resetEv+0x24>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	17da      	asrs	r2, r3, #31
 8003c3a:	461c      	mov	r4, r3
 8003c3c:	4615      	mov	r5, r2
 8003c3e:	4b05      	ldr	r3, [pc, #20]	; (8003c54 <_ZN3ROS9pub_resetEv+0x28>)
 8003c40:	e9c3 4502 	strd	r4, r5, [r3, #8]
	reset_pub.publish(&reset);
 8003c44:	4903      	ldr	r1, [pc, #12]	; (8003c54 <_ZN3ROS9pub_resetEv+0x28>)
 8003c46:	4804      	ldr	r0, [pc, #16]	; (8003c58 <_ZN3ROS9pub_resetEv+0x2c>)
 8003c48:	f7fe fd69 	bl	800271e <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 8003c4c:	bf00      	nop
 8003c4e:	bdb0      	pop	{r4, r5, r7, pc}
 8003c50:	240007a8 	.word	0x240007a8
 8003c54:	24002130 	.word	0x24002130
 8003c58:	2400220c 	.word	0x2400220c

08003c5c <_ZN3ROS14scara_callbackERKN13geometry_msgs5PointE>:


/** SCARA **/
void ROS::scara_callback(const geometry_msgs::Point &msgs){
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
	static double x_before;
	static double y_before;
	static double z_before;

	if(x_before != msgs.x || y_before != msgs.y || z_before != msgs.z){
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	ed93 6b02 	vldr	d6, [r3, #8]
 8003c6a:	4b24      	ldr	r3, [pc, #144]	; (8003cfc <_ZN3ROS14scara_callbackERKN13geometry_msgs5PointE+0xa0>)
 8003c6c:	ed93 7b00 	vldr	d7, [r3]
 8003c70:	eeb4 6b47 	vcmp.f64	d6, d7
 8003c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c78:	d115      	bne.n	8003ca6 <_ZN3ROS14scara_callbackERKN13geometry_msgs5PointE+0x4a>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	ed93 6b04 	vldr	d6, [r3, #16]
 8003c80:	4b1f      	ldr	r3, [pc, #124]	; (8003d00 <_ZN3ROS14scara_callbackERKN13geometry_msgs5PointE+0xa4>)
 8003c82:	ed93 7b00 	vldr	d7, [r3]
 8003c86:	eeb4 6b47 	vcmp.f64	d6, d7
 8003c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c8e:	d10a      	bne.n	8003ca6 <_ZN3ROS14scara_callbackERKN13geometry_msgs5PointE+0x4a>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	ed93 6b06 	vldr	d6, [r3, #24]
 8003c96:	4b1b      	ldr	r3, [pc, #108]	; (8003d04 <_ZN3ROS14scara_callbackERKN13geometry_msgs5PointE+0xa8>)
 8003c98:	ed93 7b00 	vldr	d7, [r3]
 8003c9c:	eeb4 6b47 	vcmp.f64	d6, d7
 8003ca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ca4:	d014      	beq.n	8003cd0 <_ZN3ROS14scara_callbackERKN13geometry_msgs5PointE+0x74>
		sc.x = msgs.x;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003cac:	4916      	ldr	r1, [pc, #88]	; (8003d08 <_ZN3ROS14scara_callbackERKN13geometry_msgs5PointE+0xac>)
 8003cae:	e9c1 2302 	strd	r2, r3, [r1, #8]
		sc.y = msgs.y;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003cb8:	4913      	ldr	r1, [pc, #76]	; (8003d08 <_ZN3ROS14scara_callbackERKN13geometry_msgs5PointE+0xac>)
 8003cba:	e9c1 2304 	strd	r2, r3, [r1, #16]
		sc.flag = msgs.z;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003cc4:	4910      	ldr	r1, [pc, #64]	; (8003d08 <_ZN3ROS14scara_callbackERKN13geometry_msgs5PointE+0xac>)
 8003cc6:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
		sc.run();
 8003cca:	480f      	ldr	r0, [pc, #60]	; (8003d08 <_ZN3ROS14scara_callbackERKN13geometry_msgs5PointE+0xac>)
 8003ccc:	f001 f97c 	bl	8004fc8 <_ZN5SCARA3runEv>
	}

	x_before = msgs.x;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003cd6:	4909      	ldr	r1, [pc, #36]	; (8003cfc <_ZN3ROS14scara_callbackERKN13geometry_msgs5PointE+0xa0>)
 8003cd8:	e9c1 2300 	strd	r2, r3, [r1]
	y_before = msgs.y;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003ce2:	4907      	ldr	r1, [pc, #28]	; (8003d00 <_ZN3ROS14scara_callbackERKN13geometry_msgs5PointE+0xa4>)
 8003ce4:	e9c1 2300 	strd	r2, r3, [r1]
	z_before = msgs.z;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003cee:	4905      	ldr	r1, [pc, #20]	; (8003d04 <_ZN3ROS14scara_callbackERKN13geometry_msgs5PointE+0xa8>)
 8003cf0:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003cf4:	bf00      	nop
 8003cf6:	3708      	adds	r7, #8
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	24002238 	.word	0x24002238
 8003d00:	24002240 	.word	0x24002240
 8003d04:	24002248 	.word	0x24002248
 8003d08:	24002250 	.word	0x24002250

08003d0c <_ZN3ROS13pub_scaraflagEv>:

void ROS::pub_scaraflag(void){
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	af00      	add	r7, sp, #0
	scaraflag.data = sc.flag;
 8003d10:	4b05      	ldr	r3, [pc, #20]	; (8003d28 <_ZN3ROS13pub_scaraflagEv+0x1c>)
 8003d12:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
 8003d16:	4905      	ldr	r1, [pc, #20]	; (8003d2c <_ZN3ROS13pub_scaraflagEv+0x20>)
 8003d18:	e9c1 2302 	strd	r2, r3, [r1, #8]

	scara_pub.publish(&scaraflag);
 8003d1c:	4903      	ldr	r1, [pc, #12]	; (8003d2c <_ZN3ROS13pub_scaraflagEv+0x20>)
 8003d1e:	4804      	ldr	r0, [pc, #16]	; (8003d30 <_ZN3ROS13pub_scaraflagEv+0x24>)
 8003d20:	f7fe fcfd 	bl	800271e <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 8003d24:	bf00      	nop
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	24002250 	.word	0x24002250
 8003d2c:	24002140 	.word	0x24002140
 8003d30:	24002220 	.word	0x24002220

08003d34 <_ZN3ROS15intake_callbackERKN13geometry_msgs5PointE>:

/** INTAKE **/
void ROS::intake_callback(const geometry_msgs::Point &msg){
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
	INTAKE::tilt = msg.x;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003d42:	490a      	ldr	r1, [pc, #40]	; (8003d6c <_ZN3ROS15intake_callbackERKN13geometry_msgs5PointE+0x38>)
 8003d44:	e9c1 2300 	strd	r2, r3, [r1]
	INTAKE::stretch = msg.y;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003d4e:	4908      	ldr	r1, [pc, #32]	; (8003d70 <_ZN3ROS15intake_callbackERKN13geometry_msgs5PointE+0x3c>)
 8003d50:	e9c1 2300 	strd	r2, r3, [r1]
	INTAKE::suck = msg.z;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003d5a:	4906      	ldr	r1, [pc, #24]	; (8003d74 <_ZN3ROS15intake_callbackERKN13geometry_msgs5PointE+0x40>)
 8003d5c:	e9c1 2300 	strd	r2, r3, [r1]
	INTAKE::run();
 8003d60:	f7fc fe2c 	bl	80009bc <_ZN6INTAKE3runEv>
}
 8003d64:	bf00      	nop
 8003d66:	3708      	adds	r7, #8
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	24000268 	.word	0x24000268
 8003d70:	24000270 	.word	0x24000270
 8003d74:	24000278 	.word	0x24000278

08003d78 <_ZN3ROS16mecanum_callbackERKN13geometry_msgs5PointE>:
//}



/** CHASSIS -- mecanum **/
void ROS::mecanum_callback(const geometry_msgs::Point &msgs){
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
	mecanum.CAR_Goal.Vx = msgs.x;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003d86:	490b      	ldr	r1, [pc, #44]	; (8003db4 <_ZN3ROS16mecanum_callbackERKN13geometry_msgs5PointE+0x3c>)
 8003d88:	e9c1 2300 	strd	r2, r3, [r1]
	mecanum.CAR_Goal.Vy = msgs.y;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003d92:	4908      	ldr	r1, [pc, #32]	; (8003db4 <_ZN3ROS16mecanum_callbackERKN13geometry_msgs5PointE+0x3c>)
 8003d94:	e9c1 2302 	strd	r2, r3, [r1, #8]
	mecanum.CAR_Goal.Omega = msgs.z;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003d9e:	4905      	ldr	r1, [pc, #20]	; (8003db4 <_ZN3ROS16mecanum_callbackERKN13geometry_msgs5PointE+0x3c>)
 8003da0:	e9c1 2304 	strd	r2, r3, [r1, #16]
	mecanum.run();
 8003da4:	4803      	ldr	r0, [pc, #12]	; (8003db4 <_ZN3ROS16mecanum_callbackERKN13geometry_msgs5PointE+0x3c>)
 8003da6:	f7fd fce1 	bl	800176c <_ZN7Mecanum3runEv>
}
 8003daa:	bf00      	nop
 8003dac:	3708      	adds	r7, #8
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	24000748 	.word	0x24000748

08003db8 <_ZN3ROS11pub_car_velEv>:

void ROS::pub_car_vel(void){
 8003db8:	b580      	push	{r7, lr}
 8003dba:	af00      	add	r7, sp, #0
	car_speed.x = mecanum.CAR_Now.Vx;
 8003dbc:	4b0b      	ldr	r3, [pc, #44]	; (8003dec <_ZN3ROS11pub_car_velEv+0x34>)
 8003dbe:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003dc2:	490b      	ldr	r1, [pc, #44]	; (8003df0 <_ZN3ROS11pub_car_velEv+0x38>)
 8003dc4:	e9c1 2302 	strd	r2, r3, [r1, #8]
 	car_speed.y = mecanum.CAR_Now.Vy;
 8003dc8:	4b08      	ldr	r3, [pc, #32]	; (8003dec <_ZN3ROS11pub_car_velEv+0x34>)
 8003dca:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003dce:	4908      	ldr	r1, [pc, #32]	; (8003df0 <_ZN3ROS11pub_car_velEv+0x38>)
 8003dd0:	e9c1 2304 	strd	r2, r3, [r1, #16]
 	car_speed.z = mecanum.CAR_Now.Omega;
 8003dd4:	4b05      	ldr	r3, [pc, #20]	; (8003dec <_ZN3ROS11pub_car_velEv+0x34>)
 8003dd6:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003dda:	4905      	ldr	r1, [pc, #20]	; (8003df0 <_ZN3ROS11pub_car_velEv+0x38>)
 8003ddc:	e9c1 2306 	strd	r2, r3, [r1, #24]
 	mecanum_pub.publish(&car_speed);
 8003de0:	4903      	ldr	r1, [pc, #12]	; (8003df0 <_ZN3ROS11pub_car_velEv+0x38>)
 8003de2:	4804      	ldr	r0, [pc, #16]	; (8003df4 <_ZN3ROS11pub_car_velEv+0x3c>)
 8003de4:	f7fe fc9b 	bl	800271e <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 8003de8:	bf00      	nop
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	24000748 	.word	0x24000748
 8003df0:	24002110 	.word	0x24002110
 8003df4:	240021f8 	.word	0x240021f8

08003df8 <_ZN3ROS5setupEv>:


/** ROS setup and loop **/
void ROS::setup(void){
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	af00      	add	r7, sp, #0
	nh.initNode();
 8003dfc:	480e      	ldr	r0, [pc, #56]	; (8003e38 <_ZN3ROS5setupEv+0x40>)
 8003dfe:	f000 f9f7 	bl	80041f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8initNodeEv>

    nh.advertise(mecanum_pub);
 8003e02:	490e      	ldr	r1, [pc, #56]	; (8003e3c <_ZN3ROS5setupEv+0x44>)
 8003e04:	480c      	ldr	r0, [pc, #48]	; (8003e38 <_ZN3ROS5setupEv+0x40>)
 8003e06:	f000 fa1c 	bl	8004242 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE>
    nh.advertise(reset_pub);
 8003e0a:	490d      	ldr	r1, [pc, #52]	; (8003e40 <_ZN3ROS5setupEv+0x48>)
 8003e0c:	480a      	ldr	r0, [pc, #40]	; (8003e38 <_ZN3ROS5setupEv+0x40>)
 8003e0e:	f000 fa18 	bl	8004242 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE>
    nh.advertise(scara_pub);
 8003e12:	490c      	ldr	r1, [pc, #48]	; (8003e44 <_ZN3ROS5setupEv+0x4c>)
 8003e14:	4808      	ldr	r0, [pc, #32]	; (8003e38 <_ZN3ROS5setupEv+0x40>)
 8003e16:	f000 fa14 	bl	8004242 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE>
    nh.subscribe(mecanum_sub);
 8003e1a:	490b      	ldr	r1, [pc, #44]	; (8003e48 <_ZN3ROS5setupEv+0x50>)
 8003e1c:	4806      	ldr	r0, [pc, #24]	; (8003e38 <_ZN3ROS5setupEv+0x40>)
 8003e1e:	f000 fa40 	bl	80042a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_>
    nh.subscribe(intake_sub);
 8003e22:	490a      	ldr	r1, [pc, #40]	; (8003e4c <_ZN3ROS5setupEv+0x54>)
 8003e24:	4804      	ldr	r0, [pc, #16]	; (8003e38 <_ZN3ROS5setupEv+0x40>)
 8003e26:	f000 fa3c 	bl	80042a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_>
    nh.subscribe(scara_sub);
 8003e2a:	4909      	ldr	r1, [pc, #36]	; (8003e50 <_ZN3ROS5setupEv+0x58>)
 8003e2c:	4802      	ldr	r0, [pc, #8]	; (8003e38 <_ZN3ROS5setupEv+0x40>)
 8003e2e:	f000 fa38 	bl	80042a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_>
}
 8003e32:	bf00      	nop
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	240007b0 	.word	0x240007b0
 8003e3c:	240021f8 	.word	0x240021f8
 8003e40:	2400220c 	.word	0x2400220c
 8003e44:	24002220 	.word	0x24002220
 8003e48:	24002150 	.word	0x24002150
 8003e4c:	24002188 	.word	0x24002188
 8003e50:	240021c0 	.word	0x240021c0

08003e54 <_ZN3ROS4loopEv>:

void ROS::loop(void){
 8003e54:	b580      	push	{r7, lr}
 8003e56:	af00      	add	r7, sp, #0
	nh.spinOnce();
 8003e58:	4807      	ldr	r0, [pc, #28]	; (8003e78 <_ZN3ROS4loopEv+0x24>)
 8003e5a:	f000 fa4d 	bl	80042f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv>

	static bool scara_valve_close = true;
	if(scara_valve_close) sc.run();
 8003e5e:	4b07      	ldr	r3, [pc, #28]	; (8003e7c <_ZN3ROS4loopEv+0x28>)
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d002      	beq.n	8003e6c <_ZN3ROS4loopEv+0x18>
 8003e66:	4806      	ldr	r0, [pc, #24]	; (8003e80 <_ZN3ROS4loopEv+0x2c>)
 8003e68:	f001 f8ae 	bl	8004fc8 <_ZN5SCARA3runEv>
	scara_valve_close = false;
 8003e6c:	4b03      	ldr	r3, [pc, #12]	; (8003e7c <_ZN3ROS4loopEv+0x28>)
 8003e6e:	2200      	movs	r2, #0
 8003e70:	701a      	strb	r2, [r3, #0]
}
 8003e72:	bf00      	nop
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	240007b0 	.word	0x240007b0
 8003e7c:	24000001 	.word	0x24000001
 8003e80:	24002250 	.word	0x24002250

08003e84 <_Z13Error_Handlerv>:


/* UART Communication */
void Error_Handler(void)
{
 8003e84:	b480      	push	{r7}
 8003e86:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003e88:	b672      	cpsid	i
}
 8003e8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003e8c:	e7fe      	b.n	8003e8c <_Z13Error_Handlerv+0x8>
	...

08003e90 <_ZL19MX_USART1_UART_Initv>:
  }
  /* USER CODE END Error_Handler_Debug */
}

static void MX_USART1_UART_Init(void)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003e94:	4b2c      	ldr	r3, [pc, #176]	; (8003f48 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003e96:	4a2d      	ldr	r2, [pc, #180]	; (8003f4c <_ZL19MX_USART1_UART_Initv+0xbc>)
 8003e98:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003e9a:	4b2b      	ldr	r3, [pc, #172]	; (8003f48 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003e9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003ea0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003ea2:	4b29      	ldr	r3, [pc, #164]	; (8003f48 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003ea8:	4b27      	ldr	r3, [pc, #156]	; (8003f48 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003eaa:	2200      	movs	r2, #0
 8003eac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003eae:	4b26      	ldr	r3, [pc, #152]	; (8003f48 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003eb4:	4b24      	ldr	r3, [pc, #144]	; (8003f48 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003eb6:	220c      	movs	r2, #12
 8003eb8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003eba:	4b23      	ldr	r3, [pc, #140]	; (8003f48 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ec0:	4b21      	ldr	r3, [pc, #132]	; (8003f48 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003ec6:	4b20      	ldr	r3, [pc, #128]	; (8003f48 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003ec8:	2200      	movs	r2, #0
 8003eca:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003ecc:	4b1e      	ldr	r3, [pc, #120]	; (8003f48 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003ece:	2200      	movs	r2, #0
 8003ed0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003ed2:	4b1d      	ldr	r3, [pc, #116]	; (8003f48 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003ed8:	481b      	ldr	r0, [pc, #108]	; (8003f48 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003eda:	f00a fc41 	bl	800e760 <HAL_UART_Init>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	bf14      	ite	ne
 8003ee4:	2301      	movne	r3, #1
 8003ee6:	2300      	moveq	r3, #0
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d001      	beq.n	8003ef2 <_ZL19MX_USART1_UART_Initv+0x62>
  {
    Error_Handler();
 8003eee:	f7ff ffc9 	bl	8003e84 <_Z13Error_Handlerv>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003ef2:	2100      	movs	r1, #0
 8003ef4:	4814      	ldr	r0, [pc, #80]	; (8003f48 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003ef6:	f00c fcbf 	bl	8010878 <HAL_UARTEx_SetTxFifoThreshold>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	bf14      	ite	ne
 8003f00:	2301      	movne	r3, #1
 8003f02:	2300      	moveq	r3, #0
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d001      	beq.n	8003f0e <_ZL19MX_USART1_UART_Initv+0x7e>
  {
    Error_Handler();
 8003f0a:	f7ff ffbb 	bl	8003e84 <_Z13Error_Handlerv>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003f0e:	2100      	movs	r1, #0
 8003f10:	480d      	ldr	r0, [pc, #52]	; (8003f48 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003f12:	f00c fcef 	bl	80108f4 <HAL_UARTEx_SetRxFifoThreshold>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	bf14      	ite	ne
 8003f1c:	2301      	movne	r3, #1
 8003f1e:	2300      	moveq	r3, #0
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d001      	beq.n	8003f2a <_ZL19MX_USART1_UART_Initv+0x9a>
  {
    Error_Handler();
 8003f26:	f7ff ffad 	bl	8003e84 <_Z13Error_Handlerv>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003f2a:	4807      	ldr	r0, [pc, #28]	; (8003f48 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003f2c:	f00c fc6b 	bl	8010806 <HAL_UARTEx_DisableFifoMode>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	bf14      	ite	ne
 8003f36:	2301      	movne	r3, #1
 8003f38:	2300      	moveq	r3, #0
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d001      	beq.n	8003f44 <_ZL19MX_USART1_UART_Initv+0xb4>
  {
    Error_Handler();
 8003f40:	f7ff ffa0 	bl	8003e84 <_Z13Error_Handlerv>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003f44:	bf00      	nop
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	240005c4 	.word	0x240005c4
 8003f4c:	40011000 	.word	0x40011000

08003f50 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b082      	sub	sp, #8
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
    nh.getHardware()->flush();
 8003f58:	4805      	ldr	r0, [pc, #20]	; (8003f70 <HAL_UART_TxCpltCallback+0x20>)
 8003f5a:	f000 fc45 	bl	80047e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE11getHardwareEv>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7fe fd15 	bl	8002990 <_ZN13STM32Hardware5flushEv>
}
 8003f66:	bf00      	nop
 8003f68:	3708      	adds	r7, #8
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	240007b0 	.word	0x240007b0

08003f74 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart){
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
	if(huart == &huart1){
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4a09      	ldr	r2, [pc, #36]	; (8003fa4 <HAL_UART_ErrorCallback+0x30>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d10b      	bne.n	8003f9c <HAL_UART_ErrorCallback+0x28>
		HAL_UART_DeInit(&huart1);
 8003f84:	4807      	ldr	r0, [pc, #28]	; (8003fa4 <HAL_UART_ErrorCallback+0x30>)
 8003f86:	f00a fc3b 	bl	800e800 <HAL_UART_DeInit>
		MX_USART1_UART_Init();
 8003f8a:	f7ff ff81 	bl	8003e90 <_ZL19MX_USART1_UART_Initv>
		nh.getHardware()->init();
 8003f8e:	4806      	ldr	r0, [pc, #24]	; (8003fa8 <HAL_UART_ErrorCallback+0x34>)
 8003f90:	f000 fc2a 	bl	80047e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE11getHardwareEv>
 8003f94:	4603      	mov	r3, r0
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7fe fcb0 	bl	80028fc <_ZN13STM32Hardware4initEv>
	}
}
 8003f9c:	bf00      	nop
 8003f9e:	3708      	adds	r7, #8
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	240005c4 	.word	0x240005c4
 8003fa8:	240007b0 	.word	0x240007b0

08003fac <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8003fac:	b480      	push	{r7}
 8003fae:	b085      	sub	sp, #20
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	60fb      	str	r3, [r7, #12]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2b03      	cmp	r3, #3
 8003fbe:	d80d      	bhi.n	8003fdc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	00db      	lsls	r3, r3, #3
 8003fc4:	683a      	ldr	r2, [r7, #0]
 8003fc6:	fa22 f103 	lsr.w	r1, r2, r3
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	4413      	add	r3, r2
 8003fd0:	b2ca      	uxtb	r2, r1
 8003fd2:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	60fb      	str	r3, [r7, #12]
 8003fda:	e7ee      	b.n	8003fba <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8003fdc:	bf00      	nop
 8003fde:	3714      	adds	r7, #20
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr

08003fe8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8003fe8:	b480      	push	{r7}
 8003fea:	b085      	sub	sp, #20
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	60fb      	str	r3, [r7, #12]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2b03      	cmp	r3, #3
 8004000:	d811      	bhi.n	8004026 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	6839      	ldr	r1, [r7, #0]
 8004008:	68fa      	ldr	r2, [r7, #12]
 800400a:	440a      	add	r2, r1
 800400c:	7812      	ldrb	r2, [r2, #0]
 800400e:	4611      	mov	r1, r2
 8004010:	68fa      	ldr	r2, [r7, #12]
 8004012:	00d2      	lsls	r2, r2, #3
 8004014:	fa01 f202 	lsl.w	r2, r1, r2
 8004018:	431a      	orrs	r2, r3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	3301      	adds	r3, #1
 8004022:	60fb      	str	r3, [r7, #12]
 8004024:	e7ea      	b.n	8003ffc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8004026:	bf00      	nop
 8004028:	3714      	adds	r7, #20
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr
	...

08004034 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	4a04      	ldr	r2, [pc, #16]	; (8004050 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	601a      	str	r2, [r3, #0]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4618      	mov	r0, r3
 8004046:	370c      	adds	r7, #12
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr
 8004050:	08011bb4 	.word	0x08011bb4

08004054 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8004054:	b580      	push	{r7, lr}
 8004056:	b086      	sub	sp, #24
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	4618      	mov	r0, r3
 8004060:	f7ff ffe8 	bl	8004034 <_ZN3ros15NodeHandleBase_C1Ev>
 8004064:	4a47      	ldr	r2, [pc, #284]	; (8004184 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x130>)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	601a      	str	r2, [r3, #0]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	3304      	adds	r3, #4
 800406e:	4618      	mov	r0, r3
 8004070:	f7fe fc24 	bl	80028bc <_ZN13STM32HardwareC1Ev>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800407a:	2200      	movs	r2, #0
 800407c:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	f641 1314 	movw	r3, #6420	; 0x1914
 8004086:	4413      	add	r3, r2
 8004088:	4618      	mov	r0, r3
 800408a:	f7fe f86f 	bl	800216c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 800408e:	2300      	movs	r3, #0
 8004090:	617b      	str	r3, [r7, #20]
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	2b18      	cmp	r3, #24
 8004096:	d80b      	bhi.n	80040b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x5c>
      publishers[i] = 0;
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	f503 63c1 	add.w	r3, r3, #1544	; 0x608
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	4413      	add	r3, r2
 80040a4:	2200      	movs	r2, #0
 80040a6:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	3301      	adds	r3, #1
 80040ac:	617b      	str	r3, [r7, #20]
 80040ae:	e7f0      	b.n	8004092 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x3e>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80040b0:	2300      	movs	r3, #0
 80040b2:	613b      	str	r3, [r7, #16]
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	2b18      	cmp	r3, #24
 80040b8:	d80a      	bhi.n	80040d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x7c>
      subscribers[i] = 0;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	693a      	ldr	r2, [r7, #16]
 80040be:	f202 6222 	addw	r2, r2, #1570	; 0x622
 80040c2:	2100      	movs	r1, #0
 80040c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	3301      	adds	r3, #1
 80040cc:	613b      	str	r3, [r7, #16]
 80040ce:	e7f1      	b.n	80040b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x60>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 80040d0:	2300      	movs	r3, #0
 80040d2:	60fb      	str	r3, [r7, #12]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040da:	d20b      	bcs.n	80040f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0xa0>
      message_in[i] = 0;
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	441a      	add	r2, r3
 80040e2:	f241 0324 	movw	r3, #4132	; 0x1024
 80040e6:	4413      	add	r3, r2
 80040e8:	2200      	movs	r2, #0
 80040ea:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	3301      	adds	r3, #1
 80040f0:	60fb      	str	r3, [r7, #12]
 80040f2:	e7ef      	b.n	80040d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x80>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 80040f4:	2300      	movs	r3, #0
 80040f6:	60bb      	str	r3, [r7, #8]
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040fe:	d20b      	bcs.n	8004118 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0xc4>
      message_out[i] = 0;
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	441a      	add	r2, r3
 8004106:	f241 4324 	movw	r3, #5156	; 0x1424
 800410a:	4413      	add	r3, r2
 800410c:	2200      	movs	r2, #0
 800410e:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	3301      	adds	r3, #1
 8004114:	60bb      	str	r3, [r7, #8]
 8004116:	e7ef      	b.n	80040f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0xa4>

    req_param_resp.ints_length = 0;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800411e:	461a      	mov	r2, r3
 8004120:	2300      	movs	r3, #0
 8004122:	f8c2 3918 	str.w	r3, [r2, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800412c:	461a      	mov	r2, r3
 800412e:	2300      	movs	r3, #0
 8004130:	f8c2 3920 	str.w	r3, [r2, #2336]	; 0x920
    req_param_resp.floats_length = 0;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800413a:	461a      	mov	r2, r3
 800413c:	2300      	movs	r3, #0
 800413e:	f8c2 3924 	str.w	r3, [r2, #2340]	; 0x924
    req_param_resp.floats = NULL;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004148:	461a      	mov	r2, r3
 800414a:	2300      	movs	r3, #0
 800414c:	f8c2 392c 	str.w	r3, [r2, #2348]	; 0x92c
    req_param_resp.ints_length = 0;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004156:	461a      	mov	r2, r3
 8004158:	2300      	movs	r3, #0
 800415a:	f8c2 3918 	str.w	r3, [r2, #2328]	; 0x918
    req_param_resp.ints = NULL;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004164:	461a      	mov	r2, r3
 8004166:	2300      	movs	r3, #0
 8004168:	f8c2 3920 	str.w	r3, [r2, #2336]	; 0x920

    spin_timeout_ = 0;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004172:	461a      	mov	r2, r3
 8004174:	2300      	movs	r3, #0
 8004176:	6213      	str	r3, [r2, #32]
  }
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4618      	mov	r0, r3
 800417c:	3718      	adds	r7, #24
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	08011b40 	.word	0x08011b40

08004188 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	4a04      	ldr	r2, [pc, #16]	; (80041a4 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	601a      	str	r2, [r3, #0]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4618      	mov	r0, r3
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr
 80041a4:	08011b9c 	.word	0x08011b9c

080041a8 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	607a      	str	r2, [r7, #4]
 80041b4:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	4618      	mov	r0, r3
 80041ba:	f7ff ffe5 	bl	8004188 <_ZN3ros11Subscriber_C1Ev>
 80041be:	4a0b      	ldr	r2, [pc, #44]	; (80041ec <_ZN3ros10SubscriberIN13geometry_msgs5PointEvEC1EPKcPFvRKS2_Ei+0x44>)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	601a      	str	r2, [r3, #0]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	3310      	adds	r3, #16
 80041c8:	4618      	mov	r0, r3
 80041ca:	f7fe fc9d 	bl	8002b08 <_ZN13geometry_msgs5PointC1Ev>
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	631a      	str	r2, [r3, #48]	; 0x30
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	683a      	ldr	r2, [r7, #0]
 80041d8:	635a      	str	r2, [r3, #52]	; 0x34
  {
    topic_ = topic_name;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	68ba      	ldr	r2, [r7, #8]
 80041de:	609a      	str	r2, [r3, #8]
  };
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	4618      	mov	r0, r3
 80041e4:	3710      	adds	r7, #16
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	08011b28 	.word	0x08011b28

080041f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b082      	sub	sp, #8
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	3304      	adds	r3, #4
 80041fc:	4618      	mov	r0, r3
 80041fe:	f7fe fb7d 	bl	80028fc <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004208:	461a      	mov	r2, r3
 800420a:	2300      	movs	r3, #0
 800420c:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
    bytes_ = 0;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004216:	461a      	mov	r2, r3
 8004218:	2300      	movs	r3, #0
 800421a:	f8c2 38f0 	str.w	r3, [r2, #2288]	; 0x8f0
    index_ = 0;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004224:	461a      	mov	r2, r3
 8004226:	2300      	movs	r3, #0
 8004228:	f8c2 38f8 	str.w	r3, [r2, #2296]	; 0x8f8
    topic_ = 0;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004232:	461a      	mov	r2, r3
 8004234:	2300      	movs	r3, #0
 8004236:	f8c2 38f4 	str.w	r3, [r2, #2292]	; 0x8f4
  };
 800423a:	bf00      	nop
 800423c:	3708      	adds	r7, #8
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}

08004242 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 8004242:	b480      	push	{r7}
 8004244:	b085      	sub	sp, #20
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
 800424a:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800424c:	2300      	movs	r3, #0
 800424e:	60fb      	str	r3, [r7, #12]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2b18      	cmp	r3, #24
 8004254:	dc1e      	bgt.n	8004294 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x52>
    {
      if (publishers[i] == 0) // empty slot
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f503 63c1 	add.w	r3, r3, #1544	; 0x608
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	4413      	add	r3, r2
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d111      	bne.n	800428c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x4a>
      {
        publishers[i] = &p;
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	f503 63c1 	add.w	r3, r3, #1544	; 0x608
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	4413      	add	r3, r2
 8004274:	683a      	ldr	r2, [r7, #0]
 8004276:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	60da      	str	r2, [r3, #12]
        return true;
 8004288:	2301      	movs	r3, #1
 800428a:	e004      	b.n	8004296 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	3301      	adds	r3, #1
 8004290:	60fb      	str	r3, [r7, #12]
 8004292:	e7dd      	b.n	8004250 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0xe>
      }
    }
    return false;
 8004294:	2300      	movs	r3, #0
  }
 8004296:	4618      	mov	r0, r3
 8004298:	3714      	adds	r7, #20
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr

080042a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_>:

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 80042a2:	b480      	push	{r7}
 80042a4:	b085      	sub	sp, #20
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
 80042aa:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80042ac:	2300      	movs	r3, #0
 80042ae:	60fb      	str	r3, [r7, #12]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2b18      	cmp	r3, #24
 80042b4:	dc19      	bgt.n	80042ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	68fa      	ldr	r2, [r7, #12]
 80042ba:	f202 6222 	addw	r2, r2, #1570	; 0x622
 80042be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d10d      	bne.n	80042e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_+0x40>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 80042c6:	6839      	ldr	r1, [r7, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	68fa      	ldr	r2, [r7, #12]
 80042cc:	f202 6222 	addw	r2, r2, #1570	; 0x622
 80042d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	605a      	str	r2, [r3, #4]
        return true;
 80042de:	2301      	movs	r3, #1
 80042e0:	e004      	b.n	80042ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	3301      	adds	r3, #1
 80042e6:	60fb      	str	r3, [r7, #12]
 80042e8:	e7e2      	b.n	80042b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_+0xe>
      }
    }
    return false;
 80042ea:	2300      	movs	r3, #0
  }
 80042ec:	4618      	mov	r0, r3
 80042ee:	3714      	adds	r7, #20
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv>:
  virtual int spinOnce()
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	3304      	adds	r3, #4
 8004304:	4618      	mov	r0, r3
 8004306:	f7fe fbf3 	bl	8002af0 <_ZN13STM32Hardware4timeEv>
 800430a:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004312:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 8004316:	68fa      	ldr	r2, [r7, #12]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	f642 22f8 	movw	r2, #11000	; 0x2af8
 800431e:	4293      	cmp	r3, r2
 8004320:	d905      	bls.n	800432e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x36>
      configured_ = false;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004328:	2200      	movs	r2, #0
 800432a:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004334:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004338:	2b00      	cmp	r3, #0
 800433a:	d00e      	beq.n	800435a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      if (c_time > last_msg_timeout_time)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004342:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 8004346:	68fa      	ldr	r2, [r7, #12]
 8004348:	429a      	cmp	r2, r3
 800434a:	d906      	bls.n	800435a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004352:	461a      	mov	r2, r3
 8004354:	2300      	movs	r3, #0
 8004356:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004360:	6a1b      	ldr	r3, [r3, #32]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d015      	beq.n	8004392 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x9a>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	3304      	adds	r3, #4
 800436a:	4618      	mov	r0, r3
 800436c:	f7fe fbc0 	bl	8002af0 <_ZN13STM32Hardware4timeEv>
 8004370:	4602      	mov	r2, r0
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	1ad2      	subs	r2, r2, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800437c:	6a1b      	ldr	r3, [r3, #32]
 800437e:	429a      	cmp	r2, r3
 8004380:	bf8c      	ite	hi
 8004382:	2301      	movhi	r3, #1
 8004384:	2300      	movls	r3, #0
 8004386:	b2db      	uxtb	r3, r3
 8004388:	2b00      	cmp	r3, #0
 800438a:	d002      	beq.n	8004392 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x9a>
          return SPIN_TIMEOUT;
 800438c:	f06f 0301 	mvn.w	r3, #1
 8004390:	e226      	b.n	80047e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4e8>
      int data = hardware_.read();
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	3304      	adds	r3, #4
 8004396:	4618      	mov	r0, r3
 8004398:	f7fe facc 	bl	8002934 <_ZN13STM32Hardware4readEv>
 800439c:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	f2c0 81ff 	blt.w	80047a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4ac>
      checksum_ += data;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043ac:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	4413      	add	r3, r2
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80043ba:	f8c2 38fc 	str.w	r3, [r2, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043c4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80043c8:	2b07      	cmp	r3, #7
 80043ca:	d12d      	bne.n	8004428 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x130>
        message_in[index_++] = data;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043d2:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 80043d6:	1c5a      	adds	r2, r3, #1
 80043d8:	6879      	ldr	r1, [r7, #4]
 80043da:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 80043de:	f8c1 28f8 	str.w	r2, [r1, #2296]	; 0x8f8
 80043e2:	68ba      	ldr	r2, [r7, #8]
 80043e4:	b2d1      	uxtb	r1, r2
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	441a      	add	r2, r3
 80043ea:	f241 0324 	movw	r3, #4132	; 0x1024
 80043ee:	4413      	add	r3, r2
 80043f0:	460a      	mov	r2, r1
 80043f2:	701a      	strb	r2, [r3, #0]
        bytes_--;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043fa:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80043fe:	3b01      	subs	r3, #1
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004406:	f8c2 38f0 	str.w	r3, [r2, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004410:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8004414:	2b00      	cmp	r3, #0
 8004416:	d1a0      	bne.n	800435a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800441e:	461a      	mov	r2, r3
 8004420:	2308      	movs	r3, #8
 8004422:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
 8004426:	e798      	b.n	800435a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_FIRST_FF)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800442e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004432:	2b00      	cmp	r3, #0
 8004434:	d130      	bne.n	8004498 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x1a0>
        if (data == 0xff)
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	2bff      	cmp	r3, #255	; 0xff
 800443a:	d112      	bne.n	8004462 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x16a>
          mode_++;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004442:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004446:	3301      	adds	r3, #1
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800444e:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	3314      	adds	r3, #20
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800445c:	f8c2 390c 	str.w	r3, [r2, #2316]	; 0x90c
 8004460:	e77b      	b.n	800435a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	3304      	adds	r3, #4
 8004466:	4618      	mov	r0, r3
 8004468:	f7fe fb42 	bl	8002af0 <_ZN13STM32Hardware4timeEv>
 800446c:	4602      	mov	r2, r0
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	f241 3288 	movw	r2, #5000	; 0x1388
 8004476:	4293      	cmp	r3, r2
 8004478:	bf8c      	ite	hi
 800447a:	2301      	movhi	r3, #1
 800447c:	2300      	movls	r3, #0
 800447e:	b2db      	uxtb	r3, r3
 8004480:	2b00      	cmp	r3, #0
 8004482:	f43f af6a 	beq.w	800435a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          configured_ = false;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800448c:	2200      	movs	r2, #0
 800448e:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 8004492:	f06f 0301 	mvn.w	r3, #1
 8004496:	e1a3      	b.n	80047e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4e8>
      else if (mode_ == MODE_PROTOCOL_VER)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800449e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d121      	bne.n	80044ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x1f2>
        if (data == PROTOCOL_VER)
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	2bfe      	cmp	r3, #254	; 0xfe
 80044aa:	d10b      	bne.n	80044c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x1cc>
          mode_++;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044b2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80044b6:	3301      	adds	r3, #1
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80044be:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
 80044c2:	e74a      	b.n	800435a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044ca:	461a      	mov	r2, r3
 80044cc:	2300      	movs	r3, #0
 80044ce:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
          if (configured_ == false)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044d8:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80044dc:	2b00      	cmp	r3, #0
 80044de:	f47f af3c 	bne.w	800435a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
            requestSyncTime();  /* send a msg back showing our protocol version */
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 f98c 	bl	8004800 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
 80044e8:	e737      	b.n	800435a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044f0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	d120      	bne.n	800453a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x242>
        bytes_ = data;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044fe:	461a      	mov	r2, r3
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	f8c2 38f0 	str.w	r3, [r2, #2288]	; 0x8f0
        index_ = 0;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800450c:	461a      	mov	r2, r3
 800450e:	2300      	movs	r3, #0
 8004510:	f8c2 38f8 	str.w	r3, [r2, #2296]	; 0x8f8
        mode_++;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800451a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800451e:	3301      	adds	r3, #1
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004526:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004530:	461a      	mov	r2, r3
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	f8c2 38fc 	str.w	r3, [r2, #2300]	; 0x8fc
 8004538:	e70f      	b.n	800435a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004540:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004544:	2b03      	cmp	r3, #3
 8004546:	d118      	bne.n	800457a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x282>
        bytes_ += data << 8;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800454e:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	021b      	lsls	r3, r3, #8
 8004556:	4413      	add	r3, r2
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800455e:	f8c2 38f0 	str.w	r3, [r2, #2288]	; 0x8f0
        mode_++;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004568:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800456c:	3301      	adds	r3, #1
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004574:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
 8004578:	e6ef      	b.n	800435a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004580:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004584:	2b04      	cmp	r3, #4
 8004586:	d11f      	bne.n	80045c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x2d0>
        if ((checksum_ % 256) == 255)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800458e:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8004592:	425a      	negs	r2, r3
 8004594:	b2db      	uxtb	r3, r3
 8004596:	b2d2      	uxtb	r2, r2
 8004598:	bf58      	it	pl
 800459a:	4253      	negpl	r3, r2
 800459c:	2bff      	cmp	r3, #255	; 0xff
 800459e:	d10b      	bne.n	80045b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x2c0>
          mode_++;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045a6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80045aa:	3301      	adds	r3, #1
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80045b2:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
 80045b6:	e6d0      	b.n	800435a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045be:	461a      	mov	r2, r3
 80045c0:	2300      	movs	r3, #0
 80045c2:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
 80045c6:	e6c8      	b.n	800435a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045ce:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80045d2:	2b05      	cmp	r3, #5
 80045d4:	d119      	bne.n	800460a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x312>
        topic_ = data;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045dc:	461a      	mov	r2, r3
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	f8c2 38f4 	str.w	r3, [r2, #2292]	; 0x8f4
        mode_++;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045ea:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80045ee:	3301      	adds	r3, #1
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80045f6:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004600:	461a      	mov	r2, r3
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	f8c2 38fc 	str.w	r3, [r2, #2300]	; 0x8fc
 8004608:	e6a7      	b.n	800435a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004610:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004614:	2b06      	cmp	r3, #6
 8004616:	d123      	bne.n	8004660 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x368>
        topic_ += data << 8;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800461e:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	021b      	lsls	r3, r3, #8
 8004626:	4413      	add	r3, r2
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800462e:	f8c2 38f4 	str.w	r3, [r2, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004638:	461a      	mov	r2, r3
 800463a:	2307      	movs	r3, #7
 800463c:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
        if (bytes_ == 0)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004646:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 800464a:	2b00      	cmp	r3, #0
 800464c:	f47f ae85 	bne.w	800435a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004656:	461a      	mov	r2, r3
 8004658:	2308      	movs	r3, #8
 800465a:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
 800465e:	e67c      	b.n	800435a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004666:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800466a:	2b08      	cmp	r3, #8
 800466c:	f47f ae75 	bne.w	800435a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004676:	461a      	mov	r2, r3
 8004678:	2300      	movs	r3, #0
 800467a:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004684:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8004688:	425a      	negs	r2, r3
 800468a:	b2db      	uxtb	r3, r3
 800468c:	b2d2      	uxtb	r2, r2
 800468e:	bf58      	it	pl
 8004690:	4253      	negpl	r3, r2
 8004692:	2bff      	cmp	r3, #255	; 0xff
 8004694:	f47f ae61 	bne.w	800435a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800469e:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d116      	bne.n	80046d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x3dc>
            requestSyncTime();
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f000 f8aa 	bl	8004800 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
            negotiateTopics();
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f000 f8c6 	bl	800483e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046b8:	461a      	mov	r2, r3
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f8c2 3904 	str.w	r3, [r2, #2308]	; 0x904
            last_sync_receive_time = c_time;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046c6:	461a      	mov	r2, r3
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f8c2 3908 	str.w	r3, [r2, #2312]	; 0x908
            return SPIN_ERR;
 80046ce:	f04f 33ff 	mov.w	r3, #4294967295
 80046d2:	e085      	b.n	80047e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4e8>
          else if (topic_ == TopicInfo::ID_TIME)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046da:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80046de:	2b0a      	cmp	r3, #10
 80046e0:	d108      	bne.n	80046f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x3fc>
            syncTime(message_in);
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	f241 0324 	movw	r3, #4132	; 0x1024
 80046e8:	4413      	add	r3, r2
 80046ea:	4619      	mov	r1, r3
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f000 f987 	bl	8004a00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh>
 80046f2:	e632      	b.n	800435a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046fa:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80046fe:	2b06      	cmp	r3, #6
 8004700:	d112      	bne.n	8004728 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x430>
            req_param_resp.deserialize(message_in);
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	f641 1314 	movw	r3, #6420	; 0x1914
 8004708:	4413      	add	r3, r2
 800470a:	6879      	ldr	r1, [r7, #4]
 800470c:	f241 0224 	movw	r2, #4132	; 0x1024
 8004710:	440a      	add	r2, r1
 8004712:	4611      	mov	r1, r2
 8004714:	4618      	mov	r0, r3
 8004716:	f7fd fe5e 	bl	80023d6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004720:	2201      	movs	r2, #1
 8004722:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8004726:	e618      	b.n	800435a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800472e:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8004732:	2b0b      	cmp	r3, #11
 8004734:	d106      	bne.n	8004744 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x44c>
            configured_ = false;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800473c:	2200      	movs	r2, #0
 800473e:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8004742:	e60a      	b.n	800435a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
            if (subscribers[topic_ - 100])
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800474a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800474e:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f202 6222 	addw	r2, r2, #1570	; 0x622
 8004758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800475c:	2b00      	cmp	r3, #0
 800475e:	f43f adfc 	beq.w	800435a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
              subscribers[topic_ - 100]->callback(message_in);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004768:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800476c:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f202 6222 	addw	r2, r2, #1570	; 0x622
 8004776:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004780:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8004784:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f202 6222 	addw	r2, r2, #1570	; 0x622
 800478e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	6879      	ldr	r1, [r7, #4]
 8004798:	f241 0324 	movw	r3, #4132	; 0x1024
 800479c:	440b      	add	r3, r1
 800479e:	4619      	mov	r1, r3
 80047a0:	4790      	blx	r2
    while (true)
 80047a2:	e5da      	b.n	800435a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        break;
 80047a4:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047ac:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d014      	beq.n	80047de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4e6>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047ba:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 80047be:	68fa      	ldr	r2, [r7, #12]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d909      	bls.n	80047de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4e6>
      requestSyncTime();
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f000 f818 	bl	8004800 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047d6:	461a      	mov	r2, r3
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f8c2 3904 	str.w	r3, [r2, #2308]	; 0x904
    return SPIN_OK;
 80047de:	2300      	movs	r3, #0
  }
 80047e0:	4618      	mov	r0, r3
 80047e2:	3710      	adds	r7, #16
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE11getHardwareEv>:
  Hardware* getHardware()
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
    return &hardware_;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	3304      	adds	r3, #4
  }
 80047f4:	4618      	mov	r0, r3
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>:
  void requestSyncTime()
 8004800:	b580      	push	{r7, lr}
 8004802:	b086      	sub	sp, #24
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8004808:	f107 030c 	add.w	r3, r7, #12
 800480c:	4618      	mov	r0, r3
 800480e:	f7fd f949 	bl	8001aa4 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f107 020c 	add.w	r2, r7, #12
 800481c:	210a      	movs	r1, #10
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	4798      	blx	r3
    rt_time = hardware_.time();
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	3304      	adds	r3, #4
 8004826:	4618      	mov	r0, r3
 8004828:	f7fe f962 	bl	8002af0 <_ZN13STM32Hardware4timeEv>
 800482c:	4602      	mov	r2, r0
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004834:	615a      	str	r2, [r3, #20]
  }
 8004836:	bf00      	nop
 8004838:	3718      	adds	r7, #24
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}

0800483e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 800483e:	b590      	push	{r4, r7, lr}
 8004840:	b08b      	sub	sp, #44	; 0x2c
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8004846:	f107 030c 	add.w	r3, r7, #12
 800484a:	4618      	mov	r0, r3
 800484c:	f7fd fa1a 	bl	8001c84 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8004850:	2300      	movs	r3, #0
 8004852:	627b      	str	r3, [r7, #36]	; 0x24
 8004854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004856:	2b18      	cmp	r3, #24
 8004858:	dc63      	bgt.n	8004922 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485e:	f503 63c1 	add.w	r3, r3, #1544	; 0x608
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	4413      	add	r3, r2
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d056      	beq.n	800491a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004870:	f503 63c1 	add.w	r3, r3, #1544	; 0x608
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	4413      	add	r3, r2
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	b29b      	uxth	r3, r3
 800487e:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004884:	f503 63c1 	add.w	r3, r3, #1544	; 0x608
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	4413      	add	r3, r2
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004896:	f503 63c1 	add.w	r3, r3, #1544	; 0x608
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	4413      	add	r3, r2
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	6859      	ldr	r1, [r3, #4]
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a6:	f503 63c1 	add.w	r3, r3, #1544	; 0x608
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	4413      	add	r3, r2
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	3308      	adds	r3, #8
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4608      	mov	r0, r1
 80048ba:	4798      	blx	r3
 80048bc:	4603      	mov	r3, r0
 80048be:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c4:	f503 63c1 	add.w	r3, r3, #1544	; 0x608
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	4413      	add	r3, r2
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	6859      	ldr	r1, [r3, #4]
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d4:	f503 63c1 	add.w	r3, r3, #1544	; 0x608
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	4413      	add	r3, r2
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	330c      	adds	r3, #12
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4608      	mov	r0, r1
 80048e8:	4798      	blx	r3
 80048ea:	4603      	mov	r3, r0
 80048ec:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 80048ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048f2:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681c      	ldr	r4, [r3, #0]
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fe:	f503 63c1 	add.w	r3, r3, #1544	; 0x608
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	4413      	add	r3, r2
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	4618      	mov	r0, r3
 800490a:	f7fd ff1c 	bl	8002746 <_ZN3ros9Publisher15getEndpointTypeEv>
 800490e:	4601      	mov	r1, r0
 8004910:	f107 030c 	add.w	r3, r7, #12
 8004914:	461a      	mov	r2, r3
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800491a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491c:	3301      	adds	r3, #1
 800491e:	627b      	str	r3, [r7, #36]	; 0x24
 8004920:	e798      	b.n	8004854 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004922:	2300      	movs	r3, #0
 8004924:	627b      	str	r3, [r7, #36]	; 0x24
 8004926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004928:	2b18      	cmp	r3, #24
 800492a:	dc5f      	bgt.n	80049ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004930:	f202 6222 	addw	r2, r2, #1570	; 0x622
 8004934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d053      	beq.n	80049e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004940:	f202 6222 	addw	r2, r2, #1570	; 0x622
 8004944:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	b29b      	uxth	r3, r3
 800494c:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004952:	f202 6222 	addw	r2, r2, #1570	; 0x622
 8004956:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004962:	f202 6222 	addw	r2, r2, #1570	; 0x622
 8004966:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800496e:	f202 6222 	addw	r2, r2, #1570	; 0x622
 8004972:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	3308      	adds	r3, #8
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4608      	mov	r0, r1
 800497e:	4798      	blx	r3
 8004980:	4603      	mov	r3, r0
 8004982:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004988:	f202 6222 	addw	r2, r2, #1570	; 0x622
 800498c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004994:	f202 6222 	addw	r2, r2, #1570	; 0x622
 8004998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	330c      	adds	r3, #12
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4608      	mov	r0, r1
 80049a4:	4798      	blx	r3
 80049a6:	4603      	mov	r3, r0
 80049a8:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 80049aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049ae:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681c      	ldr	r4, [r3, #0]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049ba:	f202 6222 	addw	r2, r2, #1570	; 0x622
 80049be:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049c6:	f202 6222 	addw	r2, r2, #1570	; 0x622
 80049ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	3304      	adds	r3, #4
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4608      	mov	r0, r1
 80049d6:	4798      	blx	r3
 80049d8:	4601      	mov	r1, r0
 80049da:	f107 030c 	add.w	r3, r7, #12
 80049de:	461a      	mov	r2, r3
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80049e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e6:	3301      	adds	r3, #1
 80049e8:	627b      	str	r3, [r7, #36]	; 0x24
 80049ea:	e79c      	b.n	8004926 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 80049f8:	bf00      	nop
 80049fa:	372c      	adds	r7, #44	; 0x2c
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd90      	pop	{r4, r7, pc}

08004a00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b086      	sub	sp, #24
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8004a0a:	f107 0308 	add.w	r3, r7, #8
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f7fd f848 	bl	8001aa4 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	3304      	adds	r3, #4
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f7fe f869 	bl	8002af0 <_ZN13STM32Hardware4timeEv>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a26:	695b      	ldr	r3, [r3, #20]
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8004a2c:	f107 0308 	add.w	r3, r7, #8
 8004a30:	6839      	ldr	r1, [r7, #0]
 8004a32:	4618      	mov	r0, r3
 8004a34:	f7fd f8a6 	bl	8001b84 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8004a38:	68fa      	ldr	r2, [r7, #12]
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	4915      	ldr	r1, [pc, #84]	; (8004a94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x94>)
 8004a3e:	fba1 1303 	umull	r1, r3, r1, r3
 8004a42:	099b      	lsrs	r3, r3, #6
 8004a44:	4413      	add	r3, r2
 8004a46:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8004a48:	6939      	ldr	r1, [r7, #16]
 8004a4a:	697a      	ldr	r2, [r7, #20]
 8004a4c:	4b11      	ldr	r3, [pc, #68]	; (8004a94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x94>)
 8004a4e:	fba3 0302 	umull	r0, r3, r3, r2
 8004a52:	099b      	lsrs	r3, r3, #6
 8004a54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004a58:	fb00 f303 	mul.w	r3, r0, r3
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	4a0e      	ldr	r2, [pc, #56]	; (8004a98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x98>)
 8004a60:	fb02 f303 	mul.w	r3, r2, r3
 8004a64:	440b      	add	r3, r1
 8004a66:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8004a68:	f107 0308 	add.w	r3, r7, #8
 8004a6c:	3304      	adds	r3, #4
 8004a6e:	4619      	mov	r1, r3
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f000 f8bf 	bl	8004bf4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	3304      	adds	r3, #4
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f7fe f838 	bl	8002af0 <_ZN13STM32Hardware4timeEv>
 8004a80:	4602      	mov	r2, r0
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a88:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 8004a8c:	bf00      	nop
 8004a8e:	3718      	adds	r7, #24
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	10624dd3 	.word	0x10624dd3
 8004a98:	000f4240 	.word	0x000f4240

08004a9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b088      	sub	sp, #32
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	60f8      	str	r0, [r7, #12]
 8004aa4:	60b9      	str	r1, [r7, #8]
 8004aa6:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	2b63      	cmp	r3, #99	; 0x63
 8004aac:	dd0b      	ble.n	8004ac6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x2a>
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ab4:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8004ab8:	f083 0301 	eor.w	r3, r3, #1
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d001      	beq.n	8004ac6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	e090      	b.n	8004be8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x14c>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	68f9      	ldr	r1, [r7, #12]
 8004ace:	f241 4324 	movw	r3, #5156	; 0x1424
 8004ad2:	440b      	add	r3, r1
 8004ad4:	3307      	adds	r3, #7
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	4790      	blx	r2
 8004adc:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ae4:	22ff      	movs	r2, #255	; 0xff
 8004ae6:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
    message_out[1] = PROTOCOL_VER;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004af0:	22fe      	movs	r2, #254	; 0xfe
 8004af2:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	b2da      	uxtb	r2, r3
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b00:	f883 2426 	strb.w	r2, [r3, #1062]	; 0x426
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	0a1b      	lsrs	r3, r3, #8
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	b2da      	uxtb	r2, r3
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b14:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b1e:	f893 2426 	ldrb.w	r2, [r3, #1062]	; 0x426
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b28:	f893 3427 	ldrb.w	r3, [r3, #1063]	; 0x427
 8004b2c:	4413      	add	r3, r2
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	43db      	mvns	r3, r3
 8004b32:	b2da      	uxtb	r2, r3
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b3a:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	b2da      	uxtb	r2, r3
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b48:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	b21b      	sxth	r3, r3
 8004b50:	121b      	asrs	r3, r3, #8
 8004b52:	b21b      	sxth	r3, r3
 8004b54:	b2da      	uxtb	r2, r3
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b5c:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a

    /* calculate checksum */
    int chk = 0;
 8004b60:	2300      	movs	r3, #0
 8004b62:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004b64:	2305      	movs	r3, #5
 8004b66:	61bb      	str	r3, [r7, #24]
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	3306      	adds	r3, #6
 8004b6c:	69ba      	ldr	r2, [r7, #24]
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	dc0e      	bgt.n	8004b90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xf4>
      chk += message_out[i];
 8004b72:	68fa      	ldr	r2, [r7, #12]
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	441a      	add	r2, r3
 8004b78:	f241 4324 	movw	r3, #5156	; 0x1424
 8004b7c:	4413      	add	r3, r2
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	461a      	mov	r2, r3
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	4413      	add	r3, r2
 8004b86:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	3301      	adds	r3, #1
 8004b8c:	61bb      	str	r3, [r7, #24]
 8004b8e:	e7eb      	b.n	8004b68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xcc>
    l += 7;
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	3307      	adds	r3, #7
 8004b94:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	425a      	negs	r2, r3
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	b2d2      	uxtb	r2, r2
 8004b9e:	bf58      	it	pl
 8004ba0:	4253      	negpl	r3, r2
 8004ba2:	b2da      	uxtb	r2, r3
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	1c59      	adds	r1, r3, #1
 8004ba8:	6179      	str	r1, [r7, #20]
 8004baa:	43d2      	mvns	r2, r2
 8004bac:	b2d1      	uxtb	r1, r2
 8004bae:	68fa      	ldr	r2, [r7, #12]
 8004bb0:	441a      	add	r2, r3
 8004bb2:	f241 4324 	movw	r3, #5156	; 0x1424
 8004bb6:	4413      	add	r3, r2
 8004bb8:	460a      	mov	r2, r1
 8004bba:	701a      	strb	r2, [r3, #0]

    if (l <= OUTPUT_SIZE)
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bc2:	dc0b      	bgt.n	8004bdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x140>
    {
      hardware_.write(message_out, l);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	1d18      	adds	r0, r3, #4
 8004bc8:	68fa      	ldr	r2, [r7, #12]
 8004bca:	f241 4324 	movw	r3, #5156	; 0x1424
 8004bce:	4413      	add	r3, r2
 8004bd0:	697a      	ldr	r2, [r7, #20]
 8004bd2:	4619      	mov	r1, r3
 8004bd4:	f7fd ff42 	bl	8002a5c <_ZN13STM32Hardware5writeEPhi>
      return l;
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	e005      	b.n	8004be8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x14c>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8004bdc:	4904      	ldr	r1, [pc, #16]	; (8004bf0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x154>)
 8004bde:	68f8      	ldr	r0, [r7, #12]
 8004be0:	f000 f84c 	bl	8004c7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8logerrorEPKc>
      return -1;
 8004be4:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8004be8:	4618      	mov	r0, r3
 8004bea:	3720      	adds	r7, #32
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}
 8004bf0:	08011a68 	.word	0x08011a68

08004bf4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	3304      	adds	r3, #4
 8004c02:	4618      	mov	r0, r3
 8004c04:	f7fd ff74 	bl	8002af0 <_ZN13STM32Hardware4timeEv>
 8004c08:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	4917      	ldr	r1, [pc, #92]	; (8004c70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x7c>)
 8004c12:	fba1 1303 	umull	r1, r3, r1, r3
 8004c16:	099b      	lsrs	r3, r3, #6
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	3b01      	subs	r3, #1
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004c22:	6193      	str	r3, [r2, #24]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	6859      	ldr	r1, [r3, #4]
 8004c28:	68fa      	ldr	r2, [r7, #12]
 8004c2a:	4b11      	ldr	r3, [pc, #68]	; (8004c70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x7c>)
 8004c2c:	fba3 0302 	umull	r0, r3, r3, r2
 8004c30:	099b      	lsrs	r3, r3, #6
 8004c32:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004c36:	fb00 f303 	mul.w	r3, r0, r3
 8004c3a:	1ad3      	subs	r3, r2, r3
 8004c3c:	4a0d      	ldr	r2, [pc, #52]	; (8004c74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x80>)
 8004c3e:	fb02 f303 	mul.w	r3, r2, r3
 8004c42:	1aca      	subs	r2, r1, r3
 8004c44:	4b0c      	ldr	r3, [pc, #48]	; (8004c78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x84>)
 8004c46:	4413      	add	r3, r2
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004c4e:	61d3      	str	r3, [r2, #28]
    normalizeSecNSec(sec_offset, nsec_offset);
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	f241 0318 	movw	r3, #4120	; 0x1018
 8004c56:	4413      	add	r3, r2
 8004c58:	6879      	ldr	r1, [r7, #4]
 8004c5a:	f241 021c 	movw	r2, #4124	; 0x101c
 8004c5e:	440a      	add	r2, r1
 8004c60:	4611      	mov	r1, r2
 8004c62:	4618      	mov	r0, r3
 8004c64:	f7fb fcde 	bl	8000624 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8004c68:	bf00      	nop
 8004c6a:	3710      	adds	r7, #16
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}
 8004c70:	10624dd3 	.word	0x10624dd3
 8004c74:	000f4240 	.word	0x000f4240
 8004c78:	3b9aca00 	.word	0x3b9aca00

08004c7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b082      	sub	sp, #8
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8004c86:	683a      	ldr	r2, [r7, #0]
 8004c88:	2103      	movs	r1, #3
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f000 f804 	bl	8004c98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE3logEcPKc>
  }
 8004c90:	bf00      	nop
 8004c92:	3708      	adds	r7, #8
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}

08004c98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE3logEcPKc>:
  void log(char byte, const char * msg)
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b088      	sub	sp, #32
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	460b      	mov	r3, r1
 8004ca2:	607a      	str	r2, [r7, #4]
 8004ca4:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8004ca6:	f107 0314 	add.w	r3, r7, #20
 8004caa:	4618      	mov	r0, r3
 8004cac:	f7fd f9ae 	bl	800200c <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8004cb0:	7afb      	ldrb	r3, [r7, #11]
 8004cb2:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f107 0214 	add.w	r2, r7, #20
 8004cc2:	2107      	movs	r1, #7
 8004cc4:	68f8      	ldr	r0, [r7, #12]
 8004cc6:	4798      	blx	r3
  }
 8004cc8:	bf00      	nop
 8004cca:	3720      	adds	r7, #32
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}

08004cd0 <_Z41__static_initialization_and_destruction_0ii>:
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b082      	sub	sp, #8
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d137      	bne.n	8004d50 <_Z41__static_initialization_and_destruction_0ii+0x80>
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d132      	bne.n	8004d50 <_Z41__static_initialization_and_destruction_0ii+0x80>
ros::NodeHandle nh;
 8004cea:	481b      	ldr	r0, [pc, #108]	; (8004d58 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8004cec:	f7ff f9b2 	bl	8004054 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev>
geometry_msgs::Point microswitch;
 8004cf0:	481a      	ldr	r0, [pc, #104]	; (8004d5c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8004cf2:	f7fd ff09 	bl	8002b08 <_ZN13geometry_msgs5PointC1Ev>
geometry_msgs::Point car_speed;
 8004cf6:	481a      	ldr	r0, [pc, #104]	; (8004d60 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8004cf8:	f7fd ff06 	bl	8002b08 <_ZN13geometry_msgs5PointC1Ev>
std_msgs::Int64 reset;
 8004cfc:	4819      	ldr	r0, [pc, #100]	; (8004d64 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8004cfe:	f7fe fc19 	bl	8003534 <_ZN8std_msgs5Int64C1Ev>
std_msgs::Float64 scaraflag;
 8004d02:	4819      	ldr	r0, [pc, #100]	; (8004d68 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8004d04:	f7fe fdd4 	bl	80038b0 <_ZN8std_msgs7Float64C1Ev>
ros::Subscriber<geometry_msgs::Point> mecanum_sub("mecanum_toSTM", ROS::mecanum_callback);
 8004d08:	2301      	movs	r3, #1
 8004d0a:	4a18      	ldr	r2, [pc, #96]	; (8004d6c <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8004d0c:	4918      	ldr	r1, [pc, #96]	; (8004d70 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8004d0e:	4819      	ldr	r0, [pc, #100]	; (8004d74 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8004d10:	f7ff fa4a 	bl	80041a8 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<geometry_msgs::Point> intake_sub("intake_toSTM", ROS::intake_callback);
 8004d14:	2301      	movs	r3, #1
 8004d16:	4a18      	ldr	r2, [pc, #96]	; (8004d78 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8004d18:	4918      	ldr	r1, [pc, #96]	; (8004d7c <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8004d1a:	4819      	ldr	r0, [pc, #100]	; (8004d80 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8004d1c:	f7ff fa44 	bl	80041a8 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<geometry_msgs::Point> scara_sub("scara_toSTM", ROS::scara_callback);
 8004d20:	2301      	movs	r3, #1
 8004d22:	4a18      	ldr	r2, [pc, #96]	; (8004d84 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8004d24:	4918      	ldr	r1, [pc, #96]	; (8004d88 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8004d26:	4819      	ldr	r0, [pc, #100]	; (8004d8c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8004d28:	f7ff fa3e 	bl	80041a8 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvEC1EPKcPFvRKS2_Ei>
ros::Publisher mecanum_pub("mecanum_fromSTM", &car_speed);
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	4a0c      	ldr	r2, [pc, #48]	; (8004d60 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8004d30:	4917      	ldr	r1, [pc, #92]	; (8004d90 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8004d32:	4818      	ldr	r0, [pc, #96]	; (8004d94 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8004d34:	f7fd fcdc 	bl	80026f0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher reset_pub("reset_fromSTM", &reset);
 8004d38:	2300      	movs	r3, #0
 8004d3a:	4a0a      	ldr	r2, [pc, #40]	; (8004d64 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8004d3c:	4916      	ldr	r1, [pc, #88]	; (8004d98 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8004d3e:	4817      	ldr	r0, [pc, #92]	; (8004d9c <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8004d40:	f7fd fcd6 	bl	80026f0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher scara_pub("scaraflag_fromSTM", &scaraflag);
 8004d44:	2300      	movs	r3, #0
 8004d46:	4a08      	ldr	r2, [pc, #32]	; (8004d68 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8004d48:	4915      	ldr	r1, [pc, #84]	; (8004da0 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8004d4a:	4816      	ldr	r0, [pc, #88]	; (8004da4 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8004d4c:	f7fd fcd0 	bl	80026f0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 8004d50:	bf00      	nop
 8004d52:	3708      	adds	r7, #8
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	240007b0 	.word	0x240007b0
 8004d5c:	240020f0 	.word	0x240020f0
 8004d60:	24002110 	.word	0x24002110
 8004d64:	24002130 	.word	0x24002130
 8004d68:	24002140 	.word	0x24002140
 8004d6c:	08003d79 	.word	0x08003d79
 8004d70:	08011aa4 	.word	0x08011aa4
 8004d74:	24002150 	.word	0x24002150
 8004d78:	08003d35 	.word	0x08003d35
 8004d7c:	08011ab4 	.word	0x08011ab4
 8004d80:	24002188 	.word	0x24002188
 8004d84:	08003c5d 	.word	0x08003c5d
 8004d88:	08011ac4 	.word	0x08011ac4
 8004d8c:	240021c0 	.word	0x240021c0
 8004d90:	08011ad0 	.word	0x08011ad0
 8004d94:	240021f8 	.word	0x240021f8
 8004d98:	08011ae0 	.word	0x08011ae0
 8004d9c:	2400220c 	.word	0x2400220c
 8004da0:	08011af0 	.word	0x08011af0
 8004da4:	24002220 	.word	0x24002220

08004da8 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b082      	sub	sp, #8
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	3310      	adds	r3, #16
 8004db6:	6839      	ldr	r1, [r7, #0]
 8004db8:	4618      	mov	r0, r3
 8004dba:	f7fe f840 	bl	8002e3e <_ZN13geometry_msgs5Point11deserializeEPh>
    this->cb_(msg);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	3210      	adds	r2, #16
 8004dc6:	4610      	mov	r0, r2
 8004dc8:	4798      	blx	r3
  }
 8004dca:	bf00      	nop
 8004dcc:	3708      	adds	r7, #8
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}

08004dd2 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8004dd2:	b480      	push	{r7}
 8004dd4:	b083      	sub	sp, #12
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  }
 8004dde:	4618      	mov	r0, r3
 8004de0:	370c      	adds	r7, #12
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr

08004dea <_ZN3ros10SubscriberIN13geometry_msgs5PointEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8004dea:	b580      	push	{r7, lr}
 8004dec:	b082      	sub	sp, #8
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	3310      	adds	r3, #16
 8004df6:	4618      	mov	r0, r3
 8004df8:	f7fe fb80 	bl	80034fc <_ZN13geometry_msgs5Point7getTypeEv>
 8004dfc:	4603      	mov	r3, r0
  }
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3708      	adds	r7, #8
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}

08004e06 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8004e06:	b580      	push	{r7, lr}
 8004e08:	b082      	sub	sp, #8
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	3310      	adds	r3, #16
 8004e12:	4618      	mov	r0, r3
 8004e14:	f7fe fb80 	bl	8003518 <_ZN13geometry_msgs5Point6getMD5Ev>
 8004e18:	4603      	mov	r3, r0
  }
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3708      	adds	r7, #8
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}

08004e22 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9connectedEv>:
  virtual bool connected()
 8004e22:	b480      	push	{r7}
 8004e24:	b083      	sub	sp, #12
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
    return configured_;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e30:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 8004e34:	4618      	mov	r0, r3
 8004e36:	370c      	adds	r7, #12
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr

08004e40 <_GLOBAL__sub_I_nh>:
 8004e40:	b580      	push	{r7, lr}
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004e48:	2001      	movs	r0, #1
 8004e4a:	f7ff ff41 	bl	8004cd0 <_Z41__static_initialization_and_destruction_0ii>
 8004e4e:	bd80      	pop	{r7, pc}

08004e50 <_ZN5SCARAC1Ev>:
#define AIR_PORT GPIOA
#define AIR_PIN GPIO_PIN_5

extern TIM_HandleTypeDef htim23;

struct SCARA{
 8004e50:	b480      	push	{r7}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	701a      	strb	r2, [r3, #0]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	605a      	str	r2, [r3, #4]
 8004e64:	6879      	ldr	r1, [r7, #4]
 8004e66:	f04f 0200 	mov.w	r2, #0
 8004e6a:	f04f 0300 	mov.w	r3, #0
 8004e6e:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8004e72:	6879      	ldr	r1, [r7, #4]
 8004e74:	f04f 0200 	mov.w	r2, #0
 8004e78:	4b4f      	ldr	r3, [pc, #316]	; (8004fb8 <_ZN5SCARAC1Ev+0x168>)
 8004e7a:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8004e7e:	6879      	ldr	r1, [r7, #4]
 8004e80:	a347      	add	r3, pc, #284	; (adr r3, 8004fa0 <_ZN5SCARAC1Ev+0x150>)
 8004e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e86:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 8004e8a:	6879      	ldr	r1, [r7, #4]
 8004e8c:	f04f 0200 	mov.w	r2, #0
 8004e90:	f04f 0300 	mov.w	r3, #0
 8004e94:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 8004e98:	6879      	ldr	r1, [r7, #4]
 8004e9a:	a341      	add	r3, pc, #260	; (adr r3, 8004fa0 <_ZN5SCARAC1Ev+0x150>)
 8004e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea0:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	641a      	str	r2, [r3, #64]	; 0x40
 8004eaa:	6879      	ldr	r1, [r7, #4]
 8004eac:	f04f 0200 	mov.w	r2, #0
 8004eb0:	4b42      	ldr	r3, [pc, #264]	; (8004fbc <_ZN5SCARAC1Ev+0x16c>)
 8004eb2:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
 8004eb6:	6879      	ldr	r1, [r7, #4]
 8004eb8:	f04f 0200 	mov.w	r2, #0
 8004ebc:	f04f 0300 	mov.w	r3, #0
 8004ec0:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8004ec4:	6879      	ldr	r1, [r7, #4]
 8004ec6:	f04f 0200 	mov.w	r2, #0
 8004eca:	4b3c      	ldr	r3, [pc, #240]	; (8004fbc <_ZN5SCARAC1Ev+0x16c>)
 8004ecc:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	661a      	str	r2, [r3, #96]	; 0x60
 8004ed6:	6879      	ldr	r1, [r7, #4]
 8004ed8:	f04f 0200 	mov.w	r2, #0
 8004edc:	f04f 0300 	mov.w	r3, #0
 8004ee0:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8004ee4:	6879      	ldr	r1, [r7, #4]
 8004ee6:	f04f 0200 	mov.w	r2, #0
 8004eea:	f04f 0300 	mov.w	r3, #0
 8004eee:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
 8004ef2:	6879      	ldr	r1, [r7, #4]
 8004ef4:	f04f 0200 	mov.w	r2, #0
 8004ef8:	f04f 0300 	mov.w	r3, #0
 8004efc:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8004f10:	6879      	ldr	r1, [r7, #4]
 8004f12:	a325      	add	r3, pc, #148	; (adr r3, 8004fa8 <_ZN5SCARAC1Ev+0x158>)
 8004f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f18:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
 8004f1c:	6879      	ldr	r1, [r7, #4]
 8004f1e:	a324      	add	r3, pc, #144	; (adr r3, 8004fb0 <_ZN5SCARAC1Ev+0x160>)
 8004f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f24:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
 8004f28:	6879      	ldr	r1, [r7, #4]
 8004f2a:	a321      	add	r3, pc, #132	; (adr r3, 8004fb0 <_ZN5SCARAC1Ev+0x160>)
 8004f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f30:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
 8004f34:	6879      	ldr	r1, [r7, #4]
 8004f36:	f04f 0200 	mov.w	r2, #0
 8004f3a:	f04f 0300 	mov.w	r3, #0
 8004f3e:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
 8004f42:	6879      	ldr	r1, [r7, #4]
 8004f44:	f04f 0200 	mov.w	r2, #0
 8004f48:	4b1d      	ldr	r3, [pc, #116]	; (8004fc0 <_ZN5SCARAC1Ev+0x170>)
 8004f4a:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8004f66:	6879      	ldr	r1, [r7, #4]
 8004f68:	f04f 0200 	mov.w	r2, #0
 8004f6c:	f04f 0300 	mov.w	r3, #0
 8004f70:	e9c1 2330 	strd	r2, r3, [r1, #192]	; 0xc0
 8004f74:	6879      	ldr	r1, [r7, #4]
 8004f76:	f04f 0200 	mov.w	r2, #0
 8004f7a:	4b0f      	ldr	r3, [pc, #60]	; (8004fb8 <_ZN5SCARAC1Ev+0x168>)
 8004f7c:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4618      	mov	r0, r3
 8004f94:	370c      	adds	r7, #12
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr
 8004f9e:	bf00      	nop
 8004fa0:	00000000 	.word	0x00000000
 8004fa4:	4070e000 	.word	0x4070e000
 8004fa8:	00000000 	.word	0x00000000
 8004fac:	40622000 	.word	0x40622000
 8004fb0:	00000000 	.word	0x00000000
 8004fb4:	40a00400 	.word	0x40a00400
 8004fb8:	c0490000 	.word	0xc0490000
 8004fbc:	c0668000 	.word	0xc0668000
 8004fc0:	3ff00000 	.word	0x3ff00000
 8004fc4:	00000000 	.word	0x00000000

08004fc8 <_ZN5SCARA3runEv>:
#include "scara.h"

SCARA sc;

void SCARA::run(){
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b082      	sub	sp, #8
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
	//'update' is used by ST
	if (update == 1){
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d119      	bne.n	800500e <_ZN5SCARA3runEv+0x46>
		x = ST_test_x;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	; 0xc0
 8004fe0:	6879      	ldr	r1, [r7, #4]
 8004fe2:	e9c1 2302 	strd	r2, r3, [r1, #8]
		y = ST_test_y;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 8004fec:	6879      	ldr	r1, [r7, #4]
 8004fee:	e9c1 2304 	strd	r2, r3, [r1, #16]
		flag = ST_test_flag;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8004ff8:	ee07 3a90 	vmov	s15, r3
 8004ffc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	ed83 7b2a 	vstr	d7, [r3, #168]	; 0xa8
		update = 0;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	}
while(flag!=0){
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	ed93 7b2a 	vldr	d7, [r3, #168]	; 0xa8
 8005014:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800501c:	f000 850e 	beq.w	8005a3c <_ZN5SCARA3runEv+0xa74>
	phi = count_phi(x,y);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	ed93 7b02 	vldr	d7, [r3, #8]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	ed93 6b04 	vldr	d6, [r3, #16]
 800502c:	eeb0 1b46 	vmov.f64	d1, d6
 8005030:	eeb0 0b47 	vmov.f64	d0, d7
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f000 fe63 	bl	8005d00 <_ZN5SCARA9count_phiEdd>
 800503a:	eeb0 7b40 	vmov.f64	d7, d0
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	ed83 7b06 	vstr	d7, [r3, #24]
		at = count_atan2(x,y);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	ed93 7b02 	vldr	d7, [r3, #8]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	ed93 6b04 	vldr	d6, [r3, #16]
 8005050:	eeb0 1b46 	vmov.f64	d1, d6
 8005054:	eeb0 0b47 	vmov.f64	d0, d7
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f000 fd15 	bl	8005a88 <_ZN5SCARA11count_atan2Edd>
 800505e:	eeb0 7b40 	vmov.f64	d7, d0
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	ed83 7b08 	vstr	d7, [r3, #32]
		if (count_atan2(x,y) < 0)at += 360;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	ed93 7b02 	vldr	d7, [r3, #8]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	ed93 6b04 	vldr	d6, [r3, #16]
 8005074:	eeb0 1b46 	vmov.f64	d1, d6
 8005078:	eeb0 0b47 	vmov.f64	d0, d7
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f000 fd03 	bl	8005a88 <_ZN5SCARA11count_atan2Edd>
 8005082:	eeb0 7b40 	vmov.f64	d7, d0
 8005086:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800508a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800508e:	bf4c      	ite	mi
 8005090:	2301      	movmi	r3, #1
 8005092:	2300      	movpl	r3, #0
 8005094:	b2db      	uxtb	r3, r3
 8005096:	2b00      	cmp	r3, #0
 8005098:	d009      	beq.n	80050ae <_ZN5SCARA3runEv+0xe6>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	ed93 7b08 	vldr	d7, [r3, #32]
 80050a0:	ed9f 6b9f 	vldr	d6, [pc, #636]	; 8005320 <_ZN5SCARA3runEv+0x358>
 80050a4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	ed83 7b08 	vstr	d7, [r3, #32]
		if (at + phi <= 230){
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	ed93 6b08 	vldr	d6, [r3, #32]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	ed93 7b06 	vldr	d7, [r3, #24]
 80050ba:	ee36 7b07 	vadd.f64	d7, d6, d7
 80050be:	ed9f 6b9a 	vldr	d6, [pc, #616]	; 8005328 <_ZN5SCARA3runEv+0x360>
 80050c2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80050c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050ca:	d81f      	bhi.n	800510c <_ZN5SCARA3runEv+0x144>
			angle_goal_1 = at + phi;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	ed93 6b08 	vldr	d6, [r3, #32]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	ed93 7b06 	vldr	d7, [r3, #24]
 80050d8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
			angle_goal_2 = -count_theta2(x,y);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	ed93 7b02 	vldr	d7, [r3, #8]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	ed93 6b04 	vldr	d6, [r3, #16]
 80050ee:	eeb0 1b46 	vmov.f64	d1, d6
 80050f2:	eeb0 0b47 	vmov.f64	d0, d7
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 fda6 	bl	8005c48 <_ZN5SCARA12count_theta2Edd>
 80050fc:	eeb0 7b40 	vmov.f64	d7, d0
 8005100:	eeb1 7b47 	vneg.f64	d7, d7
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
 800510a:	e02b      	b.n	8005164 <_ZN5SCARA3runEv+0x19c>
		}
		else if(at + phi > 230){
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	ed93 6b08 	vldr	d6, [r3, #32]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	ed93 7b06 	vldr	d7, [r3, #24]
 8005118:	ee36 7b07 	vadd.f64	d7, d6, d7
 800511c:	ed9f 6b82 	vldr	d6, [pc, #520]	; 8005328 <_ZN5SCARA3runEv+0x360>
 8005120:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005128:	dd1c      	ble.n	8005164 <_ZN5SCARA3runEv+0x19c>
			angle_goal_1 = at - phi;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	ed93 6b08 	vldr	d6, [r3, #32]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	ed93 7b06 	vldr	d7, [r3, #24]
 8005136:	ee36 7b47 	vsub.f64	d7, d6, d7
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
			angle_goal_2 = count_theta2(x,y);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	ed93 7b02 	vldr	d7, [r3, #8]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	ed93 6b04 	vldr	d6, [r3, #16]
 800514c:	eeb0 1b46 	vmov.f64	d1, d6
 8005150:	eeb0 0b47 	vmov.f64	d0, d7
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f000 fd77 	bl	8005c48 <_ZN5SCARA12count_theta2Edd>
 800515a:	eeb0 7b40 	vmov.f64	d7, d0
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
		}

		 if (air_pressure == 1)HAL_GPIO_WritePin(AIR_PORT, AIR_PIN, GPIO_PIN_RESET);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800516a:	2b01      	cmp	r3, #1
 800516c:	d105      	bne.n	800517a <_ZN5SCARA3runEv+0x1b2>
 800516e:	2200      	movs	r2, #0
 8005170:	2120      	movs	r1, #32
 8005172:	4875      	ldr	r0, [pc, #468]	; (8005348 <_ZN5SCARA3runEv+0x380>)
 8005174:	f005 fa6e 	bl	800a654 <HAL_GPIO_WritePin>
 8005178:	e009      	b.n	800518e <_ZN5SCARA3runEv+0x1c6>
		 else if (air_pressure == 0)HAL_GPIO_WritePin(AIR_PORT, AIR_PIN, GPIO_PIN_SET);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005180:	2b00      	cmp	r3, #0
 8005182:	d104      	bne.n	800518e <_ZN5SCARA3runEv+0x1c6>
 8005184:	2201      	movs	r2, #1
 8005186:	2120      	movs	r1, #32
 8005188:	486f      	ldr	r0, [pc, #444]	; (8005348 <_ZN5SCARA3runEv+0x380>)
 800518a:	f005 fa63 	bl	800a654 <HAL_GPIO_WritePin>

		 if (valve_switch == 1)HAL_GPIO_WritePin(VALVE_PORT, VALVE_PIN, GPIO_PIN_RESET);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005194:	2b01      	cmp	r3, #1
 8005196:	d105      	bne.n	80051a4 <_ZN5SCARA3runEv+0x1dc>
 8005198:	2200      	movs	r2, #0
 800519a:	2110      	movs	r1, #16
 800519c:	486a      	ldr	r0, [pc, #424]	; (8005348 <_ZN5SCARA3runEv+0x380>)
 800519e:	f005 fa59 	bl	800a654 <HAL_GPIO_WritePin>
 80051a2:	e009      	b.n	80051b8 <_ZN5SCARA3runEv+0x1f0>
		 else if (valve_switch == 0)HAL_GPIO_WritePin(VALVE_PORT, VALVE_PIN, GPIO_PIN_SET);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d104      	bne.n	80051b8 <_ZN5SCARA3runEv+0x1f0>
 80051ae:	2201      	movs	r2, #1
 80051b0:	2110      	movs	r1, #16
 80051b2:	4865      	ldr	r0, [pc, #404]	; (8005348 <_ZN5SCARA3runEv+0x380>)
 80051b4:	f005 fa4e 	bl	800a654 <HAL_GPIO_WritePin>

		 pulse_goal = 600 + 10 * servo_angle;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	ed93 7b22 	vldr	d7, [r3, #136]	; 0x88
 80051be:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80051c2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80051c6:	ed9f 6b5a 	vldr	d6, [pc, #360]	; 8005330 <_ZN5SCARA3runEv+0x368>
 80051ca:	ee37 7b06 	vadd.f64	d7, d7, d6
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
		 if (servo_angle == 145)__HAL_TIM_SET_COMPARE(&htim23, TIM_CHANNEL_1, pulse_now);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	ed93 7b22 	vldr	d7, [r3, #136]	; 0x88
 80051da:	ed9f 6b57 	vldr	d6, [pc, #348]	; 8005338 <_ZN5SCARA3runEv+0x370>
 80051de:	eeb4 7b46 	vcmp.f64	d7, d6
 80051e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051e6:	d109      	bne.n	80051fc <_ZN5SCARA3runEv+0x234>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	ed93 7b24 	vldr	d7, [r3, #144]	; 0x90
 80051ee:	4b57      	ldr	r3, [pc, #348]	; (800534c <_ZN5SCARA3runEv+0x384>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80051f6:	ee17 2a90 	vmov	r2, s15
 80051fa:	635a      	str	r2, [r3, #52]	; 0x34
		 if (pulse_now != pulse_goal){
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	ed93 6b24 	vldr	d6, [r3, #144]	; 0x90
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	ed93 7b26 	vldr	d7, [r3, #152]	; 0x98
 8005208:	eeb4 6b47 	vcmp.f64	d6, d7
 800520c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005210:	d052      	beq.n	80052b8 <_ZN5SCARA3runEv+0x2f0>
			 while (pulse_now < pulse_goal){
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	ed93 6b24 	vldr	d6, [r3, #144]	; 0x90
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	ed93 7b26 	vldr	d7, [r3, #152]	; 0x98
 800521e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005226:	d400      	bmi.n	800522a <_ZN5SCARA3runEv+0x262>
 8005228:	e018      	b.n	800525c <_ZN5SCARA3runEv+0x294>
				 pulse_now ++;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	ed93 7b24 	vldr	d7, [r3, #144]	; 0x90
 8005230:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005234:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
				 timer_delay(0.3);
 800523e:	2100      	movs	r1, #0
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f000 fc03 	bl	8005a4c <_ZN5SCARA11timer_delayEi>
				 __HAL_TIM_SET_COMPARE(&htim23, TIM_CHANNEL_1, pulse_now);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	ed93 7b24 	vldr	d7, [r3, #144]	; 0x90
 800524c:	4b3f      	ldr	r3, [pc, #252]	; (800534c <_ZN5SCARA3runEv+0x384>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8005254:	ee17 2a90 	vmov	r2, s15
 8005258:	635a      	str	r2, [r3, #52]	; 0x34
			 while (pulse_now < pulse_goal){
 800525a:	e7da      	b.n	8005212 <_ZN5SCARA3runEv+0x24a>
			 }
			 while (pulse_now > pulse_goal){
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	ed93 6b24 	vldr	d6, [r3, #144]	; 0x90
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	ed93 7b26 	vldr	d7, [r3, #152]	; 0x98
 8005268:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800526c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005270:	dd18      	ble.n	80052a4 <_ZN5SCARA3runEv+0x2dc>
				 pulse_now --;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	ed93 7b24 	vldr	d7, [r3, #144]	; 0x90
 8005278:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800527c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
				 timer_delay(0.3);
 8005286:	2100      	movs	r1, #0
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f000 fbdf 	bl	8005a4c <_ZN5SCARA11timer_delayEi>
				 __HAL_TIM_SET_COMPARE(&htim23, TIM_CHANNEL_1, pulse_now);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	ed93 7b24 	vldr	d7, [r3, #144]	; 0x90
 8005294:	4b2d      	ldr	r3, [pc, #180]	; (800534c <_ZN5SCARA3runEv+0x384>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800529c:	ee17 2a90 	vmov	r2, s15
 80052a0:	635a      	str	r2, [r3, #52]	; 0x34
			 while (pulse_now > pulse_goal){
 80052a2:	e7db      	b.n	800525c <_ZN5SCARA3runEv+0x294>
			 }
				  input_check = 1;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
				  pulse_now = pulse_goal;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 80052b2:	6879      	ldr	r1, [r7, #4]
 80052b4:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
		 }


		 if (angle_goal_1 != angle_now_1) {
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 80052c4:	eeb4 6b47 	vcmp.f64	d6, d7
 80052c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052cc:	f000 8089 	beq.w	80053e2 <_ZN5SCARA3runEv+0x41a>
			 step_1 = (double)(angle_goal_1 - angle_now_1)*4 *8 / 0.9;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 80052dc:	ee36 7b47 	vsub.f64	d7, d6, d7
 80052e0:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 80052e4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80052e8:	eeb2 6b00 	vmov.f64	d6, #32	; 0x41000000  8.0
 80052ec:	ee27 6b06 	vmul.f64	d6, d7, d6
 80052f0:	ed9f 5b13 	vldr	d5, [pc, #76]	; 8005340 <_ZN5SCARA3runEv+0x378>
 80052f4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30

			 if (step_1 >= 0) {
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8005304:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800530c:	db22      	blt.n	8005354 <_ZN5SCARA3runEv+0x38c>
				 HAL_GPIO_WritePin(DIR_PORT_1, DIR_PIN_1, GPIO_PIN_SET);
 800530e:	2201      	movs	r2, #1
 8005310:	2120      	movs	r1, #32
 8005312:	480f      	ldr	r0, [pc, #60]	; (8005350 <_ZN5SCARA3runEv+0x388>)
 8005314:	f005 f99e 	bl	800a654 <HAL_GPIO_WritePin>
 8005318:	e031      	b.n	800537e <_ZN5SCARA3runEv+0x3b6>
 800531a:	bf00      	nop
 800531c:	f3af 8000 	nop.w
 8005320:	00000000 	.word	0x00000000
 8005324:	40768000 	.word	0x40768000
 8005328:	00000000 	.word	0x00000000
 800532c:	406cc000 	.word	0x406cc000
 8005330:	00000000 	.word	0x00000000
 8005334:	4082c000 	.word	0x4082c000
 8005338:	00000000 	.word	0x00000000
 800533c:	40622000 	.word	0x40622000
 8005340:	cccccccd 	.word	0xcccccccd
 8005344:	3feccccc 	.word	0x3feccccc
 8005348:	58020000 	.word	0x58020000
 800534c:	24000578 	.word	0x24000578
 8005350:	58020800 	.word	0x58020800
			 } else if (step_1 < 0) {
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800535a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800535e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005362:	d50c      	bpl.n	800537e <_ZN5SCARA3runEv+0x3b6>
				 step_1 = -step_1;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800536a:	eeb1 7b47 	vneg.f64	d7, d7
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
				 HAL_GPIO_WritePin(DIR_PORT_1, DIR_PIN_1, GPIO_PIN_RESET);
 8005374:	2200      	movs	r2, #0
 8005376:	2120      	movs	r1, #32
 8005378:	4899      	ldr	r0, [pc, #612]	; (80055e0 <_ZN5SCARA3runEv+0x618>)
 800537a:	f005 f96b 	bl	800a654 <HAL_GPIO_WritePin>
			 }

			 if (state == 1)step_1 *= 1.02; //undetermined
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	ed93 7b28 	vldr	d7, [r3, #160]	; 0xa0
 8005384:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005388:	eeb4 7b46 	vcmp.f64	d7, d6
 800538c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005390:	d109      	bne.n	80053a6 <_ZN5SCARA3runEv+0x3de>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8005398:	ed9f 6b85 	vldr	d6, [pc, #532]	; 80055b0 <_ZN5SCARA3runEv+0x5e8>
 800539c:	ee27 7b06 	vmul.f64	d7, d7, d6
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
			 if (state == 2)step_1 *= 1.05; //undetermined
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	ed93 7b28 	vldr	d7, [r3, #160]	; 0xa0
 80053ac:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 80053b0:	eeb4 7b46 	vcmp.f64	d7, d6
 80053b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053b8:	d109      	bne.n	80053ce <_ZN5SCARA3runEv+0x406>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80053c0:	ed9f 6b7d 	vldr	d6, [pc, #500]	; 80055b8 <_ZN5SCARA3runEv+0x5f0>
 80053c4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
			 input_check = 1;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2201      	movs	r2, #1
 80053d2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
			 angle_now_1 = angle_goal_1;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80053dc:	6879      	ldr	r1, [r7, #4]
 80053de:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		}

		if (angle_goal_2 != angle_now_2) {
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 80053ee:	eeb4 6b47 	vcmp.f64	d6, d7
 80053f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053f6:	f000 80a7 	beq.w	8005548 <_ZN5SCARA3runEv+0x580>
			step_2 = (angle_goal_2 - angle_now_2)*8 / 0.9;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 8005406:	ee36 7b47 	vsub.f64	d7, d6, d7
 800540a:	eeb2 6b00 	vmov.f64	d6, #32	; 0x41000000  8.0
 800540e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8005412:	ed9f 5b6b 	vldr	d5, [pc, #428]	; 80055c0 <_ZN5SCARA3runEv+0x5f8>
 8005416:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50

			if (angle_now_2 >= 180 && angle_goal_2 < 180){
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 8005426:	ed9f 6b68 	vldr	d6, [pc, #416]	; 80055c8 <_ZN5SCARA3runEv+0x600>
 800542a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800542e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005432:	db14      	blt.n	800545e <_ZN5SCARA3runEv+0x496>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 800543a:	ed9f 6b63 	vldr	d6, [pc, #396]	; 80055c8 <_ZN5SCARA3runEv+0x600>
 800543e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005446:	d50a      	bpl.n	800545e <_ZN5SCARA3runEv+0x496>
				step_2 += 3200;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 800544e:	ed9f 6b60 	vldr	d6, [pc, #384]	; 80055d0 <_ZN5SCARA3runEv+0x608>
 8005452:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
 800545c:	e01d      	b.n	800549a <_ZN5SCARA3runEv+0x4d2>
			} else if (angle_now_2 < 180 && angle_goal_2 >= 180){
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 8005464:	ed9f 6b58 	vldr	d6, [pc, #352]	; 80055c8 <_ZN5SCARA3runEv+0x600>
 8005468:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800546c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005470:	d513      	bpl.n	800549a <_ZN5SCARA3runEv+0x4d2>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8005478:	ed9f 6b53 	vldr	d6, [pc, #332]	; 80055c8 <_ZN5SCARA3runEv+0x600>
 800547c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005484:	db09      	blt.n	800549a <_ZN5SCARA3runEv+0x4d2>
			   step_2 -= 3200;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 800548c:	ed9f 6b50 	vldr	d6, [pc, #320]	; 80055d0 <_ZN5SCARA3runEv+0x608>
 8005490:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
			}

			if (step_2 >= 0) {
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 80054a0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80054a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054a8:	db06      	blt.n	80054b8 <_ZN5SCARA3runEv+0x4f0>
				HAL_GPIO_WritePin(DIR_PORT_2, DIR_PIN_2, GPIO_PIN_SET);
 80054aa:	2201      	movs	r2, #1
 80054ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80054b0:	484c      	ldr	r0, [pc, #304]	; (80055e4 <_ZN5SCARA3runEv+0x61c>)
 80054b2:	f005 f8cf 	bl	800a654 <HAL_GPIO_WritePin>
 80054b6:	e015      	b.n	80054e4 <_ZN5SCARA3runEv+0x51c>
			} else if (step_2 < 0) {
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 80054be:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80054c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054c6:	d50d      	bpl.n	80054e4 <_ZN5SCARA3runEv+0x51c>
				step_2 = -step_2;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 80054ce:	eeb1 7b47 	vneg.f64	d7, d7
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
			    HAL_GPIO_WritePin(DIR_PORT_2, DIR_PIN_2, GPIO_PIN_RESET);
 80054d8:	2200      	movs	r2, #0
 80054da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80054de:	4841      	ldr	r0, [pc, #260]	; (80055e4 <_ZN5SCARA3runEv+0x61c>)
 80054e0:	f005 f8b8 	bl	800a654 <HAL_GPIO_WritePin>
			}

			if (state == 1)step_2 *= 1.02; //undetermined
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	ed93 7b28 	vldr	d7, [r3, #160]	; 0xa0
 80054ea:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80054ee:	eeb4 7b46 	vcmp.f64	d7, d6
 80054f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054f6:	d109      	bne.n	800550c <_ZN5SCARA3runEv+0x544>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 80054fe:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 80055b0 <_ZN5SCARA3runEv+0x5e8>
 8005502:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
			if (state == 2)step_2 *= 1.05; //undetermined
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	ed93 7b28 	vldr	d7, [r3, #160]	; 0xa0
 8005512:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 8005516:	eeb4 7b46 	vcmp.f64	d7, d6
 800551a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800551e:	d109      	bne.n	8005534 <_ZN5SCARA3runEv+0x56c>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 8005526:	ed9f 6b24 	vldr	d6, [pc, #144]	; 80055b8 <_ZN5SCARA3runEv+0x5f0>
 800552a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
				input_check = 1;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2201      	movs	r2, #1
 8005538:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
			    angle_now_2 = angle_goal_2;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8005542:	6879      	ldr	r1, [r7, #4]
 8005544:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
			}

		if (high_goal != high_now) {
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	ed93 6b1a 	vldr	d6, [r3, #104]	; 0x68
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	ed93 7b1e 	vldr	d7, [r3, #120]	; 0x78
 8005554:	eeb4 6b47 	vcmp.f64	d6, d7
 8005558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800555c:	d064      	beq.n	8005628 <_ZN5SCARA3runEv+0x660>
			step_3 = (high_goal - high_now)*200 *8 / 6;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	ed93 6b1a 	vldr	d6, [r3, #104]	; 0x68
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	ed93 7b1e 	vldr	d7, [r3, #120]	; 0x78
 800556a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800556e:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 80055d8 <_ZN5SCARA3runEv+0x610>
 8005572:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005576:	eeb2 6b00 	vmov.f64	d6, #32	; 0x41000000  8.0
 800557a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800557e:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8005582:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	ed83 7b1c 	vstr	d7, [r3, #112]	; 0x70

			if (step_3 >= 0) {
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 8005592:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800559a:	db25      	blt.n	80055e8 <_ZN5SCARA3runEv+0x620>
				HAL_GPIO_WritePin(DIR_PORT_3, DIR_PIN_3, GPIO_PIN_SET);
 800559c:	2201      	movs	r2, #1
 800559e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80055a2:	4810      	ldr	r0, [pc, #64]	; (80055e4 <_ZN5SCARA3runEv+0x61c>)
 80055a4:	f005 f856 	bl	800a654 <HAL_GPIO_WritePin>
 80055a8:	e034      	b.n	8005614 <_ZN5SCARA3runEv+0x64c>
 80055aa:	bf00      	nop
 80055ac:	f3af 8000 	nop.w
 80055b0:	851eb852 	.word	0x851eb852
 80055b4:	3ff051eb 	.word	0x3ff051eb
 80055b8:	cccccccd 	.word	0xcccccccd
 80055bc:	3ff0cccc 	.word	0x3ff0cccc
 80055c0:	cccccccd 	.word	0xcccccccd
 80055c4:	3feccccc 	.word	0x3feccccc
 80055c8:	00000000 	.word	0x00000000
 80055cc:	40668000 	.word	0x40668000
 80055d0:	00000000 	.word	0x00000000
 80055d4:	40a90000 	.word	0x40a90000
 80055d8:	00000000 	.word	0x00000000
 80055dc:	40690000 	.word	0x40690000
 80055e0:	58020800 	.word	0x58020800
 80055e4:	58021400 	.word	0x58021400
				} else if (step_3 < 0) {
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 80055ee:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80055f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055f6:	d50d      	bpl.n	8005614 <_ZN5SCARA3runEv+0x64c>
					step_3 = -step_3;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 80055fe:	eeb1 7b47 	vneg.f64	d7, d7
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	ed83 7b1c 	vstr	d7, [r3, #112]	; 0x70
					HAL_GPIO_WritePin(DIR_PORT_3, DIR_PIN_3, GPIO_PIN_RESET);
 8005608:	2200      	movs	r2, #0
 800560a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800560e:	48b6      	ldr	r0, [pc, #728]	; (80058e8 <_ZN5SCARA3runEv+0x920>)
 8005610:	f005 f820 	bl	800a654 <HAL_GPIO_WritePin>
				}
				input_check = 1;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
				high_now = high_goal;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8005622:	6879      	ldr	r1, [r7, #4]
 8005624:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
			}

			if (step_1 < 1 && step_1 > 0)step_1 = 1;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800562e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005632:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800563a:	d50d      	bpl.n	8005658 <_ZN5SCARA3runEv+0x690>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8005642:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800564a:	dd05      	ble.n	8005658 <_ZN5SCARA3runEv+0x690>
 800564c:	6879      	ldr	r1, [r7, #4]
 800564e:	f04f 0200 	mov.w	r2, #0
 8005652:	4ba6      	ldr	r3, [pc, #664]	; (80058ec <_ZN5SCARA3runEv+0x924>)
 8005654:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
			if (step_2 < 1 && step_2 > 0)step_2 = 1;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 800565e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005662:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800566a:	d50d      	bpl.n	8005688 <_ZN5SCARA3runEv+0x6c0>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 8005672:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800567a:	dd05      	ble.n	8005688 <_ZN5SCARA3runEv+0x6c0>
 800567c:	6879      	ldr	r1, [r7, #4]
 800567e:	f04f 0200 	mov.w	r2, #0
 8005682:	4b9a      	ldr	r3, [pc, #616]	; (80058ec <_ZN5SCARA3runEv+0x924>)
 8005684:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
			if (step_3 < 1 && step_3 > 0)step_3 = 1;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 800568e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005692:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800569a:	d50d      	bpl.n	80056b8 <_ZN5SCARA3runEv+0x6f0>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 80056a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80056a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056aa:	dd05      	ble.n	80056b8 <_ZN5SCARA3runEv+0x6f0>
 80056ac:	6879      	ldr	r1, [r7, #4]
 80056ae:	f04f 0200 	mov.w	r2, #0
 80056b2:	4b8e      	ldr	r3, [pc, #568]	; (80058ec <_ZN5SCARA3runEv+0x924>)
 80056b4:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70


			if (valve_switch == 1){
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d107      	bne.n	80056d2 <_ZN5SCARA3runEv+0x70a>
				timer_delay(2);
 80056c2:	2102      	movs	r1, #2
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f000 f9c1 	bl	8005a4c <_ZN5SCARA11timer_delayEi>
				valve_switch = 0;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
			}


			if (step_1 == 0 && step_2 == 0 && step_3 == 0 ){
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80056d8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80056dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056e0:	f47f ac95 	bne.w	800500e <_ZN5SCARA3runEv+0x46>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 80056ea:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80056ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056f2:	f47f ac8c 	bne.w	800500e <_ZN5SCARA3runEv+0x46>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 80056fc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005704:	f47f ac83 	bne.w	800500e <_ZN5SCARA3runEv+0x46>
				if (x == 0 && y == -50 && flag == 1){
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	ed93 7b02 	vldr	d7, [r3, #8]
 800570e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005716:	d13d      	bne.n	8005794 <_ZN5SCARA3runEv+0x7cc>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	ed93 7b04 	vldr	d7, [r3, #16]
 800571e:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 80058c8 <_ZN5SCARA3runEv+0x900>
 8005722:	eeb4 7b46 	vcmp.f64	d7, d6
 8005726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800572a:	d133      	bne.n	8005794 <_ZN5SCARA3runEv+0x7cc>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	ed93 7b2a 	vldr	d7, [r3, #168]	; 0xa8
 8005732:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005736:	eeb4 7b46 	vcmp.f64	d7, d6
 800573a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800573e:	d129      	bne.n	8005794 <_ZN5SCARA3runEv+0x7cc>
					step_1 = 60;
 8005740:	6879      	ldr	r1, [r7, #4]
 8005742:	f04f 0200 	mov.w	r2, #0
 8005746:	4b6a      	ldr	r3, [pc, #424]	; (80058f0 <_ZN5SCARA3runEv+0x928>)
 8005748:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
					HAL_GPIO_WritePin(DIR_PORT_1, DIR_PIN_1, GPIO_PIN_SET);
 800574c:	2201      	movs	r2, #1
 800574e:	2120      	movs	r1, #32
 8005750:	4868      	ldr	r0, [pc, #416]	; (80058f4 <_ZN5SCARA3runEv+0x92c>)
 8005752:	f004 ff7f 	bl	800a654 <HAL_GPIO_WritePin>
					step_2 = 15;
 8005756:	6879      	ldr	r1, [r7, #4]
 8005758:	f04f 0200 	mov.w	r2, #0
 800575c:	4b66      	ldr	r3, [pc, #408]	; (80058f8 <_ZN5SCARA3runEv+0x930>)
 800575e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
					HAL_GPIO_WritePin(DIR_PORT_2, DIR_PIN_2, GPIO_PIN_RESET);
 8005762:	2200      	movs	r2, #0
 8005764:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005768:	485f      	ldr	r0, [pc, #380]	; (80058e8 <_ZN5SCARA3runEv+0x920>)
 800576a:	f004 ff73 	bl	800a654 <HAL_GPIO_WritePin>
					step_3 = 1000;
 800576e:	6879      	ldr	r1, [r7, #4]
 8005770:	f04f 0200 	mov.w	r2, #0
 8005774:	4b61      	ldr	r3, [pc, #388]	; (80058fc <_ZN5SCARA3runEv+0x934>)
 8005776:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
					HAL_GPIO_WritePin(DIR_PORT_3, DIR_PIN_3, GPIO_PIN_SET);
 800577a:	2201      	movs	r2, #1
 800577c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005780:	4859      	ldr	r0, [pc, #356]	; (80058e8 <_ZN5SCARA3runEv+0x920>)
 8005782:	f004 ff67 	bl	800a654 <HAL_GPIO_WritePin>
					flag = 6;
 8005786:	6879      	ldr	r1, [r7, #4]
 8005788:	f04f 0200 	mov.w	r2, #0
 800578c:	4b5c      	ldr	r3, [pc, #368]	; (8005900 <_ZN5SCARA3runEv+0x938>)
 800578e:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
 8005792:	e151      	b.n	8005a38 <_ZN5SCARA3runEv+0xa70>
				}
				else if (flag == 2) flag = 6;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	ed93 7b2a 	vldr	d7, [r3, #168]	; 0xa8
 800579a:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 800579e:	eeb4 7b46 	vcmp.f64	d7, d6
 80057a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057a6:	d106      	bne.n	80057b6 <_ZN5SCARA3runEv+0x7ee>
 80057a8:	6879      	ldr	r1, [r7, #4]
 80057aa:	f04f 0200 	mov.w	r2, #0
 80057ae:	4b54      	ldr	r3, [pc, #336]	; (8005900 <_ZN5SCARA3runEv+0x938>)
 80057b0:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
 80057b4:	e42b      	b.n	800500e <_ZN5SCARA3runEv+0x46>
				else if (flag == 3){
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	ed93 7b2a 	vldr	d7, [r3, #168]	; 0xa8
 80057bc:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 80057c0:	eeb4 7b46 	vcmp.f64	d7, d6
 80057c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057c8:	f040 80bc 	bne.w	8005944 <_ZN5SCARA3runEv+0x97c>
					air_pressure = 1, valve_switch = 0;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2200      	movs	r2, #0
 80057d8:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					if (high_state == 0){
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d149      	bne.n	800587a <_ZN5SCARA3runEv+0x8b2>
						if (state == 0)servo_angle = 20,state++;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	ed93 7b28 	vldr	d7, [r3, #160]	; 0xa0
 80057ec:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80057f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057f4:	d110      	bne.n	8005818 <_ZN5SCARA3runEv+0x850>
 80057f6:	6879      	ldr	r1, [r7, #4]
 80057f8:	f04f 0200 	mov.w	r2, #0
 80057fc:	4b41      	ldr	r3, [pc, #260]	; (8005904 <_ZN5SCARA3runEv+0x93c>)
 80057fe:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	ed93 7b28 	vldr	d7, [r3, #160]	; 0xa0
 8005808:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800580c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	ed83 7b28 	vstr	d7, [r3, #160]	; 0xa0
 8005816:	e02a      	b.n	800586e <_ZN5SCARA3runEv+0x8a6>
						else if (state == 1)servo_angle = 270, state++;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	ed93 7b28 	vldr	d7, [r3, #160]	; 0xa0
 800581e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005822:	eeb4 7b46 	vcmp.f64	d7, d6
 8005826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800582a:	d110      	bne.n	800584e <_ZN5SCARA3runEv+0x886>
 800582c:	6879      	ldr	r1, [r7, #4]
 800582e:	a328      	add	r3, pc, #160	; (adr r3, 80058d0 <_ZN5SCARA3runEv+0x908>)
 8005830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005834:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	ed93 7b28 	vldr	d7, [r3, #160]	; 0xa0
 800583e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005842:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	ed83 7b28 	vstr	d7, [r3, #160]	; 0xa0
 800584c:	e00f      	b.n	800586e <_ZN5SCARA3runEv+0x8a6>
						else if (state == 2)servo_angle = 145;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	ed93 7b28 	vldr	d7, [r3, #160]	; 0xa0
 8005854:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 8005858:	eeb4 7b46 	vcmp.f64	d7, d6
 800585c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005860:	d105      	bne.n	800586e <_ZN5SCARA3runEv+0x8a6>
 8005862:	6879      	ldr	r1, [r7, #4]
 8005864:	a31c      	add	r3, pc, #112	; (adr r3, 80058d8 <_ZN5SCARA3runEv+0x910>)
 8005866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800586a:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
						high_state = 1;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2201      	movs	r2, #1
 8005872:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8005876:	f7ff bbca 	b.w	800500e <_ZN5SCARA3runEv+0x46>
					}
					else if (high_state == 1){
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005880:	2b01      	cmp	r3, #1
 8005882:	d10b      	bne.n	800589c <_ZN5SCARA3runEv+0x8d4>
						high_goal = -93;
 8005884:	6879      	ldr	r1, [r7, #4]
 8005886:	a316      	add	r3, pc, #88	; (adr r3, 80058e0 <_ZN5SCARA3runEv+0x918>)
 8005888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800588c:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
						high_state = 2;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2202      	movs	r2, #2
 8005894:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8005898:	f7ff bbb9 	b.w	800500e <_ZN5SCARA3runEv+0x46>
					}
					else if (high_state == 2){
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058a2:	2b02      	cmp	r3, #2
 80058a4:	d130      	bne.n	8005908 <_ZN5SCARA3runEv+0x940>
						timer_delay(2);
 80058a6:	2102      	movs	r1, #2
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f000 f8cf 	bl	8005a4c <_ZN5SCARA11timer_delayEi>
						high_goal = 0;
 80058ae:	6879      	ldr	r1, [r7, #4]
 80058b0:	f04f 0200 	mov.w	r2, #0
 80058b4:	f04f 0300 	mov.w	r3, #0
 80058b8:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
						high_state = 3;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2203      	movs	r2, #3
 80058c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80058c4:	f7ff bba3 	b.w	800500e <_ZN5SCARA3runEv+0x46>
 80058c8:	00000000 	.word	0x00000000
 80058cc:	c0490000 	.word	0xc0490000
 80058d0:	00000000 	.word	0x00000000
 80058d4:	4070e000 	.word	0x4070e000
 80058d8:	00000000 	.word	0x00000000
 80058dc:	40622000 	.word	0x40622000
 80058e0:	00000000 	.word	0x00000000
 80058e4:	c0574000 	.word	0xc0574000
 80058e8:	58021400 	.word	0x58021400
 80058ec:	3ff00000 	.word	0x3ff00000
 80058f0:	404e0000 	.word	0x404e0000
 80058f4:	58020800 	.word	0x58020800
 80058f8:	402e0000 	.word	0x402e0000
 80058fc:	408f4000 	.word	0x408f4000
 8005900:	40180000 	.word	0x40180000
 8005904:	40340000 	.word	0x40340000
					}
					else if(high_state == 3 && pulse_now == pulse_goal){
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800590e:	2b03      	cmp	r3, #3
 8005910:	f47f ab7d 	bne.w	800500e <_ZN5SCARA3runEv+0x46>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	ed93 6b24 	vldr	d6, [r3, #144]	; 0x90
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	ed93 7b26 	vldr	d7, [r3, #152]	; 0x98
 8005920:	eeb4 6b47 	vcmp.f64	d6, d7
 8005924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005928:	f47f ab71 	bne.w	800500e <_ZN5SCARA3runEv+0x46>
						high_state = 0;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
						flag = 6;
 8005934:	6879      	ldr	r1, [r7, #4]
 8005936:	f04f 0200 	mov.w	r2, #0
 800593a:	4b42      	ldr	r3, [pc, #264]	; (8005a44 <_ZN5SCARA3runEv+0xa7c>)
 800593c:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
 8005940:	f7ff bb65 	b.w	800500e <_ZN5SCARA3runEv+0x46>
					}
				}else if (step_1 == 0 && step_2 == 0 && flag == 4){
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800594a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800594e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005952:	d127      	bne.n	80059a4 <_ZN5SCARA3runEv+0x9dc>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 800595a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800595e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005962:	d11f      	bne.n	80059a4 <_ZN5SCARA3runEv+0x9dc>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	ed93 7b2a 	vldr	d7, [r3, #168]	; 0xa8
 800596a:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 800596e:	eeb4 7b46 	vcmp.f64	d7, d6
 8005972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005976:	d115      	bne.n	80059a4 <_ZN5SCARA3runEv+0x9dc>
					air_pressure = 0;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2200      	movs	r2, #0
 800597c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					valve_switch = 1;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					state = 0;
 8005988:	6879      	ldr	r1, [r7, #4]
 800598a:	f04f 0200 	mov.w	r2, #0
 800598e:	f04f 0300 	mov.w	r3, #0
 8005992:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
					flag = 6;
 8005996:	6879      	ldr	r1, [r7, #4]
 8005998:	f04f 0200 	mov.w	r2, #0
 800599c:	4b29      	ldr	r3, [pc, #164]	; (8005a44 <_ZN5SCARA3runEv+0xa7c>)
 800599e:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
 80059a2:	e049      	b.n	8005a38 <_ZN5SCARA3runEv+0xa70>
				}else if (step_1 == 0 && step_2 == 0 && step_3 ==0 && flag == 5){
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80059aa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80059ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059b2:	d126      	bne.n	8005a02 <_ZN5SCARA3runEv+0xa3a>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 80059ba:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80059be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059c2:	d11e      	bne.n	8005a02 <_ZN5SCARA3runEv+0xa3a>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 80059ca:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80059ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059d2:	d116      	bne.n	8005a02 <_ZN5SCARA3runEv+0xa3a>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	ed93 7b2a 	vldr	d7, [r3, #168]	; 0xa8
 80059da:	eeb1 6b04 	vmov.f64	d6, #20	; 0x40a00000  5.0
 80059de:	eeb4 7b46 	vcmp.f64	d7, d6
 80059e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059e6:	d10c      	bne.n	8005a02 <_ZN5SCARA3runEv+0xa3a>
					high_goal = -10;
 80059e8:	6879      	ldr	r1, [r7, #4]
 80059ea:	f04f 0200 	mov.w	r2, #0
 80059ee:	4b16      	ldr	r3, [pc, #88]	; (8005a48 <_ZN5SCARA3runEv+0xa80>)
 80059f0:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
					flag = 6;
 80059f4:	6879      	ldr	r1, [r7, #4]
 80059f6:	f04f 0200 	mov.w	r2, #0
 80059fa:	4b12      	ldr	r3, [pc, #72]	; (8005a44 <_ZN5SCARA3runEv+0xa7c>)
 80059fc:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
 8005a00:	e01a      	b.n	8005a38 <_ZN5SCARA3runEv+0xa70>
				}else if (step_3 == 0 && flag == 6){
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 8005a08:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005a0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a10:	f47f aafd 	bne.w	800500e <_ZN5SCARA3runEv+0x46>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	ed93 7b2a 	vldr	d7, [r3, #168]	; 0xa8
 8005a1a:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 8005a1e:	eeb4 7b46 	vcmp.f64	d7, d6
 8005a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a26:	f47f aaf2 	bne.w	800500e <_ZN5SCARA3runEv+0x46>
					flag =0 ;
 8005a2a:	6879      	ldr	r1, [r7, #4]
 8005a2c:	f04f 0200 	mov.w	r2, #0
 8005a30:	f04f 0300 	mov.w	r3, #0
 8005a34:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
while(flag!=0){
 8005a38:	f7ff bae9 	b.w	800500e <_ZN5SCARA3runEv+0x46>
				}
			 }
	}
}
 8005a3c:	bf00      	nop
 8005a3e:	3708      	adds	r7, #8
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}
 8005a44:	40180000 	.word	0x40180000
 8005a48:	c0240000 	.word	0xc0240000

08005a4c <_ZN5SCARA11timer_delayEi>:



void SCARA::timer_delay(int sec){
 8005a4c:	b480      	push	{r7}
 8005a4e:	b083      	sub	sp, #12
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	6039      	str	r1, [r7, #0]
	SCARA::timer_flag = true;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2201      	movs	r2, #1
 8005a5a:	701a      	strb	r2, [r3, #0]
	while(SCARA::timer_count <= sec*1000);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	685a      	ldr	r2, [r3, #4]
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005a66:	fb01 f303 	mul.w	r3, r1, r3
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	dc00      	bgt.n	8005a70 <_ZN5SCARA11timer_delayEi+0x24>
 8005a6e:	e7f5      	b.n	8005a5c <_ZN5SCARA11timer_delayEi+0x10>
	SCARA::timer_count =0;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	605a      	str	r2, [r3, #4]
	SCARA::timer_flag = false;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	701a      	strb	r2, [r3, #0]
}
 8005a7c:	bf00      	nop
 8005a7e:	370c      	adds	r7, #12
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr

08005a88 <_ZN5SCARA11count_atan2Edd>:

double SCARA::count_atan2(double x, double y)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b08a      	sub	sp, #40	; 0x28
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6178      	str	r0, [r7, #20]
 8005a90:	ed87 0b02 	vstr	d0, [r7, #8]
 8005a94:	ed87 1b00 	vstr	d1, [r7]
 double atan2;
 double temp = y/x;
 8005a98:	ed97 5b00 	vldr	d5, [r7]
 8005a9c:	ed97 6b02 	vldr	d6, [r7, #8]
 8005aa0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005aa4:	ed87 7b06 	vstr	d7, [r7, #24]
 if(x > 0){
 8005aa8:	ed97 7b02 	vldr	d7, [r7, #8]
 8005aac:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ab4:	dd10      	ble.n	8005ad8 <_ZN5SCARA11count_atan2Edd+0x50>
   atan2 = (atan(temp)*180)/PI;
 8005ab6:	ed97 0b06 	vldr	d0, [r7, #24]
 8005aba:	f00b fa45 	bl	8010f48 <atan>
 8005abe:	eeb0 7b40 	vmov.f64	d7, d0
 8005ac2:	ed9f 6b41 	vldr	d6, [pc, #260]	; 8005bc8 <_ZN5SCARA11count_atan2Edd+0x140>
 8005ac6:	ee27 6b06 	vmul.f64	d6, d7, d6
 8005aca:	ed9f 5b41 	vldr	d5, [pc, #260]	; 8005bd0 <_ZN5SCARA11count_atan2Edd+0x148>
 8005ace:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8005ad2:	ed87 7b08 	vstr	d7, [r7, #32]
 8005ad6:	e06c      	b.n	8005bb2 <_ZN5SCARA11count_atan2Edd+0x12a>
 }
    else if(y >= 0 && x < 0){
 8005ad8:	ed97 7b00 	vldr	d7, [r7]
 8005adc:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ae4:	db1b      	blt.n	8005b1e <_ZN5SCARA11count_atan2Edd+0x96>
 8005ae6:	ed97 7b02 	vldr	d7, [r7, #8]
 8005aea:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005af2:	d514      	bpl.n	8005b1e <_ZN5SCARA11count_atan2Edd+0x96>
        atan2 = (atan(temp)*180)/PI + 180;
 8005af4:	ed97 0b06 	vldr	d0, [r7, #24]
 8005af8:	f00b fa26 	bl	8010f48 <atan>
 8005afc:	eeb0 7b40 	vmov.f64	d7, d0
 8005b00:	ed9f 6b31 	vldr	d6, [pc, #196]	; 8005bc8 <_ZN5SCARA11count_atan2Edd+0x140>
 8005b04:	ee27 6b06 	vmul.f64	d6, d7, d6
 8005b08:	ed9f 5b31 	vldr	d5, [pc, #196]	; 8005bd0 <_ZN5SCARA11count_atan2Edd+0x148>
 8005b0c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8005b10:	ed9f 6b2d 	vldr	d6, [pc, #180]	; 8005bc8 <_ZN5SCARA11count_atan2Edd+0x140>
 8005b14:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005b18:	ed87 7b08 	vstr	d7, [r7, #32]
 8005b1c:	e049      	b.n	8005bb2 <_ZN5SCARA11count_atan2Edd+0x12a>
    }
    else if(y < 0 && x < 0){
 8005b1e:	ed97 7b00 	vldr	d7, [r7]
 8005b22:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005b26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b2a:	d51b      	bpl.n	8005b64 <_ZN5SCARA11count_atan2Edd+0xdc>
 8005b2c:	ed97 7b02 	vldr	d7, [r7, #8]
 8005b30:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b38:	d514      	bpl.n	8005b64 <_ZN5SCARA11count_atan2Edd+0xdc>
        atan2 = (atan(temp)*180/PI - 180);
 8005b3a:	ed97 0b06 	vldr	d0, [r7, #24]
 8005b3e:	f00b fa03 	bl	8010f48 <atan>
 8005b42:	eeb0 7b40 	vmov.f64	d7, d0
 8005b46:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8005bc8 <_ZN5SCARA11count_atan2Edd+0x140>
 8005b4a:	ee27 6b06 	vmul.f64	d6, d7, d6
 8005b4e:	ed9f 5b20 	vldr	d5, [pc, #128]	; 8005bd0 <_ZN5SCARA11count_atan2Edd+0x148>
 8005b52:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8005b56:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 8005bc8 <_ZN5SCARA11count_atan2Edd+0x140>
 8005b5a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005b5e:	ed87 7b08 	vstr	d7, [r7, #32]
 8005b62:	e026      	b.n	8005bb2 <_ZN5SCARA11count_atan2Edd+0x12a>
    }
    else if(y > 0 && x == 0){
 8005b64:	ed97 7b00 	vldr	d7, [r7]
 8005b68:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b70:	dd0c      	ble.n	8005b8c <_ZN5SCARA11count_atan2Edd+0x104>
 8005b72:	ed97 7b02 	vldr	d7, [r7, #8]
 8005b76:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005b7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b7e:	d105      	bne.n	8005b8c <_ZN5SCARA11count_atan2Edd+0x104>
        atan2 = 180/2;
 8005b80:	f04f 0200 	mov.w	r2, #0
 8005b84:	4b14      	ldr	r3, [pc, #80]	; (8005bd8 <_ZN5SCARA11count_atan2Edd+0x150>)
 8005b86:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8005b8a:	e012      	b.n	8005bb2 <_ZN5SCARA11count_atan2Edd+0x12a>
    }
    else if(y < 0 && x == 0){
 8005b8c:	ed97 7b00 	vldr	d7, [r7]
 8005b90:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b98:	d50b      	bpl.n	8005bb2 <_ZN5SCARA11count_atan2Edd+0x12a>
 8005b9a:	ed97 7b02 	vldr	d7, [r7, #8]
 8005b9e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ba6:	d104      	bne.n	8005bb2 <_ZN5SCARA11count_atan2Edd+0x12a>
        atan2 = -180/2;
 8005ba8:	f04f 0200 	mov.w	r2, #0
 8005bac:	4b0b      	ldr	r3, [pc, #44]	; (8005bdc <_ZN5SCARA11count_atan2Edd+0x154>)
 8005bae:	e9c7 2308 	strd	r2, r3, [r7, #32]
    }
 return atan2;
 8005bb2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005bb6:	ec43 2b17 	vmov	d7, r2, r3
}
 8005bba:	eeb0 0b47 	vmov.f64	d0, d7
 8005bbe:	3728      	adds	r7, #40	; 0x28
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}
 8005bc4:	f3af 8000 	nop.w
 8005bc8:	00000000 	.word	0x00000000
 8005bcc:	40668000 	.word	0x40668000
 8005bd0:	54442d18 	.word	0x54442d18
 8005bd4:	400921fb 	.word	0x400921fb
 8005bd8:	40568000 	.word	0x40568000
 8005bdc:	c0568000 	.word	0xc0568000

08005be0 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b084      	sub	sp, #16
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	ed87 0b02 	vstr	d0, [r7, #8]
 8005bea:	6078      	str	r0, [r7, #4]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	ee07 3a90 	vmov	s15, r3
 8005bf2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8005bf6:	eeb0 1b47 	vmov.f64	d1, d7
 8005bfa:	ed97 0b02 	vldr	d0, [r7, #8]
 8005bfe:	f00a ff4f 	bl	8010aa0 <pow>
 8005c02:	eeb0 7b40 	vmov.f64	d7, d0
    }
 8005c06:	eeb0 0b47 	vmov.f64	d0, d7
 8005c0a:	3710      	adds	r7, #16
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b082      	sub	sp, #8
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
      return pow(__type(__x), __type(__y));
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	ee07 3a90 	vmov	s15, r3
 8005c20:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	ee06 3a90 	vmov	s13, r3
 8005c2a:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8005c2e:	eeb0 1b46 	vmov.f64	d1, d6
 8005c32:	eeb0 0b47 	vmov.f64	d0, d7
 8005c36:	f00a ff33 	bl	8010aa0 <pow>
 8005c3a:	eeb0 7b40 	vmov.f64	d7, d0
    }
 8005c3e:	eeb0 0b47 	vmov.f64	d0, d7
 8005c42:	3708      	adds	r7, #8
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}

08005c48 <_ZN5SCARA12count_theta2Edd>:

double SCARA::count_theta2(double x, double y)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	ed2d 8b02 	vpush	{d8}
 8005c4e:	b08a      	sub	sp, #40	; 0x28
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6178      	str	r0, [r7, #20]
 8005c54:	ed87 0b02 	vstr	d0, [r7, #8]
 8005c58:	ed87 1b00 	vstr	d1, [r7]
 double theta2;
 double temp;
 temp = (double)(pow(x,2) + pow(y,2) - pow(length1,2) - pow(length2,2));
 8005c5c:	2002      	movs	r0, #2
 8005c5e:	ed97 0b02 	vldr	d0, [r7, #8]
 8005c62:	f7ff ffbd 	bl	8005be0 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8005c66:	eeb0 8b40 	vmov.f64	d8, d0
 8005c6a:	2002      	movs	r0, #2
 8005c6c:	ed97 0b00 	vldr	d0, [r7]
 8005c70:	f7ff ffb6 	bl	8005be0 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8005c74:	eeb0 7b40 	vmov.f64	d7, d0
 8005c78:	ee38 8b07 	vadd.f64	d8, d8, d7
 8005c7c:	2102      	movs	r1, #2
 8005c7e:	20be      	movs	r0, #190	; 0xbe
 8005c80:	f7ff ffc6 	bl	8005c10 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8005c84:	eeb0 7b40 	vmov.f64	d7, d0
 8005c88:	ee38 8b47 	vsub.f64	d8, d8, d7
 8005c8c:	2102      	movs	r1, #2
 8005c8e:	208c      	movs	r0, #140	; 0x8c
 8005c90:	f7ff ffbe 	bl	8005c10 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8005c94:	eeb0 7b40 	vmov.f64	d7, d0
 8005c98:	ee38 7b47 	vsub.f64	d7, d8, d7
 8005c9c:	ed87 7b08 	vstr	d7, [r7, #32]
 temp /= (double)(2*length1*length2);
 8005ca0:	ed97 6b08 	vldr	d6, [r7, #32]
 8005ca4:	ed9f 5b10 	vldr	d5, [pc, #64]	; 8005ce8 <_ZN5SCARA12count_theta2Edd+0xa0>
 8005ca8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8005cac:	ed87 7b08 	vstr	d7, [r7, #32]
 theta2 = (acos(temp)*180)/PI;
 8005cb0:	ed97 0b08 	vldr	d0, [r7, #32]
 8005cb4:	f00b fa4c 	bl	8011150 <acos>
 8005cb8:	eeb0 7b40 	vmov.f64	d7, d0
 8005cbc:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 8005cf0 <_ZN5SCARA12count_theta2Edd+0xa8>
 8005cc0:	ee27 6b06 	vmul.f64	d6, d7, d6
 8005cc4:	ed9f 5b0c 	vldr	d5, [pc, #48]	; 8005cf8 <_ZN5SCARA12count_theta2Edd+0xb0>
 8005cc8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8005ccc:	ed87 7b06 	vstr	d7, [r7, #24]
 return theta2;
 8005cd0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005cd4:	ec43 2b17 	vmov	d7, r2, r3
}
 8005cd8:	eeb0 0b47 	vmov.f64	d0, d7
 8005cdc:	3728      	adds	r7, #40	; 0x28
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	ecbd 8b02 	vpop	{d8}
 8005ce4:	bd80      	pop	{r7, pc}
 8005ce6:	bf00      	nop
 8005ce8:	00000000 	.word	0x00000000
 8005cec:	40e9fa00 	.word	0x40e9fa00
 8005cf0:	00000000 	.word	0x00000000
 8005cf4:	40668000 	.word	0x40668000
 8005cf8:	54442d18 	.word	0x54442d18
 8005cfc:	400921fb 	.word	0x400921fb

08005d00 <_ZN5SCARA9count_phiEdd>:

double SCARA::count_phi(double x, double y)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	ed2d 8b02 	vpush	{d8}
 8005d06:	b08a      	sub	sp, #40	; 0x28
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6178      	str	r0, [r7, #20]
 8005d0c:	ed87 0b02 	vstr	d0, [r7, #8]
 8005d10:	ed87 1b00 	vstr	d1, [r7]
 double phi;
 double temp = pow(length2,2) - pow(length1,2) - pow(x,2) - pow(y,2);
 8005d14:	2102      	movs	r1, #2
 8005d16:	208c      	movs	r0, #140	; 0x8c
 8005d18:	f7ff ff7a 	bl	8005c10 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8005d1c:	eeb0 8b40 	vmov.f64	d8, d0
 8005d20:	2102      	movs	r1, #2
 8005d22:	20be      	movs	r0, #190	; 0xbe
 8005d24:	f7ff ff74 	bl	8005c10 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8005d28:	eeb0 7b40 	vmov.f64	d7, d0
 8005d2c:	ee38 8b47 	vsub.f64	d8, d8, d7
 8005d30:	2002      	movs	r0, #2
 8005d32:	ed97 0b02 	vldr	d0, [r7, #8]
 8005d36:	f7ff ff53 	bl	8005be0 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8005d3a:	eeb0 7b40 	vmov.f64	d7, d0
 8005d3e:	ee38 8b47 	vsub.f64	d8, d8, d7
 8005d42:	2002      	movs	r0, #2
 8005d44:	ed97 0b00 	vldr	d0, [r7]
 8005d48:	f7ff ff4a 	bl	8005be0 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8005d4c:	eeb0 7b40 	vmov.f64	d7, d0
 8005d50:	ee38 7b47 	vsub.f64	d7, d8, d7
 8005d54:	ed87 7b08 	vstr	d7, [r7, #32]
 temp /= (double)(-2*length1*sqrt(pow(x,2)+pow(y,2)));
 8005d58:	2002      	movs	r0, #2
 8005d5a:	ed97 0b02 	vldr	d0, [r7, #8]
 8005d5e:	f7ff ff3f 	bl	8005be0 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8005d62:	eeb0 8b40 	vmov.f64	d8, d0
 8005d66:	2002      	movs	r0, #2
 8005d68:	ed97 0b00 	vldr	d0, [r7]
 8005d6c:	f7ff ff38 	bl	8005be0 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8005d70:	eeb0 7b40 	vmov.f64	d7, d0
 8005d74:	ee38 7b07 	vadd.f64	d7, d8, d7
 8005d78:	eeb0 0b47 	vmov.f64	d0, d7
 8005d7c:	f00b fa14 	bl	80111a8 <sqrt>
 8005d80:	eeb0 7b40 	vmov.f64	d7, d0
 8005d84:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8005dd0 <_ZN5SCARA9count_phiEdd+0xd0>
 8005d88:	ee27 6b06 	vmul.f64	d6, d7, d6
 8005d8c:	ed97 5b08 	vldr	d5, [r7, #32]
 8005d90:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005d94:	ed87 7b08 	vstr	d7, [r7, #32]
 phi = (acos(temp)*180)/PI;
 8005d98:	ed97 0b08 	vldr	d0, [r7, #32]
 8005d9c:	f00b f9d8 	bl	8011150 <acos>
 8005da0:	eeb0 7b40 	vmov.f64	d7, d0
 8005da4:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 8005dd8 <_ZN5SCARA9count_phiEdd+0xd8>
 8005da8:	ee27 6b06 	vmul.f64	d6, d7, d6
 8005dac:	ed9f 5b0c 	vldr	d5, [pc, #48]	; 8005de0 <_ZN5SCARA9count_phiEdd+0xe0>
 8005db0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8005db4:	ed87 7b06 	vstr	d7, [r7, #24]
 return phi;
 8005db8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005dbc:	ec43 2b17 	vmov	d7, r2, r3
}
 8005dc0:	eeb0 0b47 	vmov.f64	d0, d7
 8005dc4:	3728      	adds	r7, #40	; 0x28
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	ecbd 8b02 	vpop	{d8}
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	00000000 	.word	0x00000000
 8005dd4:	c077c000 	.word	0xc077c000
 8005dd8:	00000000 	.word	0x00000000
 8005ddc:	40668000 	.word	0x40668000
 8005de0:	54442d18 	.word	0x54442d18
 8005de4:	400921fb 	.word	0x400921fb

08005de8 <_Z41__static_initialization_and_destruction_0ii>:
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b082      	sub	sp, #8
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	6039      	str	r1, [r7, #0]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d107      	bne.n	8005e08 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d102      	bne.n	8005e08 <_Z41__static_initialization_and_destruction_0ii+0x20>
SCARA sc;
 8005e02:	4803      	ldr	r0, [pc, #12]	; (8005e10 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8005e04:	f7ff f824 	bl	8004e50 <_ZN5SCARAC1Ev>
}
 8005e08:	bf00      	nop
 8005e0a:	3708      	adds	r7, #8
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}
 8005e10:	24002250 	.word	0x24002250

08005e14 <_GLOBAL__sub_I_sc>:
 8005e14:	b580      	push	{r7, lr}
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005e1c:	2001      	movs	r0, #1
 8005e1e:	f7ff ffe3 	bl	8005de8 <_Z41__static_initialization_and_destruction_0ii>
 8005e22:	bd80      	pop	{r7, pc}

08005e24 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b082      	sub	sp, #8
 8005e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e2a:	4b0d      	ldr	r3, [pc, #52]	; (8005e60 <HAL_MspInit+0x3c>)
 8005e2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005e30:	4a0b      	ldr	r2, [pc, #44]	; (8005e60 <HAL_MspInit+0x3c>)
 8005e32:	f043 0302 	orr.w	r3, r3, #2
 8005e36:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005e3a:	4b09      	ldr	r3, [pc, #36]	; (8005e60 <HAL_MspInit+0x3c>)
 8005e3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005e40:	f003 0302 	and.w	r3, r3, #2
 8005e44:	607b      	str	r3, [r7, #4]
 8005e46:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8005e48:	2200      	movs	r2, #0
 8005e4a:	2100      	movs	r1, #0
 8005e4c:	2005      	movs	r0, #5
 8005e4e:	f001 f90c 	bl	800706a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8005e52:	2005      	movs	r0, #5
 8005e54:	f001 f923 	bl	800709e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005e58:	bf00      	nop
 8005e5a:	3708      	adds	r7, #8
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}
 8005e60:	58024400 	.word	0x58024400

08005e64 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b090      	sub	sp, #64	; 0x40
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005e70:	2200      	movs	r2, #0
 8005e72:	601a      	str	r2, [r3, #0]
 8005e74:	605a      	str	r2, [r3, #4]
 8005e76:	609a      	str	r2, [r3, #8]
 8005e78:	60da      	str	r2, [r3, #12]
 8005e7a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e84:	d14e      	bne.n	8005f24 <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005e86:	4b77      	ldr	r3, [pc, #476]	; (8006064 <HAL_TIM_Encoder_MspInit+0x200>)
 8005e88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005e8c:	4a75      	ldr	r2, [pc, #468]	; (8006064 <HAL_TIM_Encoder_MspInit+0x200>)
 8005e8e:	f043 0301 	orr.w	r3, r3, #1
 8005e92:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005e96:	4b73      	ldr	r3, [pc, #460]	; (8006064 <HAL_TIM_Encoder_MspInit+0x200>)
 8005e98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005e9c:	f003 0301 	and.w	r3, r3, #1
 8005ea0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ea4:	4b6f      	ldr	r3, [pc, #444]	; (8006064 <HAL_TIM_Encoder_MspInit+0x200>)
 8005ea6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005eaa:	4a6e      	ldr	r2, [pc, #440]	; (8006064 <HAL_TIM_Encoder_MspInit+0x200>)
 8005eac:	f043 0301 	orr.w	r3, r3, #1
 8005eb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005eb4:	4b6b      	ldr	r3, [pc, #428]	; (8006064 <HAL_TIM_Encoder_MspInit+0x200>)
 8005eb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005eba:	f003 0301 	and.w	r3, r3, #1
 8005ebe:	627b      	str	r3, [r7, #36]	; 0x24
 8005ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005ec2:	4b68      	ldr	r3, [pc, #416]	; (8006064 <HAL_TIM_Encoder_MspInit+0x200>)
 8005ec4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005ec8:	4a66      	ldr	r2, [pc, #408]	; (8006064 <HAL_TIM_Encoder_MspInit+0x200>)
 8005eca:	f043 0302 	orr.w	r3, r3, #2
 8005ece:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005ed2:	4b64      	ldr	r3, [pc, #400]	; (8006064 <HAL_TIM_Encoder_MspInit+0x200>)
 8005ed4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005ed8:	f003 0302 	and.w	r3, r3, #2
 8005edc:	623b      	str	r3, [r7, #32]
 8005ede:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15(JTDI)     ------> TIM2_CH1
    PB3(JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005ee0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ee6:	2302      	movs	r3, #2
 8005ee8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005eea:	2300      	movs	r3, #0
 8005eec:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ef6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005efa:	4619      	mov	r1, r3
 8005efc:	485a      	ldr	r0, [pc, #360]	; (8006068 <HAL_TIM_Encoder_MspInit+0x204>)
 8005efe:	f004 f8e7 	bl	800a0d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005f02:	2308      	movs	r3, #8
 8005f04:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f06:	2302      	movs	r3, #2
 8005f08:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005f12:	2301      	movs	r3, #1
 8005f14:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005f1a:	4619      	mov	r1, r3
 8005f1c:	4853      	ldr	r0, [pc, #332]	; (800606c <HAL_TIM_Encoder_MspInit+0x208>)
 8005f1e:	f004 f8d7 	bl	800a0d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8005f22:	e09b      	b.n	800605c <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM3)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a51      	ldr	r2, [pc, #324]	; (8006070 <HAL_TIM_Encoder_MspInit+0x20c>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d12e      	bne.n	8005f8c <HAL_TIM_Encoder_MspInit+0x128>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005f2e:	4b4d      	ldr	r3, [pc, #308]	; (8006064 <HAL_TIM_Encoder_MspInit+0x200>)
 8005f30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005f34:	4a4b      	ldr	r2, [pc, #300]	; (8006064 <HAL_TIM_Encoder_MspInit+0x200>)
 8005f36:	f043 0302 	orr.w	r3, r3, #2
 8005f3a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005f3e:	4b49      	ldr	r3, [pc, #292]	; (8006064 <HAL_TIM_Encoder_MspInit+0x200>)
 8005f40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005f44:	f003 0302 	and.w	r3, r3, #2
 8005f48:	61fb      	str	r3, [r7, #28]
 8005f4a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f4c:	4b45      	ldr	r3, [pc, #276]	; (8006064 <HAL_TIM_Encoder_MspInit+0x200>)
 8005f4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005f52:	4a44      	ldr	r2, [pc, #272]	; (8006064 <HAL_TIM_Encoder_MspInit+0x200>)
 8005f54:	f043 0302 	orr.w	r3, r3, #2
 8005f58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005f5c:	4b41      	ldr	r3, [pc, #260]	; (8006064 <HAL_TIM_Encoder_MspInit+0x200>)
 8005f5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005f62:	f003 0302 	and.w	r3, r3, #2
 8005f66:	61bb      	str	r3, [r7, #24]
 8005f68:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005f6a:	2330      	movs	r3, #48	; 0x30
 8005f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f6e:	2302      	movs	r3, #2
 8005f70:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f72:	2300      	movs	r3, #0
 8005f74:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f76:	2300      	movs	r3, #0
 8005f78:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005f7a:	2302      	movs	r3, #2
 8005f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005f82:	4619      	mov	r1, r3
 8005f84:	4839      	ldr	r0, [pc, #228]	; (800606c <HAL_TIM_Encoder_MspInit+0x208>)
 8005f86:	f004 f8a3 	bl	800a0d0 <HAL_GPIO_Init>
}
 8005f8a:	e067      	b.n	800605c <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM4)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a38      	ldr	r2, [pc, #224]	; (8006074 <HAL_TIM_Encoder_MspInit+0x210>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d12f      	bne.n	8005ff6 <HAL_TIM_Encoder_MspInit+0x192>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005f96:	4b33      	ldr	r3, [pc, #204]	; (8006064 <HAL_TIM_Encoder_MspInit+0x200>)
 8005f98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005f9c:	4a31      	ldr	r2, [pc, #196]	; (8006064 <HAL_TIM_Encoder_MspInit+0x200>)
 8005f9e:	f043 0304 	orr.w	r3, r3, #4
 8005fa2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005fa6:	4b2f      	ldr	r3, [pc, #188]	; (8006064 <HAL_TIM_Encoder_MspInit+0x200>)
 8005fa8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005fac:	f003 0304 	and.w	r3, r3, #4
 8005fb0:	617b      	str	r3, [r7, #20]
 8005fb2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005fb4:	4b2b      	ldr	r3, [pc, #172]	; (8006064 <HAL_TIM_Encoder_MspInit+0x200>)
 8005fb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005fba:	4a2a      	ldr	r2, [pc, #168]	; (8006064 <HAL_TIM_Encoder_MspInit+0x200>)
 8005fbc:	f043 0308 	orr.w	r3, r3, #8
 8005fc0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005fc4:	4b27      	ldr	r3, [pc, #156]	; (8006064 <HAL_TIM_Encoder_MspInit+0x200>)
 8005fc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005fca:	f003 0308 	and.w	r3, r3, #8
 8005fce:	613b      	str	r3, [r7, #16]
 8005fd0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8005fd2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fd8:	2302      	movs	r3, #2
 8005fda:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005fe4:	2302      	movs	r3, #2
 8005fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005fe8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005fec:	4619      	mov	r1, r3
 8005fee:	4822      	ldr	r0, [pc, #136]	; (8006078 <HAL_TIM_Encoder_MspInit+0x214>)
 8005ff0:	f004 f86e 	bl	800a0d0 <HAL_GPIO_Init>
}
 8005ff4:	e032      	b.n	800605c <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM5)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a20      	ldr	r2, [pc, #128]	; (800607c <HAL_TIM_Encoder_MspInit+0x218>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d12d      	bne.n	800605c <HAL_TIM_Encoder_MspInit+0x1f8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8006000:	4b18      	ldr	r3, [pc, #96]	; (8006064 <HAL_TIM_Encoder_MspInit+0x200>)
 8006002:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006006:	4a17      	ldr	r2, [pc, #92]	; (8006064 <HAL_TIM_Encoder_MspInit+0x200>)
 8006008:	f043 0308 	orr.w	r3, r3, #8
 800600c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006010:	4b14      	ldr	r3, [pc, #80]	; (8006064 <HAL_TIM_Encoder_MspInit+0x200>)
 8006012:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006016:	f003 0308 	and.w	r3, r3, #8
 800601a:	60fb      	str	r3, [r7, #12]
 800601c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800601e:	4b11      	ldr	r3, [pc, #68]	; (8006064 <HAL_TIM_Encoder_MspInit+0x200>)
 8006020:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006024:	4a0f      	ldr	r2, [pc, #60]	; (8006064 <HAL_TIM_Encoder_MspInit+0x200>)
 8006026:	f043 0301 	orr.w	r3, r3, #1
 800602a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800602e:	4b0d      	ldr	r3, [pc, #52]	; (8006064 <HAL_TIM_Encoder_MspInit+0x200>)
 8006030:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006034:	f003 0301 	and.w	r3, r3, #1
 8006038:	60bb      	str	r3, [r7, #8]
 800603a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800603c:	2303      	movs	r3, #3
 800603e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006040:	2302      	movs	r3, #2
 8006042:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006044:	2300      	movs	r3, #0
 8006046:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006048:	2300      	movs	r3, #0
 800604a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800604c:	2302      	movs	r3, #2
 800604e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006050:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006054:	4619      	mov	r1, r3
 8006056:	4804      	ldr	r0, [pc, #16]	; (8006068 <HAL_TIM_Encoder_MspInit+0x204>)
 8006058:	f004 f83a 	bl	800a0d0 <HAL_GPIO_Init>
}
 800605c:	bf00      	nop
 800605e:	3740      	adds	r7, #64	; 0x40
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}
 8006064:	58024400 	.word	0x58024400
 8006068:	58020000 	.word	0x58020000
 800606c:	58020400 	.word	0x58020400
 8006070:	40000400 	.word	0x40000400
 8006074:	40000800 	.word	0x40000800
 8006078:	58020c00 	.word	0x58020c00
 800607c:	40000c00 	.word	0x40000c00

08006080 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b086      	sub	sp, #24
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a42      	ldr	r2, [pc, #264]	; (8006198 <HAL_TIM_Base_MspInit+0x118>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d117      	bne.n	80060c2 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8006092:	4b42      	ldr	r3, [pc, #264]	; (800619c <HAL_TIM_Base_MspInit+0x11c>)
 8006094:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006098:	4a40      	ldr	r2, [pc, #256]	; (800619c <HAL_TIM_Base_MspInit+0x11c>)
 800609a:	f043 0320 	orr.w	r3, r3, #32
 800609e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80060a2:	4b3e      	ldr	r3, [pc, #248]	; (800619c <HAL_TIM_Base_MspInit+0x11c>)
 80060a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80060a8:	f003 0320 	and.w	r3, r3, #32
 80060ac:	617b      	str	r3, [r7, #20]
 80060ae:	697b      	ldr	r3, [r7, #20]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80060b0:	2200      	movs	r2, #0
 80060b2:	2100      	movs	r1, #0
 80060b4:	2037      	movs	r0, #55	; 0x37
 80060b6:	f000 ffd8 	bl	800706a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80060ba:	2037      	movs	r0, #55	; 0x37
 80060bc:	f000 ffef 	bl	800709e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80060c0:	e065      	b.n	800618e <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM8)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a36      	ldr	r2, [pc, #216]	; (80061a0 <HAL_TIM_Base_MspInit+0x120>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d127      	bne.n	800611c <HAL_TIM_Base_MspInit+0x9c>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80060cc:	4b33      	ldr	r3, [pc, #204]	; (800619c <HAL_TIM_Base_MspInit+0x11c>)
 80060ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80060d2:	4a32      	ldr	r2, [pc, #200]	; (800619c <HAL_TIM_Base_MspInit+0x11c>)
 80060d4:	f043 0302 	orr.w	r3, r3, #2
 80060d8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80060dc:	4b2f      	ldr	r3, [pc, #188]	; (800619c <HAL_TIM_Base_MspInit+0x11c>)
 80060de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80060e2:	f003 0302 	and.w	r3, r3, #2
 80060e6:	613b      	str	r3, [r7, #16]
 80060e8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 80060ea:	2200      	movs	r2, #0
 80060ec:	2100      	movs	r1, #0
 80060ee:	202b      	movs	r0, #43	; 0x2b
 80060f0:	f000 ffbb 	bl	800706a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80060f4:	202b      	movs	r0, #43	; 0x2b
 80060f6:	f000 ffd2 	bl	800709e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80060fa:	2200      	movs	r2, #0
 80060fc:	2100      	movs	r1, #0
 80060fe:	202c      	movs	r0, #44	; 0x2c
 8006100:	f000 ffb3 	bl	800706a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8006104:	202c      	movs	r0, #44	; 0x2c
 8006106:	f000 ffca 	bl	800709e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800610a:	2200      	movs	r2, #0
 800610c:	2100      	movs	r1, #0
 800610e:	202d      	movs	r0, #45	; 0x2d
 8006110:	f000 ffab 	bl	800706a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8006114:	202d      	movs	r0, #45	; 0x2d
 8006116:	f000 ffc2 	bl	800709e <HAL_NVIC_EnableIRQ>
}
 800611a:	e038      	b.n	800618e <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM13)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a20      	ldr	r2, [pc, #128]	; (80061a4 <HAL_TIM_Base_MspInit+0x124>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d117      	bne.n	8006156 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8006126:	4b1d      	ldr	r3, [pc, #116]	; (800619c <HAL_TIM_Base_MspInit+0x11c>)
 8006128:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800612c:	4a1b      	ldr	r2, [pc, #108]	; (800619c <HAL_TIM_Base_MspInit+0x11c>)
 800612e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006132:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006136:	4b19      	ldr	r3, [pc, #100]	; (800619c <HAL_TIM_Base_MspInit+0x11c>)
 8006138:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800613c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006140:	60fb      	str	r3, [r7, #12]
 8006142:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8006144:	2200      	movs	r2, #0
 8006146:	2100      	movs	r1, #0
 8006148:	202c      	movs	r0, #44	; 0x2c
 800614a:	f000 ff8e 	bl	800706a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800614e:	202c      	movs	r0, #44	; 0x2c
 8006150:	f000 ffa5 	bl	800709e <HAL_NVIC_EnableIRQ>
}
 8006154:	e01b      	b.n	800618e <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM14)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a13      	ldr	r2, [pc, #76]	; (80061a8 <HAL_TIM_Base_MspInit+0x128>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d116      	bne.n	800618e <HAL_TIM_Base_MspInit+0x10e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8006160:	4b0e      	ldr	r3, [pc, #56]	; (800619c <HAL_TIM_Base_MspInit+0x11c>)
 8006162:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006166:	4a0d      	ldr	r2, [pc, #52]	; (800619c <HAL_TIM_Base_MspInit+0x11c>)
 8006168:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800616c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006170:	4b0a      	ldr	r3, [pc, #40]	; (800619c <HAL_TIM_Base_MspInit+0x11c>)
 8006172:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800617a:	60bb      	str	r3, [r7, #8]
 800617c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800617e:	2200      	movs	r2, #0
 8006180:	2100      	movs	r1, #0
 8006182:	202d      	movs	r0, #45	; 0x2d
 8006184:	f000 ff71 	bl	800706a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8006188:	202d      	movs	r0, #45	; 0x2d
 800618a:	f000 ff88 	bl	800709e <HAL_NVIC_EnableIRQ>
}
 800618e:	bf00      	nop
 8006190:	3718      	adds	r7, #24
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}
 8006196:	bf00      	nop
 8006198:	40001400 	.word	0x40001400
 800619c:	58024400 	.word	0x58024400
 80061a0:	40010400 	.word	0x40010400
 80061a4:	40001c00 	.word	0x40001c00
 80061a8:	40002000 	.word	0x40002000

080061ac <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b086      	sub	sp, #24
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a2b      	ldr	r2, [pc, #172]	; (8006268 <HAL_TIM_PWM_MspInit+0xbc>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d117      	bne.n	80061ee <HAL_TIM_PWM_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 80061be:	4b2b      	ldr	r3, [pc, #172]	; (800626c <HAL_TIM_PWM_MspInit+0xc0>)
 80061c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80061c4:	4a29      	ldr	r2, [pc, #164]	; (800626c <HAL_TIM_PWM_MspInit+0xc0>)
 80061c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061ca:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80061ce:	4b27      	ldr	r3, [pc, #156]	; (800626c <HAL_TIM_PWM_MspInit+0xc0>)
 80061d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80061d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061d8:	617b      	str	r3, [r7, #20]
 80061da:	697b      	ldr	r3, [r7, #20]
    /* TIM12 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 80061dc:	2200      	movs	r2, #0
 80061de:	2100      	movs	r1, #0
 80061e0:	202b      	movs	r0, #43	; 0x2b
 80061e2:	f000 ff42 	bl	800706a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80061e6:	202b      	movs	r0, #43	; 0x2b
 80061e8:	f000 ff59 	bl	800709e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM23_MspInit 1 */

  /* USER CODE END TIM23_MspInit 1 */
  }

}
 80061ec:	e038      	b.n	8006260 <HAL_TIM_PWM_MspInit+0xb4>
  else if(htim_pwm->Instance==TIM15)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a1f      	ldr	r2, [pc, #124]	; (8006270 <HAL_TIM_PWM_MspInit+0xc4>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d117      	bne.n	8006228 <HAL_TIM_PWM_MspInit+0x7c>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80061f8:	4b1c      	ldr	r3, [pc, #112]	; (800626c <HAL_TIM_PWM_MspInit+0xc0>)
 80061fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80061fe:	4a1b      	ldr	r2, [pc, #108]	; (800626c <HAL_TIM_PWM_MspInit+0xc0>)
 8006200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006204:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006208:	4b18      	ldr	r3, [pc, #96]	; (800626c <HAL_TIM_PWM_MspInit+0xc0>)
 800620a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800620e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006212:	613b      	str	r3, [r7, #16]
 8006214:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8006216:	2200      	movs	r2, #0
 8006218:	2100      	movs	r1, #0
 800621a:	2074      	movs	r0, #116	; 0x74
 800621c:	f000 ff25 	bl	800706a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8006220:	2074      	movs	r0, #116	; 0x74
 8006222:	f000 ff3c 	bl	800709e <HAL_NVIC_EnableIRQ>
}
 8006226:	e01b      	b.n	8006260 <HAL_TIM_PWM_MspInit+0xb4>
  else if(htim_pwm->Instance==TIM23)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a11      	ldr	r2, [pc, #68]	; (8006274 <HAL_TIM_PWM_MspInit+0xc8>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d116      	bne.n	8006260 <HAL_TIM_PWM_MspInit+0xb4>
    __HAL_RCC_TIM23_CLK_ENABLE();
 8006232:	4b0e      	ldr	r3, [pc, #56]	; (800626c <HAL_TIM_PWM_MspInit+0xc0>)
 8006234:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8006238:	4a0c      	ldr	r2, [pc, #48]	; (800626c <HAL_TIM_PWM_MspInit+0xc0>)
 800623a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800623e:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8006242:	4b0a      	ldr	r3, [pc, #40]	; (800626c <HAL_TIM_PWM_MspInit+0xc0>)
 8006244:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8006248:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800624c:	60fb      	str	r3, [r7, #12]
 800624e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM23_IRQn, 0, 0);
 8006250:	2200      	movs	r2, #0
 8006252:	2100      	movs	r1, #0
 8006254:	20a1      	movs	r0, #161	; 0xa1
 8006256:	f000 ff08 	bl	800706a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM23_IRQn);
 800625a:	20a1      	movs	r0, #161	; 0xa1
 800625c:	f000 ff1f 	bl	800709e <HAL_NVIC_EnableIRQ>
}
 8006260:	bf00      	nop
 8006262:	3718      	adds	r7, #24
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}
 8006268:	40001800 	.word	0x40001800
 800626c:	58024400 	.word	0x58024400
 8006270:	40014000 	.word	0x40014000
 8006274:	4000e000 	.word	0x4000e000

08006278 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b08a      	sub	sp, #40	; 0x28
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006280:	f107 0314 	add.w	r3, r7, #20
 8006284:	2200      	movs	r2, #0
 8006286:	601a      	str	r2, [r3, #0]
 8006288:	605a      	str	r2, [r3, #4]
 800628a:	609a      	str	r2, [r3, #8]
 800628c:	60da      	str	r2, [r3, #12]
 800628e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM12)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a38      	ldr	r2, [pc, #224]	; (8006378 <HAL_TIM_MspPostInit+0x100>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d120      	bne.n	80062dc <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800629a:	4b38      	ldr	r3, [pc, #224]	; (800637c <HAL_TIM_MspPostInit+0x104>)
 800629c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80062a0:	4a36      	ldr	r2, [pc, #216]	; (800637c <HAL_TIM_MspPostInit+0x104>)
 80062a2:	f043 0302 	orr.w	r3, r3, #2
 80062a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80062aa:	4b34      	ldr	r3, [pc, #208]	; (800637c <HAL_TIM_MspPostInit+0x104>)
 80062ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80062b0:	f003 0302 	and.w	r3, r3, #2
 80062b4:	613b      	str	r3, [r7, #16]
 80062b6:	693b      	ldr	r3, [r7, #16]
    /**TIM12 GPIO Configuration
    PB14     ------> TIM12_CH1
    PB15     ------> TIM12_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80062b8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80062bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062be:	2302      	movs	r3, #2
 80062c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062c2:	2300      	movs	r3, #0
 80062c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80062c6:	2300      	movs	r3, #0
 80062c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 80062ca:	2302      	movs	r3, #2
 80062cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80062ce:	f107 0314 	add.w	r3, r7, #20
 80062d2:	4619      	mov	r1, r3
 80062d4:	482a      	ldr	r0, [pc, #168]	; (8006380 <HAL_TIM_MspPostInit+0x108>)
 80062d6:	f003 fefb 	bl	800a0d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM23_MspPostInit 1 */

  /* USER CODE END TIM23_MspPostInit 1 */
  }

}
 80062da:	e048      	b.n	800636e <HAL_TIM_MspPostInit+0xf6>
  else if(htim->Instance==TIM15)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a28      	ldr	r2, [pc, #160]	; (8006384 <HAL_TIM_MspPostInit+0x10c>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d11f      	bne.n	8006326 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80062e6:	4b25      	ldr	r3, [pc, #148]	; (800637c <HAL_TIM_MspPostInit+0x104>)
 80062e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80062ec:	4a23      	ldr	r2, [pc, #140]	; (800637c <HAL_TIM_MspPostInit+0x104>)
 80062ee:	f043 0310 	orr.w	r3, r3, #16
 80062f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80062f6:	4b21      	ldr	r3, [pc, #132]	; (800637c <HAL_TIM_MspPostInit+0x104>)
 80062f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80062fc:	f003 0310 	and.w	r3, r3, #16
 8006300:	60fb      	str	r3, [r7, #12]
 8006302:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8006304:	2360      	movs	r3, #96	; 0x60
 8006306:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006308:	2302      	movs	r3, #2
 800630a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800630c:	2300      	movs	r3, #0
 800630e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006310:	2300      	movs	r3, #0
 8006312:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8006314:	2304      	movs	r3, #4
 8006316:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006318:	f107 0314 	add.w	r3, r7, #20
 800631c:	4619      	mov	r1, r3
 800631e:	481a      	ldr	r0, [pc, #104]	; (8006388 <HAL_TIM_MspPostInit+0x110>)
 8006320:	f003 fed6 	bl	800a0d0 <HAL_GPIO_Init>
}
 8006324:	e023      	b.n	800636e <HAL_TIM_MspPostInit+0xf6>
  else if(htim->Instance==TIM23)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a18      	ldr	r2, [pc, #96]	; (800638c <HAL_TIM_MspPostInit+0x114>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d11e      	bne.n	800636e <HAL_TIM_MspPostInit+0xf6>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006330:	4b12      	ldr	r3, [pc, #72]	; (800637c <HAL_TIM_MspPostInit+0x104>)
 8006332:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006336:	4a11      	ldr	r2, [pc, #68]	; (800637c <HAL_TIM_MspPostInit+0x104>)
 8006338:	f043 0320 	orr.w	r3, r3, #32
 800633c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006340:	4b0e      	ldr	r3, [pc, #56]	; (800637c <HAL_TIM_MspPostInit+0x104>)
 8006342:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006346:	f003 0320 	and.w	r3, r3, #32
 800634a:	60bb      	str	r3, [r7, #8]
 800634c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800634e:	2301      	movs	r3, #1
 8006350:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006352:	2302      	movs	r3, #2
 8006354:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006356:	2300      	movs	r3, #0
 8006358:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800635a:	2300      	movs	r3, #0
 800635c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_TIM23;
 800635e:	230d      	movs	r3, #13
 8006360:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006362:	f107 0314 	add.w	r3, r7, #20
 8006366:	4619      	mov	r1, r3
 8006368:	4809      	ldr	r0, [pc, #36]	; (8006390 <HAL_TIM_MspPostInit+0x118>)
 800636a:	f003 feb1 	bl	800a0d0 <HAL_GPIO_Init>
}
 800636e:	bf00      	nop
 8006370:	3728      	adds	r7, #40	; 0x28
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}
 8006376:	bf00      	nop
 8006378:	40001800 	.word	0x40001800
 800637c:	58024400 	.word	0x58024400
 8006380:	58020400 	.word	0x58020400
 8006384:	40014000 	.word	0x40014000
 8006388:	58021000 	.word	0x58021000
 800638c:	4000e000 	.word	0x4000e000
 8006390:	58021400 	.word	0x58021400

08006394 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b0b6      	sub	sp, #216	; 0xd8
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800639c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80063a0:	2200      	movs	r2, #0
 80063a2:	601a      	str	r2, [r3, #0]
 80063a4:	605a      	str	r2, [r3, #4]
 80063a6:	609a      	str	r2, [r3, #8]
 80063a8:	60da      	str	r2, [r3, #12]
 80063aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80063ac:	f107 0310 	add.w	r3, r7, #16
 80063b0:	22b4      	movs	r2, #180	; 0xb4
 80063b2:	2100      	movs	r1, #0
 80063b4:	4618      	mov	r0, r3
 80063b6:	f00b f903 	bl	80115c0 <memset>
  if(huart->Instance==USART1)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a58      	ldr	r2, [pc, #352]	; (8006520 <HAL_UART_MspInit+0x18c>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	f040 80a8 	bne.w	8006516 <HAL_UART_MspInit+0x182>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80063c6:	2301      	movs	r3, #1
 80063c8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80063ca:	2300      	movs	r3, #0
 80063cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80063d0:	f107 0310 	add.w	r3, r7, #16
 80063d4:	4618      	mov	r0, r3
 80063d6:	f005 f8cb 	bl	800b570 <HAL_RCCEx_PeriphCLKConfig>
 80063da:	4603      	mov	r3, r0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d001      	beq.n	80063e4 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80063e0:	f7fb f958 	bl	8001694 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80063e4:	4b4f      	ldr	r3, [pc, #316]	; (8006524 <HAL_UART_MspInit+0x190>)
 80063e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80063ea:	4a4e      	ldr	r2, [pc, #312]	; (8006524 <HAL_UART_MspInit+0x190>)
 80063ec:	f043 0310 	orr.w	r3, r3, #16
 80063f0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80063f4:	4b4b      	ldr	r3, [pc, #300]	; (8006524 <HAL_UART_MspInit+0x190>)
 80063f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80063fa:	f003 0310 	and.w	r3, r3, #16
 80063fe:	60fb      	str	r3, [r7, #12]
 8006400:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006402:	4b48      	ldr	r3, [pc, #288]	; (8006524 <HAL_UART_MspInit+0x190>)
 8006404:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006408:	4a46      	ldr	r2, [pc, #280]	; (8006524 <HAL_UART_MspInit+0x190>)
 800640a:	f043 0301 	orr.w	r3, r3, #1
 800640e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006412:	4b44      	ldr	r3, [pc, #272]	; (8006524 <HAL_UART_MspInit+0x190>)
 8006414:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006418:	f003 0301 	and.w	r3, r3, #1
 800641c:	60bb      	str	r3, [r7, #8]
 800641e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8006420:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8006424:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006428:	2302      	movs	r3, #2
 800642a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800642e:	2300      	movs	r3, #0
 8006430:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006434:	2300      	movs	r3, #0
 8006436:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800643a:	2307      	movs	r3, #7
 800643c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006440:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006444:	4619      	mov	r1, r3
 8006446:	4838      	ldr	r0, [pc, #224]	; (8006528 <HAL_UART_MspInit+0x194>)
 8006448:	f003 fe42 	bl	800a0d0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream0;
 800644c:	4b37      	ldr	r3, [pc, #220]	; (800652c <HAL_UART_MspInit+0x198>)
 800644e:	4a38      	ldr	r2, [pc, #224]	; (8006530 <HAL_UART_MspInit+0x19c>)
 8006450:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8006452:	4b36      	ldr	r3, [pc, #216]	; (800652c <HAL_UART_MspInit+0x198>)
 8006454:	2229      	movs	r2, #41	; 0x29
 8006456:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006458:	4b34      	ldr	r3, [pc, #208]	; (800652c <HAL_UART_MspInit+0x198>)
 800645a:	2200      	movs	r2, #0
 800645c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800645e:	4b33      	ldr	r3, [pc, #204]	; (800652c <HAL_UART_MspInit+0x198>)
 8006460:	2200      	movs	r2, #0
 8006462:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006464:	4b31      	ldr	r3, [pc, #196]	; (800652c <HAL_UART_MspInit+0x198>)
 8006466:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800646a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800646c:	4b2f      	ldr	r3, [pc, #188]	; (800652c <HAL_UART_MspInit+0x198>)
 800646e:	2200      	movs	r2, #0
 8006470:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006472:	4b2e      	ldr	r3, [pc, #184]	; (800652c <HAL_UART_MspInit+0x198>)
 8006474:	2200      	movs	r2, #0
 8006476:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8006478:	4b2c      	ldr	r3, [pc, #176]	; (800652c <HAL_UART_MspInit+0x198>)
 800647a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800647e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8006480:	4b2a      	ldr	r3, [pc, #168]	; (800652c <HAL_UART_MspInit+0x198>)
 8006482:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006486:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006488:	4b28      	ldr	r3, [pc, #160]	; (800652c <HAL_UART_MspInit+0x198>)
 800648a:	2200      	movs	r2, #0
 800648c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800648e:	4827      	ldr	r0, [pc, #156]	; (800652c <HAL_UART_MspInit+0x198>)
 8006490:	f000 fe2e 	bl	80070f0 <HAL_DMA_Init>
 8006494:	4603      	mov	r3, r0
 8006496:	2b00      	cmp	r3, #0
 8006498:	d001      	beq.n	800649e <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 800649a:	f7fb f8fb 	bl	8001694 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4a22      	ldr	r2, [pc, #136]	; (800652c <HAL_UART_MspInit+0x198>)
 80064a2:	67da      	str	r2, [r3, #124]	; 0x7c
 80064a4:	4a21      	ldr	r2, [pc, #132]	; (800652c <HAL_UART_MspInit+0x198>)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream1;
 80064aa:	4b22      	ldr	r3, [pc, #136]	; (8006534 <HAL_UART_MspInit+0x1a0>)
 80064ac:	4a22      	ldr	r2, [pc, #136]	; (8006538 <HAL_UART_MspInit+0x1a4>)
 80064ae:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80064b0:	4b20      	ldr	r3, [pc, #128]	; (8006534 <HAL_UART_MspInit+0x1a0>)
 80064b2:	222a      	movs	r2, #42	; 0x2a
 80064b4:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80064b6:	4b1f      	ldr	r3, [pc, #124]	; (8006534 <HAL_UART_MspInit+0x1a0>)
 80064b8:	2240      	movs	r2, #64	; 0x40
 80064ba:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80064bc:	4b1d      	ldr	r3, [pc, #116]	; (8006534 <HAL_UART_MspInit+0x1a0>)
 80064be:	2200      	movs	r2, #0
 80064c0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80064c2:	4b1c      	ldr	r3, [pc, #112]	; (8006534 <HAL_UART_MspInit+0x1a0>)
 80064c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80064c8:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80064ca:	4b1a      	ldr	r3, [pc, #104]	; (8006534 <HAL_UART_MspInit+0x1a0>)
 80064cc:	2200      	movs	r2, #0
 80064ce:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80064d0:	4b18      	ldr	r3, [pc, #96]	; (8006534 <HAL_UART_MspInit+0x1a0>)
 80064d2:	2200      	movs	r2, #0
 80064d4:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80064d6:	4b17      	ldr	r3, [pc, #92]	; (8006534 <HAL_UART_MspInit+0x1a0>)
 80064d8:	2200      	movs	r2, #0
 80064da:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80064dc:	4b15      	ldr	r3, [pc, #84]	; (8006534 <HAL_UART_MspInit+0x1a0>)
 80064de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80064e2:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80064e4:	4b13      	ldr	r3, [pc, #76]	; (8006534 <HAL_UART_MspInit+0x1a0>)
 80064e6:	2200      	movs	r2, #0
 80064e8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80064ea:	4812      	ldr	r0, [pc, #72]	; (8006534 <HAL_UART_MspInit+0x1a0>)
 80064ec:	f000 fe00 	bl	80070f0 <HAL_DMA_Init>
 80064f0:	4603      	mov	r3, r0
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d001      	beq.n	80064fa <HAL_UART_MspInit+0x166>
    {
      Error_Handler();
 80064f6:	f7fb f8cd 	bl	8001694 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4a0d      	ldr	r2, [pc, #52]	; (8006534 <HAL_UART_MspInit+0x1a0>)
 80064fe:	679a      	str	r2, [r3, #120]	; 0x78
 8006500:	4a0c      	ldr	r2, [pc, #48]	; (8006534 <HAL_UART_MspInit+0x1a0>)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8006506:	2200      	movs	r2, #0
 8006508:	2100      	movs	r1, #0
 800650a:	2025      	movs	r0, #37	; 0x25
 800650c:	f000 fdad 	bl	800706a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006510:	2025      	movs	r0, #37	; 0x25
 8006512:	f000 fdc4 	bl	800709e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8006516:	bf00      	nop
 8006518:	37d8      	adds	r7, #216	; 0xd8
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}
 800651e:	bf00      	nop
 8006520:	40011000 	.word	0x40011000
 8006524:	58024400 	.word	0x58024400
 8006528:	58020000 	.word	0x58020000
 800652c:	24000654 	.word	0x24000654
 8006530:	40020010 	.word	0x40020010
 8006534:	240006cc 	.word	0x240006cc
 8006538:	40020028 	.word	0x40020028

0800653c <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b082      	sub	sp, #8
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a10      	ldr	r2, [pc, #64]	; (800658c <HAL_UART_MspDeInit+0x50>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d119      	bne.n	8006582 <HAL_UART_MspDeInit+0x46>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800654e:	4b10      	ldr	r3, [pc, #64]	; (8006590 <HAL_UART_MspDeInit+0x54>)
 8006550:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006554:	4a0e      	ldr	r2, [pc, #56]	; (8006590 <HAL_UART_MspDeInit+0x54>)
 8006556:	f023 0310 	bic.w	r3, r3, #16
 800655a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 800655e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006562:	480c      	ldr	r0, [pc, #48]	; (8006594 <HAL_UART_MspDeInit+0x58>)
 8006564:	f003 ff5c 	bl	800a420 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800656c:	4618      	mov	r0, r3
 800656e:	f001 f919 	bl	80077a4 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006576:	4618      	mov	r0, r3
 8006578:	f001 f914 	bl	80077a4 <HAL_DMA_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800657c:	2025      	movs	r0, #37	; 0x25
 800657e:	f000 fd9c 	bl	80070ba <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 8006582:	bf00      	nop
 8006584:	3708      	adds	r7, #8
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}
 800658a:	bf00      	nop
 800658c:	40011000 	.word	0x40011000
 8006590:	58024400 	.word	0x58024400
 8006594:	58020000 	.word	0x58020000

08006598 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006598:	b480      	push	{r7}
 800659a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800659c:	e7fe      	b.n	800659c <NMI_Handler+0x4>

0800659e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800659e:	b480      	push	{r7}
 80065a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80065a2:	e7fe      	b.n	80065a2 <HardFault_Handler+0x4>

080065a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80065a4:	b480      	push	{r7}
 80065a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80065a8:	e7fe      	b.n	80065a8 <MemManage_Handler+0x4>

080065aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80065aa:	b480      	push	{r7}
 80065ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80065ae:	e7fe      	b.n	80065ae <BusFault_Handler+0x4>

080065b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80065b0:	b480      	push	{r7}
 80065b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80065b4:	e7fe      	b.n	80065b4 <UsageFault_Handler+0x4>

080065b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80065b6:	b480      	push	{r7}
 80065b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80065ba:	bf00      	nop
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr

080065c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80065c4:	b480      	push	{r7}
 80065c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80065c8:	bf00      	nop
 80065ca:	46bd      	mov	sp, r7
 80065cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d0:	4770      	bx	lr

080065d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80065d2:	b480      	push	{r7}
 80065d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80065d6:	bf00      	nop
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr

080065e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80065e4:	f000 fc22 	bl	8006e2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80065e8:	bf00      	nop
 80065ea:	bd80      	pop	{r7, pc}

080065ec <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80065ec:	b480      	push	{r7}
 80065ee:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80065f0:	bf00      	nop
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr
	...

080065fc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8006600:	4802      	ldr	r0, [pc, #8]	; (800660c <DMA1_Stream0_IRQHandler+0x10>)
 8006602:	f002 fa53 	bl	8008aac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8006606:	bf00      	nop
 8006608:	bd80      	pop	{r7, pc}
 800660a:	bf00      	nop
 800660c:	24000654 	.word	0x24000654

08006610 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8006614:	4802      	ldr	r0, [pc, #8]	; (8006620 <DMA1_Stream1_IRQHandler+0x10>)
 8006616:	f002 fa49 	bl	8008aac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800661a:	bf00      	nop
 800661c:	bd80      	pop	{r7, pc}
 800661e:	bf00      	nop
 8006620:	240006cc 	.word	0x240006cc

08006624 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006628:	4802      	ldr	r0, [pc, #8]	; (8006634 <USART1_IRQHandler+0x10>)
 800662a:	f008 fa0d 	bl	800ea48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800662e:	bf00      	nop
 8006630:	bd80      	pop	{r7, pc}
 8006632:	bf00      	nop
 8006634:	240005c4 	.word	0x240005c4

08006638 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800663c:	4803      	ldr	r0, [pc, #12]	; (800664c <TIM8_BRK_TIM12_IRQHandler+0x14>)
 800663e:	f006 ffa1 	bl	800d584 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 8006642:	4803      	ldr	r0, [pc, #12]	; (8006650 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 8006644:	f006 ff9e 	bl	800d584 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8006648:	bf00      	nop
 800664a:	bd80      	pop	{r7, pc}
 800664c:	240003fc 	.word	0x240003fc
 8006650:	24000448 	.word	0x24000448

08006654 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8006658:	4803      	ldr	r0, [pc, #12]	; (8006668 <TIM8_UP_TIM13_IRQHandler+0x14>)
 800665a:	f006 ff93 	bl	800d584 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 800665e:	4803      	ldr	r0, [pc, #12]	; (800666c <TIM8_UP_TIM13_IRQHandler+0x18>)
 8006660:	f006 ff90 	bl	800d584 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8006664:	bf00      	nop
 8006666:	bd80      	pop	{r7, pc}
 8006668:	240003fc 	.word	0x240003fc
 800666c:	24000494 	.word	0x24000494

08006670 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8006674:	4803      	ldr	r0, [pc, #12]	; (8006684 <TIM8_TRG_COM_TIM14_IRQHandler+0x14>)
 8006676:	f006 ff85 	bl	800d584 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim14);
 800667a:	4803      	ldr	r0, [pc, #12]	; (8006688 <TIM8_TRG_COM_TIM14_IRQHandler+0x18>)
 800667c:	f006 ff82 	bl	800d584 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8006680:	bf00      	nop
 8006682:	bd80      	pop	{r7, pc}
 8006684:	240003fc 	.word	0x240003fc
 8006688:	240004e0 	.word	0x240004e0

0800668c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8006690:	4802      	ldr	r0, [pc, #8]	; (800669c <TIM7_IRQHandler+0x10>)
 8006692:	f006 ff77 	bl	800d584 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8006696:	bf00      	nop
 8006698:	bd80      	pop	{r7, pc}
 800669a:	bf00      	nop
 800669c:	240003b0 	.word	0x240003b0

080066a0 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 80066a4:	4802      	ldr	r0, [pc, #8]	; (80066b0 <TIM15_IRQHandler+0x10>)
 80066a6:	f006 ff6d 	bl	800d584 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 80066aa:	bf00      	nop
 80066ac:	bd80      	pop	{r7, pc}
 80066ae:	bf00      	nop
 80066b0:	2400052c 	.word	0x2400052c

080066b4 <TIM23_IRQHandler>:

/**
  * @brief This function handles TIM23 global interrupt.
  */
void TIM23_IRQHandler(void)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM23_IRQn 0 */

  /* USER CODE END TIM23_IRQn 0 */
  HAL_TIM_IRQHandler(&htim23);
 80066b8:	4802      	ldr	r0, [pc, #8]	; (80066c4 <TIM23_IRQHandler+0x10>)
 80066ba:	f006 ff63 	bl	800d584 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM23_IRQn 1 */

  /* USER CODE END TIM23_IRQn 1 */
}
 80066be:	bf00      	nop
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	bf00      	nop
 80066c4:	24000578 	.word	0x24000578

080066c8 <_ZN3STM5setupEv>:
#include "stm_main.h"
#include "dc_motor.h"
#include "mecanum.h"

void STM::setup(void){
 80066c8:	b580      	push	{r7, lr}
 80066ca:	af00      	add	r7, sp, #0
	DC_motor_init();
 80066cc:	f7f9 ffd6 	bl	800067c <_Z13DC_motor_initv>
}
 80066d0:	bf00      	nop
 80066d2:	bd80      	pop	{r7, pc}

080066d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80066d4:	b480      	push	{r7}
 80066d6:	af00      	add	r7, sp, #0
	return 1;
 80066d8:	2301      	movs	r3, #1
}
 80066da:	4618      	mov	r0, r3
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr

080066e4 <_kill>:

int _kill(int pid, int sig)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b082      	sub	sp, #8
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80066ee:	f00a ff2f 	bl	8011550 <__errno>
 80066f2:	4603      	mov	r3, r0
 80066f4:	2216      	movs	r2, #22
 80066f6:	601a      	str	r2, [r3, #0]
	return -1;
 80066f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3708      	adds	r7, #8
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}

08006704 <_exit>:

void _exit (int status)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b082      	sub	sp, #8
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800670c:	f04f 31ff 	mov.w	r1, #4294967295
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f7ff ffe7 	bl	80066e4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8006716:	e7fe      	b.n	8006716 <_exit+0x12>

08006718 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b086      	sub	sp, #24
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006720:	4a14      	ldr	r2, [pc, #80]	; (8006774 <_sbrk+0x5c>)
 8006722:	4b15      	ldr	r3, [pc, #84]	; (8006778 <_sbrk+0x60>)
 8006724:	1ad3      	subs	r3, r2, r3
 8006726:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800672c:	4b13      	ldr	r3, [pc, #76]	; (800677c <_sbrk+0x64>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d102      	bne.n	800673a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006734:	4b11      	ldr	r3, [pc, #68]	; (800677c <_sbrk+0x64>)
 8006736:	4a12      	ldr	r2, [pc, #72]	; (8006780 <_sbrk+0x68>)
 8006738:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800673a:	4b10      	ldr	r3, [pc, #64]	; (800677c <_sbrk+0x64>)
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	4413      	add	r3, r2
 8006742:	693a      	ldr	r2, [r7, #16]
 8006744:	429a      	cmp	r2, r3
 8006746:	d207      	bcs.n	8006758 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006748:	f00a ff02 	bl	8011550 <__errno>
 800674c:	4603      	mov	r3, r0
 800674e:	220c      	movs	r2, #12
 8006750:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006752:	f04f 33ff 	mov.w	r3, #4294967295
 8006756:	e009      	b.n	800676c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006758:	4b08      	ldr	r3, [pc, #32]	; (800677c <_sbrk+0x64>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800675e:	4b07      	ldr	r3, [pc, #28]	; (800677c <_sbrk+0x64>)
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4413      	add	r3, r2
 8006766:	4a05      	ldr	r2, [pc, #20]	; (800677c <_sbrk+0x64>)
 8006768:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800676a:	68fb      	ldr	r3, [r7, #12]
}
 800676c:	4618      	mov	r0, r3
 800676e:	3718      	adds	r7, #24
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}
 8006774:	24050000 	.word	0x24050000
 8006778:	00000400 	.word	0x00000400
 800677c:	24002330 	.word	0x24002330
 8006780:	24002350 	.word	0x24002350

08006784 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006784:	b480      	push	{r7}
 8006786:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8006788:	4b32      	ldr	r3, [pc, #200]	; (8006854 <SystemInit+0xd0>)
 800678a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800678e:	4a31      	ldr	r2, [pc, #196]	; (8006854 <SystemInit+0xd0>)
 8006790:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006794:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8006798:	4b2f      	ldr	r3, [pc, #188]	; (8006858 <SystemInit+0xd4>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f003 030f 	and.w	r3, r3, #15
 80067a0:	2b06      	cmp	r3, #6
 80067a2:	d807      	bhi.n	80067b4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80067a4:	4b2c      	ldr	r3, [pc, #176]	; (8006858 <SystemInit+0xd4>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f023 030f 	bic.w	r3, r3, #15
 80067ac:	4a2a      	ldr	r2, [pc, #168]	; (8006858 <SystemInit+0xd4>)
 80067ae:	f043 0307 	orr.w	r3, r3, #7
 80067b2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80067b4:	4b29      	ldr	r3, [pc, #164]	; (800685c <SystemInit+0xd8>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a28      	ldr	r2, [pc, #160]	; (800685c <SystemInit+0xd8>)
 80067ba:	f043 0301 	orr.w	r3, r3, #1
 80067be:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80067c0:	4b26      	ldr	r3, [pc, #152]	; (800685c <SystemInit+0xd8>)
 80067c2:	2200      	movs	r2, #0
 80067c4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80067c6:	4b25      	ldr	r3, [pc, #148]	; (800685c <SystemInit+0xd8>)
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	4924      	ldr	r1, [pc, #144]	; (800685c <SystemInit+0xd8>)
 80067cc:	4b24      	ldr	r3, [pc, #144]	; (8006860 <SystemInit+0xdc>)
 80067ce:	4013      	ands	r3, r2
 80067d0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80067d2:	4b21      	ldr	r3, [pc, #132]	; (8006858 <SystemInit+0xd4>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f003 0308 	and.w	r3, r3, #8
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d007      	beq.n	80067ee <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80067de:	4b1e      	ldr	r3, [pc, #120]	; (8006858 <SystemInit+0xd4>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f023 030f 	bic.w	r3, r3, #15
 80067e6:	4a1c      	ldr	r2, [pc, #112]	; (8006858 <SystemInit+0xd4>)
 80067e8:	f043 0307 	orr.w	r3, r3, #7
 80067ec:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80067ee:	4b1b      	ldr	r3, [pc, #108]	; (800685c <SystemInit+0xd8>)
 80067f0:	2200      	movs	r2, #0
 80067f2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80067f4:	4b19      	ldr	r3, [pc, #100]	; (800685c <SystemInit+0xd8>)
 80067f6:	2200      	movs	r2, #0
 80067f8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80067fa:	4b18      	ldr	r3, [pc, #96]	; (800685c <SystemInit+0xd8>)
 80067fc:	2200      	movs	r2, #0
 80067fe:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8006800:	4b16      	ldr	r3, [pc, #88]	; (800685c <SystemInit+0xd8>)
 8006802:	4a18      	ldr	r2, [pc, #96]	; (8006864 <SystemInit+0xe0>)
 8006804:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8006806:	4b15      	ldr	r3, [pc, #84]	; (800685c <SystemInit+0xd8>)
 8006808:	4a17      	ldr	r2, [pc, #92]	; (8006868 <SystemInit+0xe4>)
 800680a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800680c:	4b13      	ldr	r3, [pc, #76]	; (800685c <SystemInit+0xd8>)
 800680e:	4a17      	ldr	r2, [pc, #92]	; (800686c <SystemInit+0xe8>)
 8006810:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8006812:	4b12      	ldr	r3, [pc, #72]	; (800685c <SystemInit+0xd8>)
 8006814:	2200      	movs	r2, #0
 8006816:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8006818:	4b10      	ldr	r3, [pc, #64]	; (800685c <SystemInit+0xd8>)
 800681a:	4a14      	ldr	r2, [pc, #80]	; (800686c <SystemInit+0xe8>)
 800681c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800681e:	4b0f      	ldr	r3, [pc, #60]	; (800685c <SystemInit+0xd8>)
 8006820:	2200      	movs	r2, #0
 8006822:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8006824:	4b0d      	ldr	r3, [pc, #52]	; (800685c <SystemInit+0xd8>)
 8006826:	4a11      	ldr	r2, [pc, #68]	; (800686c <SystemInit+0xe8>)
 8006828:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800682a:	4b0c      	ldr	r3, [pc, #48]	; (800685c <SystemInit+0xd8>)
 800682c:	2200      	movs	r2, #0
 800682e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006830:	4b0a      	ldr	r3, [pc, #40]	; (800685c <SystemInit+0xd8>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a09      	ldr	r2, [pc, #36]	; (800685c <SystemInit+0xd8>)
 8006836:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800683a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800683c:	4b07      	ldr	r3, [pc, #28]	; (800685c <SystemInit+0xd8>)
 800683e:	2200      	movs	r2, #0
 8006840:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8006842:	4b0b      	ldr	r3, [pc, #44]	; (8006870 <SystemInit+0xec>)
 8006844:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8006848:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800684a:	bf00      	nop
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr
 8006854:	e000ed00 	.word	0xe000ed00
 8006858:	52002000 	.word	0x52002000
 800685c:	58024400 	.word	0x58024400
 8006860:	eaf6ed7f 	.word	0xeaf6ed7f
 8006864:	02020200 	.word	0x02020200
 8006868:	01ff0000 	.word	0x01ff0000
 800686c:	01010280 	.word	0x01010280
 8006870:	52004000 	.word	0x52004000

08006874 <HAL_TIM_PeriodElapsedCallback>:
#include "reset.h"
#include "scara.h"
#include "microswitch.h"


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8006874:	b580      	push	{r7, lr}
 8006876:	b082      	sub	sp, #8
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
	/** SCARA **/
	if (htim->Instance == TIM7) {
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a8a      	ldr	r2, [pc, #552]	; (8006aac <HAL_TIM_PeriodElapsedCallback+0x238>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d12a      	bne.n	80068dc <HAL_TIM_PeriodElapsedCallback+0x68>
		/*stepper 2*/
		if (sc.temp_2 == 1) {
 8006886:	4b8a      	ldr	r3, [pc, #552]	; (8006ab0 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8006888:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800688a:	2b01      	cmp	r3, #1
 800688c:	d109      	bne.n	80068a2 <HAL_TIM_PeriodElapsedCallback+0x2e>
			HAL_GPIO_WritePin(STEP_PORT_2, STEP_PIN_2, GPIO_PIN_SET);
 800688e:	2201      	movs	r2, #1
 8006890:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006894:	4887      	ldr	r0, [pc, #540]	; (8006ab4 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8006896:	f003 fedd 	bl	800a654 <HAL_GPIO_WritePin>
			sc.temp_2 = 0;
 800689a:	4b85      	ldr	r3, [pc, #532]	; (8006ab0 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800689c:	2200      	movs	r2, #0
 800689e:	661a      	str	r2, [r3, #96]	; 0x60
 80068a0:	e01c      	b.n	80068dc <HAL_TIM_PeriodElapsedCallback+0x68>
		}
		else if (sc.step_2 >= 1) {
 80068a2:	4b83      	ldr	r3, [pc, #524]	; (8006ab0 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80068a4:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 80068a8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80068ac:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80068b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068b4:	db12      	blt.n	80068dc <HAL_TIM_PeriodElapsedCallback+0x68>
			HAL_GPIO_WritePin(STEP_PORT_2, STEP_PIN_2, GPIO_PIN_RESET);
 80068b6:	2200      	movs	r2, #0
 80068b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80068bc:	487d      	ldr	r0, [pc, #500]	; (8006ab4 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80068be:	f003 fec9 	bl	800a654 <HAL_GPIO_WritePin>
			sc.temp_2 = 1;
 80068c2:	4b7b      	ldr	r3, [pc, #492]	; (8006ab0 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80068c4:	2201      	movs	r2, #1
 80068c6:	661a      	str	r2, [r3, #96]	; 0x60
			sc.step_2 = sc.step_2 - 1;
 80068c8:	4b79      	ldr	r3, [pc, #484]	; (8006ab0 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80068ca:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 80068ce:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80068d2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80068d6:	4b76      	ldr	r3, [pc, #472]	; (8006ab0 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80068d8:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
		}
	}

	if (htim->Instance == TIM8) {
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a75      	ldr	r2, [pc, #468]	; (8006ab8 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d12a      	bne.n	800693c <HAL_TIM_PeriodElapsedCallback+0xc8>
	  /*stepper 1*/
		if (sc.temp_1 == 1) {
 80068e6:	4b72      	ldr	r3, [pc, #456]	; (8006ab0 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80068e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	d109      	bne.n	8006902 <HAL_TIM_PeriodElapsedCallback+0x8e>
			HAL_GPIO_WritePin(STEP_PORT_1, STEP_PIN_1, GPIO_PIN_SET);
 80068ee:	2201      	movs	r2, #1
 80068f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80068f4:	486f      	ldr	r0, [pc, #444]	; (8006ab4 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80068f6:	f003 fead 	bl	800a654 <HAL_GPIO_WritePin>
			sc.temp_1 = 0;
 80068fa:	4b6d      	ldr	r3, [pc, #436]	; (8006ab0 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80068fc:	2200      	movs	r2, #0
 80068fe:	641a      	str	r2, [r3, #64]	; 0x40
 8006900:	e01c      	b.n	800693c <HAL_TIM_PeriodElapsedCallback+0xc8>
		}
		else if (sc.step_1 >= 1) {
 8006902:	4b6b      	ldr	r3, [pc, #428]	; (8006ab0 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8006904:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8006908:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800690c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006914:	db12      	blt.n	800693c <HAL_TIM_PeriodElapsedCallback+0xc8>
			HAL_GPIO_WritePin(STEP_PORT_1, STEP_PIN_1, GPIO_PIN_RESET);
 8006916:	2200      	movs	r2, #0
 8006918:	f44f 7100 	mov.w	r1, #512	; 0x200
 800691c:	4865      	ldr	r0, [pc, #404]	; (8006ab4 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800691e:	f003 fe99 	bl	800a654 <HAL_GPIO_WritePin>
			sc.temp_1 = 1;
 8006922:	4b63      	ldr	r3, [pc, #396]	; (8006ab0 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8006924:	2201      	movs	r2, #1
 8006926:	641a      	str	r2, [r3, #64]	; 0x40
			sc.step_1 = sc.step_1 - 1;
 8006928:	4b61      	ldr	r3, [pc, #388]	; (8006ab0 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800692a:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800692e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006932:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006936:	4b5e      	ldr	r3, [pc, #376]	; (8006ab0 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8006938:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
		}
	}

	if (htim->Instance == TIM14) {
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a5e      	ldr	r2, [pc, #376]	; (8006abc <HAL_TIM_PeriodElapsedCallback+0x248>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d12d      	bne.n	80069a2 <HAL_TIM_PeriodElapsedCallback+0x12e>
		/*stepper 3*/
		if (sc.temp_3 == 1) {
 8006946:	4b5a      	ldr	r3, [pc, #360]	; (8006ab0 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8006948:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800694c:	2b01      	cmp	r3, #1
 800694e:	d10a      	bne.n	8006966 <HAL_TIM_PeriodElapsedCallback+0xf2>
			HAL_GPIO_WritePin(STEP_PORT_3, STEP_PIN_3, GPIO_PIN_SET);
 8006950:	2201      	movs	r2, #1
 8006952:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006956:	485a      	ldr	r0, [pc, #360]	; (8006ac0 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8006958:	f003 fe7c 	bl	800a654 <HAL_GPIO_WritePin>
			sc.temp_3 = 0;
 800695c:	4b54      	ldr	r3, [pc, #336]	; (8006ab0 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800695e:	2200      	movs	r2, #0
 8006960:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8006964:	e01d      	b.n	80069a2 <HAL_TIM_PeriodElapsedCallback+0x12e>
		}
		else if (sc.step_3 >= 1) {
 8006966:	4b52      	ldr	r3, [pc, #328]	; (8006ab0 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8006968:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 800696c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006970:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006978:	db13      	blt.n	80069a2 <HAL_TIM_PeriodElapsedCallback+0x12e>
			HAL_GPIO_WritePin(STEP_PORT_3, STEP_PIN_3, GPIO_PIN_RESET);
 800697a:	2200      	movs	r2, #0
 800697c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006980:	484f      	ldr	r0, [pc, #316]	; (8006ac0 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8006982:	f003 fe67 	bl	800a654 <HAL_GPIO_WritePin>
			sc.temp_3 = 1;
 8006986:	4b4a      	ldr	r3, [pc, #296]	; (8006ab0 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8006988:	2201      	movs	r2, #1
 800698a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			sc.step_3 = sc.step_3 - 1;
 800698e:	4b48      	ldr	r3, [pc, #288]	; (8006ab0 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8006990:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 8006994:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006998:	ee37 7b46 	vsub.f64	d7, d7, d6
 800699c:	4b44      	ldr	r3, [pc, #272]	; (8006ab0 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800699e:	ed83 7b1c 	vstr	d7, [r3, #112]	; 0x70
		}
	}
	/**  **/


	if (htim->Instance == TIM13) {
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a47      	ldr	r2, [pc, #284]	; (8006ac4 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d127      	bne.n	80069fc <HAL_TIM_PeriodElapsedCallback+0x188>
	/* ROS publish */
		static int ms=0;
		if(ms%20==0){
 80069ac:	4b46      	ldr	r3, [pc, #280]	; (8006ac8 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80069ae:	6819      	ldr	r1, [r3, #0]
 80069b0:	4b46      	ldr	r3, [pc, #280]	; (8006acc <HAL_TIM_PeriodElapsedCallback+0x258>)
 80069b2:	fb83 2301 	smull	r2, r3, r3, r1
 80069b6:	10da      	asrs	r2, r3, #3
 80069b8:	17cb      	asrs	r3, r1, #31
 80069ba:	1ad2      	subs	r2, r2, r3
 80069bc:	4613      	mov	r3, r2
 80069be:	009b      	lsls	r3, r3, #2
 80069c0:	4413      	add	r3, r2
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	1aca      	subs	r2, r1, r3
 80069c6:	2a00      	cmp	r2, #0
 80069c8:	d108      	bne.n	80069dc <HAL_TIM_PeriodElapsedCallback+0x168>
			ROS::pub_car_vel();
 80069ca:	f7fd f9f5 	bl	8003db8 <_ZN3ROS11pub_car_velEv>
			ROS::pub_reset();
 80069ce:	f7fd f92d 	bl	8003c2c <_ZN3ROS9pub_resetEv>
//			ROS::pub_micro();
			ROS::pub_scaraflag();
 80069d2:	f7fd f99b 	bl	8003d0c <_ZN3ROS13pub_scaraflagEv>
			ms=0;
 80069d6:	4b3c      	ldr	r3, [pc, #240]	; (8006ac8 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80069d8:	2200      	movs	r2, #0
 80069da:	601a      	str	r2, [r3, #0]
		}
		ms++;
 80069dc:	4b3a      	ldr	r3, [pc, #232]	; (8006ac8 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	3301      	adds	r3, #1
 80069e2:	4a39      	ldr	r2, [pc, #228]	; (8006ac8 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80069e4:	6013      	str	r3, [r2, #0]

		if(sc.timer_flag) sc.timer_count++;
 80069e6:	4b32      	ldr	r3, [pc, #200]	; (8006ab0 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80069e8:	781b      	ldrb	r3, [r3, #0]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d004      	beq.n	80069f8 <HAL_TIM_PeriodElapsedCallback+0x184>
 80069ee:	4b30      	ldr	r3, [pc, #192]	; (8006ab0 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	3301      	adds	r3, #1
 80069f4:	4a2e      	ldr	r2, [pc, #184]	; (8006ab0 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80069f6:	6053      	str	r3, [r2, #4]

	/* PID Control */
		motor_standard();
 80069f8:	f000 f876 	bl	8006ae8 <_Z14motor_standardv>
	}


	/** Intake **/
	if (htim->Instance == TIM24){
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a33      	ldr	r2, [pc, #204]	; (8006ad0 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d14d      	bne.n	8006aa2 <HAL_TIM_PeriodElapsedCallback+0x22e>
		/* microswitch */
		if (HAL_GPIO_ReadPin(TOUCH_A_PORT, TOUCH_A_PIN) == 0) {
 8006a06:	2140      	movs	r1, #64	; 0x40
 8006a08:	4832      	ldr	r0, [pc, #200]	; (8006ad4 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8006a0a:	f003 fe0b 	bl	800a624 <HAL_GPIO_ReadPin>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	bf0c      	ite	eq
 8006a14:	2301      	moveq	r3, #1
 8006a16:	2300      	movne	r3, #0
 8006a18:	b2db      	uxtb	r3, r3
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d006      	beq.n	8006a2c <HAL_TIM_PeriodElapsedCallback+0x1b8>
			MICROSWITCH::touch_a = 1;
 8006a1e:	492e      	ldr	r1, [pc, #184]	; (8006ad8 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8006a20:	f04f 0200 	mov.w	r2, #0
 8006a24:	4b2d      	ldr	r3, [pc, #180]	; (8006adc <HAL_TIM_PeriodElapsedCallback+0x268>)
 8006a26:	e9c1 2300 	strd	r2, r3, [r1]
 8006a2a:	e006      	b.n	8006a3a <HAL_TIM_PeriodElapsedCallback+0x1c6>
		} else MICROSWITCH::touch_a = 0;
 8006a2c:	492a      	ldr	r1, [pc, #168]	; (8006ad8 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8006a2e:	f04f 0200 	mov.w	r2, #0
 8006a32:	f04f 0300 	mov.w	r3, #0
 8006a36:	e9c1 2300 	strd	r2, r3, [r1]

		if (HAL_GPIO_ReadPin(TOUCH_B_PORT, TOUCH_B_PIN) == 0) {
 8006a3a:	2120      	movs	r1, #32
 8006a3c:	4825      	ldr	r0, [pc, #148]	; (8006ad4 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8006a3e:	f003 fdf1 	bl	800a624 <HAL_GPIO_ReadPin>
 8006a42:	4603      	mov	r3, r0
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	bf0c      	ite	eq
 8006a48:	2301      	moveq	r3, #1
 8006a4a:	2300      	movne	r3, #0
 8006a4c:	b2db      	uxtb	r3, r3
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d006      	beq.n	8006a60 <HAL_TIM_PeriodElapsedCallback+0x1ec>
			MICROSWITCH::touch_b = 1;
 8006a52:	4923      	ldr	r1, [pc, #140]	; (8006ae0 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8006a54:	f04f 0200 	mov.w	r2, #0
 8006a58:	4b20      	ldr	r3, [pc, #128]	; (8006adc <HAL_TIM_PeriodElapsedCallback+0x268>)
 8006a5a:	e9c1 2300 	strd	r2, r3, [r1]
 8006a5e:	e006      	b.n	8006a6e <HAL_TIM_PeriodElapsedCallback+0x1fa>
		} else MICROSWITCH::touch_b = 0;
 8006a60:	491f      	ldr	r1, [pc, #124]	; (8006ae0 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8006a62:	f04f 0200 	mov.w	r2, #0
 8006a66:	f04f 0300 	mov.w	r3, #0
 8006a6a:	e9c1 2300 	strd	r2, r3, [r1]

		if (HAL_GPIO_ReadPin(TOUCH_C_PORT, TOUCH_C_PIN) == 0) {
 8006a6e:	2110      	movs	r1, #16
 8006a70:	4818      	ldr	r0, [pc, #96]	; (8006ad4 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8006a72:	f003 fdd7 	bl	800a624 <HAL_GPIO_ReadPin>
 8006a76:	4603      	mov	r3, r0
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	bf0c      	ite	eq
 8006a7c:	2301      	moveq	r3, #1
 8006a7e:	2300      	movne	r3, #0
 8006a80:	b2db      	uxtb	r3, r3
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d006      	beq.n	8006a94 <HAL_TIM_PeriodElapsedCallback+0x220>
			MICROSWITCH::touch_c = 1;
 8006a86:	4917      	ldr	r1, [pc, #92]	; (8006ae4 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8006a88:	f04f 0200 	mov.w	r2, #0
 8006a8c:	4b13      	ldr	r3, [pc, #76]	; (8006adc <HAL_TIM_PeriodElapsedCallback+0x268>)
 8006a8e:	e9c1 2300 	strd	r2, r3, [r1]
		} else MICROSWITCH::touch_c = 0;
	}
}
 8006a92:	e006      	b.n	8006aa2 <HAL_TIM_PeriodElapsedCallback+0x22e>
		} else MICROSWITCH::touch_c = 0;
 8006a94:	4913      	ldr	r1, [pc, #76]	; (8006ae4 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8006a96:	f04f 0200 	mov.w	r2, #0
 8006a9a:	f04f 0300 	mov.w	r3, #0
 8006a9e:	e9c1 2300 	strd	r2, r3, [r1]
}
 8006aa2:	bf00      	nop
 8006aa4:	3708      	adds	r7, #8
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
 8006aaa:	bf00      	nop
 8006aac:	40001400 	.word	0x40001400
 8006ab0:	24002250 	.word	0x24002250
 8006ab4:	58021400 	.word	0x58021400
 8006ab8:	40010400 	.word	0x40010400
 8006abc:	40002000 	.word	0x40002000
 8006ac0:	58020400 	.word	0x58020400
 8006ac4:	40001c00 	.word	0x40001c00
 8006ac8:	24002334 	.word	0x24002334
 8006acc:	66666667 	.word	0x66666667
 8006ad0:	4000e400 	.word	0x4000e400
 8006ad4:	58021800 	.word	0x58021800
 8006ad8:	24000790 	.word	0x24000790
 8006adc:	3ff00000 	.word	0x3ff00000
 8006ae0:	24000798 	.word	0x24000798
 8006ae4:	240007a0 	.word	0x240007a0

08006ae8 <_Z14motor_standardv>:

void motor_standard(void){
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	af00      	add	r7, sp, #0
	/*enc 1*/
		fr.CountNow = __HAL_TIM_GetCounter(&htim2);
 8006aec:	4b73      	ldr	r3, [pc, #460]	; (8006cbc <_Z14motor_standardv+0x1d4>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af2:	b21a      	sxth	r2, r3
 8006af4:	4b72      	ldr	r3, [pc, #456]	; (8006cc0 <_Z14motor_standardv+0x1d8>)
 8006af6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		fr.PIDControl();
 8006afa:	4871      	ldr	r0, [pc, #452]	; (8006cc0 <_Z14motor_standardv+0x1d8>)
 8006afc:	f7f9 fe51 	bl	80007a2 <_ZN8DC_motor10PIDControlEv>
		__HAL_TIM_SetCounter(&htim2,0);
 8006b00:	4b6e      	ldr	r3, [pc, #440]	; (8006cbc <_Z14motor_standardv+0x1d4>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	2200      	movs	r2, #0
 8006b06:	625a      	str	r2, [r3, #36]	; 0x24

		if (fr.PWM < 0) {
 8006b08:	4b6d      	ldr	r3, [pc, #436]	; (8006cc0 <_Z14motor_standardv+0x1d8>)
 8006b0a:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8006b0e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8006b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b16:	d50c      	bpl.n	8006b32 <_Z14motor_standardv+0x4a>
			HAL_GPIO_WritePin(MOTORPLUS_PORT_fr, MOTORPLUS_PIN_fr, GPIO_PIN_SET);
 8006b18:	2201      	movs	r2, #1
 8006b1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006b1e:	4869      	ldr	r0, [pc, #420]	; (8006cc4 <_Z14motor_standardv+0x1dc>)
 8006b20:	f003 fd98 	bl	800a654 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_fr, MOTORMINUS_PIN_fr, GPIO_PIN_RESET);
 8006b24:	2200      	movs	r2, #0
 8006b26:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006b2a:	4866      	ldr	r0, [pc, #408]	; (8006cc4 <_Z14motor_standardv+0x1dc>)
 8006b2c:	f003 fd92 	bl	800a654 <HAL_GPIO_WritePin>
 8006b30:	e00b      	b.n	8006b4a <_Z14motor_standardv+0x62>
		}
		else{
			HAL_GPIO_WritePin(MOTORPLUS_PORT_fr, MOTORPLUS_PIN_fr, GPIO_PIN_RESET);
 8006b32:	2200      	movs	r2, #0
 8006b34:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006b38:	4862      	ldr	r0, [pc, #392]	; (8006cc4 <_Z14motor_standardv+0x1dc>)
 8006b3a:	f003 fd8b 	bl	800a654 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_fr, MOTORMINUS_PIN_fr, GPIO_PIN_SET);
 8006b3e:	2201      	movs	r2, #1
 8006b40:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006b44:	485f      	ldr	r0, [pc, #380]	; (8006cc4 <_Z14motor_standardv+0x1dc>)
 8006b46:	f003 fd85 	bl	800a654 <HAL_GPIO_WritePin>
		}

		__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, fabs(fr.PWM));
 8006b4a:	4b5d      	ldr	r3, [pc, #372]	; (8006cc0 <_Z14motor_standardv+0x1d8>)
 8006b4c:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8006b50:	eeb0 7bc7 	vabs.f64	d7, d7
 8006b54:	4b5c      	ldr	r3, [pc, #368]	; (8006cc8 <_Z14motor_standardv+0x1e0>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006b5c:	ee17 2a90 	vmov	r2, s15
 8006b60:	639a      	str	r2, [r3, #56]	; 0x38

	/*enc 2*/
		fl.CountNow = __HAL_TIM_GetCounter(&htim5);
 8006b62:	4b5a      	ldr	r3, [pc, #360]	; (8006ccc <_Z14motor_standardv+0x1e4>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b68:	b21a      	sxth	r2, r3
 8006b6a:	4b59      	ldr	r3, [pc, #356]	; (8006cd0 <_Z14motor_standardv+0x1e8>)
 8006b6c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		fl.PIDControl();
 8006b70:	4857      	ldr	r0, [pc, #348]	; (8006cd0 <_Z14motor_standardv+0x1e8>)
 8006b72:	f7f9 fe16 	bl	80007a2 <_ZN8DC_motor10PIDControlEv>
		__HAL_TIM_SetCounter(&htim5,0);
 8006b76:	4b55      	ldr	r3, [pc, #340]	; (8006ccc <_Z14motor_standardv+0x1e4>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	625a      	str	r2, [r3, #36]	; 0x24

		if (fl.PWM > 0) {
 8006b7e:	4b54      	ldr	r3, [pc, #336]	; (8006cd0 <_Z14motor_standardv+0x1e8>)
 8006b80:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8006b84:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8006b88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b8c:	dd0c      	ble.n	8006ba8 <_Z14motor_standardv+0xc0>
			HAL_GPIO_WritePin(MOTORPLUS_PORT_fl, MOTORPLUS_PIN_fl, GPIO_PIN_SET);
 8006b8e:	2201      	movs	r2, #1
 8006b90:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006b94:	484f      	ldr	r0, [pc, #316]	; (8006cd4 <_Z14motor_standardv+0x1ec>)
 8006b96:	f003 fd5d 	bl	800a654 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_fl, MOTORMINUS_PIN_fl, GPIO_PIN_RESET);
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006ba0:	484c      	ldr	r0, [pc, #304]	; (8006cd4 <_Z14motor_standardv+0x1ec>)
 8006ba2:	f003 fd57 	bl	800a654 <HAL_GPIO_WritePin>
 8006ba6:	e00b      	b.n	8006bc0 <_Z14motor_standardv+0xd8>
		}
		else{
			HAL_GPIO_WritePin(MOTORPLUS_PORT_fl, MOTORPLUS_PIN_fl, GPIO_PIN_RESET);
 8006ba8:	2200      	movs	r2, #0
 8006baa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006bae:	4849      	ldr	r0, [pc, #292]	; (8006cd4 <_Z14motor_standardv+0x1ec>)
 8006bb0:	f003 fd50 	bl	800a654 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_fl, MOTORMINUS_PIN_fl, GPIO_PIN_SET);
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006bba:	4846      	ldr	r0, [pc, #280]	; (8006cd4 <_Z14motor_standardv+0x1ec>)
 8006bbc:	f003 fd4a 	bl	800a654 <HAL_GPIO_WritePin>
		}

		__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, fabs(fl.PWM));
 8006bc0:	4b43      	ldr	r3, [pc, #268]	; (8006cd0 <_Z14motor_standardv+0x1e8>)
 8006bc2:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8006bc6:	eeb0 7bc7 	vabs.f64	d7, d7
 8006bca:	4b3f      	ldr	r3, [pc, #252]	; (8006cc8 <_Z14motor_standardv+0x1e0>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006bd2:	ee17 2a90 	vmov	r2, s15
 8006bd6:	635a      	str	r2, [r3, #52]	; 0x34

	/*enc 3*/
		br.CountNow = __HAL_TIM_GetCounter(&htim3);
 8006bd8:	4b3f      	ldr	r3, [pc, #252]	; (8006cd8 <_Z14motor_standardv+0x1f0>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bde:	b21a      	sxth	r2, r3
 8006be0:	4b3e      	ldr	r3, [pc, #248]	; (8006cdc <_Z14motor_standardv+0x1f4>)
 8006be2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		br.PIDControl();
 8006be6:	483d      	ldr	r0, [pc, #244]	; (8006cdc <_Z14motor_standardv+0x1f4>)
 8006be8:	f7f9 fddb 	bl	80007a2 <_ZN8DC_motor10PIDControlEv>
		__HAL_TIM_SetCounter(&htim3,0);
 8006bec:	4b3a      	ldr	r3, [pc, #232]	; (8006cd8 <_Z14motor_standardv+0x1f0>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	625a      	str	r2, [r3, #36]	; 0x24

		if (br.PWM > 0) {
 8006bf4:	4b39      	ldr	r3, [pc, #228]	; (8006cdc <_Z14motor_standardv+0x1f4>)
 8006bf6:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8006bfa:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8006bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c02:	dd0a      	ble.n	8006c1a <_Z14motor_standardv+0x132>
			HAL_GPIO_WritePin(MOTORPLUS_PORT_br, MOTORPLUS_PIN_br, GPIO_PIN_SET);
 8006c04:	2201      	movs	r2, #1
 8006c06:	2104      	movs	r1, #4
 8006c08:	4835      	ldr	r0, [pc, #212]	; (8006ce0 <_Z14motor_standardv+0x1f8>)
 8006c0a:	f003 fd23 	bl	800a654 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_br, MOTORMINUS_PIN_br, GPIO_PIN_RESET);
 8006c0e:	2200      	movs	r2, #0
 8006c10:	2108      	movs	r1, #8
 8006c12:	4833      	ldr	r0, [pc, #204]	; (8006ce0 <_Z14motor_standardv+0x1f8>)
 8006c14:	f003 fd1e 	bl	800a654 <HAL_GPIO_WritePin>
 8006c18:	e009      	b.n	8006c2e <_Z14motor_standardv+0x146>
		}
		else{
			HAL_GPIO_WritePin(MOTORPLUS_PORT_br, MOTORPLUS_PIN_br, GPIO_PIN_RESET);
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	2104      	movs	r1, #4
 8006c1e:	4830      	ldr	r0, [pc, #192]	; (8006ce0 <_Z14motor_standardv+0x1f8>)
 8006c20:	f003 fd18 	bl	800a654 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_br, MOTORMINUS_PIN_br, GPIO_PIN_SET);
 8006c24:	2201      	movs	r2, #1
 8006c26:	2108      	movs	r1, #8
 8006c28:	482d      	ldr	r0, [pc, #180]	; (8006ce0 <_Z14motor_standardv+0x1f8>)
 8006c2a:	f003 fd13 	bl	800a654 <HAL_GPIO_WritePin>
		}
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, fabs(br.PWM));
 8006c2e:	4b2b      	ldr	r3, [pc, #172]	; (8006cdc <_Z14motor_standardv+0x1f4>)
 8006c30:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8006c34:	eeb0 7bc7 	vabs.f64	d7, d7
 8006c38:	4b2a      	ldr	r3, [pc, #168]	; (8006ce4 <_Z14motor_standardv+0x1fc>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006c40:	ee17 2a90 	vmov	r2, s15
 8006c44:	635a      	str	r2, [r3, #52]	; 0x34

	/*enc 4*/
		bl.CountNow = __HAL_TIM_GetCounter(&htim4);
 8006c46:	4b28      	ldr	r3, [pc, #160]	; (8006ce8 <_Z14motor_standardv+0x200>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c4c:	b21a      	sxth	r2, r3
 8006c4e:	4b27      	ldr	r3, [pc, #156]	; (8006cec <_Z14motor_standardv+0x204>)
 8006c50:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		bl.PIDControl();
 8006c54:	4825      	ldr	r0, [pc, #148]	; (8006cec <_Z14motor_standardv+0x204>)
 8006c56:	f7f9 fda4 	bl	80007a2 <_ZN8DC_motor10PIDControlEv>
		__HAL_TIM_SetCounter(&htim4,0);
 8006c5a:	4b23      	ldr	r3, [pc, #140]	; (8006ce8 <_Z14motor_standardv+0x200>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	625a      	str	r2, [r3, #36]	; 0x24

		if (bl.PWM < 0) {
 8006c62:	4b22      	ldr	r3, [pc, #136]	; (8006cec <_Z14motor_standardv+0x204>)
 8006c64:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8006c68:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8006c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c70:	d50b      	bpl.n	8006c8a <_Z14motor_standardv+0x1a2>
			HAL_GPIO_WritePin(MOTORPLUS_PORT_bl, MOTORPLUS_PIN_bl, GPIO_PIN_SET);
 8006c72:	2201      	movs	r2, #1
 8006c74:	2110      	movs	r1, #16
 8006c76:	481a      	ldr	r0, [pc, #104]	; (8006ce0 <_Z14motor_standardv+0x1f8>)
 8006c78:	f003 fcec 	bl	800a654 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_bl, MOTORMINUS_PIN_bl, GPIO_PIN_RESET);
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006c82:	481b      	ldr	r0, [pc, #108]	; (8006cf0 <_Z14motor_standardv+0x208>)
 8006c84:	f003 fce6 	bl	800a654 <HAL_GPIO_WritePin>
 8006c88:	e00a      	b.n	8006ca0 <_Z14motor_standardv+0x1b8>
		}
		else{
			HAL_GPIO_WritePin(MOTORPLUS_PORT_bl, MOTORPLUS_PIN_bl, GPIO_PIN_RESET);
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	2110      	movs	r1, #16
 8006c8e:	4814      	ldr	r0, [pc, #80]	; (8006ce0 <_Z14motor_standardv+0x1f8>)
 8006c90:	f003 fce0 	bl	800a654 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_bl, MOTORMINUS_PIN_bl, GPIO_PIN_SET);
 8006c94:	2201      	movs	r2, #1
 8006c96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006c9a:	4815      	ldr	r0, [pc, #84]	; (8006cf0 <_Z14motor_standardv+0x208>)
 8006c9c:	f003 fcda 	bl	800a654 <HAL_GPIO_WritePin>
		}
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_2, fabs(bl.PWM));
 8006ca0:	4b12      	ldr	r3, [pc, #72]	; (8006cec <_Z14motor_standardv+0x204>)
 8006ca2:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8006ca6:	eeb0 7bc7 	vabs.f64	d7, d7
 8006caa:	4b0e      	ldr	r3, [pc, #56]	; (8006ce4 <_Z14motor_standardv+0x1fc>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006cb2:	ee17 2a90 	vmov	r2, s15
 8006cb6:	639a      	str	r2, [r3, #56]	; 0x38

}
 8006cb8:	bf00      	nop
 8006cba:	bd80      	pop	{r7, pc}
 8006cbc:	24000280 	.word	0x24000280
 8006cc0:	240000a0 	.word	0x240000a0
 8006cc4:	58020c00 	.word	0x58020c00
 8006cc8:	24000448 	.word	0x24000448
 8006ccc:	24000364 	.word	0x24000364
 8006cd0:	24000110 	.word	0x24000110
 8006cd4:	58020400 	.word	0x58020400
 8006cd8:	240002cc 	.word	0x240002cc
 8006cdc:	24000180 	.word	0x24000180
 8006ce0:	58021000 	.word	0x58021000
 8006ce4:	2400052c 	.word	0x2400052c
 8006ce8:	24000318 	.word	0x24000318
 8006cec:	240001f0 	.word	0x240001f0
 8006cf0:	58020800 	.word	0x58020800

08006cf4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8006cf4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006d2c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8006cf8:	f7ff fd44 	bl	8006784 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006cfc:	480c      	ldr	r0, [pc, #48]	; (8006d30 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006cfe:	490d      	ldr	r1, [pc, #52]	; (8006d34 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006d00:	4a0d      	ldr	r2, [pc, #52]	; (8006d38 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006d02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006d04:	e002      	b.n	8006d0c <LoopCopyDataInit>

08006d06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006d06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006d08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006d0a:	3304      	adds	r3, #4

08006d0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006d0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006d0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006d10:	d3f9      	bcc.n	8006d06 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006d12:	4a0a      	ldr	r2, [pc, #40]	; (8006d3c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006d14:	4c0a      	ldr	r4, [pc, #40]	; (8006d40 <LoopFillZerobss+0x22>)
  movs r3, #0
 8006d16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006d18:	e001      	b.n	8006d1e <LoopFillZerobss>

08006d1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006d1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006d1c:	3204      	adds	r2, #4

08006d1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006d1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006d20:	d3fb      	bcc.n	8006d1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006d22:	f00a fc1b 	bl	801155c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006d26:	f7f9 ff11 	bl	8000b4c <main>
  bx  lr
 8006d2a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006d2c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8006d30:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8006d34:	2400007c 	.word	0x2400007c
  ldr r2, =_sidata
 8006d38:	08013598 	.word	0x08013598
  ldr r2, =_sbss
 8006d3c:	24000080 	.word	0x24000080
  ldr r4, =_ebss
 8006d40:	2400234c 	.word	0x2400234c

08006d44 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006d44:	e7fe      	b.n	8006d44 <ADC3_IRQHandler>
	...

08006d48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b082      	sub	sp, #8
 8006d4c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006d4e:	2003      	movs	r0, #3
 8006d50:	f000 f980 	bl	8007054 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006d54:	f004 fa36 	bl	800b1c4 <HAL_RCC_GetSysClockFreq>
 8006d58:	4602      	mov	r2, r0
 8006d5a:	4b15      	ldr	r3, [pc, #84]	; (8006db0 <HAL_Init+0x68>)
 8006d5c:	699b      	ldr	r3, [r3, #24]
 8006d5e:	0a1b      	lsrs	r3, r3, #8
 8006d60:	f003 030f 	and.w	r3, r3, #15
 8006d64:	4913      	ldr	r1, [pc, #76]	; (8006db4 <HAL_Init+0x6c>)
 8006d66:	5ccb      	ldrb	r3, [r1, r3]
 8006d68:	f003 031f 	and.w	r3, r3, #31
 8006d6c:	fa22 f303 	lsr.w	r3, r2, r3
 8006d70:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006d72:	4b0f      	ldr	r3, [pc, #60]	; (8006db0 <HAL_Init+0x68>)
 8006d74:	699b      	ldr	r3, [r3, #24]
 8006d76:	f003 030f 	and.w	r3, r3, #15
 8006d7a:	4a0e      	ldr	r2, [pc, #56]	; (8006db4 <HAL_Init+0x6c>)
 8006d7c:	5cd3      	ldrb	r3, [r2, r3]
 8006d7e:	f003 031f 	and.w	r3, r3, #31
 8006d82:	687a      	ldr	r2, [r7, #4]
 8006d84:	fa22 f303 	lsr.w	r3, r2, r3
 8006d88:	4a0b      	ldr	r2, [pc, #44]	; (8006db8 <HAL_Init+0x70>)
 8006d8a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006d8c:	4a0b      	ldr	r2, [pc, #44]	; (8006dbc <HAL_Init+0x74>)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006d92:	200f      	movs	r0, #15
 8006d94:	f000 f814 	bl	8006dc0 <HAL_InitTick>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d001      	beq.n	8006da2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	e002      	b.n	8006da8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8006da2:	f7ff f83f 	bl	8005e24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006da6:	2300      	movs	r3, #0
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3708      	adds	r7, #8
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}
 8006db0:	58024400 	.word	0x58024400
 8006db4:	08011c38 	.word	0x08011c38
 8006db8:	24000008 	.word	0x24000008
 8006dbc:	24000004 	.word	0x24000004

08006dc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b082      	sub	sp, #8
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8006dc8:	4b15      	ldr	r3, [pc, #84]	; (8006e20 <HAL_InitTick+0x60>)
 8006dca:	781b      	ldrb	r3, [r3, #0]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d101      	bne.n	8006dd4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	e021      	b.n	8006e18 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8006dd4:	4b13      	ldr	r3, [pc, #76]	; (8006e24 <HAL_InitTick+0x64>)
 8006dd6:	681a      	ldr	r2, [r3, #0]
 8006dd8:	4b11      	ldr	r3, [pc, #68]	; (8006e20 <HAL_InitTick+0x60>)
 8006dda:	781b      	ldrb	r3, [r3, #0]
 8006ddc:	4619      	mov	r1, r3
 8006dde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006de2:	fbb3 f3f1 	udiv	r3, r3, r1
 8006de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dea:	4618      	mov	r0, r3
 8006dec:	f000 f973 	bl	80070d6 <HAL_SYSTICK_Config>
 8006df0:	4603      	mov	r3, r0
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d001      	beq.n	8006dfa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8006df6:	2301      	movs	r3, #1
 8006df8:	e00e      	b.n	8006e18 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2b0f      	cmp	r3, #15
 8006dfe:	d80a      	bhi.n	8006e16 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006e00:	2200      	movs	r2, #0
 8006e02:	6879      	ldr	r1, [r7, #4]
 8006e04:	f04f 30ff 	mov.w	r0, #4294967295
 8006e08:	f000 f92f 	bl	800706a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006e0c:	4a06      	ldr	r2, [pc, #24]	; (8006e28 <HAL_InitTick+0x68>)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006e12:	2300      	movs	r3, #0
 8006e14:	e000      	b.n	8006e18 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8006e16:	2301      	movs	r3, #1
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3708      	adds	r7, #8
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}
 8006e20:	24000010 	.word	0x24000010
 8006e24:	24000004 	.word	0x24000004
 8006e28:	2400000c 	.word	0x2400000c

08006e2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006e30:	4b06      	ldr	r3, [pc, #24]	; (8006e4c <HAL_IncTick+0x20>)
 8006e32:	781b      	ldrb	r3, [r3, #0]
 8006e34:	461a      	mov	r2, r3
 8006e36:	4b06      	ldr	r3, [pc, #24]	; (8006e50 <HAL_IncTick+0x24>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4413      	add	r3, r2
 8006e3c:	4a04      	ldr	r2, [pc, #16]	; (8006e50 <HAL_IncTick+0x24>)
 8006e3e:	6013      	str	r3, [r2, #0]
}
 8006e40:	bf00      	nop
 8006e42:	46bd      	mov	sp, r7
 8006e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e48:	4770      	bx	lr
 8006e4a:	bf00      	nop
 8006e4c:	24000010 	.word	0x24000010
 8006e50:	24002338 	.word	0x24002338

08006e54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006e54:	b480      	push	{r7}
 8006e56:	af00      	add	r7, sp, #0
  return uwTick;
 8006e58:	4b03      	ldr	r3, [pc, #12]	; (8006e68 <HAL_GetTick+0x14>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr
 8006e66:	bf00      	nop
 8006e68:	24002338 	.word	0x24002338

08006e6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b085      	sub	sp, #20
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f003 0307 	and.w	r3, r3, #7
 8006e7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006e7c:	4b0b      	ldr	r3, [pc, #44]	; (8006eac <__NVIC_SetPriorityGrouping+0x40>)
 8006e7e:	68db      	ldr	r3, [r3, #12]
 8006e80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006e82:	68ba      	ldr	r2, [r7, #8]
 8006e84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006e88:	4013      	ands	r3, r2
 8006e8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006e94:	4b06      	ldr	r3, [pc, #24]	; (8006eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8006e96:	4313      	orrs	r3, r2
 8006e98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006e9a:	4a04      	ldr	r2, [pc, #16]	; (8006eac <__NVIC_SetPriorityGrouping+0x40>)
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	60d3      	str	r3, [r2, #12]
}
 8006ea0:	bf00      	nop
 8006ea2:	3714      	adds	r7, #20
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr
 8006eac:	e000ed00 	.word	0xe000ed00
 8006eb0:	05fa0000 	.word	0x05fa0000

08006eb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006eb8:	4b04      	ldr	r3, [pc, #16]	; (8006ecc <__NVIC_GetPriorityGrouping+0x18>)
 8006eba:	68db      	ldr	r3, [r3, #12]
 8006ebc:	0a1b      	lsrs	r3, r3, #8
 8006ebe:	f003 0307 	and.w	r3, r3, #7
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr
 8006ecc:	e000ed00 	.word	0xe000ed00

08006ed0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b083      	sub	sp, #12
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006eda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	db0b      	blt.n	8006efa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006ee2:	88fb      	ldrh	r3, [r7, #6]
 8006ee4:	f003 021f 	and.w	r2, r3, #31
 8006ee8:	4907      	ldr	r1, [pc, #28]	; (8006f08 <__NVIC_EnableIRQ+0x38>)
 8006eea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006eee:	095b      	lsrs	r3, r3, #5
 8006ef0:	2001      	movs	r0, #1
 8006ef2:	fa00 f202 	lsl.w	r2, r0, r2
 8006ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006efa:	bf00      	nop
 8006efc:	370c      	adds	r7, #12
 8006efe:	46bd      	mov	sp, r7
 8006f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f04:	4770      	bx	lr
 8006f06:	bf00      	nop
 8006f08:	e000e100 	.word	0xe000e100

08006f0c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b083      	sub	sp, #12
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	4603      	mov	r3, r0
 8006f14:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006f16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	db12      	blt.n	8006f44 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006f1e:	88fb      	ldrh	r3, [r7, #6]
 8006f20:	f003 021f 	and.w	r2, r3, #31
 8006f24:	490a      	ldr	r1, [pc, #40]	; (8006f50 <__NVIC_DisableIRQ+0x44>)
 8006f26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006f2a:	095b      	lsrs	r3, r3, #5
 8006f2c:	2001      	movs	r0, #1
 8006f2e:	fa00 f202 	lsl.w	r2, r0, r2
 8006f32:	3320      	adds	r3, #32
 8006f34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006f38:	f3bf 8f4f 	dsb	sy
}
 8006f3c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006f3e:	f3bf 8f6f 	isb	sy
}
 8006f42:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8006f44:	bf00      	nop
 8006f46:	370c      	adds	r7, #12
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr
 8006f50:	e000e100 	.word	0xe000e100

08006f54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b083      	sub	sp, #12
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	6039      	str	r1, [r7, #0]
 8006f5e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006f60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	db0a      	blt.n	8006f7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	b2da      	uxtb	r2, r3
 8006f6c:	490c      	ldr	r1, [pc, #48]	; (8006fa0 <__NVIC_SetPriority+0x4c>)
 8006f6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006f72:	0112      	lsls	r2, r2, #4
 8006f74:	b2d2      	uxtb	r2, r2
 8006f76:	440b      	add	r3, r1
 8006f78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006f7c:	e00a      	b.n	8006f94 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	b2da      	uxtb	r2, r3
 8006f82:	4908      	ldr	r1, [pc, #32]	; (8006fa4 <__NVIC_SetPriority+0x50>)
 8006f84:	88fb      	ldrh	r3, [r7, #6]
 8006f86:	f003 030f 	and.w	r3, r3, #15
 8006f8a:	3b04      	subs	r3, #4
 8006f8c:	0112      	lsls	r2, r2, #4
 8006f8e:	b2d2      	uxtb	r2, r2
 8006f90:	440b      	add	r3, r1
 8006f92:	761a      	strb	r2, [r3, #24]
}
 8006f94:	bf00      	nop
 8006f96:	370c      	adds	r7, #12
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9e:	4770      	bx	lr
 8006fa0:	e000e100 	.word	0xe000e100
 8006fa4:	e000ed00 	.word	0xe000ed00

08006fa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b089      	sub	sp, #36	; 0x24
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	60f8      	str	r0, [r7, #12]
 8006fb0:	60b9      	str	r1, [r7, #8]
 8006fb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f003 0307 	and.w	r3, r3, #7
 8006fba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006fbc:	69fb      	ldr	r3, [r7, #28]
 8006fbe:	f1c3 0307 	rsb	r3, r3, #7
 8006fc2:	2b04      	cmp	r3, #4
 8006fc4:	bf28      	it	cs
 8006fc6:	2304      	movcs	r3, #4
 8006fc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006fca:	69fb      	ldr	r3, [r7, #28]
 8006fcc:	3304      	adds	r3, #4
 8006fce:	2b06      	cmp	r3, #6
 8006fd0:	d902      	bls.n	8006fd8 <NVIC_EncodePriority+0x30>
 8006fd2:	69fb      	ldr	r3, [r7, #28]
 8006fd4:	3b03      	subs	r3, #3
 8006fd6:	e000      	b.n	8006fda <NVIC_EncodePriority+0x32>
 8006fd8:	2300      	movs	r3, #0
 8006fda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8006fe0:	69bb      	ldr	r3, [r7, #24]
 8006fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8006fe6:	43da      	mvns	r2, r3
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	401a      	ands	r2, r3
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006ff0:	f04f 31ff 	mov.w	r1, #4294967295
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8006ffa:	43d9      	mvns	r1, r3
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007000:	4313      	orrs	r3, r2
         );
}
 8007002:	4618      	mov	r0, r3
 8007004:	3724      	adds	r7, #36	; 0x24
 8007006:	46bd      	mov	sp, r7
 8007008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700c:	4770      	bx	lr
	...

08007010 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b082      	sub	sp, #8
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	3b01      	subs	r3, #1
 800701c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007020:	d301      	bcc.n	8007026 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007022:	2301      	movs	r3, #1
 8007024:	e00f      	b.n	8007046 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007026:	4a0a      	ldr	r2, [pc, #40]	; (8007050 <SysTick_Config+0x40>)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	3b01      	subs	r3, #1
 800702c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800702e:	210f      	movs	r1, #15
 8007030:	f04f 30ff 	mov.w	r0, #4294967295
 8007034:	f7ff ff8e 	bl	8006f54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007038:	4b05      	ldr	r3, [pc, #20]	; (8007050 <SysTick_Config+0x40>)
 800703a:	2200      	movs	r2, #0
 800703c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800703e:	4b04      	ldr	r3, [pc, #16]	; (8007050 <SysTick_Config+0x40>)
 8007040:	2207      	movs	r2, #7
 8007042:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007044:	2300      	movs	r3, #0
}
 8007046:	4618      	mov	r0, r3
 8007048:	3708      	adds	r7, #8
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}
 800704e:	bf00      	nop
 8007050:	e000e010 	.word	0xe000e010

08007054 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b082      	sub	sp, #8
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f7ff ff05 	bl	8006e6c <__NVIC_SetPriorityGrouping>
}
 8007062:	bf00      	nop
 8007064:	3708      	adds	r7, #8
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}

0800706a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800706a:	b580      	push	{r7, lr}
 800706c:	b086      	sub	sp, #24
 800706e:	af00      	add	r7, sp, #0
 8007070:	4603      	mov	r3, r0
 8007072:	60b9      	str	r1, [r7, #8]
 8007074:	607a      	str	r2, [r7, #4]
 8007076:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007078:	f7ff ff1c 	bl	8006eb4 <__NVIC_GetPriorityGrouping>
 800707c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800707e:	687a      	ldr	r2, [r7, #4]
 8007080:	68b9      	ldr	r1, [r7, #8]
 8007082:	6978      	ldr	r0, [r7, #20]
 8007084:	f7ff ff90 	bl	8006fa8 <NVIC_EncodePriority>
 8007088:	4602      	mov	r2, r0
 800708a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800708e:	4611      	mov	r1, r2
 8007090:	4618      	mov	r0, r3
 8007092:	f7ff ff5f 	bl	8006f54 <__NVIC_SetPriority>
}
 8007096:	bf00      	nop
 8007098:	3718      	adds	r7, #24
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}

0800709e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800709e:	b580      	push	{r7, lr}
 80070a0:	b082      	sub	sp, #8
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	4603      	mov	r3, r0
 80070a6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80070a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80070ac:	4618      	mov	r0, r3
 80070ae:	f7ff ff0f 	bl	8006ed0 <__NVIC_EnableIRQ>
}
 80070b2:	bf00      	nop
 80070b4:	3708      	adds	r7, #8
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}

080070ba <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80070ba:	b580      	push	{r7, lr}
 80070bc:	b082      	sub	sp, #8
 80070be:	af00      	add	r7, sp, #0
 80070c0:	4603      	mov	r3, r0
 80070c2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80070c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80070c8:	4618      	mov	r0, r3
 80070ca:	f7ff ff1f 	bl	8006f0c <__NVIC_DisableIRQ>
}
 80070ce:	bf00      	nop
 80070d0:	3708      	adds	r7, #8
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}

080070d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80070d6:	b580      	push	{r7, lr}
 80070d8:	b082      	sub	sp, #8
 80070da:	af00      	add	r7, sp, #0
 80070dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f7ff ff96 	bl	8007010 <SysTick_Config>
 80070e4:	4603      	mov	r3, r0
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3708      	adds	r7, #8
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}
	...

080070f0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b086      	sub	sp, #24
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80070f8:	f7ff feac 	bl	8006e54 <HAL_GetTick>
 80070fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d101      	bne.n	8007108 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8007104:	2301      	movs	r3, #1
 8007106:	e314      	b.n	8007732 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a66      	ldr	r2, [pc, #408]	; (80072a8 <HAL_DMA_Init+0x1b8>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d04a      	beq.n	80071a8 <HAL_DMA_Init+0xb8>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a65      	ldr	r2, [pc, #404]	; (80072ac <HAL_DMA_Init+0x1bc>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d045      	beq.n	80071a8 <HAL_DMA_Init+0xb8>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a63      	ldr	r2, [pc, #396]	; (80072b0 <HAL_DMA_Init+0x1c0>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d040      	beq.n	80071a8 <HAL_DMA_Init+0xb8>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a62      	ldr	r2, [pc, #392]	; (80072b4 <HAL_DMA_Init+0x1c4>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d03b      	beq.n	80071a8 <HAL_DMA_Init+0xb8>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a60      	ldr	r2, [pc, #384]	; (80072b8 <HAL_DMA_Init+0x1c8>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d036      	beq.n	80071a8 <HAL_DMA_Init+0xb8>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a5f      	ldr	r2, [pc, #380]	; (80072bc <HAL_DMA_Init+0x1cc>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d031      	beq.n	80071a8 <HAL_DMA_Init+0xb8>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a5d      	ldr	r2, [pc, #372]	; (80072c0 <HAL_DMA_Init+0x1d0>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d02c      	beq.n	80071a8 <HAL_DMA_Init+0xb8>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a5c      	ldr	r2, [pc, #368]	; (80072c4 <HAL_DMA_Init+0x1d4>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d027      	beq.n	80071a8 <HAL_DMA_Init+0xb8>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a5a      	ldr	r2, [pc, #360]	; (80072c8 <HAL_DMA_Init+0x1d8>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d022      	beq.n	80071a8 <HAL_DMA_Init+0xb8>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a59      	ldr	r2, [pc, #356]	; (80072cc <HAL_DMA_Init+0x1dc>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d01d      	beq.n	80071a8 <HAL_DMA_Init+0xb8>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a57      	ldr	r2, [pc, #348]	; (80072d0 <HAL_DMA_Init+0x1e0>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d018      	beq.n	80071a8 <HAL_DMA_Init+0xb8>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a56      	ldr	r2, [pc, #344]	; (80072d4 <HAL_DMA_Init+0x1e4>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d013      	beq.n	80071a8 <HAL_DMA_Init+0xb8>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a54      	ldr	r2, [pc, #336]	; (80072d8 <HAL_DMA_Init+0x1e8>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d00e      	beq.n	80071a8 <HAL_DMA_Init+0xb8>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a53      	ldr	r2, [pc, #332]	; (80072dc <HAL_DMA_Init+0x1ec>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d009      	beq.n	80071a8 <HAL_DMA_Init+0xb8>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a51      	ldr	r2, [pc, #324]	; (80072e0 <HAL_DMA_Init+0x1f0>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d004      	beq.n	80071a8 <HAL_DMA_Init+0xb8>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a50      	ldr	r2, [pc, #320]	; (80072e4 <HAL_DMA_Init+0x1f4>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d101      	bne.n	80071ac <HAL_DMA_Init+0xbc>
 80071a8:	2301      	movs	r3, #1
 80071aa:	e000      	b.n	80071ae <HAL_DMA_Init+0xbe>
 80071ac:	2300      	movs	r3, #0
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	f000 813c 	beq.w	800742c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2202      	movs	r2, #2
 80071b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2200      	movs	r2, #0
 80071c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a37      	ldr	r2, [pc, #220]	; (80072a8 <HAL_DMA_Init+0x1b8>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d04a      	beq.n	8007264 <HAL_DMA_Init+0x174>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a36      	ldr	r2, [pc, #216]	; (80072ac <HAL_DMA_Init+0x1bc>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d045      	beq.n	8007264 <HAL_DMA_Init+0x174>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a34      	ldr	r2, [pc, #208]	; (80072b0 <HAL_DMA_Init+0x1c0>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d040      	beq.n	8007264 <HAL_DMA_Init+0x174>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a33      	ldr	r2, [pc, #204]	; (80072b4 <HAL_DMA_Init+0x1c4>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d03b      	beq.n	8007264 <HAL_DMA_Init+0x174>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a31      	ldr	r2, [pc, #196]	; (80072b8 <HAL_DMA_Init+0x1c8>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d036      	beq.n	8007264 <HAL_DMA_Init+0x174>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a30      	ldr	r2, [pc, #192]	; (80072bc <HAL_DMA_Init+0x1cc>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d031      	beq.n	8007264 <HAL_DMA_Init+0x174>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a2e      	ldr	r2, [pc, #184]	; (80072c0 <HAL_DMA_Init+0x1d0>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d02c      	beq.n	8007264 <HAL_DMA_Init+0x174>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a2d      	ldr	r2, [pc, #180]	; (80072c4 <HAL_DMA_Init+0x1d4>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d027      	beq.n	8007264 <HAL_DMA_Init+0x174>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a2b      	ldr	r2, [pc, #172]	; (80072c8 <HAL_DMA_Init+0x1d8>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d022      	beq.n	8007264 <HAL_DMA_Init+0x174>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a2a      	ldr	r2, [pc, #168]	; (80072cc <HAL_DMA_Init+0x1dc>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d01d      	beq.n	8007264 <HAL_DMA_Init+0x174>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a28      	ldr	r2, [pc, #160]	; (80072d0 <HAL_DMA_Init+0x1e0>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d018      	beq.n	8007264 <HAL_DMA_Init+0x174>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a27      	ldr	r2, [pc, #156]	; (80072d4 <HAL_DMA_Init+0x1e4>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d013      	beq.n	8007264 <HAL_DMA_Init+0x174>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a25      	ldr	r2, [pc, #148]	; (80072d8 <HAL_DMA_Init+0x1e8>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d00e      	beq.n	8007264 <HAL_DMA_Init+0x174>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a24      	ldr	r2, [pc, #144]	; (80072dc <HAL_DMA_Init+0x1ec>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d009      	beq.n	8007264 <HAL_DMA_Init+0x174>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a22      	ldr	r2, [pc, #136]	; (80072e0 <HAL_DMA_Init+0x1f0>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d004      	beq.n	8007264 <HAL_DMA_Init+0x174>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a21      	ldr	r2, [pc, #132]	; (80072e4 <HAL_DMA_Init+0x1f4>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d108      	bne.n	8007276 <HAL_DMA_Init+0x186>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	681a      	ldr	r2, [r3, #0]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f022 0201 	bic.w	r2, r2, #1
 8007272:	601a      	str	r2, [r3, #0]
 8007274:	e007      	b.n	8007286 <HAL_DMA_Init+0x196>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	681a      	ldr	r2, [r3, #0]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f022 0201 	bic.w	r2, r2, #1
 8007284:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007286:	e02f      	b.n	80072e8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007288:	f7ff fde4 	bl	8006e54 <HAL_GetTick>
 800728c:	4602      	mov	r2, r0
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	1ad3      	subs	r3, r2, r3
 8007292:	2b05      	cmp	r3, #5
 8007294:	d928      	bls.n	80072e8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2220      	movs	r2, #32
 800729a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2203      	movs	r2, #3
 80072a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80072a4:	2301      	movs	r3, #1
 80072a6:	e244      	b.n	8007732 <HAL_DMA_Init+0x642>
 80072a8:	40020010 	.word	0x40020010
 80072ac:	40020028 	.word	0x40020028
 80072b0:	40020040 	.word	0x40020040
 80072b4:	40020058 	.word	0x40020058
 80072b8:	40020070 	.word	0x40020070
 80072bc:	40020088 	.word	0x40020088
 80072c0:	400200a0 	.word	0x400200a0
 80072c4:	400200b8 	.word	0x400200b8
 80072c8:	40020410 	.word	0x40020410
 80072cc:	40020428 	.word	0x40020428
 80072d0:	40020440 	.word	0x40020440
 80072d4:	40020458 	.word	0x40020458
 80072d8:	40020470 	.word	0x40020470
 80072dc:	40020488 	.word	0x40020488
 80072e0:	400204a0 	.word	0x400204a0
 80072e4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f003 0301 	and.w	r3, r3, #1
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d1c8      	bne.n	8007288 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80072fe:	697a      	ldr	r2, [r7, #20]
 8007300:	4b84      	ldr	r3, [pc, #528]	; (8007514 <HAL_DMA_Init+0x424>)
 8007302:	4013      	ands	r3, r2
 8007304:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800730e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	691b      	ldr	r3, [r3, #16]
 8007314:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800731a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	699b      	ldr	r3, [r3, #24]
 8007320:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007326:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6a1b      	ldr	r3, [r3, #32]
 800732c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800732e:	697a      	ldr	r2, [r7, #20]
 8007330:	4313      	orrs	r3, r2
 8007332:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007338:	2b04      	cmp	r3, #4
 800733a:	d107      	bne.n	800734c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007344:	4313      	orrs	r3, r2
 8007346:	697a      	ldr	r2, [r7, #20]
 8007348:	4313      	orrs	r3, r2
 800734a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	2b28      	cmp	r3, #40	; 0x28
 8007352:	d903      	bls.n	800735c <HAL_DMA_Init+0x26c>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	685b      	ldr	r3, [r3, #4]
 8007358:	2b2e      	cmp	r3, #46	; 0x2e
 800735a:	d91f      	bls.n	800739c <HAL_DMA_Init+0x2ac>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	2b3e      	cmp	r3, #62	; 0x3e
 8007362:	d903      	bls.n	800736c <HAL_DMA_Init+0x27c>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	2b42      	cmp	r3, #66	; 0x42
 800736a:	d917      	bls.n	800739c <HAL_DMA_Init+0x2ac>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	2b46      	cmp	r3, #70	; 0x46
 8007372:	d903      	bls.n	800737c <HAL_DMA_Init+0x28c>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	2b48      	cmp	r3, #72	; 0x48
 800737a:	d90f      	bls.n	800739c <HAL_DMA_Init+0x2ac>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	2b4e      	cmp	r3, #78	; 0x4e
 8007382:	d903      	bls.n	800738c <HAL_DMA_Init+0x29c>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	2b52      	cmp	r3, #82	; 0x52
 800738a:	d907      	bls.n	800739c <HAL_DMA_Init+0x2ac>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	2b73      	cmp	r3, #115	; 0x73
 8007392:	d905      	bls.n	80073a0 <HAL_DMA_Init+0x2b0>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	2b77      	cmp	r3, #119	; 0x77
 800739a:	d801      	bhi.n	80073a0 <HAL_DMA_Init+0x2b0>
 800739c:	2301      	movs	r3, #1
 800739e:	e000      	b.n	80073a2 <HAL_DMA_Init+0x2b2>
 80073a0:	2300      	movs	r3, #0
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d003      	beq.n	80073ae <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80073ac:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	697a      	ldr	r2, [r7, #20]
 80073b4:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	695b      	ldr	r3, [r3, #20]
 80073bc:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	f023 0307 	bic.w	r3, r3, #7
 80073c4:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ca:	697a      	ldr	r2, [r7, #20]
 80073cc:	4313      	orrs	r3, r2
 80073ce:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d4:	2b04      	cmp	r3, #4
 80073d6:	d117      	bne.n	8007408 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073dc:	697a      	ldr	r2, [r7, #20]
 80073de:	4313      	orrs	r3, r2
 80073e0:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d00e      	beq.n	8007408 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f002 fce6 	bl	8009dbc <DMA_CheckFifoParam>
 80073f0:	4603      	mov	r3, r0
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d008      	beq.n	8007408 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2240      	movs	r2, #64	; 0x40
 80073fa:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2201      	movs	r2, #1
 8007400:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8007404:	2301      	movs	r3, #1
 8007406:	e194      	b.n	8007732 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	697a      	ldr	r2, [r7, #20]
 800740e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f002 fc21 	bl	8009c58 <DMA_CalcBaseAndBitshift>
 8007416:	4603      	mov	r3, r0
 8007418:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800741e:	f003 031f 	and.w	r3, r3, #31
 8007422:	223f      	movs	r2, #63	; 0x3f
 8007424:	409a      	lsls	r2, r3
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	609a      	str	r2, [r3, #8]
 800742a:	e0ca      	b.n	80075c2 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4a39      	ldr	r2, [pc, #228]	; (8007518 <HAL_DMA_Init+0x428>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d022      	beq.n	800747c <HAL_DMA_Init+0x38c>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4a38      	ldr	r2, [pc, #224]	; (800751c <HAL_DMA_Init+0x42c>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d01d      	beq.n	800747c <HAL_DMA_Init+0x38c>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4a36      	ldr	r2, [pc, #216]	; (8007520 <HAL_DMA_Init+0x430>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d018      	beq.n	800747c <HAL_DMA_Init+0x38c>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4a35      	ldr	r2, [pc, #212]	; (8007524 <HAL_DMA_Init+0x434>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d013      	beq.n	800747c <HAL_DMA_Init+0x38c>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4a33      	ldr	r2, [pc, #204]	; (8007528 <HAL_DMA_Init+0x438>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d00e      	beq.n	800747c <HAL_DMA_Init+0x38c>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a32      	ldr	r2, [pc, #200]	; (800752c <HAL_DMA_Init+0x43c>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d009      	beq.n	800747c <HAL_DMA_Init+0x38c>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a30      	ldr	r2, [pc, #192]	; (8007530 <HAL_DMA_Init+0x440>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d004      	beq.n	800747c <HAL_DMA_Init+0x38c>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a2f      	ldr	r2, [pc, #188]	; (8007534 <HAL_DMA_Init+0x444>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d101      	bne.n	8007480 <HAL_DMA_Init+0x390>
 800747c:	2301      	movs	r3, #1
 800747e:	e000      	b.n	8007482 <HAL_DMA_Init+0x392>
 8007480:	2300      	movs	r3, #0
 8007482:	2b00      	cmp	r3, #0
 8007484:	f000 8094 	beq.w	80075b0 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a22      	ldr	r2, [pc, #136]	; (8007518 <HAL_DMA_Init+0x428>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d021      	beq.n	80074d6 <HAL_DMA_Init+0x3e6>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a21      	ldr	r2, [pc, #132]	; (800751c <HAL_DMA_Init+0x42c>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d01c      	beq.n	80074d6 <HAL_DMA_Init+0x3e6>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4a1f      	ldr	r2, [pc, #124]	; (8007520 <HAL_DMA_Init+0x430>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d017      	beq.n	80074d6 <HAL_DMA_Init+0x3e6>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a1e      	ldr	r2, [pc, #120]	; (8007524 <HAL_DMA_Init+0x434>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d012      	beq.n	80074d6 <HAL_DMA_Init+0x3e6>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a1c      	ldr	r2, [pc, #112]	; (8007528 <HAL_DMA_Init+0x438>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d00d      	beq.n	80074d6 <HAL_DMA_Init+0x3e6>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4a1b      	ldr	r2, [pc, #108]	; (800752c <HAL_DMA_Init+0x43c>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d008      	beq.n	80074d6 <HAL_DMA_Init+0x3e6>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4a19      	ldr	r2, [pc, #100]	; (8007530 <HAL_DMA_Init+0x440>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d003      	beq.n	80074d6 <HAL_DMA_Init+0x3e6>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4a18      	ldr	r2, [pc, #96]	; (8007534 <HAL_DMA_Init+0x444>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2202      	movs	r2, #2
 80074dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2200      	movs	r2, #0
 80074e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80074f0:	697a      	ldr	r2, [r7, #20]
 80074f2:	4b11      	ldr	r3, [pc, #68]	; (8007538 <HAL_DMA_Init+0x448>)
 80074f4:	4013      	ands	r3, r2
 80074f6:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	689b      	ldr	r3, [r3, #8]
 80074fc:	2b40      	cmp	r3, #64	; 0x40
 80074fe:	d01d      	beq.n	800753c <HAL_DMA_Init+0x44c>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	689b      	ldr	r3, [r3, #8]
 8007504:	2b80      	cmp	r3, #128	; 0x80
 8007506:	d102      	bne.n	800750e <HAL_DMA_Init+0x41e>
 8007508:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800750c:	e017      	b.n	800753e <HAL_DMA_Init+0x44e>
 800750e:	2300      	movs	r3, #0
 8007510:	e015      	b.n	800753e <HAL_DMA_Init+0x44e>
 8007512:	bf00      	nop
 8007514:	fe10803f 	.word	0xfe10803f
 8007518:	58025408 	.word	0x58025408
 800751c:	5802541c 	.word	0x5802541c
 8007520:	58025430 	.word	0x58025430
 8007524:	58025444 	.word	0x58025444
 8007528:	58025458 	.word	0x58025458
 800752c:	5802546c 	.word	0x5802546c
 8007530:	58025480 	.word	0x58025480
 8007534:	58025494 	.word	0x58025494
 8007538:	fffe000f 	.word	0xfffe000f
 800753c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800753e:	687a      	ldr	r2, [r7, #4]
 8007540:	68d2      	ldr	r2, [r2, #12]
 8007542:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007544:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	691b      	ldr	r3, [r3, #16]
 800754a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800754c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	695b      	ldr	r3, [r3, #20]
 8007552:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007554:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	699b      	ldr	r3, [r3, #24]
 800755a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800755c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	69db      	ldr	r3, [r3, #28]
 8007562:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007564:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6a1b      	ldr	r3, [r3, #32]
 800756a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800756c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800756e:	697a      	ldr	r2, [r7, #20]
 8007570:	4313      	orrs	r3, r2
 8007572:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	697a      	ldr	r2, [r7, #20]
 800757a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	461a      	mov	r2, r3
 8007582:	4b6e      	ldr	r3, [pc, #440]	; (800773c <HAL_DMA_Init+0x64c>)
 8007584:	4413      	add	r3, r2
 8007586:	4a6e      	ldr	r2, [pc, #440]	; (8007740 <HAL_DMA_Init+0x650>)
 8007588:	fba2 2303 	umull	r2, r3, r2, r3
 800758c:	091b      	lsrs	r3, r3, #4
 800758e:	009a      	lsls	r2, r3, #2
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f002 fb5f 	bl	8009c58 <DMA_CalcBaseAndBitshift>
 800759a:	4603      	mov	r3, r0
 800759c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075a2:	f003 031f 	and.w	r3, r3, #31
 80075a6:	2201      	movs	r2, #1
 80075a8:	409a      	lsls	r2, r3
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	605a      	str	r2, [r3, #4]
 80075ae:	e008      	b.n	80075c2 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2240      	movs	r2, #64	; 0x40
 80075b4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2203      	movs	r2, #3
 80075ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80075be:	2301      	movs	r3, #1
 80075c0:	e0b7      	b.n	8007732 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a5f      	ldr	r2, [pc, #380]	; (8007744 <HAL_DMA_Init+0x654>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d072      	beq.n	80076b2 <HAL_DMA_Init+0x5c2>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a5d      	ldr	r2, [pc, #372]	; (8007748 <HAL_DMA_Init+0x658>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d06d      	beq.n	80076b2 <HAL_DMA_Init+0x5c2>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a5c      	ldr	r2, [pc, #368]	; (800774c <HAL_DMA_Init+0x65c>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d068      	beq.n	80076b2 <HAL_DMA_Init+0x5c2>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a5a      	ldr	r2, [pc, #360]	; (8007750 <HAL_DMA_Init+0x660>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d063      	beq.n	80076b2 <HAL_DMA_Init+0x5c2>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a59      	ldr	r2, [pc, #356]	; (8007754 <HAL_DMA_Init+0x664>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d05e      	beq.n	80076b2 <HAL_DMA_Init+0x5c2>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a57      	ldr	r2, [pc, #348]	; (8007758 <HAL_DMA_Init+0x668>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d059      	beq.n	80076b2 <HAL_DMA_Init+0x5c2>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a56      	ldr	r2, [pc, #344]	; (800775c <HAL_DMA_Init+0x66c>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d054      	beq.n	80076b2 <HAL_DMA_Init+0x5c2>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a54      	ldr	r2, [pc, #336]	; (8007760 <HAL_DMA_Init+0x670>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d04f      	beq.n	80076b2 <HAL_DMA_Init+0x5c2>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a53      	ldr	r2, [pc, #332]	; (8007764 <HAL_DMA_Init+0x674>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d04a      	beq.n	80076b2 <HAL_DMA_Init+0x5c2>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a51      	ldr	r2, [pc, #324]	; (8007768 <HAL_DMA_Init+0x678>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d045      	beq.n	80076b2 <HAL_DMA_Init+0x5c2>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4a50      	ldr	r2, [pc, #320]	; (800776c <HAL_DMA_Init+0x67c>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d040      	beq.n	80076b2 <HAL_DMA_Init+0x5c2>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a4e      	ldr	r2, [pc, #312]	; (8007770 <HAL_DMA_Init+0x680>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d03b      	beq.n	80076b2 <HAL_DMA_Init+0x5c2>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a4d      	ldr	r2, [pc, #308]	; (8007774 <HAL_DMA_Init+0x684>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d036      	beq.n	80076b2 <HAL_DMA_Init+0x5c2>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a4b      	ldr	r2, [pc, #300]	; (8007778 <HAL_DMA_Init+0x688>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d031      	beq.n	80076b2 <HAL_DMA_Init+0x5c2>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a4a      	ldr	r2, [pc, #296]	; (800777c <HAL_DMA_Init+0x68c>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d02c      	beq.n	80076b2 <HAL_DMA_Init+0x5c2>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a48      	ldr	r2, [pc, #288]	; (8007780 <HAL_DMA_Init+0x690>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d027      	beq.n	80076b2 <HAL_DMA_Init+0x5c2>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a47      	ldr	r2, [pc, #284]	; (8007784 <HAL_DMA_Init+0x694>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d022      	beq.n	80076b2 <HAL_DMA_Init+0x5c2>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a45      	ldr	r2, [pc, #276]	; (8007788 <HAL_DMA_Init+0x698>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d01d      	beq.n	80076b2 <HAL_DMA_Init+0x5c2>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a44      	ldr	r2, [pc, #272]	; (800778c <HAL_DMA_Init+0x69c>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d018      	beq.n	80076b2 <HAL_DMA_Init+0x5c2>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a42      	ldr	r2, [pc, #264]	; (8007790 <HAL_DMA_Init+0x6a0>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d013      	beq.n	80076b2 <HAL_DMA_Init+0x5c2>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a41      	ldr	r2, [pc, #260]	; (8007794 <HAL_DMA_Init+0x6a4>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d00e      	beq.n	80076b2 <HAL_DMA_Init+0x5c2>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a3f      	ldr	r2, [pc, #252]	; (8007798 <HAL_DMA_Init+0x6a8>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d009      	beq.n	80076b2 <HAL_DMA_Init+0x5c2>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a3e      	ldr	r2, [pc, #248]	; (800779c <HAL_DMA_Init+0x6ac>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d004      	beq.n	80076b2 <HAL_DMA_Init+0x5c2>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a3c      	ldr	r2, [pc, #240]	; (80077a0 <HAL_DMA_Init+0x6b0>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d101      	bne.n	80076b6 <HAL_DMA_Init+0x5c6>
 80076b2:	2301      	movs	r3, #1
 80076b4:	e000      	b.n	80076b8 <HAL_DMA_Init+0x5c8>
 80076b6:	2300      	movs	r3, #0
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d032      	beq.n	8007722 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f002 fbf9 	bl	8009eb4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	689b      	ldr	r3, [r3, #8]
 80076c6:	2b80      	cmp	r3, #128	; 0x80
 80076c8:	d102      	bne.n	80076d0 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2200      	movs	r2, #0
 80076ce:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	685a      	ldr	r2, [r3, #4]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076d8:	b2d2      	uxtb	r2, r2
 80076da:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076e0:	687a      	ldr	r2, [r7, #4]
 80076e2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80076e4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d010      	beq.n	8007710 <HAL_DMA_Init+0x620>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	685b      	ldr	r3, [r3, #4]
 80076f2:	2b08      	cmp	r3, #8
 80076f4:	d80c      	bhi.n	8007710 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f002 fc76 	bl	8009fe8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007700:	2200      	movs	r2, #0
 8007702:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007708:	687a      	ldr	r2, [r7, #4]
 800770a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800770c:	605a      	str	r2, [r3, #4]
 800770e:	e008      	b.n	8007722 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2200      	movs	r2, #0
 8007714:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2200      	movs	r2, #0
 800771a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2200      	movs	r2, #0
 8007720:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2200      	movs	r2, #0
 8007726:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2201      	movs	r2, #1
 800772c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007730:	2300      	movs	r3, #0
}
 8007732:	4618      	mov	r0, r3
 8007734:	3718      	adds	r7, #24
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}
 800773a:	bf00      	nop
 800773c:	a7fdabf8 	.word	0xa7fdabf8
 8007740:	cccccccd 	.word	0xcccccccd
 8007744:	40020010 	.word	0x40020010
 8007748:	40020028 	.word	0x40020028
 800774c:	40020040 	.word	0x40020040
 8007750:	40020058 	.word	0x40020058
 8007754:	40020070 	.word	0x40020070
 8007758:	40020088 	.word	0x40020088
 800775c:	400200a0 	.word	0x400200a0
 8007760:	400200b8 	.word	0x400200b8
 8007764:	40020410 	.word	0x40020410
 8007768:	40020428 	.word	0x40020428
 800776c:	40020440 	.word	0x40020440
 8007770:	40020458 	.word	0x40020458
 8007774:	40020470 	.word	0x40020470
 8007778:	40020488 	.word	0x40020488
 800777c:	400204a0 	.word	0x400204a0
 8007780:	400204b8 	.word	0x400204b8
 8007784:	58025408 	.word	0x58025408
 8007788:	5802541c 	.word	0x5802541c
 800778c:	58025430 	.word	0x58025430
 8007790:	58025444 	.word	0x58025444
 8007794:	58025458 	.word	0x58025458
 8007798:	5802546c 	.word	0x5802546c
 800779c:	58025480 	.word	0x58025480
 80077a0:	58025494 	.word	0x58025494

080077a4 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b084      	sub	sp, #16
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d101      	bne.n	80077b6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80077b2:	2301      	movs	r3, #1
 80077b4:	e1a8      	b.n	8007b08 <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a82      	ldr	r2, [pc, #520]	; (80079c4 <HAL_DMA_DeInit+0x220>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d04a      	beq.n	8007856 <HAL_DMA_DeInit+0xb2>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a80      	ldr	r2, [pc, #512]	; (80079c8 <HAL_DMA_DeInit+0x224>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d045      	beq.n	8007856 <HAL_DMA_DeInit+0xb2>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a7f      	ldr	r2, [pc, #508]	; (80079cc <HAL_DMA_DeInit+0x228>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d040      	beq.n	8007856 <HAL_DMA_DeInit+0xb2>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a7d      	ldr	r2, [pc, #500]	; (80079d0 <HAL_DMA_DeInit+0x22c>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d03b      	beq.n	8007856 <HAL_DMA_DeInit+0xb2>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4a7c      	ldr	r2, [pc, #496]	; (80079d4 <HAL_DMA_DeInit+0x230>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d036      	beq.n	8007856 <HAL_DMA_DeInit+0xb2>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4a7a      	ldr	r2, [pc, #488]	; (80079d8 <HAL_DMA_DeInit+0x234>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d031      	beq.n	8007856 <HAL_DMA_DeInit+0xb2>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4a79      	ldr	r2, [pc, #484]	; (80079dc <HAL_DMA_DeInit+0x238>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d02c      	beq.n	8007856 <HAL_DMA_DeInit+0xb2>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4a77      	ldr	r2, [pc, #476]	; (80079e0 <HAL_DMA_DeInit+0x23c>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d027      	beq.n	8007856 <HAL_DMA_DeInit+0xb2>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4a76      	ldr	r2, [pc, #472]	; (80079e4 <HAL_DMA_DeInit+0x240>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d022      	beq.n	8007856 <HAL_DMA_DeInit+0xb2>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	4a74      	ldr	r2, [pc, #464]	; (80079e8 <HAL_DMA_DeInit+0x244>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d01d      	beq.n	8007856 <HAL_DMA_DeInit+0xb2>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a73      	ldr	r2, [pc, #460]	; (80079ec <HAL_DMA_DeInit+0x248>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d018      	beq.n	8007856 <HAL_DMA_DeInit+0xb2>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4a71      	ldr	r2, [pc, #452]	; (80079f0 <HAL_DMA_DeInit+0x24c>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d013      	beq.n	8007856 <HAL_DMA_DeInit+0xb2>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4a70      	ldr	r2, [pc, #448]	; (80079f4 <HAL_DMA_DeInit+0x250>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d00e      	beq.n	8007856 <HAL_DMA_DeInit+0xb2>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a6e      	ldr	r2, [pc, #440]	; (80079f8 <HAL_DMA_DeInit+0x254>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d009      	beq.n	8007856 <HAL_DMA_DeInit+0xb2>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a6d      	ldr	r2, [pc, #436]	; (80079fc <HAL_DMA_DeInit+0x258>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d004      	beq.n	8007856 <HAL_DMA_DeInit+0xb2>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a6b      	ldr	r2, [pc, #428]	; (8007a00 <HAL_DMA_DeInit+0x25c>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d108      	bne.n	8007868 <HAL_DMA_DeInit+0xc4>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	681a      	ldr	r2, [r3, #0]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f022 0201 	bic.w	r2, r2, #1
 8007864:	601a      	str	r2, [r3, #0]
 8007866:	e007      	b.n	8007878 <HAL_DMA_DeInit+0xd4>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	681a      	ldr	r2, [r3, #0]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f022 0201 	bic.w	r2, r2, #1
 8007876:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a51      	ldr	r2, [pc, #324]	; (80079c4 <HAL_DMA_DeInit+0x220>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d04a      	beq.n	8007918 <HAL_DMA_DeInit+0x174>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a50      	ldr	r2, [pc, #320]	; (80079c8 <HAL_DMA_DeInit+0x224>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d045      	beq.n	8007918 <HAL_DMA_DeInit+0x174>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a4e      	ldr	r2, [pc, #312]	; (80079cc <HAL_DMA_DeInit+0x228>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d040      	beq.n	8007918 <HAL_DMA_DeInit+0x174>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a4d      	ldr	r2, [pc, #308]	; (80079d0 <HAL_DMA_DeInit+0x22c>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d03b      	beq.n	8007918 <HAL_DMA_DeInit+0x174>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4a4b      	ldr	r2, [pc, #300]	; (80079d4 <HAL_DMA_DeInit+0x230>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d036      	beq.n	8007918 <HAL_DMA_DeInit+0x174>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a4a      	ldr	r2, [pc, #296]	; (80079d8 <HAL_DMA_DeInit+0x234>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d031      	beq.n	8007918 <HAL_DMA_DeInit+0x174>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a48      	ldr	r2, [pc, #288]	; (80079dc <HAL_DMA_DeInit+0x238>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d02c      	beq.n	8007918 <HAL_DMA_DeInit+0x174>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a47      	ldr	r2, [pc, #284]	; (80079e0 <HAL_DMA_DeInit+0x23c>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d027      	beq.n	8007918 <HAL_DMA_DeInit+0x174>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a45      	ldr	r2, [pc, #276]	; (80079e4 <HAL_DMA_DeInit+0x240>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d022      	beq.n	8007918 <HAL_DMA_DeInit+0x174>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a44      	ldr	r2, [pc, #272]	; (80079e8 <HAL_DMA_DeInit+0x244>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d01d      	beq.n	8007918 <HAL_DMA_DeInit+0x174>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a42      	ldr	r2, [pc, #264]	; (80079ec <HAL_DMA_DeInit+0x248>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d018      	beq.n	8007918 <HAL_DMA_DeInit+0x174>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a41      	ldr	r2, [pc, #260]	; (80079f0 <HAL_DMA_DeInit+0x24c>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d013      	beq.n	8007918 <HAL_DMA_DeInit+0x174>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a3f      	ldr	r2, [pc, #252]	; (80079f4 <HAL_DMA_DeInit+0x250>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d00e      	beq.n	8007918 <HAL_DMA_DeInit+0x174>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a3e      	ldr	r2, [pc, #248]	; (80079f8 <HAL_DMA_DeInit+0x254>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d009      	beq.n	8007918 <HAL_DMA_DeInit+0x174>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a3c      	ldr	r2, [pc, #240]	; (80079fc <HAL_DMA_DeInit+0x258>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d004      	beq.n	8007918 <HAL_DMA_DeInit+0x174>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4a3b      	ldr	r2, [pc, #236]	; (8007a00 <HAL_DMA_DeInit+0x25c>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d101      	bne.n	800791c <HAL_DMA_DeInit+0x178>
 8007918:	2301      	movs	r3, #1
 800791a:	e000      	b.n	800791e <HAL_DMA_DeInit+0x17a>
 800791c:	2300      	movs	r3, #0
 800791e:	2b00      	cmp	r3, #0
 8007920:	d025      	beq.n	800796e <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	2200      	movs	r2, #0
 8007928:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	2200      	movs	r2, #0
 8007930:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	2200      	movs	r2, #0
 8007938:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	2200      	movs	r2, #0
 8007940:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	2200      	movs	r2, #0
 8007948:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	2221      	movs	r2, #33	; 0x21
 8007950:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f002 f980 	bl	8009c58 <DMA_CalcBaseAndBitshift>
 8007958:	4603      	mov	r3, r0
 800795a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007960:	f003 031f 	and.w	r3, r3, #31
 8007964:	223f      	movs	r2, #63	; 0x3f
 8007966:	409a      	lsls	r2, r3
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	609a      	str	r2, [r3, #8]
 800796c:	e081      	b.n	8007a72 <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4a24      	ldr	r2, [pc, #144]	; (8007a04 <HAL_DMA_DeInit+0x260>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d022      	beq.n	80079be <HAL_DMA_DeInit+0x21a>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a22      	ldr	r2, [pc, #136]	; (8007a08 <HAL_DMA_DeInit+0x264>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d01d      	beq.n	80079be <HAL_DMA_DeInit+0x21a>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a21      	ldr	r2, [pc, #132]	; (8007a0c <HAL_DMA_DeInit+0x268>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d018      	beq.n	80079be <HAL_DMA_DeInit+0x21a>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a1f      	ldr	r2, [pc, #124]	; (8007a10 <HAL_DMA_DeInit+0x26c>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d013      	beq.n	80079be <HAL_DMA_DeInit+0x21a>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4a1e      	ldr	r2, [pc, #120]	; (8007a14 <HAL_DMA_DeInit+0x270>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d00e      	beq.n	80079be <HAL_DMA_DeInit+0x21a>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4a1c      	ldr	r2, [pc, #112]	; (8007a18 <HAL_DMA_DeInit+0x274>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d009      	beq.n	80079be <HAL_DMA_DeInit+0x21a>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4a1b      	ldr	r2, [pc, #108]	; (8007a1c <HAL_DMA_DeInit+0x278>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d004      	beq.n	80079be <HAL_DMA_DeInit+0x21a>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a19      	ldr	r2, [pc, #100]	; (8007a20 <HAL_DMA_DeInit+0x27c>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d132      	bne.n	8007a24 <HAL_DMA_DeInit+0x280>
 80079be:	2301      	movs	r3, #1
 80079c0:	e031      	b.n	8007a26 <HAL_DMA_DeInit+0x282>
 80079c2:	bf00      	nop
 80079c4:	40020010 	.word	0x40020010
 80079c8:	40020028 	.word	0x40020028
 80079cc:	40020040 	.word	0x40020040
 80079d0:	40020058 	.word	0x40020058
 80079d4:	40020070 	.word	0x40020070
 80079d8:	40020088 	.word	0x40020088
 80079dc:	400200a0 	.word	0x400200a0
 80079e0:	400200b8 	.word	0x400200b8
 80079e4:	40020410 	.word	0x40020410
 80079e8:	40020428 	.word	0x40020428
 80079ec:	40020440 	.word	0x40020440
 80079f0:	40020458 	.word	0x40020458
 80079f4:	40020470 	.word	0x40020470
 80079f8:	40020488 	.word	0x40020488
 80079fc:	400204a0 	.word	0x400204a0
 8007a00:	400204b8 	.word	0x400204b8
 8007a04:	58025408 	.word	0x58025408
 8007a08:	5802541c 	.word	0x5802541c
 8007a0c:	58025430 	.word	0x58025430
 8007a10:	58025444 	.word	0x58025444
 8007a14:	58025458 	.word	0x58025458
 8007a18:	5802546c 	.word	0x5802546c
 8007a1c:	58025480 	.word	0x58025480
 8007a20:	58025494 	.word	0x58025494
 8007a24:	2300      	movs	r3, #0
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d021      	beq.n	8007a6e <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	2200      	movs	r2, #0
 8007a38:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	2200      	movs	r2, #0
 8007a48:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f002 f900 	bl	8009c58 <DMA_CalcBaseAndBitshift>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a60:	f003 031f 	and.w	r3, r3, #31
 8007a64:	2201      	movs	r2, #1
 8007a66:	409a      	lsls	r2, r3
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	605a      	str	r2, [r3, #4]
 8007a6c:	e001      	b.n	8007a72 <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 8007a6e:	2301      	movs	r3, #1
 8007a70:	e04a      	b.n	8007b08 <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f002 fa1e 	bl	8009eb4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d008      	beq.n	8007a92 <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a84:	2200      	movs	r2, #0
 8007a86:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a8c:	687a      	ldr	r2, [r7, #4]
 8007a8e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007a90:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	685b      	ldr	r3, [r3, #4]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d00f      	beq.n	8007aba <HAL_DMA_DeInit+0x316>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	685b      	ldr	r3, [r3, #4]
 8007a9e:	2b08      	cmp	r3, #8
 8007aa0:	d80b      	bhi.n	8007aba <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f002 faa0 	bl	8009fe8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007aac:	2200      	movs	r2, #0
 8007aae:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ab4:	687a      	ldr	r2, [r7, #4]
 8007ab6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007ab8:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2200      	movs	r2, #0
 8007abe:	66da      	str	r2, [r3, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	671a      	str	r2, [r3, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	675a      	str	r2, [r3, #116]	; 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback     = NULL;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2200      	movs	r2, #0
 8007adc:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback      = NULL;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback      = NULL;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2200      	movs	r2, #0
 8007aee:	651a      	str	r2, [r3, #80]	; 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2200      	movs	r2, #0
 8007af4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2200      	movs	r2, #0
 8007afa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2200      	movs	r2, #0
 8007b02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007b06:	2300      	movs	r3, #0
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3710      	adds	r7, #16
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}

08007b10 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b086      	sub	sp, #24
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	60f8      	str	r0, [r7, #12]
 8007b18:	60b9      	str	r1, [r7, #8]
 8007b1a:	607a      	str	r2, [r7, #4]
 8007b1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d101      	bne.n	8007b2c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8007b28:	2301      	movs	r3, #1
 8007b2a:	e226      	b.n	8007f7a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007b32:	2b01      	cmp	r3, #1
 8007b34:	d101      	bne.n	8007b3a <HAL_DMA_Start_IT+0x2a>
 8007b36:	2302      	movs	r3, #2
 8007b38:	e21f      	b.n	8007f7a <HAL_DMA_Start_IT+0x46a>
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	2201      	movs	r2, #1
 8007b3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007b48:	b2db      	uxtb	r3, r3
 8007b4a:	2b01      	cmp	r3, #1
 8007b4c:	f040 820a 	bne.w	8007f64 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	2202      	movs	r2, #2
 8007b54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	4a68      	ldr	r2, [pc, #416]	; (8007d04 <HAL_DMA_Start_IT+0x1f4>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d04a      	beq.n	8007bfe <HAL_DMA_Start_IT+0xee>
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	4a66      	ldr	r2, [pc, #408]	; (8007d08 <HAL_DMA_Start_IT+0x1f8>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d045      	beq.n	8007bfe <HAL_DMA_Start_IT+0xee>
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4a65      	ldr	r2, [pc, #404]	; (8007d0c <HAL_DMA_Start_IT+0x1fc>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d040      	beq.n	8007bfe <HAL_DMA_Start_IT+0xee>
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4a63      	ldr	r2, [pc, #396]	; (8007d10 <HAL_DMA_Start_IT+0x200>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d03b      	beq.n	8007bfe <HAL_DMA_Start_IT+0xee>
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4a62      	ldr	r2, [pc, #392]	; (8007d14 <HAL_DMA_Start_IT+0x204>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d036      	beq.n	8007bfe <HAL_DMA_Start_IT+0xee>
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4a60      	ldr	r2, [pc, #384]	; (8007d18 <HAL_DMA_Start_IT+0x208>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d031      	beq.n	8007bfe <HAL_DMA_Start_IT+0xee>
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4a5f      	ldr	r2, [pc, #380]	; (8007d1c <HAL_DMA_Start_IT+0x20c>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d02c      	beq.n	8007bfe <HAL_DMA_Start_IT+0xee>
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a5d      	ldr	r2, [pc, #372]	; (8007d20 <HAL_DMA_Start_IT+0x210>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d027      	beq.n	8007bfe <HAL_DMA_Start_IT+0xee>
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4a5c      	ldr	r2, [pc, #368]	; (8007d24 <HAL_DMA_Start_IT+0x214>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d022      	beq.n	8007bfe <HAL_DMA_Start_IT+0xee>
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a5a      	ldr	r2, [pc, #360]	; (8007d28 <HAL_DMA_Start_IT+0x218>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d01d      	beq.n	8007bfe <HAL_DMA_Start_IT+0xee>
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	4a59      	ldr	r2, [pc, #356]	; (8007d2c <HAL_DMA_Start_IT+0x21c>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d018      	beq.n	8007bfe <HAL_DMA_Start_IT+0xee>
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4a57      	ldr	r2, [pc, #348]	; (8007d30 <HAL_DMA_Start_IT+0x220>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d013      	beq.n	8007bfe <HAL_DMA_Start_IT+0xee>
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4a56      	ldr	r2, [pc, #344]	; (8007d34 <HAL_DMA_Start_IT+0x224>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d00e      	beq.n	8007bfe <HAL_DMA_Start_IT+0xee>
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4a54      	ldr	r2, [pc, #336]	; (8007d38 <HAL_DMA_Start_IT+0x228>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d009      	beq.n	8007bfe <HAL_DMA_Start_IT+0xee>
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4a53      	ldr	r2, [pc, #332]	; (8007d3c <HAL_DMA_Start_IT+0x22c>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d004      	beq.n	8007bfe <HAL_DMA_Start_IT+0xee>
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4a51      	ldr	r2, [pc, #324]	; (8007d40 <HAL_DMA_Start_IT+0x230>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d108      	bne.n	8007c10 <HAL_DMA_Start_IT+0x100>
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	681a      	ldr	r2, [r3, #0]
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f022 0201 	bic.w	r2, r2, #1
 8007c0c:	601a      	str	r2, [r3, #0]
 8007c0e:	e007      	b.n	8007c20 <HAL_DMA_Start_IT+0x110>
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	681a      	ldr	r2, [r3, #0]
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f022 0201 	bic.w	r2, r2, #1
 8007c1e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	687a      	ldr	r2, [r7, #4]
 8007c24:	68b9      	ldr	r1, [r7, #8]
 8007c26:	68f8      	ldr	r0, [r7, #12]
 8007c28:	f001 fe6a 	bl	8009900 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a34      	ldr	r2, [pc, #208]	; (8007d04 <HAL_DMA_Start_IT+0x1f4>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d04a      	beq.n	8007ccc <HAL_DMA_Start_IT+0x1bc>
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4a33      	ldr	r2, [pc, #204]	; (8007d08 <HAL_DMA_Start_IT+0x1f8>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d045      	beq.n	8007ccc <HAL_DMA_Start_IT+0x1bc>
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4a31      	ldr	r2, [pc, #196]	; (8007d0c <HAL_DMA_Start_IT+0x1fc>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d040      	beq.n	8007ccc <HAL_DMA_Start_IT+0x1bc>
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4a30      	ldr	r2, [pc, #192]	; (8007d10 <HAL_DMA_Start_IT+0x200>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d03b      	beq.n	8007ccc <HAL_DMA_Start_IT+0x1bc>
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4a2e      	ldr	r2, [pc, #184]	; (8007d14 <HAL_DMA_Start_IT+0x204>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d036      	beq.n	8007ccc <HAL_DMA_Start_IT+0x1bc>
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4a2d      	ldr	r2, [pc, #180]	; (8007d18 <HAL_DMA_Start_IT+0x208>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d031      	beq.n	8007ccc <HAL_DMA_Start_IT+0x1bc>
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4a2b      	ldr	r2, [pc, #172]	; (8007d1c <HAL_DMA_Start_IT+0x20c>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d02c      	beq.n	8007ccc <HAL_DMA_Start_IT+0x1bc>
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a2a      	ldr	r2, [pc, #168]	; (8007d20 <HAL_DMA_Start_IT+0x210>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d027      	beq.n	8007ccc <HAL_DMA_Start_IT+0x1bc>
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4a28      	ldr	r2, [pc, #160]	; (8007d24 <HAL_DMA_Start_IT+0x214>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d022      	beq.n	8007ccc <HAL_DMA_Start_IT+0x1bc>
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4a27      	ldr	r2, [pc, #156]	; (8007d28 <HAL_DMA_Start_IT+0x218>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d01d      	beq.n	8007ccc <HAL_DMA_Start_IT+0x1bc>
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a25      	ldr	r2, [pc, #148]	; (8007d2c <HAL_DMA_Start_IT+0x21c>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d018      	beq.n	8007ccc <HAL_DMA_Start_IT+0x1bc>
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a24      	ldr	r2, [pc, #144]	; (8007d30 <HAL_DMA_Start_IT+0x220>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d013      	beq.n	8007ccc <HAL_DMA_Start_IT+0x1bc>
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a22      	ldr	r2, [pc, #136]	; (8007d34 <HAL_DMA_Start_IT+0x224>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d00e      	beq.n	8007ccc <HAL_DMA_Start_IT+0x1bc>
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a21      	ldr	r2, [pc, #132]	; (8007d38 <HAL_DMA_Start_IT+0x228>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d009      	beq.n	8007ccc <HAL_DMA_Start_IT+0x1bc>
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4a1f      	ldr	r2, [pc, #124]	; (8007d3c <HAL_DMA_Start_IT+0x22c>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d004      	beq.n	8007ccc <HAL_DMA_Start_IT+0x1bc>
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a1e      	ldr	r2, [pc, #120]	; (8007d40 <HAL_DMA_Start_IT+0x230>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d101      	bne.n	8007cd0 <HAL_DMA_Start_IT+0x1c0>
 8007ccc:	2301      	movs	r3, #1
 8007cce:	e000      	b.n	8007cd2 <HAL_DMA_Start_IT+0x1c2>
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d036      	beq.n	8007d44 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f023 021e 	bic.w	r2, r3, #30
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f042 0216 	orr.w	r2, r2, #22
 8007ce8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d03e      	beq.n	8007d70 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	681a      	ldr	r2, [r3, #0]
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f042 0208 	orr.w	r2, r2, #8
 8007d00:	601a      	str	r2, [r3, #0]
 8007d02:	e035      	b.n	8007d70 <HAL_DMA_Start_IT+0x260>
 8007d04:	40020010 	.word	0x40020010
 8007d08:	40020028 	.word	0x40020028
 8007d0c:	40020040 	.word	0x40020040
 8007d10:	40020058 	.word	0x40020058
 8007d14:	40020070 	.word	0x40020070
 8007d18:	40020088 	.word	0x40020088
 8007d1c:	400200a0 	.word	0x400200a0
 8007d20:	400200b8 	.word	0x400200b8
 8007d24:	40020410 	.word	0x40020410
 8007d28:	40020428 	.word	0x40020428
 8007d2c:	40020440 	.word	0x40020440
 8007d30:	40020458 	.word	0x40020458
 8007d34:	40020470 	.word	0x40020470
 8007d38:	40020488 	.word	0x40020488
 8007d3c:	400204a0 	.word	0x400204a0
 8007d40:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f023 020e 	bic.w	r2, r3, #14
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f042 020a 	orr.w	r2, r2, #10
 8007d56:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d007      	beq.n	8007d70 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	681a      	ldr	r2, [r3, #0]
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f042 0204 	orr.w	r2, r2, #4
 8007d6e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4a83      	ldr	r2, [pc, #524]	; (8007f84 <HAL_DMA_Start_IT+0x474>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d072      	beq.n	8007e60 <HAL_DMA_Start_IT+0x350>
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4a82      	ldr	r2, [pc, #520]	; (8007f88 <HAL_DMA_Start_IT+0x478>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d06d      	beq.n	8007e60 <HAL_DMA_Start_IT+0x350>
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4a80      	ldr	r2, [pc, #512]	; (8007f8c <HAL_DMA_Start_IT+0x47c>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d068      	beq.n	8007e60 <HAL_DMA_Start_IT+0x350>
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	4a7f      	ldr	r2, [pc, #508]	; (8007f90 <HAL_DMA_Start_IT+0x480>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d063      	beq.n	8007e60 <HAL_DMA_Start_IT+0x350>
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4a7d      	ldr	r2, [pc, #500]	; (8007f94 <HAL_DMA_Start_IT+0x484>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d05e      	beq.n	8007e60 <HAL_DMA_Start_IT+0x350>
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	4a7c      	ldr	r2, [pc, #496]	; (8007f98 <HAL_DMA_Start_IT+0x488>)
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d059      	beq.n	8007e60 <HAL_DMA_Start_IT+0x350>
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4a7a      	ldr	r2, [pc, #488]	; (8007f9c <HAL_DMA_Start_IT+0x48c>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d054      	beq.n	8007e60 <HAL_DMA_Start_IT+0x350>
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4a79      	ldr	r2, [pc, #484]	; (8007fa0 <HAL_DMA_Start_IT+0x490>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d04f      	beq.n	8007e60 <HAL_DMA_Start_IT+0x350>
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4a77      	ldr	r2, [pc, #476]	; (8007fa4 <HAL_DMA_Start_IT+0x494>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d04a      	beq.n	8007e60 <HAL_DMA_Start_IT+0x350>
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	4a76      	ldr	r2, [pc, #472]	; (8007fa8 <HAL_DMA_Start_IT+0x498>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d045      	beq.n	8007e60 <HAL_DMA_Start_IT+0x350>
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4a74      	ldr	r2, [pc, #464]	; (8007fac <HAL_DMA_Start_IT+0x49c>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d040      	beq.n	8007e60 <HAL_DMA_Start_IT+0x350>
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	4a73      	ldr	r2, [pc, #460]	; (8007fb0 <HAL_DMA_Start_IT+0x4a0>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d03b      	beq.n	8007e60 <HAL_DMA_Start_IT+0x350>
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4a71      	ldr	r2, [pc, #452]	; (8007fb4 <HAL_DMA_Start_IT+0x4a4>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d036      	beq.n	8007e60 <HAL_DMA_Start_IT+0x350>
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4a70      	ldr	r2, [pc, #448]	; (8007fb8 <HAL_DMA_Start_IT+0x4a8>)
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d031      	beq.n	8007e60 <HAL_DMA_Start_IT+0x350>
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4a6e      	ldr	r2, [pc, #440]	; (8007fbc <HAL_DMA_Start_IT+0x4ac>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d02c      	beq.n	8007e60 <HAL_DMA_Start_IT+0x350>
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4a6d      	ldr	r2, [pc, #436]	; (8007fc0 <HAL_DMA_Start_IT+0x4b0>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d027      	beq.n	8007e60 <HAL_DMA_Start_IT+0x350>
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a6b      	ldr	r2, [pc, #428]	; (8007fc4 <HAL_DMA_Start_IT+0x4b4>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d022      	beq.n	8007e60 <HAL_DMA_Start_IT+0x350>
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4a6a      	ldr	r2, [pc, #424]	; (8007fc8 <HAL_DMA_Start_IT+0x4b8>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d01d      	beq.n	8007e60 <HAL_DMA_Start_IT+0x350>
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a68      	ldr	r2, [pc, #416]	; (8007fcc <HAL_DMA_Start_IT+0x4bc>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d018      	beq.n	8007e60 <HAL_DMA_Start_IT+0x350>
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4a67      	ldr	r2, [pc, #412]	; (8007fd0 <HAL_DMA_Start_IT+0x4c0>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d013      	beq.n	8007e60 <HAL_DMA_Start_IT+0x350>
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4a65      	ldr	r2, [pc, #404]	; (8007fd4 <HAL_DMA_Start_IT+0x4c4>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d00e      	beq.n	8007e60 <HAL_DMA_Start_IT+0x350>
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4a64      	ldr	r2, [pc, #400]	; (8007fd8 <HAL_DMA_Start_IT+0x4c8>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d009      	beq.n	8007e60 <HAL_DMA_Start_IT+0x350>
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a62      	ldr	r2, [pc, #392]	; (8007fdc <HAL_DMA_Start_IT+0x4cc>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d004      	beq.n	8007e60 <HAL_DMA_Start_IT+0x350>
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4a61      	ldr	r2, [pc, #388]	; (8007fe0 <HAL_DMA_Start_IT+0x4d0>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d101      	bne.n	8007e64 <HAL_DMA_Start_IT+0x354>
 8007e60:	2301      	movs	r3, #1
 8007e62:	e000      	b.n	8007e66 <HAL_DMA_Start_IT+0x356>
 8007e64:	2300      	movs	r3, #0
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d01a      	beq.n	8007ea0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d007      	beq.n	8007e88 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e7c:	681a      	ldr	r2, [r3, #0]
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e86:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d007      	beq.n	8007ea0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e94:	681a      	ldr	r2, [r3, #0]
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e9e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a37      	ldr	r2, [pc, #220]	; (8007f84 <HAL_DMA_Start_IT+0x474>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d04a      	beq.n	8007f40 <HAL_DMA_Start_IT+0x430>
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4a36      	ldr	r2, [pc, #216]	; (8007f88 <HAL_DMA_Start_IT+0x478>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d045      	beq.n	8007f40 <HAL_DMA_Start_IT+0x430>
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4a34      	ldr	r2, [pc, #208]	; (8007f8c <HAL_DMA_Start_IT+0x47c>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d040      	beq.n	8007f40 <HAL_DMA_Start_IT+0x430>
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4a33      	ldr	r2, [pc, #204]	; (8007f90 <HAL_DMA_Start_IT+0x480>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d03b      	beq.n	8007f40 <HAL_DMA_Start_IT+0x430>
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4a31      	ldr	r2, [pc, #196]	; (8007f94 <HAL_DMA_Start_IT+0x484>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d036      	beq.n	8007f40 <HAL_DMA_Start_IT+0x430>
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4a30      	ldr	r2, [pc, #192]	; (8007f98 <HAL_DMA_Start_IT+0x488>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d031      	beq.n	8007f40 <HAL_DMA_Start_IT+0x430>
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4a2e      	ldr	r2, [pc, #184]	; (8007f9c <HAL_DMA_Start_IT+0x48c>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d02c      	beq.n	8007f40 <HAL_DMA_Start_IT+0x430>
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4a2d      	ldr	r2, [pc, #180]	; (8007fa0 <HAL_DMA_Start_IT+0x490>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d027      	beq.n	8007f40 <HAL_DMA_Start_IT+0x430>
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4a2b      	ldr	r2, [pc, #172]	; (8007fa4 <HAL_DMA_Start_IT+0x494>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d022      	beq.n	8007f40 <HAL_DMA_Start_IT+0x430>
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	4a2a      	ldr	r2, [pc, #168]	; (8007fa8 <HAL_DMA_Start_IT+0x498>)
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d01d      	beq.n	8007f40 <HAL_DMA_Start_IT+0x430>
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4a28      	ldr	r2, [pc, #160]	; (8007fac <HAL_DMA_Start_IT+0x49c>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d018      	beq.n	8007f40 <HAL_DMA_Start_IT+0x430>
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	4a27      	ldr	r2, [pc, #156]	; (8007fb0 <HAL_DMA_Start_IT+0x4a0>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d013      	beq.n	8007f40 <HAL_DMA_Start_IT+0x430>
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4a25      	ldr	r2, [pc, #148]	; (8007fb4 <HAL_DMA_Start_IT+0x4a4>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d00e      	beq.n	8007f40 <HAL_DMA_Start_IT+0x430>
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4a24      	ldr	r2, [pc, #144]	; (8007fb8 <HAL_DMA_Start_IT+0x4a8>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d009      	beq.n	8007f40 <HAL_DMA_Start_IT+0x430>
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4a22      	ldr	r2, [pc, #136]	; (8007fbc <HAL_DMA_Start_IT+0x4ac>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d004      	beq.n	8007f40 <HAL_DMA_Start_IT+0x430>
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4a21      	ldr	r2, [pc, #132]	; (8007fc0 <HAL_DMA_Start_IT+0x4b0>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d108      	bne.n	8007f52 <HAL_DMA_Start_IT+0x442>
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	681a      	ldr	r2, [r3, #0]
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f042 0201 	orr.w	r2, r2, #1
 8007f4e:	601a      	str	r2, [r3, #0]
 8007f50:	e012      	b.n	8007f78 <HAL_DMA_Start_IT+0x468>
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	681a      	ldr	r2, [r3, #0]
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f042 0201 	orr.w	r2, r2, #1
 8007f60:	601a      	str	r2, [r3, #0]
 8007f62:	e009      	b.n	8007f78 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007f6a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8007f74:	2301      	movs	r3, #1
 8007f76:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007f78:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3718      	adds	r7, #24
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}
 8007f82:	bf00      	nop
 8007f84:	40020010 	.word	0x40020010
 8007f88:	40020028 	.word	0x40020028
 8007f8c:	40020040 	.word	0x40020040
 8007f90:	40020058 	.word	0x40020058
 8007f94:	40020070 	.word	0x40020070
 8007f98:	40020088 	.word	0x40020088
 8007f9c:	400200a0 	.word	0x400200a0
 8007fa0:	400200b8 	.word	0x400200b8
 8007fa4:	40020410 	.word	0x40020410
 8007fa8:	40020428 	.word	0x40020428
 8007fac:	40020440 	.word	0x40020440
 8007fb0:	40020458 	.word	0x40020458
 8007fb4:	40020470 	.word	0x40020470
 8007fb8:	40020488 	.word	0x40020488
 8007fbc:	400204a0 	.word	0x400204a0
 8007fc0:	400204b8 	.word	0x400204b8
 8007fc4:	58025408 	.word	0x58025408
 8007fc8:	5802541c 	.word	0x5802541c
 8007fcc:	58025430 	.word	0x58025430
 8007fd0:	58025444 	.word	0x58025444
 8007fd4:	58025458 	.word	0x58025458
 8007fd8:	5802546c 	.word	0x5802546c
 8007fdc:	58025480 	.word	0x58025480
 8007fe0:	58025494 	.word	0x58025494

08007fe4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b086      	sub	sp, #24
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8007fec:	f7fe ff32 	bl	8006e54 <HAL_GetTick>
 8007ff0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d101      	bne.n	8007ffc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	e2dc      	b.n	80085b6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008002:	b2db      	uxtb	r3, r3
 8008004:	2b02      	cmp	r3, #2
 8008006:	d008      	beq.n	800801a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2280      	movs	r2, #128	; 0x80
 800800c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2200      	movs	r2, #0
 8008012:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8008016:	2301      	movs	r3, #1
 8008018:	e2cd      	b.n	80085b6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4a76      	ldr	r2, [pc, #472]	; (80081f8 <HAL_DMA_Abort+0x214>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d04a      	beq.n	80080ba <HAL_DMA_Abort+0xd6>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4a74      	ldr	r2, [pc, #464]	; (80081fc <HAL_DMA_Abort+0x218>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d045      	beq.n	80080ba <HAL_DMA_Abort+0xd6>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	4a73      	ldr	r2, [pc, #460]	; (8008200 <HAL_DMA_Abort+0x21c>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d040      	beq.n	80080ba <HAL_DMA_Abort+0xd6>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4a71      	ldr	r2, [pc, #452]	; (8008204 <HAL_DMA_Abort+0x220>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d03b      	beq.n	80080ba <HAL_DMA_Abort+0xd6>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4a70      	ldr	r2, [pc, #448]	; (8008208 <HAL_DMA_Abort+0x224>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d036      	beq.n	80080ba <HAL_DMA_Abort+0xd6>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4a6e      	ldr	r2, [pc, #440]	; (800820c <HAL_DMA_Abort+0x228>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d031      	beq.n	80080ba <HAL_DMA_Abort+0xd6>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4a6d      	ldr	r2, [pc, #436]	; (8008210 <HAL_DMA_Abort+0x22c>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d02c      	beq.n	80080ba <HAL_DMA_Abort+0xd6>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4a6b      	ldr	r2, [pc, #428]	; (8008214 <HAL_DMA_Abort+0x230>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d027      	beq.n	80080ba <HAL_DMA_Abort+0xd6>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	4a6a      	ldr	r2, [pc, #424]	; (8008218 <HAL_DMA_Abort+0x234>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d022      	beq.n	80080ba <HAL_DMA_Abort+0xd6>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4a68      	ldr	r2, [pc, #416]	; (800821c <HAL_DMA_Abort+0x238>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d01d      	beq.n	80080ba <HAL_DMA_Abort+0xd6>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4a67      	ldr	r2, [pc, #412]	; (8008220 <HAL_DMA_Abort+0x23c>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d018      	beq.n	80080ba <HAL_DMA_Abort+0xd6>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4a65      	ldr	r2, [pc, #404]	; (8008224 <HAL_DMA_Abort+0x240>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d013      	beq.n	80080ba <HAL_DMA_Abort+0xd6>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4a64      	ldr	r2, [pc, #400]	; (8008228 <HAL_DMA_Abort+0x244>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d00e      	beq.n	80080ba <HAL_DMA_Abort+0xd6>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a62      	ldr	r2, [pc, #392]	; (800822c <HAL_DMA_Abort+0x248>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d009      	beq.n	80080ba <HAL_DMA_Abort+0xd6>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	4a61      	ldr	r2, [pc, #388]	; (8008230 <HAL_DMA_Abort+0x24c>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d004      	beq.n	80080ba <HAL_DMA_Abort+0xd6>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4a5f      	ldr	r2, [pc, #380]	; (8008234 <HAL_DMA_Abort+0x250>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d101      	bne.n	80080be <HAL_DMA_Abort+0xda>
 80080ba:	2301      	movs	r3, #1
 80080bc:	e000      	b.n	80080c0 <HAL_DMA_Abort+0xdc>
 80080be:	2300      	movs	r3, #0
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d013      	beq.n	80080ec <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	681a      	ldr	r2, [r3, #0]
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f022 021e 	bic.w	r2, r2, #30
 80080d2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	695a      	ldr	r2, [r3, #20]
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80080e2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	617b      	str	r3, [r7, #20]
 80080ea:	e00a      	b.n	8008102 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	681a      	ldr	r2, [r3, #0]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f022 020e 	bic.w	r2, r2, #14
 80080fa:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4a3c      	ldr	r2, [pc, #240]	; (80081f8 <HAL_DMA_Abort+0x214>)
 8008108:	4293      	cmp	r3, r2
 800810a:	d072      	beq.n	80081f2 <HAL_DMA_Abort+0x20e>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4a3a      	ldr	r2, [pc, #232]	; (80081fc <HAL_DMA_Abort+0x218>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d06d      	beq.n	80081f2 <HAL_DMA_Abort+0x20e>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4a39      	ldr	r2, [pc, #228]	; (8008200 <HAL_DMA_Abort+0x21c>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d068      	beq.n	80081f2 <HAL_DMA_Abort+0x20e>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4a37      	ldr	r2, [pc, #220]	; (8008204 <HAL_DMA_Abort+0x220>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d063      	beq.n	80081f2 <HAL_DMA_Abort+0x20e>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	4a36      	ldr	r2, [pc, #216]	; (8008208 <HAL_DMA_Abort+0x224>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d05e      	beq.n	80081f2 <HAL_DMA_Abort+0x20e>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4a34      	ldr	r2, [pc, #208]	; (800820c <HAL_DMA_Abort+0x228>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d059      	beq.n	80081f2 <HAL_DMA_Abort+0x20e>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	4a33      	ldr	r2, [pc, #204]	; (8008210 <HAL_DMA_Abort+0x22c>)
 8008144:	4293      	cmp	r3, r2
 8008146:	d054      	beq.n	80081f2 <HAL_DMA_Abort+0x20e>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4a31      	ldr	r2, [pc, #196]	; (8008214 <HAL_DMA_Abort+0x230>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d04f      	beq.n	80081f2 <HAL_DMA_Abort+0x20e>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	4a30      	ldr	r2, [pc, #192]	; (8008218 <HAL_DMA_Abort+0x234>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d04a      	beq.n	80081f2 <HAL_DMA_Abort+0x20e>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	4a2e      	ldr	r2, [pc, #184]	; (800821c <HAL_DMA_Abort+0x238>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d045      	beq.n	80081f2 <HAL_DMA_Abort+0x20e>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	4a2d      	ldr	r2, [pc, #180]	; (8008220 <HAL_DMA_Abort+0x23c>)
 800816c:	4293      	cmp	r3, r2
 800816e:	d040      	beq.n	80081f2 <HAL_DMA_Abort+0x20e>
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4a2b      	ldr	r2, [pc, #172]	; (8008224 <HAL_DMA_Abort+0x240>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d03b      	beq.n	80081f2 <HAL_DMA_Abort+0x20e>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4a2a      	ldr	r2, [pc, #168]	; (8008228 <HAL_DMA_Abort+0x244>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d036      	beq.n	80081f2 <HAL_DMA_Abort+0x20e>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4a28      	ldr	r2, [pc, #160]	; (800822c <HAL_DMA_Abort+0x248>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d031      	beq.n	80081f2 <HAL_DMA_Abort+0x20e>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4a27      	ldr	r2, [pc, #156]	; (8008230 <HAL_DMA_Abort+0x24c>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d02c      	beq.n	80081f2 <HAL_DMA_Abort+0x20e>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a25      	ldr	r2, [pc, #148]	; (8008234 <HAL_DMA_Abort+0x250>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d027      	beq.n	80081f2 <HAL_DMA_Abort+0x20e>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	4a24      	ldr	r2, [pc, #144]	; (8008238 <HAL_DMA_Abort+0x254>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d022      	beq.n	80081f2 <HAL_DMA_Abort+0x20e>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4a22      	ldr	r2, [pc, #136]	; (800823c <HAL_DMA_Abort+0x258>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d01d      	beq.n	80081f2 <HAL_DMA_Abort+0x20e>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4a21      	ldr	r2, [pc, #132]	; (8008240 <HAL_DMA_Abort+0x25c>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d018      	beq.n	80081f2 <HAL_DMA_Abort+0x20e>
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4a1f      	ldr	r2, [pc, #124]	; (8008244 <HAL_DMA_Abort+0x260>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d013      	beq.n	80081f2 <HAL_DMA_Abort+0x20e>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	4a1e      	ldr	r2, [pc, #120]	; (8008248 <HAL_DMA_Abort+0x264>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d00e      	beq.n	80081f2 <HAL_DMA_Abort+0x20e>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	4a1c      	ldr	r2, [pc, #112]	; (800824c <HAL_DMA_Abort+0x268>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d009      	beq.n	80081f2 <HAL_DMA_Abort+0x20e>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4a1b      	ldr	r2, [pc, #108]	; (8008250 <HAL_DMA_Abort+0x26c>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d004      	beq.n	80081f2 <HAL_DMA_Abort+0x20e>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4a19      	ldr	r2, [pc, #100]	; (8008254 <HAL_DMA_Abort+0x270>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d132      	bne.n	8008258 <HAL_DMA_Abort+0x274>
 80081f2:	2301      	movs	r3, #1
 80081f4:	e031      	b.n	800825a <HAL_DMA_Abort+0x276>
 80081f6:	bf00      	nop
 80081f8:	40020010 	.word	0x40020010
 80081fc:	40020028 	.word	0x40020028
 8008200:	40020040 	.word	0x40020040
 8008204:	40020058 	.word	0x40020058
 8008208:	40020070 	.word	0x40020070
 800820c:	40020088 	.word	0x40020088
 8008210:	400200a0 	.word	0x400200a0
 8008214:	400200b8 	.word	0x400200b8
 8008218:	40020410 	.word	0x40020410
 800821c:	40020428 	.word	0x40020428
 8008220:	40020440 	.word	0x40020440
 8008224:	40020458 	.word	0x40020458
 8008228:	40020470 	.word	0x40020470
 800822c:	40020488 	.word	0x40020488
 8008230:	400204a0 	.word	0x400204a0
 8008234:	400204b8 	.word	0x400204b8
 8008238:	58025408 	.word	0x58025408
 800823c:	5802541c 	.word	0x5802541c
 8008240:	58025430 	.word	0x58025430
 8008244:	58025444 	.word	0x58025444
 8008248:	58025458 	.word	0x58025458
 800824c:	5802546c 	.word	0x5802546c
 8008250:	58025480 	.word	0x58025480
 8008254:	58025494 	.word	0x58025494
 8008258:	2300      	movs	r3, #0
 800825a:	2b00      	cmp	r3, #0
 800825c:	d007      	beq.n	800826e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008262:	681a      	ldr	r2, [r3, #0]
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008268:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800826c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	4a6d      	ldr	r2, [pc, #436]	; (8008428 <HAL_DMA_Abort+0x444>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d04a      	beq.n	800830e <HAL_DMA_Abort+0x32a>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4a6b      	ldr	r2, [pc, #428]	; (800842c <HAL_DMA_Abort+0x448>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d045      	beq.n	800830e <HAL_DMA_Abort+0x32a>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	4a6a      	ldr	r2, [pc, #424]	; (8008430 <HAL_DMA_Abort+0x44c>)
 8008288:	4293      	cmp	r3, r2
 800828a:	d040      	beq.n	800830e <HAL_DMA_Abort+0x32a>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4a68      	ldr	r2, [pc, #416]	; (8008434 <HAL_DMA_Abort+0x450>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d03b      	beq.n	800830e <HAL_DMA_Abort+0x32a>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	4a67      	ldr	r2, [pc, #412]	; (8008438 <HAL_DMA_Abort+0x454>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d036      	beq.n	800830e <HAL_DMA_Abort+0x32a>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4a65      	ldr	r2, [pc, #404]	; (800843c <HAL_DMA_Abort+0x458>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d031      	beq.n	800830e <HAL_DMA_Abort+0x32a>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	4a64      	ldr	r2, [pc, #400]	; (8008440 <HAL_DMA_Abort+0x45c>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d02c      	beq.n	800830e <HAL_DMA_Abort+0x32a>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4a62      	ldr	r2, [pc, #392]	; (8008444 <HAL_DMA_Abort+0x460>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d027      	beq.n	800830e <HAL_DMA_Abort+0x32a>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	4a61      	ldr	r2, [pc, #388]	; (8008448 <HAL_DMA_Abort+0x464>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d022      	beq.n	800830e <HAL_DMA_Abort+0x32a>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4a5f      	ldr	r2, [pc, #380]	; (800844c <HAL_DMA_Abort+0x468>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d01d      	beq.n	800830e <HAL_DMA_Abort+0x32a>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4a5e      	ldr	r2, [pc, #376]	; (8008450 <HAL_DMA_Abort+0x46c>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d018      	beq.n	800830e <HAL_DMA_Abort+0x32a>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a5c      	ldr	r2, [pc, #368]	; (8008454 <HAL_DMA_Abort+0x470>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d013      	beq.n	800830e <HAL_DMA_Abort+0x32a>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4a5b      	ldr	r2, [pc, #364]	; (8008458 <HAL_DMA_Abort+0x474>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d00e      	beq.n	800830e <HAL_DMA_Abort+0x32a>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4a59      	ldr	r2, [pc, #356]	; (800845c <HAL_DMA_Abort+0x478>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d009      	beq.n	800830e <HAL_DMA_Abort+0x32a>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4a58      	ldr	r2, [pc, #352]	; (8008460 <HAL_DMA_Abort+0x47c>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d004      	beq.n	800830e <HAL_DMA_Abort+0x32a>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4a56      	ldr	r2, [pc, #344]	; (8008464 <HAL_DMA_Abort+0x480>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d108      	bne.n	8008320 <HAL_DMA_Abort+0x33c>
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	681a      	ldr	r2, [r3, #0]
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f022 0201 	bic.w	r2, r2, #1
 800831c:	601a      	str	r2, [r3, #0]
 800831e:	e007      	b.n	8008330 <HAL_DMA_Abort+0x34c>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	681a      	ldr	r2, [r3, #0]
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f022 0201 	bic.w	r2, r2, #1
 800832e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8008330:	e013      	b.n	800835a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008332:	f7fe fd8f 	bl	8006e54 <HAL_GetTick>
 8008336:	4602      	mov	r2, r0
 8008338:	693b      	ldr	r3, [r7, #16]
 800833a:	1ad3      	subs	r3, r2, r3
 800833c:	2b05      	cmp	r3, #5
 800833e:	d90c      	bls.n	800835a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2220      	movs	r2, #32
 8008344:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2203      	movs	r2, #3
 800834a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2200      	movs	r2, #0
 8008352:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8008356:	2301      	movs	r3, #1
 8008358:	e12d      	b.n	80085b6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800835a:	697b      	ldr	r3, [r7, #20]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f003 0301 	and.w	r3, r3, #1
 8008362:	2b00      	cmp	r3, #0
 8008364:	d1e5      	bne.n	8008332 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4a2f      	ldr	r2, [pc, #188]	; (8008428 <HAL_DMA_Abort+0x444>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d04a      	beq.n	8008406 <HAL_DMA_Abort+0x422>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4a2d      	ldr	r2, [pc, #180]	; (800842c <HAL_DMA_Abort+0x448>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d045      	beq.n	8008406 <HAL_DMA_Abort+0x422>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4a2c      	ldr	r2, [pc, #176]	; (8008430 <HAL_DMA_Abort+0x44c>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d040      	beq.n	8008406 <HAL_DMA_Abort+0x422>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	4a2a      	ldr	r2, [pc, #168]	; (8008434 <HAL_DMA_Abort+0x450>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d03b      	beq.n	8008406 <HAL_DMA_Abort+0x422>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	4a29      	ldr	r2, [pc, #164]	; (8008438 <HAL_DMA_Abort+0x454>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d036      	beq.n	8008406 <HAL_DMA_Abort+0x422>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4a27      	ldr	r2, [pc, #156]	; (800843c <HAL_DMA_Abort+0x458>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d031      	beq.n	8008406 <HAL_DMA_Abort+0x422>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4a26      	ldr	r2, [pc, #152]	; (8008440 <HAL_DMA_Abort+0x45c>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d02c      	beq.n	8008406 <HAL_DMA_Abort+0x422>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4a24      	ldr	r2, [pc, #144]	; (8008444 <HAL_DMA_Abort+0x460>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d027      	beq.n	8008406 <HAL_DMA_Abort+0x422>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4a23      	ldr	r2, [pc, #140]	; (8008448 <HAL_DMA_Abort+0x464>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d022      	beq.n	8008406 <HAL_DMA_Abort+0x422>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4a21      	ldr	r2, [pc, #132]	; (800844c <HAL_DMA_Abort+0x468>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d01d      	beq.n	8008406 <HAL_DMA_Abort+0x422>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	4a20      	ldr	r2, [pc, #128]	; (8008450 <HAL_DMA_Abort+0x46c>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d018      	beq.n	8008406 <HAL_DMA_Abort+0x422>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4a1e      	ldr	r2, [pc, #120]	; (8008454 <HAL_DMA_Abort+0x470>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d013      	beq.n	8008406 <HAL_DMA_Abort+0x422>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4a1d      	ldr	r2, [pc, #116]	; (8008458 <HAL_DMA_Abort+0x474>)
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d00e      	beq.n	8008406 <HAL_DMA_Abort+0x422>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	4a1b      	ldr	r2, [pc, #108]	; (800845c <HAL_DMA_Abort+0x478>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d009      	beq.n	8008406 <HAL_DMA_Abort+0x422>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	4a1a      	ldr	r2, [pc, #104]	; (8008460 <HAL_DMA_Abort+0x47c>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d004      	beq.n	8008406 <HAL_DMA_Abort+0x422>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4a18      	ldr	r2, [pc, #96]	; (8008464 <HAL_DMA_Abort+0x480>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d101      	bne.n	800840a <HAL_DMA_Abort+0x426>
 8008406:	2301      	movs	r3, #1
 8008408:	e000      	b.n	800840c <HAL_DMA_Abort+0x428>
 800840a:	2300      	movs	r3, #0
 800840c:	2b00      	cmp	r3, #0
 800840e:	d02b      	beq.n	8008468 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008414:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800841a:	f003 031f 	and.w	r3, r3, #31
 800841e:	223f      	movs	r2, #63	; 0x3f
 8008420:	409a      	lsls	r2, r3
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	609a      	str	r2, [r3, #8]
 8008426:	e02a      	b.n	800847e <HAL_DMA_Abort+0x49a>
 8008428:	40020010 	.word	0x40020010
 800842c:	40020028 	.word	0x40020028
 8008430:	40020040 	.word	0x40020040
 8008434:	40020058 	.word	0x40020058
 8008438:	40020070 	.word	0x40020070
 800843c:	40020088 	.word	0x40020088
 8008440:	400200a0 	.word	0x400200a0
 8008444:	400200b8 	.word	0x400200b8
 8008448:	40020410 	.word	0x40020410
 800844c:	40020428 	.word	0x40020428
 8008450:	40020440 	.word	0x40020440
 8008454:	40020458 	.word	0x40020458
 8008458:	40020470 	.word	0x40020470
 800845c:	40020488 	.word	0x40020488
 8008460:	400204a0 	.word	0x400204a0
 8008464:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800846c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008472:	f003 031f 	and.w	r3, r3, #31
 8008476:	2201      	movs	r2, #1
 8008478:	409a      	lsls	r2, r3
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	4a4f      	ldr	r2, [pc, #316]	; (80085c0 <HAL_DMA_Abort+0x5dc>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d072      	beq.n	800856e <HAL_DMA_Abort+0x58a>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4a4d      	ldr	r2, [pc, #308]	; (80085c4 <HAL_DMA_Abort+0x5e0>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d06d      	beq.n	800856e <HAL_DMA_Abort+0x58a>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4a4c      	ldr	r2, [pc, #304]	; (80085c8 <HAL_DMA_Abort+0x5e4>)
 8008498:	4293      	cmp	r3, r2
 800849a:	d068      	beq.n	800856e <HAL_DMA_Abort+0x58a>
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a4a      	ldr	r2, [pc, #296]	; (80085cc <HAL_DMA_Abort+0x5e8>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d063      	beq.n	800856e <HAL_DMA_Abort+0x58a>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	4a49      	ldr	r2, [pc, #292]	; (80085d0 <HAL_DMA_Abort+0x5ec>)
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d05e      	beq.n	800856e <HAL_DMA_Abort+0x58a>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	4a47      	ldr	r2, [pc, #284]	; (80085d4 <HAL_DMA_Abort+0x5f0>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d059      	beq.n	800856e <HAL_DMA_Abort+0x58a>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	4a46      	ldr	r2, [pc, #280]	; (80085d8 <HAL_DMA_Abort+0x5f4>)
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d054      	beq.n	800856e <HAL_DMA_Abort+0x58a>
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	4a44      	ldr	r2, [pc, #272]	; (80085dc <HAL_DMA_Abort+0x5f8>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d04f      	beq.n	800856e <HAL_DMA_Abort+0x58a>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	4a43      	ldr	r2, [pc, #268]	; (80085e0 <HAL_DMA_Abort+0x5fc>)
 80084d4:	4293      	cmp	r3, r2
 80084d6:	d04a      	beq.n	800856e <HAL_DMA_Abort+0x58a>
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4a41      	ldr	r2, [pc, #260]	; (80085e4 <HAL_DMA_Abort+0x600>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d045      	beq.n	800856e <HAL_DMA_Abort+0x58a>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	4a40      	ldr	r2, [pc, #256]	; (80085e8 <HAL_DMA_Abort+0x604>)
 80084e8:	4293      	cmp	r3, r2
 80084ea:	d040      	beq.n	800856e <HAL_DMA_Abort+0x58a>
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4a3e      	ldr	r2, [pc, #248]	; (80085ec <HAL_DMA_Abort+0x608>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d03b      	beq.n	800856e <HAL_DMA_Abort+0x58a>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4a3d      	ldr	r2, [pc, #244]	; (80085f0 <HAL_DMA_Abort+0x60c>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d036      	beq.n	800856e <HAL_DMA_Abort+0x58a>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	4a3b      	ldr	r2, [pc, #236]	; (80085f4 <HAL_DMA_Abort+0x610>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d031      	beq.n	800856e <HAL_DMA_Abort+0x58a>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	4a3a      	ldr	r2, [pc, #232]	; (80085f8 <HAL_DMA_Abort+0x614>)
 8008510:	4293      	cmp	r3, r2
 8008512:	d02c      	beq.n	800856e <HAL_DMA_Abort+0x58a>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	4a38      	ldr	r2, [pc, #224]	; (80085fc <HAL_DMA_Abort+0x618>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d027      	beq.n	800856e <HAL_DMA_Abort+0x58a>
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	4a37      	ldr	r2, [pc, #220]	; (8008600 <HAL_DMA_Abort+0x61c>)
 8008524:	4293      	cmp	r3, r2
 8008526:	d022      	beq.n	800856e <HAL_DMA_Abort+0x58a>
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4a35      	ldr	r2, [pc, #212]	; (8008604 <HAL_DMA_Abort+0x620>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d01d      	beq.n	800856e <HAL_DMA_Abort+0x58a>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4a34      	ldr	r2, [pc, #208]	; (8008608 <HAL_DMA_Abort+0x624>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d018      	beq.n	800856e <HAL_DMA_Abort+0x58a>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	4a32      	ldr	r2, [pc, #200]	; (800860c <HAL_DMA_Abort+0x628>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d013      	beq.n	800856e <HAL_DMA_Abort+0x58a>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4a31      	ldr	r2, [pc, #196]	; (8008610 <HAL_DMA_Abort+0x62c>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d00e      	beq.n	800856e <HAL_DMA_Abort+0x58a>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	4a2f      	ldr	r2, [pc, #188]	; (8008614 <HAL_DMA_Abort+0x630>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d009      	beq.n	800856e <HAL_DMA_Abort+0x58a>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	4a2e      	ldr	r2, [pc, #184]	; (8008618 <HAL_DMA_Abort+0x634>)
 8008560:	4293      	cmp	r3, r2
 8008562:	d004      	beq.n	800856e <HAL_DMA_Abort+0x58a>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	4a2c      	ldr	r2, [pc, #176]	; (800861c <HAL_DMA_Abort+0x638>)
 800856a:	4293      	cmp	r3, r2
 800856c:	d101      	bne.n	8008572 <HAL_DMA_Abort+0x58e>
 800856e:	2301      	movs	r3, #1
 8008570:	e000      	b.n	8008574 <HAL_DMA_Abort+0x590>
 8008572:	2300      	movs	r3, #0
 8008574:	2b00      	cmp	r3, #0
 8008576:	d015      	beq.n	80085a4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800857c:	687a      	ldr	r2, [r7, #4]
 800857e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008580:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008586:	2b00      	cmp	r3, #0
 8008588:	d00c      	beq.n	80085a4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800858e:	681a      	ldr	r2, [r3, #0]
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008594:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008598:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800859e:	687a      	ldr	r2, [r7, #4]
 80085a0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80085a2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2201      	movs	r2, #1
 80085a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2200      	movs	r2, #0
 80085b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80085b4:	2300      	movs	r3, #0
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	3718      	adds	r7, #24
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}
 80085be:	bf00      	nop
 80085c0:	40020010 	.word	0x40020010
 80085c4:	40020028 	.word	0x40020028
 80085c8:	40020040 	.word	0x40020040
 80085cc:	40020058 	.word	0x40020058
 80085d0:	40020070 	.word	0x40020070
 80085d4:	40020088 	.word	0x40020088
 80085d8:	400200a0 	.word	0x400200a0
 80085dc:	400200b8 	.word	0x400200b8
 80085e0:	40020410 	.word	0x40020410
 80085e4:	40020428 	.word	0x40020428
 80085e8:	40020440 	.word	0x40020440
 80085ec:	40020458 	.word	0x40020458
 80085f0:	40020470 	.word	0x40020470
 80085f4:	40020488 	.word	0x40020488
 80085f8:	400204a0 	.word	0x400204a0
 80085fc:	400204b8 	.word	0x400204b8
 8008600:	58025408 	.word	0x58025408
 8008604:	5802541c 	.word	0x5802541c
 8008608:	58025430 	.word	0x58025430
 800860c:	58025444 	.word	0x58025444
 8008610:	58025458 	.word	0x58025458
 8008614:	5802546c 	.word	0x5802546c
 8008618:	58025480 	.word	0x58025480
 800861c:	58025494 	.word	0x58025494

08008620 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b084      	sub	sp, #16
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d101      	bne.n	8008632 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800862e:	2301      	movs	r3, #1
 8008630:	e237      	b.n	8008aa2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008638:	b2db      	uxtb	r3, r3
 800863a:	2b02      	cmp	r3, #2
 800863c:	d004      	beq.n	8008648 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2280      	movs	r2, #128	; 0x80
 8008642:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008644:	2301      	movs	r3, #1
 8008646:	e22c      	b.n	8008aa2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	4a5c      	ldr	r2, [pc, #368]	; (80087c0 <HAL_DMA_Abort_IT+0x1a0>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d04a      	beq.n	80086e8 <HAL_DMA_Abort_IT+0xc8>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	4a5b      	ldr	r2, [pc, #364]	; (80087c4 <HAL_DMA_Abort_IT+0x1a4>)
 8008658:	4293      	cmp	r3, r2
 800865a:	d045      	beq.n	80086e8 <HAL_DMA_Abort_IT+0xc8>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	4a59      	ldr	r2, [pc, #356]	; (80087c8 <HAL_DMA_Abort_IT+0x1a8>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d040      	beq.n	80086e8 <HAL_DMA_Abort_IT+0xc8>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4a58      	ldr	r2, [pc, #352]	; (80087cc <HAL_DMA_Abort_IT+0x1ac>)
 800866c:	4293      	cmp	r3, r2
 800866e:	d03b      	beq.n	80086e8 <HAL_DMA_Abort_IT+0xc8>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	4a56      	ldr	r2, [pc, #344]	; (80087d0 <HAL_DMA_Abort_IT+0x1b0>)
 8008676:	4293      	cmp	r3, r2
 8008678:	d036      	beq.n	80086e8 <HAL_DMA_Abort_IT+0xc8>
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	4a55      	ldr	r2, [pc, #340]	; (80087d4 <HAL_DMA_Abort_IT+0x1b4>)
 8008680:	4293      	cmp	r3, r2
 8008682:	d031      	beq.n	80086e8 <HAL_DMA_Abort_IT+0xc8>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	4a53      	ldr	r2, [pc, #332]	; (80087d8 <HAL_DMA_Abort_IT+0x1b8>)
 800868a:	4293      	cmp	r3, r2
 800868c:	d02c      	beq.n	80086e8 <HAL_DMA_Abort_IT+0xc8>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	4a52      	ldr	r2, [pc, #328]	; (80087dc <HAL_DMA_Abort_IT+0x1bc>)
 8008694:	4293      	cmp	r3, r2
 8008696:	d027      	beq.n	80086e8 <HAL_DMA_Abort_IT+0xc8>
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	4a50      	ldr	r2, [pc, #320]	; (80087e0 <HAL_DMA_Abort_IT+0x1c0>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	d022      	beq.n	80086e8 <HAL_DMA_Abort_IT+0xc8>
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	4a4f      	ldr	r2, [pc, #316]	; (80087e4 <HAL_DMA_Abort_IT+0x1c4>)
 80086a8:	4293      	cmp	r3, r2
 80086aa:	d01d      	beq.n	80086e8 <HAL_DMA_Abort_IT+0xc8>
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	4a4d      	ldr	r2, [pc, #308]	; (80087e8 <HAL_DMA_Abort_IT+0x1c8>)
 80086b2:	4293      	cmp	r3, r2
 80086b4:	d018      	beq.n	80086e8 <HAL_DMA_Abort_IT+0xc8>
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	4a4c      	ldr	r2, [pc, #304]	; (80087ec <HAL_DMA_Abort_IT+0x1cc>)
 80086bc:	4293      	cmp	r3, r2
 80086be:	d013      	beq.n	80086e8 <HAL_DMA_Abort_IT+0xc8>
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	4a4a      	ldr	r2, [pc, #296]	; (80087f0 <HAL_DMA_Abort_IT+0x1d0>)
 80086c6:	4293      	cmp	r3, r2
 80086c8:	d00e      	beq.n	80086e8 <HAL_DMA_Abort_IT+0xc8>
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	4a49      	ldr	r2, [pc, #292]	; (80087f4 <HAL_DMA_Abort_IT+0x1d4>)
 80086d0:	4293      	cmp	r3, r2
 80086d2:	d009      	beq.n	80086e8 <HAL_DMA_Abort_IT+0xc8>
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	4a47      	ldr	r2, [pc, #284]	; (80087f8 <HAL_DMA_Abort_IT+0x1d8>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	d004      	beq.n	80086e8 <HAL_DMA_Abort_IT+0xc8>
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	4a46      	ldr	r2, [pc, #280]	; (80087fc <HAL_DMA_Abort_IT+0x1dc>)
 80086e4:	4293      	cmp	r3, r2
 80086e6:	d101      	bne.n	80086ec <HAL_DMA_Abort_IT+0xcc>
 80086e8:	2301      	movs	r3, #1
 80086ea:	e000      	b.n	80086ee <HAL_DMA_Abort_IT+0xce>
 80086ec:	2300      	movs	r3, #0
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	f000 8086 	beq.w	8008800 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2204      	movs	r2, #4
 80086f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4a2f      	ldr	r2, [pc, #188]	; (80087c0 <HAL_DMA_Abort_IT+0x1a0>)
 8008702:	4293      	cmp	r3, r2
 8008704:	d04a      	beq.n	800879c <HAL_DMA_Abort_IT+0x17c>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4a2e      	ldr	r2, [pc, #184]	; (80087c4 <HAL_DMA_Abort_IT+0x1a4>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d045      	beq.n	800879c <HAL_DMA_Abort_IT+0x17c>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4a2c      	ldr	r2, [pc, #176]	; (80087c8 <HAL_DMA_Abort_IT+0x1a8>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d040      	beq.n	800879c <HAL_DMA_Abort_IT+0x17c>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	4a2b      	ldr	r2, [pc, #172]	; (80087cc <HAL_DMA_Abort_IT+0x1ac>)
 8008720:	4293      	cmp	r3, r2
 8008722:	d03b      	beq.n	800879c <HAL_DMA_Abort_IT+0x17c>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	4a29      	ldr	r2, [pc, #164]	; (80087d0 <HAL_DMA_Abort_IT+0x1b0>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d036      	beq.n	800879c <HAL_DMA_Abort_IT+0x17c>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	4a28      	ldr	r2, [pc, #160]	; (80087d4 <HAL_DMA_Abort_IT+0x1b4>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d031      	beq.n	800879c <HAL_DMA_Abort_IT+0x17c>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	4a26      	ldr	r2, [pc, #152]	; (80087d8 <HAL_DMA_Abort_IT+0x1b8>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d02c      	beq.n	800879c <HAL_DMA_Abort_IT+0x17c>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	4a25      	ldr	r2, [pc, #148]	; (80087dc <HAL_DMA_Abort_IT+0x1bc>)
 8008748:	4293      	cmp	r3, r2
 800874a:	d027      	beq.n	800879c <HAL_DMA_Abort_IT+0x17c>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4a23      	ldr	r2, [pc, #140]	; (80087e0 <HAL_DMA_Abort_IT+0x1c0>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d022      	beq.n	800879c <HAL_DMA_Abort_IT+0x17c>
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	4a22      	ldr	r2, [pc, #136]	; (80087e4 <HAL_DMA_Abort_IT+0x1c4>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d01d      	beq.n	800879c <HAL_DMA_Abort_IT+0x17c>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	4a20      	ldr	r2, [pc, #128]	; (80087e8 <HAL_DMA_Abort_IT+0x1c8>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d018      	beq.n	800879c <HAL_DMA_Abort_IT+0x17c>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	4a1f      	ldr	r2, [pc, #124]	; (80087ec <HAL_DMA_Abort_IT+0x1cc>)
 8008770:	4293      	cmp	r3, r2
 8008772:	d013      	beq.n	800879c <HAL_DMA_Abort_IT+0x17c>
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	4a1d      	ldr	r2, [pc, #116]	; (80087f0 <HAL_DMA_Abort_IT+0x1d0>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d00e      	beq.n	800879c <HAL_DMA_Abort_IT+0x17c>
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	4a1c      	ldr	r2, [pc, #112]	; (80087f4 <HAL_DMA_Abort_IT+0x1d4>)
 8008784:	4293      	cmp	r3, r2
 8008786:	d009      	beq.n	800879c <HAL_DMA_Abort_IT+0x17c>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4a1a      	ldr	r2, [pc, #104]	; (80087f8 <HAL_DMA_Abort_IT+0x1d8>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d004      	beq.n	800879c <HAL_DMA_Abort_IT+0x17c>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	4a19      	ldr	r2, [pc, #100]	; (80087fc <HAL_DMA_Abort_IT+0x1dc>)
 8008798:	4293      	cmp	r3, r2
 800879a:	d108      	bne.n	80087ae <HAL_DMA_Abort_IT+0x18e>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	681a      	ldr	r2, [r3, #0]
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f022 0201 	bic.w	r2, r2, #1
 80087aa:	601a      	str	r2, [r3, #0]
 80087ac:	e178      	b.n	8008aa0 <HAL_DMA_Abort_IT+0x480>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	681a      	ldr	r2, [r3, #0]
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f022 0201 	bic.w	r2, r2, #1
 80087bc:	601a      	str	r2, [r3, #0]
 80087be:	e16f      	b.n	8008aa0 <HAL_DMA_Abort_IT+0x480>
 80087c0:	40020010 	.word	0x40020010
 80087c4:	40020028 	.word	0x40020028
 80087c8:	40020040 	.word	0x40020040
 80087cc:	40020058 	.word	0x40020058
 80087d0:	40020070 	.word	0x40020070
 80087d4:	40020088 	.word	0x40020088
 80087d8:	400200a0 	.word	0x400200a0
 80087dc:	400200b8 	.word	0x400200b8
 80087e0:	40020410 	.word	0x40020410
 80087e4:	40020428 	.word	0x40020428
 80087e8:	40020440 	.word	0x40020440
 80087ec:	40020458 	.word	0x40020458
 80087f0:	40020470 	.word	0x40020470
 80087f4:	40020488 	.word	0x40020488
 80087f8:	400204a0 	.word	0x400204a0
 80087fc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	681a      	ldr	r2, [r3, #0]
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f022 020e 	bic.w	r2, r2, #14
 800880e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	4a6c      	ldr	r2, [pc, #432]	; (80089c8 <HAL_DMA_Abort_IT+0x3a8>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d04a      	beq.n	80088b0 <HAL_DMA_Abort_IT+0x290>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	4a6b      	ldr	r2, [pc, #428]	; (80089cc <HAL_DMA_Abort_IT+0x3ac>)
 8008820:	4293      	cmp	r3, r2
 8008822:	d045      	beq.n	80088b0 <HAL_DMA_Abort_IT+0x290>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	4a69      	ldr	r2, [pc, #420]	; (80089d0 <HAL_DMA_Abort_IT+0x3b0>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d040      	beq.n	80088b0 <HAL_DMA_Abort_IT+0x290>
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	4a68      	ldr	r2, [pc, #416]	; (80089d4 <HAL_DMA_Abort_IT+0x3b4>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d03b      	beq.n	80088b0 <HAL_DMA_Abort_IT+0x290>
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	4a66      	ldr	r2, [pc, #408]	; (80089d8 <HAL_DMA_Abort_IT+0x3b8>)
 800883e:	4293      	cmp	r3, r2
 8008840:	d036      	beq.n	80088b0 <HAL_DMA_Abort_IT+0x290>
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	4a65      	ldr	r2, [pc, #404]	; (80089dc <HAL_DMA_Abort_IT+0x3bc>)
 8008848:	4293      	cmp	r3, r2
 800884a:	d031      	beq.n	80088b0 <HAL_DMA_Abort_IT+0x290>
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	4a63      	ldr	r2, [pc, #396]	; (80089e0 <HAL_DMA_Abort_IT+0x3c0>)
 8008852:	4293      	cmp	r3, r2
 8008854:	d02c      	beq.n	80088b0 <HAL_DMA_Abort_IT+0x290>
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	4a62      	ldr	r2, [pc, #392]	; (80089e4 <HAL_DMA_Abort_IT+0x3c4>)
 800885c:	4293      	cmp	r3, r2
 800885e:	d027      	beq.n	80088b0 <HAL_DMA_Abort_IT+0x290>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	4a60      	ldr	r2, [pc, #384]	; (80089e8 <HAL_DMA_Abort_IT+0x3c8>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d022      	beq.n	80088b0 <HAL_DMA_Abort_IT+0x290>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	4a5f      	ldr	r2, [pc, #380]	; (80089ec <HAL_DMA_Abort_IT+0x3cc>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d01d      	beq.n	80088b0 <HAL_DMA_Abort_IT+0x290>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	4a5d      	ldr	r2, [pc, #372]	; (80089f0 <HAL_DMA_Abort_IT+0x3d0>)
 800887a:	4293      	cmp	r3, r2
 800887c:	d018      	beq.n	80088b0 <HAL_DMA_Abort_IT+0x290>
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	4a5c      	ldr	r2, [pc, #368]	; (80089f4 <HAL_DMA_Abort_IT+0x3d4>)
 8008884:	4293      	cmp	r3, r2
 8008886:	d013      	beq.n	80088b0 <HAL_DMA_Abort_IT+0x290>
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	4a5a      	ldr	r2, [pc, #360]	; (80089f8 <HAL_DMA_Abort_IT+0x3d8>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d00e      	beq.n	80088b0 <HAL_DMA_Abort_IT+0x290>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	4a59      	ldr	r2, [pc, #356]	; (80089fc <HAL_DMA_Abort_IT+0x3dc>)
 8008898:	4293      	cmp	r3, r2
 800889a:	d009      	beq.n	80088b0 <HAL_DMA_Abort_IT+0x290>
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	4a57      	ldr	r2, [pc, #348]	; (8008a00 <HAL_DMA_Abort_IT+0x3e0>)
 80088a2:	4293      	cmp	r3, r2
 80088a4:	d004      	beq.n	80088b0 <HAL_DMA_Abort_IT+0x290>
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	4a56      	ldr	r2, [pc, #344]	; (8008a04 <HAL_DMA_Abort_IT+0x3e4>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d108      	bne.n	80088c2 <HAL_DMA_Abort_IT+0x2a2>
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	681a      	ldr	r2, [r3, #0]
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f022 0201 	bic.w	r2, r2, #1
 80088be:	601a      	str	r2, [r3, #0]
 80088c0:	e007      	b.n	80088d2 <HAL_DMA_Abort_IT+0x2b2>
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	681a      	ldr	r2, [r3, #0]
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f022 0201 	bic.w	r2, r2, #1
 80088d0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	4a3c      	ldr	r2, [pc, #240]	; (80089c8 <HAL_DMA_Abort_IT+0x3a8>)
 80088d8:	4293      	cmp	r3, r2
 80088da:	d072      	beq.n	80089c2 <HAL_DMA_Abort_IT+0x3a2>
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	4a3a      	ldr	r2, [pc, #232]	; (80089cc <HAL_DMA_Abort_IT+0x3ac>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d06d      	beq.n	80089c2 <HAL_DMA_Abort_IT+0x3a2>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4a39      	ldr	r2, [pc, #228]	; (80089d0 <HAL_DMA_Abort_IT+0x3b0>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d068      	beq.n	80089c2 <HAL_DMA_Abort_IT+0x3a2>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4a37      	ldr	r2, [pc, #220]	; (80089d4 <HAL_DMA_Abort_IT+0x3b4>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d063      	beq.n	80089c2 <HAL_DMA_Abort_IT+0x3a2>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	4a36      	ldr	r2, [pc, #216]	; (80089d8 <HAL_DMA_Abort_IT+0x3b8>)
 8008900:	4293      	cmp	r3, r2
 8008902:	d05e      	beq.n	80089c2 <HAL_DMA_Abort_IT+0x3a2>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	4a34      	ldr	r2, [pc, #208]	; (80089dc <HAL_DMA_Abort_IT+0x3bc>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d059      	beq.n	80089c2 <HAL_DMA_Abort_IT+0x3a2>
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4a33      	ldr	r2, [pc, #204]	; (80089e0 <HAL_DMA_Abort_IT+0x3c0>)
 8008914:	4293      	cmp	r3, r2
 8008916:	d054      	beq.n	80089c2 <HAL_DMA_Abort_IT+0x3a2>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	4a31      	ldr	r2, [pc, #196]	; (80089e4 <HAL_DMA_Abort_IT+0x3c4>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d04f      	beq.n	80089c2 <HAL_DMA_Abort_IT+0x3a2>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	4a30      	ldr	r2, [pc, #192]	; (80089e8 <HAL_DMA_Abort_IT+0x3c8>)
 8008928:	4293      	cmp	r3, r2
 800892a:	d04a      	beq.n	80089c2 <HAL_DMA_Abort_IT+0x3a2>
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4a2e      	ldr	r2, [pc, #184]	; (80089ec <HAL_DMA_Abort_IT+0x3cc>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d045      	beq.n	80089c2 <HAL_DMA_Abort_IT+0x3a2>
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4a2d      	ldr	r2, [pc, #180]	; (80089f0 <HAL_DMA_Abort_IT+0x3d0>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d040      	beq.n	80089c2 <HAL_DMA_Abort_IT+0x3a2>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4a2b      	ldr	r2, [pc, #172]	; (80089f4 <HAL_DMA_Abort_IT+0x3d4>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d03b      	beq.n	80089c2 <HAL_DMA_Abort_IT+0x3a2>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	4a2a      	ldr	r2, [pc, #168]	; (80089f8 <HAL_DMA_Abort_IT+0x3d8>)
 8008950:	4293      	cmp	r3, r2
 8008952:	d036      	beq.n	80089c2 <HAL_DMA_Abort_IT+0x3a2>
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	4a28      	ldr	r2, [pc, #160]	; (80089fc <HAL_DMA_Abort_IT+0x3dc>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d031      	beq.n	80089c2 <HAL_DMA_Abort_IT+0x3a2>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	4a27      	ldr	r2, [pc, #156]	; (8008a00 <HAL_DMA_Abort_IT+0x3e0>)
 8008964:	4293      	cmp	r3, r2
 8008966:	d02c      	beq.n	80089c2 <HAL_DMA_Abort_IT+0x3a2>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4a25      	ldr	r2, [pc, #148]	; (8008a04 <HAL_DMA_Abort_IT+0x3e4>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d027      	beq.n	80089c2 <HAL_DMA_Abort_IT+0x3a2>
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	4a24      	ldr	r2, [pc, #144]	; (8008a08 <HAL_DMA_Abort_IT+0x3e8>)
 8008978:	4293      	cmp	r3, r2
 800897a:	d022      	beq.n	80089c2 <HAL_DMA_Abort_IT+0x3a2>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	4a22      	ldr	r2, [pc, #136]	; (8008a0c <HAL_DMA_Abort_IT+0x3ec>)
 8008982:	4293      	cmp	r3, r2
 8008984:	d01d      	beq.n	80089c2 <HAL_DMA_Abort_IT+0x3a2>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	4a21      	ldr	r2, [pc, #132]	; (8008a10 <HAL_DMA_Abort_IT+0x3f0>)
 800898c:	4293      	cmp	r3, r2
 800898e:	d018      	beq.n	80089c2 <HAL_DMA_Abort_IT+0x3a2>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	4a1f      	ldr	r2, [pc, #124]	; (8008a14 <HAL_DMA_Abort_IT+0x3f4>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d013      	beq.n	80089c2 <HAL_DMA_Abort_IT+0x3a2>
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	4a1e      	ldr	r2, [pc, #120]	; (8008a18 <HAL_DMA_Abort_IT+0x3f8>)
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d00e      	beq.n	80089c2 <HAL_DMA_Abort_IT+0x3a2>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	4a1c      	ldr	r2, [pc, #112]	; (8008a1c <HAL_DMA_Abort_IT+0x3fc>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d009      	beq.n	80089c2 <HAL_DMA_Abort_IT+0x3a2>
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	4a1b      	ldr	r2, [pc, #108]	; (8008a20 <HAL_DMA_Abort_IT+0x400>)
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d004      	beq.n	80089c2 <HAL_DMA_Abort_IT+0x3a2>
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4a19      	ldr	r2, [pc, #100]	; (8008a24 <HAL_DMA_Abort_IT+0x404>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d132      	bne.n	8008a28 <HAL_DMA_Abort_IT+0x408>
 80089c2:	2301      	movs	r3, #1
 80089c4:	e031      	b.n	8008a2a <HAL_DMA_Abort_IT+0x40a>
 80089c6:	bf00      	nop
 80089c8:	40020010 	.word	0x40020010
 80089cc:	40020028 	.word	0x40020028
 80089d0:	40020040 	.word	0x40020040
 80089d4:	40020058 	.word	0x40020058
 80089d8:	40020070 	.word	0x40020070
 80089dc:	40020088 	.word	0x40020088
 80089e0:	400200a0 	.word	0x400200a0
 80089e4:	400200b8 	.word	0x400200b8
 80089e8:	40020410 	.word	0x40020410
 80089ec:	40020428 	.word	0x40020428
 80089f0:	40020440 	.word	0x40020440
 80089f4:	40020458 	.word	0x40020458
 80089f8:	40020470 	.word	0x40020470
 80089fc:	40020488 	.word	0x40020488
 8008a00:	400204a0 	.word	0x400204a0
 8008a04:	400204b8 	.word	0x400204b8
 8008a08:	58025408 	.word	0x58025408
 8008a0c:	5802541c 	.word	0x5802541c
 8008a10:	58025430 	.word	0x58025430
 8008a14:	58025444 	.word	0x58025444
 8008a18:	58025458 	.word	0x58025458
 8008a1c:	5802546c 	.word	0x5802546c
 8008a20:	58025480 	.word	0x58025480
 8008a24:	58025494 	.word	0x58025494
 8008a28:	2300      	movs	r3, #0
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d028      	beq.n	8008a80 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a32:	681a      	ldr	r2, [r3, #0]
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008a3c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a42:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a48:	f003 031f 	and.w	r3, r3, #31
 8008a4c:	2201      	movs	r2, #1
 8008a4e:	409a      	lsls	r2, r3
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a58:	687a      	ldr	r2, [r7, #4]
 8008a5a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008a5c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d00c      	beq.n	8008a80 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a6a:	681a      	ldr	r2, [r3, #0]
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008a74:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a7a:	687a      	ldr	r2, [r7, #4]
 8008a7c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008a7e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2201      	movs	r2, #1
 8008a84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d003      	beq.n	8008aa0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8008aa0:	2300      	movs	r3, #0
}
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	3710      	adds	r7, #16
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bd80      	pop	{r7, pc}
 8008aaa:	bf00      	nop

08008aac <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b08a      	sub	sp, #40	; 0x28
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008ab8:	4b67      	ldr	r3, [pc, #412]	; (8008c58 <HAL_DMA_IRQHandler+0x1ac>)
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	4a67      	ldr	r2, [pc, #412]	; (8008c5c <HAL_DMA_IRQHandler+0x1b0>)
 8008abe:	fba2 2303 	umull	r2, r3, r2, r3
 8008ac2:	0a9b      	lsrs	r3, r3, #10
 8008ac4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008aca:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ad0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8008ad2:	6a3b      	ldr	r3, [r7, #32]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8008ad8:	69fb      	ldr	r3, [r7, #28]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	4a5f      	ldr	r2, [pc, #380]	; (8008c60 <HAL_DMA_IRQHandler+0x1b4>)
 8008ae4:	4293      	cmp	r3, r2
 8008ae6:	d04a      	beq.n	8008b7e <HAL_DMA_IRQHandler+0xd2>
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	4a5d      	ldr	r2, [pc, #372]	; (8008c64 <HAL_DMA_IRQHandler+0x1b8>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d045      	beq.n	8008b7e <HAL_DMA_IRQHandler+0xd2>
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	4a5c      	ldr	r2, [pc, #368]	; (8008c68 <HAL_DMA_IRQHandler+0x1bc>)
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d040      	beq.n	8008b7e <HAL_DMA_IRQHandler+0xd2>
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	4a5a      	ldr	r2, [pc, #360]	; (8008c6c <HAL_DMA_IRQHandler+0x1c0>)
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d03b      	beq.n	8008b7e <HAL_DMA_IRQHandler+0xd2>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4a59      	ldr	r2, [pc, #356]	; (8008c70 <HAL_DMA_IRQHandler+0x1c4>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d036      	beq.n	8008b7e <HAL_DMA_IRQHandler+0xd2>
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	4a57      	ldr	r2, [pc, #348]	; (8008c74 <HAL_DMA_IRQHandler+0x1c8>)
 8008b16:	4293      	cmp	r3, r2
 8008b18:	d031      	beq.n	8008b7e <HAL_DMA_IRQHandler+0xd2>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	4a56      	ldr	r2, [pc, #344]	; (8008c78 <HAL_DMA_IRQHandler+0x1cc>)
 8008b20:	4293      	cmp	r3, r2
 8008b22:	d02c      	beq.n	8008b7e <HAL_DMA_IRQHandler+0xd2>
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	4a54      	ldr	r2, [pc, #336]	; (8008c7c <HAL_DMA_IRQHandler+0x1d0>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d027      	beq.n	8008b7e <HAL_DMA_IRQHandler+0xd2>
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	4a53      	ldr	r2, [pc, #332]	; (8008c80 <HAL_DMA_IRQHandler+0x1d4>)
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d022      	beq.n	8008b7e <HAL_DMA_IRQHandler+0xd2>
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	4a51      	ldr	r2, [pc, #324]	; (8008c84 <HAL_DMA_IRQHandler+0x1d8>)
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	d01d      	beq.n	8008b7e <HAL_DMA_IRQHandler+0xd2>
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	4a50      	ldr	r2, [pc, #320]	; (8008c88 <HAL_DMA_IRQHandler+0x1dc>)
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	d018      	beq.n	8008b7e <HAL_DMA_IRQHandler+0xd2>
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	4a4e      	ldr	r2, [pc, #312]	; (8008c8c <HAL_DMA_IRQHandler+0x1e0>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d013      	beq.n	8008b7e <HAL_DMA_IRQHandler+0xd2>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4a4d      	ldr	r2, [pc, #308]	; (8008c90 <HAL_DMA_IRQHandler+0x1e4>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d00e      	beq.n	8008b7e <HAL_DMA_IRQHandler+0xd2>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	4a4b      	ldr	r2, [pc, #300]	; (8008c94 <HAL_DMA_IRQHandler+0x1e8>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d009      	beq.n	8008b7e <HAL_DMA_IRQHandler+0xd2>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	4a4a      	ldr	r2, [pc, #296]	; (8008c98 <HAL_DMA_IRQHandler+0x1ec>)
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d004      	beq.n	8008b7e <HAL_DMA_IRQHandler+0xd2>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	4a48      	ldr	r2, [pc, #288]	; (8008c9c <HAL_DMA_IRQHandler+0x1f0>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d101      	bne.n	8008b82 <HAL_DMA_IRQHandler+0xd6>
 8008b7e:	2301      	movs	r3, #1
 8008b80:	e000      	b.n	8008b84 <HAL_DMA_IRQHandler+0xd8>
 8008b82:	2300      	movs	r3, #0
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	f000 842b 	beq.w	80093e0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b8e:	f003 031f 	and.w	r3, r3, #31
 8008b92:	2208      	movs	r2, #8
 8008b94:	409a      	lsls	r2, r3
 8008b96:	69bb      	ldr	r3, [r7, #24]
 8008b98:	4013      	ands	r3, r2
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	f000 80a2 	beq.w	8008ce4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	4a2e      	ldr	r2, [pc, #184]	; (8008c60 <HAL_DMA_IRQHandler+0x1b4>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d04a      	beq.n	8008c40 <HAL_DMA_IRQHandler+0x194>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	4a2d      	ldr	r2, [pc, #180]	; (8008c64 <HAL_DMA_IRQHandler+0x1b8>)
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	d045      	beq.n	8008c40 <HAL_DMA_IRQHandler+0x194>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	4a2b      	ldr	r2, [pc, #172]	; (8008c68 <HAL_DMA_IRQHandler+0x1bc>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d040      	beq.n	8008c40 <HAL_DMA_IRQHandler+0x194>
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	4a2a      	ldr	r2, [pc, #168]	; (8008c6c <HAL_DMA_IRQHandler+0x1c0>)
 8008bc4:	4293      	cmp	r3, r2
 8008bc6:	d03b      	beq.n	8008c40 <HAL_DMA_IRQHandler+0x194>
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	4a28      	ldr	r2, [pc, #160]	; (8008c70 <HAL_DMA_IRQHandler+0x1c4>)
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d036      	beq.n	8008c40 <HAL_DMA_IRQHandler+0x194>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	4a27      	ldr	r2, [pc, #156]	; (8008c74 <HAL_DMA_IRQHandler+0x1c8>)
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	d031      	beq.n	8008c40 <HAL_DMA_IRQHandler+0x194>
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	4a25      	ldr	r2, [pc, #148]	; (8008c78 <HAL_DMA_IRQHandler+0x1cc>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d02c      	beq.n	8008c40 <HAL_DMA_IRQHandler+0x194>
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	4a24      	ldr	r2, [pc, #144]	; (8008c7c <HAL_DMA_IRQHandler+0x1d0>)
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d027      	beq.n	8008c40 <HAL_DMA_IRQHandler+0x194>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	4a22      	ldr	r2, [pc, #136]	; (8008c80 <HAL_DMA_IRQHandler+0x1d4>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d022      	beq.n	8008c40 <HAL_DMA_IRQHandler+0x194>
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	4a21      	ldr	r2, [pc, #132]	; (8008c84 <HAL_DMA_IRQHandler+0x1d8>)
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d01d      	beq.n	8008c40 <HAL_DMA_IRQHandler+0x194>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	4a1f      	ldr	r2, [pc, #124]	; (8008c88 <HAL_DMA_IRQHandler+0x1dc>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d018      	beq.n	8008c40 <HAL_DMA_IRQHandler+0x194>
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	4a1e      	ldr	r2, [pc, #120]	; (8008c8c <HAL_DMA_IRQHandler+0x1e0>)
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d013      	beq.n	8008c40 <HAL_DMA_IRQHandler+0x194>
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	4a1c      	ldr	r2, [pc, #112]	; (8008c90 <HAL_DMA_IRQHandler+0x1e4>)
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	d00e      	beq.n	8008c40 <HAL_DMA_IRQHandler+0x194>
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	4a1b      	ldr	r2, [pc, #108]	; (8008c94 <HAL_DMA_IRQHandler+0x1e8>)
 8008c28:	4293      	cmp	r3, r2
 8008c2a:	d009      	beq.n	8008c40 <HAL_DMA_IRQHandler+0x194>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	4a19      	ldr	r2, [pc, #100]	; (8008c98 <HAL_DMA_IRQHandler+0x1ec>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d004      	beq.n	8008c40 <HAL_DMA_IRQHandler+0x194>
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	4a18      	ldr	r2, [pc, #96]	; (8008c9c <HAL_DMA_IRQHandler+0x1f0>)
 8008c3c:	4293      	cmp	r3, r2
 8008c3e:	d12f      	bne.n	8008ca0 <HAL_DMA_IRQHandler+0x1f4>
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f003 0304 	and.w	r3, r3, #4
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	bf14      	ite	ne
 8008c4e:	2301      	movne	r3, #1
 8008c50:	2300      	moveq	r3, #0
 8008c52:	b2db      	uxtb	r3, r3
 8008c54:	e02e      	b.n	8008cb4 <HAL_DMA_IRQHandler+0x208>
 8008c56:	bf00      	nop
 8008c58:	24000004 	.word	0x24000004
 8008c5c:	1b4e81b5 	.word	0x1b4e81b5
 8008c60:	40020010 	.word	0x40020010
 8008c64:	40020028 	.word	0x40020028
 8008c68:	40020040 	.word	0x40020040
 8008c6c:	40020058 	.word	0x40020058
 8008c70:	40020070 	.word	0x40020070
 8008c74:	40020088 	.word	0x40020088
 8008c78:	400200a0 	.word	0x400200a0
 8008c7c:	400200b8 	.word	0x400200b8
 8008c80:	40020410 	.word	0x40020410
 8008c84:	40020428 	.word	0x40020428
 8008c88:	40020440 	.word	0x40020440
 8008c8c:	40020458 	.word	0x40020458
 8008c90:	40020470 	.word	0x40020470
 8008c94:	40020488 	.word	0x40020488
 8008c98:	400204a0 	.word	0x400204a0
 8008c9c:	400204b8 	.word	0x400204b8
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f003 0308 	and.w	r3, r3, #8
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	bf14      	ite	ne
 8008cae:	2301      	movne	r3, #1
 8008cb0:	2300      	moveq	r3, #0
 8008cb2:	b2db      	uxtb	r3, r3
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d015      	beq.n	8008ce4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	681a      	ldr	r2, [r3, #0]
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f022 0204 	bic.w	r2, r2, #4
 8008cc6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ccc:	f003 031f 	and.w	r3, r3, #31
 8008cd0:	2208      	movs	r2, #8
 8008cd2:	409a      	lsls	r2, r3
 8008cd4:	6a3b      	ldr	r3, [r7, #32]
 8008cd6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cdc:	f043 0201 	orr.w	r2, r3, #1
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ce8:	f003 031f 	and.w	r3, r3, #31
 8008cec:	69ba      	ldr	r2, [r7, #24]
 8008cee:	fa22 f303 	lsr.w	r3, r2, r3
 8008cf2:	f003 0301 	and.w	r3, r3, #1
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d06e      	beq.n	8008dd8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	4a69      	ldr	r2, [pc, #420]	; (8008ea4 <HAL_DMA_IRQHandler+0x3f8>)
 8008d00:	4293      	cmp	r3, r2
 8008d02:	d04a      	beq.n	8008d9a <HAL_DMA_IRQHandler+0x2ee>
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	4a67      	ldr	r2, [pc, #412]	; (8008ea8 <HAL_DMA_IRQHandler+0x3fc>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d045      	beq.n	8008d9a <HAL_DMA_IRQHandler+0x2ee>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	4a66      	ldr	r2, [pc, #408]	; (8008eac <HAL_DMA_IRQHandler+0x400>)
 8008d14:	4293      	cmp	r3, r2
 8008d16:	d040      	beq.n	8008d9a <HAL_DMA_IRQHandler+0x2ee>
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	4a64      	ldr	r2, [pc, #400]	; (8008eb0 <HAL_DMA_IRQHandler+0x404>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d03b      	beq.n	8008d9a <HAL_DMA_IRQHandler+0x2ee>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	4a63      	ldr	r2, [pc, #396]	; (8008eb4 <HAL_DMA_IRQHandler+0x408>)
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d036      	beq.n	8008d9a <HAL_DMA_IRQHandler+0x2ee>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4a61      	ldr	r2, [pc, #388]	; (8008eb8 <HAL_DMA_IRQHandler+0x40c>)
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d031      	beq.n	8008d9a <HAL_DMA_IRQHandler+0x2ee>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	4a60      	ldr	r2, [pc, #384]	; (8008ebc <HAL_DMA_IRQHandler+0x410>)
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d02c      	beq.n	8008d9a <HAL_DMA_IRQHandler+0x2ee>
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	4a5e      	ldr	r2, [pc, #376]	; (8008ec0 <HAL_DMA_IRQHandler+0x414>)
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d027      	beq.n	8008d9a <HAL_DMA_IRQHandler+0x2ee>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	4a5d      	ldr	r2, [pc, #372]	; (8008ec4 <HAL_DMA_IRQHandler+0x418>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d022      	beq.n	8008d9a <HAL_DMA_IRQHandler+0x2ee>
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	4a5b      	ldr	r2, [pc, #364]	; (8008ec8 <HAL_DMA_IRQHandler+0x41c>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d01d      	beq.n	8008d9a <HAL_DMA_IRQHandler+0x2ee>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	4a5a      	ldr	r2, [pc, #360]	; (8008ecc <HAL_DMA_IRQHandler+0x420>)
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d018      	beq.n	8008d9a <HAL_DMA_IRQHandler+0x2ee>
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	4a58      	ldr	r2, [pc, #352]	; (8008ed0 <HAL_DMA_IRQHandler+0x424>)
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d013      	beq.n	8008d9a <HAL_DMA_IRQHandler+0x2ee>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	4a57      	ldr	r2, [pc, #348]	; (8008ed4 <HAL_DMA_IRQHandler+0x428>)
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	d00e      	beq.n	8008d9a <HAL_DMA_IRQHandler+0x2ee>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	4a55      	ldr	r2, [pc, #340]	; (8008ed8 <HAL_DMA_IRQHandler+0x42c>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d009      	beq.n	8008d9a <HAL_DMA_IRQHandler+0x2ee>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	4a54      	ldr	r2, [pc, #336]	; (8008edc <HAL_DMA_IRQHandler+0x430>)
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d004      	beq.n	8008d9a <HAL_DMA_IRQHandler+0x2ee>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	4a52      	ldr	r2, [pc, #328]	; (8008ee0 <HAL_DMA_IRQHandler+0x434>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d10a      	bne.n	8008db0 <HAL_DMA_IRQHandler+0x304>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	695b      	ldr	r3, [r3, #20]
 8008da0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	bf14      	ite	ne
 8008da8:	2301      	movne	r3, #1
 8008daa:	2300      	moveq	r3, #0
 8008dac:	b2db      	uxtb	r3, r3
 8008dae:	e003      	b.n	8008db8 <HAL_DMA_IRQHandler+0x30c>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	2300      	movs	r3, #0
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d00d      	beq.n	8008dd8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008dc0:	f003 031f 	and.w	r3, r3, #31
 8008dc4:	2201      	movs	r2, #1
 8008dc6:	409a      	lsls	r2, r3
 8008dc8:	6a3b      	ldr	r3, [r7, #32]
 8008dca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dd0:	f043 0202 	orr.w	r2, r3, #2
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ddc:	f003 031f 	and.w	r3, r3, #31
 8008de0:	2204      	movs	r2, #4
 8008de2:	409a      	lsls	r2, r3
 8008de4:	69bb      	ldr	r3, [r7, #24]
 8008de6:	4013      	ands	r3, r2
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	f000 808f 	beq.w	8008f0c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	4a2c      	ldr	r2, [pc, #176]	; (8008ea4 <HAL_DMA_IRQHandler+0x3f8>)
 8008df4:	4293      	cmp	r3, r2
 8008df6:	d04a      	beq.n	8008e8e <HAL_DMA_IRQHandler+0x3e2>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	4a2a      	ldr	r2, [pc, #168]	; (8008ea8 <HAL_DMA_IRQHandler+0x3fc>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d045      	beq.n	8008e8e <HAL_DMA_IRQHandler+0x3e2>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	4a29      	ldr	r2, [pc, #164]	; (8008eac <HAL_DMA_IRQHandler+0x400>)
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	d040      	beq.n	8008e8e <HAL_DMA_IRQHandler+0x3e2>
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	4a27      	ldr	r2, [pc, #156]	; (8008eb0 <HAL_DMA_IRQHandler+0x404>)
 8008e12:	4293      	cmp	r3, r2
 8008e14:	d03b      	beq.n	8008e8e <HAL_DMA_IRQHandler+0x3e2>
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	4a26      	ldr	r2, [pc, #152]	; (8008eb4 <HAL_DMA_IRQHandler+0x408>)
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d036      	beq.n	8008e8e <HAL_DMA_IRQHandler+0x3e2>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	4a24      	ldr	r2, [pc, #144]	; (8008eb8 <HAL_DMA_IRQHandler+0x40c>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d031      	beq.n	8008e8e <HAL_DMA_IRQHandler+0x3e2>
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	4a23      	ldr	r2, [pc, #140]	; (8008ebc <HAL_DMA_IRQHandler+0x410>)
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d02c      	beq.n	8008e8e <HAL_DMA_IRQHandler+0x3e2>
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	4a21      	ldr	r2, [pc, #132]	; (8008ec0 <HAL_DMA_IRQHandler+0x414>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d027      	beq.n	8008e8e <HAL_DMA_IRQHandler+0x3e2>
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	4a20      	ldr	r2, [pc, #128]	; (8008ec4 <HAL_DMA_IRQHandler+0x418>)
 8008e44:	4293      	cmp	r3, r2
 8008e46:	d022      	beq.n	8008e8e <HAL_DMA_IRQHandler+0x3e2>
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	4a1e      	ldr	r2, [pc, #120]	; (8008ec8 <HAL_DMA_IRQHandler+0x41c>)
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	d01d      	beq.n	8008e8e <HAL_DMA_IRQHandler+0x3e2>
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	4a1d      	ldr	r2, [pc, #116]	; (8008ecc <HAL_DMA_IRQHandler+0x420>)
 8008e58:	4293      	cmp	r3, r2
 8008e5a:	d018      	beq.n	8008e8e <HAL_DMA_IRQHandler+0x3e2>
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	4a1b      	ldr	r2, [pc, #108]	; (8008ed0 <HAL_DMA_IRQHandler+0x424>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d013      	beq.n	8008e8e <HAL_DMA_IRQHandler+0x3e2>
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	4a1a      	ldr	r2, [pc, #104]	; (8008ed4 <HAL_DMA_IRQHandler+0x428>)
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d00e      	beq.n	8008e8e <HAL_DMA_IRQHandler+0x3e2>
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	4a18      	ldr	r2, [pc, #96]	; (8008ed8 <HAL_DMA_IRQHandler+0x42c>)
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d009      	beq.n	8008e8e <HAL_DMA_IRQHandler+0x3e2>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	4a17      	ldr	r2, [pc, #92]	; (8008edc <HAL_DMA_IRQHandler+0x430>)
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d004      	beq.n	8008e8e <HAL_DMA_IRQHandler+0x3e2>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	4a15      	ldr	r2, [pc, #84]	; (8008ee0 <HAL_DMA_IRQHandler+0x434>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d12a      	bne.n	8008ee4 <HAL_DMA_IRQHandler+0x438>
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f003 0302 	and.w	r3, r3, #2
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	bf14      	ite	ne
 8008e9c:	2301      	movne	r3, #1
 8008e9e:	2300      	moveq	r3, #0
 8008ea0:	b2db      	uxtb	r3, r3
 8008ea2:	e023      	b.n	8008eec <HAL_DMA_IRQHandler+0x440>
 8008ea4:	40020010 	.word	0x40020010
 8008ea8:	40020028 	.word	0x40020028
 8008eac:	40020040 	.word	0x40020040
 8008eb0:	40020058 	.word	0x40020058
 8008eb4:	40020070 	.word	0x40020070
 8008eb8:	40020088 	.word	0x40020088
 8008ebc:	400200a0 	.word	0x400200a0
 8008ec0:	400200b8 	.word	0x400200b8
 8008ec4:	40020410 	.word	0x40020410
 8008ec8:	40020428 	.word	0x40020428
 8008ecc:	40020440 	.word	0x40020440
 8008ed0:	40020458 	.word	0x40020458
 8008ed4:	40020470 	.word	0x40020470
 8008ed8:	40020488 	.word	0x40020488
 8008edc:	400204a0 	.word	0x400204a0
 8008ee0:	400204b8 	.word	0x400204b8
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	2300      	movs	r3, #0
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d00d      	beq.n	8008f0c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ef4:	f003 031f 	and.w	r3, r3, #31
 8008ef8:	2204      	movs	r2, #4
 8008efa:	409a      	lsls	r2, r3
 8008efc:	6a3b      	ldr	r3, [r7, #32]
 8008efe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f04:	f043 0204 	orr.w	r2, r3, #4
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f10:	f003 031f 	and.w	r3, r3, #31
 8008f14:	2210      	movs	r2, #16
 8008f16:	409a      	lsls	r2, r3
 8008f18:	69bb      	ldr	r3, [r7, #24]
 8008f1a:	4013      	ands	r3, r2
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	f000 80a6 	beq.w	800906e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	4a85      	ldr	r2, [pc, #532]	; (800913c <HAL_DMA_IRQHandler+0x690>)
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d04a      	beq.n	8008fc2 <HAL_DMA_IRQHandler+0x516>
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	4a83      	ldr	r2, [pc, #524]	; (8009140 <HAL_DMA_IRQHandler+0x694>)
 8008f32:	4293      	cmp	r3, r2
 8008f34:	d045      	beq.n	8008fc2 <HAL_DMA_IRQHandler+0x516>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	4a82      	ldr	r2, [pc, #520]	; (8009144 <HAL_DMA_IRQHandler+0x698>)
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	d040      	beq.n	8008fc2 <HAL_DMA_IRQHandler+0x516>
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	4a80      	ldr	r2, [pc, #512]	; (8009148 <HAL_DMA_IRQHandler+0x69c>)
 8008f46:	4293      	cmp	r3, r2
 8008f48:	d03b      	beq.n	8008fc2 <HAL_DMA_IRQHandler+0x516>
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	4a7f      	ldr	r2, [pc, #508]	; (800914c <HAL_DMA_IRQHandler+0x6a0>)
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d036      	beq.n	8008fc2 <HAL_DMA_IRQHandler+0x516>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	4a7d      	ldr	r2, [pc, #500]	; (8009150 <HAL_DMA_IRQHandler+0x6a4>)
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	d031      	beq.n	8008fc2 <HAL_DMA_IRQHandler+0x516>
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	4a7c      	ldr	r2, [pc, #496]	; (8009154 <HAL_DMA_IRQHandler+0x6a8>)
 8008f64:	4293      	cmp	r3, r2
 8008f66:	d02c      	beq.n	8008fc2 <HAL_DMA_IRQHandler+0x516>
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	4a7a      	ldr	r2, [pc, #488]	; (8009158 <HAL_DMA_IRQHandler+0x6ac>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d027      	beq.n	8008fc2 <HAL_DMA_IRQHandler+0x516>
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	4a79      	ldr	r2, [pc, #484]	; (800915c <HAL_DMA_IRQHandler+0x6b0>)
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d022      	beq.n	8008fc2 <HAL_DMA_IRQHandler+0x516>
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	4a77      	ldr	r2, [pc, #476]	; (8009160 <HAL_DMA_IRQHandler+0x6b4>)
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d01d      	beq.n	8008fc2 <HAL_DMA_IRQHandler+0x516>
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	4a76      	ldr	r2, [pc, #472]	; (8009164 <HAL_DMA_IRQHandler+0x6b8>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d018      	beq.n	8008fc2 <HAL_DMA_IRQHandler+0x516>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	4a74      	ldr	r2, [pc, #464]	; (8009168 <HAL_DMA_IRQHandler+0x6bc>)
 8008f96:	4293      	cmp	r3, r2
 8008f98:	d013      	beq.n	8008fc2 <HAL_DMA_IRQHandler+0x516>
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	4a73      	ldr	r2, [pc, #460]	; (800916c <HAL_DMA_IRQHandler+0x6c0>)
 8008fa0:	4293      	cmp	r3, r2
 8008fa2:	d00e      	beq.n	8008fc2 <HAL_DMA_IRQHandler+0x516>
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	4a71      	ldr	r2, [pc, #452]	; (8009170 <HAL_DMA_IRQHandler+0x6c4>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d009      	beq.n	8008fc2 <HAL_DMA_IRQHandler+0x516>
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	4a70      	ldr	r2, [pc, #448]	; (8009174 <HAL_DMA_IRQHandler+0x6c8>)
 8008fb4:	4293      	cmp	r3, r2
 8008fb6:	d004      	beq.n	8008fc2 <HAL_DMA_IRQHandler+0x516>
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	4a6e      	ldr	r2, [pc, #440]	; (8009178 <HAL_DMA_IRQHandler+0x6cc>)
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	d10a      	bne.n	8008fd8 <HAL_DMA_IRQHandler+0x52c>
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f003 0308 	and.w	r3, r3, #8
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	bf14      	ite	ne
 8008fd0:	2301      	movne	r3, #1
 8008fd2:	2300      	moveq	r3, #0
 8008fd4:	b2db      	uxtb	r3, r3
 8008fd6:	e009      	b.n	8008fec <HAL_DMA_IRQHandler+0x540>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f003 0304 	and.w	r3, r3, #4
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	bf14      	ite	ne
 8008fe6:	2301      	movne	r3, #1
 8008fe8:	2300      	moveq	r3, #0
 8008fea:	b2db      	uxtb	r3, r3
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d03e      	beq.n	800906e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ff4:	f003 031f 	and.w	r3, r3, #31
 8008ff8:	2210      	movs	r2, #16
 8008ffa:	409a      	lsls	r2, r3
 8008ffc:	6a3b      	ldr	r3, [r7, #32]
 8008ffe:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800900a:	2b00      	cmp	r3, #0
 800900c:	d018      	beq.n	8009040 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009018:	2b00      	cmp	r3, #0
 800901a:	d108      	bne.n	800902e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009020:	2b00      	cmp	r3, #0
 8009022:	d024      	beq.n	800906e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	4798      	blx	r3
 800902c:	e01f      	b.n	800906e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009032:	2b00      	cmp	r3, #0
 8009034:	d01b      	beq.n	800906e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	4798      	blx	r3
 800903e:	e016      	b.n	800906e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800904a:	2b00      	cmp	r3, #0
 800904c:	d107      	bne.n	800905e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	681a      	ldr	r2, [r3, #0]
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	f022 0208 	bic.w	r2, r2, #8
 800905c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009062:	2b00      	cmp	r3, #0
 8009064:	d003      	beq.n	800906e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009072:	f003 031f 	and.w	r3, r3, #31
 8009076:	2220      	movs	r2, #32
 8009078:	409a      	lsls	r2, r3
 800907a:	69bb      	ldr	r3, [r7, #24]
 800907c:	4013      	ands	r3, r2
 800907e:	2b00      	cmp	r3, #0
 8009080:	f000 8110 	beq.w	80092a4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	4a2c      	ldr	r2, [pc, #176]	; (800913c <HAL_DMA_IRQHandler+0x690>)
 800908a:	4293      	cmp	r3, r2
 800908c:	d04a      	beq.n	8009124 <HAL_DMA_IRQHandler+0x678>
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	4a2b      	ldr	r2, [pc, #172]	; (8009140 <HAL_DMA_IRQHandler+0x694>)
 8009094:	4293      	cmp	r3, r2
 8009096:	d045      	beq.n	8009124 <HAL_DMA_IRQHandler+0x678>
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	4a29      	ldr	r2, [pc, #164]	; (8009144 <HAL_DMA_IRQHandler+0x698>)
 800909e:	4293      	cmp	r3, r2
 80090a0:	d040      	beq.n	8009124 <HAL_DMA_IRQHandler+0x678>
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	4a28      	ldr	r2, [pc, #160]	; (8009148 <HAL_DMA_IRQHandler+0x69c>)
 80090a8:	4293      	cmp	r3, r2
 80090aa:	d03b      	beq.n	8009124 <HAL_DMA_IRQHandler+0x678>
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	4a26      	ldr	r2, [pc, #152]	; (800914c <HAL_DMA_IRQHandler+0x6a0>)
 80090b2:	4293      	cmp	r3, r2
 80090b4:	d036      	beq.n	8009124 <HAL_DMA_IRQHandler+0x678>
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	4a25      	ldr	r2, [pc, #148]	; (8009150 <HAL_DMA_IRQHandler+0x6a4>)
 80090bc:	4293      	cmp	r3, r2
 80090be:	d031      	beq.n	8009124 <HAL_DMA_IRQHandler+0x678>
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	4a23      	ldr	r2, [pc, #140]	; (8009154 <HAL_DMA_IRQHandler+0x6a8>)
 80090c6:	4293      	cmp	r3, r2
 80090c8:	d02c      	beq.n	8009124 <HAL_DMA_IRQHandler+0x678>
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	4a22      	ldr	r2, [pc, #136]	; (8009158 <HAL_DMA_IRQHandler+0x6ac>)
 80090d0:	4293      	cmp	r3, r2
 80090d2:	d027      	beq.n	8009124 <HAL_DMA_IRQHandler+0x678>
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	4a20      	ldr	r2, [pc, #128]	; (800915c <HAL_DMA_IRQHandler+0x6b0>)
 80090da:	4293      	cmp	r3, r2
 80090dc:	d022      	beq.n	8009124 <HAL_DMA_IRQHandler+0x678>
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	4a1f      	ldr	r2, [pc, #124]	; (8009160 <HAL_DMA_IRQHandler+0x6b4>)
 80090e4:	4293      	cmp	r3, r2
 80090e6:	d01d      	beq.n	8009124 <HAL_DMA_IRQHandler+0x678>
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	4a1d      	ldr	r2, [pc, #116]	; (8009164 <HAL_DMA_IRQHandler+0x6b8>)
 80090ee:	4293      	cmp	r3, r2
 80090f0:	d018      	beq.n	8009124 <HAL_DMA_IRQHandler+0x678>
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	4a1c      	ldr	r2, [pc, #112]	; (8009168 <HAL_DMA_IRQHandler+0x6bc>)
 80090f8:	4293      	cmp	r3, r2
 80090fa:	d013      	beq.n	8009124 <HAL_DMA_IRQHandler+0x678>
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	4a1a      	ldr	r2, [pc, #104]	; (800916c <HAL_DMA_IRQHandler+0x6c0>)
 8009102:	4293      	cmp	r3, r2
 8009104:	d00e      	beq.n	8009124 <HAL_DMA_IRQHandler+0x678>
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	4a19      	ldr	r2, [pc, #100]	; (8009170 <HAL_DMA_IRQHandler+0x6c4>)
 800910c:	4293      	cmp	r3, r2
 800910e:	d009      	beq.n	8009124 <HAL_DMA_IRQHandler+0x678>
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	4a17      	ldr	r2, [pc, #92]	; (8009174 <HAL_DMA_IRQHandler+0x6c8>)
 8009116:	4293      	cmp	r3, r2
 8009118:	d004      	beq.n	8009124 <HAL_DMA_IRQHandler+0x678>
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	4a16      	ldr	r2, [pc, #88]	; (8009178 <HAL_DMA_IRQHandler+0x6cc>)
 8009120:	4293      	cmp	r3, r2
 8009122:	d12b      	bne.n	800917c <HAL_DMA_IRQHandler+0x6d0>
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f003 0310 	and.w	r3, r3, #16
 800912e:	2b00      	cmp	r3, #0
 8009130:	bf14      	ite	ne
 8009132:	2301      	movne	r3, #1
 8009134:	2300      	moveq	r3, #0
 8009136:	b2db      	uxtb	r3, r3
 8009138:	e02a      	b.n	8009190 <HAL_DMA_IRQHandler+0x6e4>
 800913a:	bf00      	nop
 800913c:	40020010 	.word	0x40020010
 8009140:	40020028 	.word	0x40020028
 8009144:	40020040 	.word	0x40020040
 8009148:	40020058 	.word	0x40020058
 800914c:	40020070 	.word	0x40020070
 8009150:	40020088 	.word	0x40020088
 8009154:	400200a0 	.word	0x400200a0
 8009158:	400200b8 	.word	0x400200b8
 800915c:	40020410 	.word	0x40020410
 8009160:	40020428 	.word	0x40020428
 8009164:	40020440 	.word	0x40020440
 8009168:	40020458 	.word	0x40020458
 800916c:	40020470 	.word	0x40020470
 8009170:	40020488 	.word	0x40020488
 8009174:	400204a0 	.word	0x400204a0
 8009178:	400204b8 	.word	0x400204b8
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f003 0302 	and.w	r3, r3, #2
 8009186:	2b00      	cmp	r3, #0
 8009188:	bf14      	ite	ne
 800918a:	2301      	movne	r3, #1
 800918c:	2300      	moveq	r3, #0
 800918e:	b2db      	uxtb	r3, r3
 8009190:	2b00      	cmp	r3, #0
 8009192:	f000 8087 	beq.w	80092a4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800919a:	f003 031f 	and.w	r3, r3, #31
 800919e:	2220      	movs	r2, #32
 80091a0:	409a      	lsls	r2, r3
 80091a2:	6a3b      	ldr	r3, [r7, #32]
 80091a4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80091ac:	b2db      	uxtb	r3, r3
 80091ae:	2b04      	cmp	r3, #4
 80091b0:	d139      	bne.n	8009226 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	681a      	ldr	r2, [r3, #0]
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	f022 0216 	bic.w	r2, r2, #22
 80091c0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	695a      	ldr	r2, [r3, #20]
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80091d0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d103      	bne.n	80091e2 <HAL_DMA_IRQHandler+0x736>
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d007      	beq.n	80091f2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	681a      	ldr	r2, [r3, #0]
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f022 0208 	bic.w	r2, r2, #8
 80091f0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091f6:	f003 031f 	and.w	r3, r3, #31
 80091fa:	223f      	movs	r2, #63	; 0x3f
 80091fc:	409a      	lsls	r2, r3
 80091fe:	6a3b      	ldr	r3, [r7, #32]
 8009200:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2201      	movs	r2, #1
 8009206:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2200      	movs	r2, #0
 800920e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009216:	2b00      	cmp	r3, #0
 8009218:	f000 834a 	beq.w	80098b0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	4798      	blx	r3
          }
          return;
 8009224:	e344      	b.n	80098b0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009230:	2b00      	cmp	r3, #0
 8009232:	d018      	beq.n	8009266 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800923e:	2b00      	cmp	r3, #0
 8009240:	d108      	bne.n	8009254 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009246:	2b00      	cmp	r3, #0
 8009248:	d02c      	beq.n	80092a4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	4798      	blx	r3
 8009252:	e027      	b.n	80092a4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009258:	2b00      	cmp	r3, #0
 800925a:	d023      	beq.n	80092a4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009260:	6878      	ldr	r0, [r7, #4]
 8009262:	4798      	blx	r3
 8009264:	e01e      	b.n	80092a4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009270:	2b00      	cmp	r3, #0
 8009272:	d10f      	bne.n	8009294 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	681a      	ldr	r2, [r3, #0]
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f022 0210 	bic.w	r2, r2, #16
 8009282:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2201      	movs	r2, #1
 8009288:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2200      	movs	r2, #0
 8009290:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009298:	2b00      	cmp	r3, #0
 800929a:	d003      	beq.n	80092a4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	f000 8306 	beq.w	80098ba <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092b2:	f003 0301 	and.w	r3, r3, #1
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	f000 8088 	beq.w	80093cc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2204      	movs	r2, #4
 80092c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	4a7a      	ldr	r2, [pc, #488]	; (80094b4 <HAL_DMA_IRQHandler+0xa08>)
 80092ca:	4293      	cmp	r3, r2
 80092cc:	d04a      	beq.n	8009364 <HAL_DMA_IRQHandler+0x8b8>
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	4a79      	ldr	r2, [pc, #484]	; (80094b8 <HAL_DMA_IRQHandler+0xa0c>)
 80092d4:	4293      	cmp	r3, r2
 80092d6:	d045      	beq.n	8009364 <HAL_DMA_IRQHandler+0x8b8>
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	4a77      	ldr	r2, [pc, #476]	; (80094bc <HAL_DMA_IRQHandler+0xa10>)
 80092de:	4293      	cmp	r3, r2
 80092e0:	d040      	beq.n	8009364 <HAL_DMA_IRQHandler+0x8b8>
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	4a76      	ldr	r2, [pc, #472]	; (80094c0 <HAL_DMA_IRQHandler+0xa14>)
 80092e8:	4293      	cmp	r3, r2
 80092ea:	d03b      	beq.n	8009364 <HAL_DMA_IRQHandler+0x8b8>
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	4a74      	ldr	r2, [pc, #464]	; (80094c4 <HAL_DMA_IRQHandler+0xa18>)
 80092f2:	4293      	cmp	r3, r2
 80092f4:	d036      	beq.n	8009364 <HAL_DMA_IRQHandler+0x8b8>
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	4a73      	ldr	r2, [pc, #460]	; (80094c8 <HAL_DMA_IRQHandler+0xa1c>)
 80092fc:	4293      	cmp	r3, r2
 80092fe:	d031      	beq.n	8009364 <HAL_DMA_IRQHandler+0x8b8>
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	4a71      	ldr	r2, [pc, #452]	; (80094cc <HAL_DMA_IRQHandler+0xa20>)
 8009306:	4293      	cmp	r3, r2
 8009308:	d02c      	beq.n	8009364 <HAL_DMA_IRQHandler+0x8b8>
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	4a70      	ldr	r2, [pc, #448]	; (80094d0 <HAL_DMA_IRQHandler+0xa24>)
 8009310:	4293      	cmp	r3, r2
 8009312:	d027      	beq.n	8009364 <HAL_DMA_IRQHandler+0x8b8>
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	4a6e      	ldr	r2, [pc, #440]	; (80094d4 <HAL_DMA_IRQHandler+0xa28>)
 800931a:	4293      	cmp	r3, r2
 800931c:	d022      	beq.n	8009364 <HAL_DMA_IRQHandler+0x8b8>
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	4a6d      	ldr	r2, [pc, #436]	; (80094d8 <HAL_DMA_IRQHandler+0xa2c>)
 8009324:	4293      	cmp	r3, r2
 8009326:	d01d      	beq.n	8009364 <HAL_DMA_IRQHandler+0x8b8>
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	4a6b      	ldr	r2, [pc, #428]	; (80094dc <HAL_DMA_IRQHandler+0xa30>)
 800932e:	4293      	cmp	r3, r2
 8009330:	d018      	beq.n	8009364 <HAL_DMA_IRQHandler+0x8b8>
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	4a6a      	ldr	r2, [pc, #424]	; (80094e0 <HAL_DMA_IRQHandler+0xa34>)
 8009338:	4293      	cmp	r3, r2
 800933a:	d013      	beq.n	8009364 <HAL_DMA_IRQHandler+0x8b8>
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	4a68      	ldr	r2, [pc, #416]	; (80094e4 <HAL_DMA_IRQHandler+0xa38>)
 8009342:	4293      	cmp	r3, r2
 8009344:	d00e      	beq.n	8009364 <HAL_DMA_IRQHandler+0x8b8>
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	4a67      	ldr	r2, [pc, #412]	; (80094e8 <HAL_DMA_IRQHandler+0xa3c>)
 800934c:	4293      	cmp	r3, r2
 800934e:	d009      	beq.n	8009364 <HAL_DMA_IRQHandler+0x8b8>
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	4a65      	ldr	r2, [pc, #404]	; (80094ec <HAL_DMA_IRQHandler+0xa40>)
 8009356:	4293      	cmp	r3, r2
 8009358:	d004      	beq.n	8009364 <HAL_DMA_IRQHandler+0x8b8>
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	4a64      	ldr	r2, [pc, #400]	; (80094f0 <HAL_DMA_IRQHandler+0xa44>)
 8009360:	4293      	cmp	r3, r2
 8009362:	d108      	bne.n	8009376 <HAL_DMA_IRQHandler+0x8ca>
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	681a      	ldr	r2, [r3, #0]
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f022 0201 	bic.w	r2, r2, #1
 8009372:	601a      	str	r2, [r3, #0]
 8009374:	e007      	b.n	8009386 <HAL_DMA_IRQHandler+0x8da>
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	681a      	ldr	r2, [r3, #0]
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f022 0201 	bic.w	r2, r2, #1
 8009384:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	3301      	adds	r3, #1
 800938a:	60fb      	str	r3, [r7, #12]
 800938c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800938e:	429a      	cmp	r2, r3
 8009390:	d307      	bcc.n	80093a2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f003 0301 	and.w	r3, r3, #1
 800939c:	2b00      	cmp	r3, #0
 800939e:	d1f2      	bne.n	8009386 <HAL_DMA_IRQHandler+0x8da>
 80093a0:	e000      	b.n	80093a4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80093a2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f003 0301 	and.w	r3, r3, #1
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d004      	beq.n	80093bc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2203      	movs	r2, #3
 80093b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80093ba:	e003      	b.n	80093c4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2201      	movs	r2, #1
 80093c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2200      	movs	r2, #0
 80093c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	f000 8272 	beq.w	80098ba <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	4798      	blx	r3
 80093de:	e26c      	b.n	80098ba <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	4a43      	ldr	r2, [pc, #268]	; (80094f4 <HAL_DMA_IRQHandler+0xa48>)
 80093e6:	4293      	cmp	r3, r2
 80093e8:	d022      	beq.n	8009430 <HAL_DMA_IRQHandler+0x984>
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	4a42      	ldr	r2, [pc, #264]	; (80094f8 <HAL_DMA_IRQHandler+0xa4c>)
 80093f0:	4293      	cmp	r3, r2
 80093f2:	d01d      	beq.n	8009430 <HAL_DMA_IRQHandler+0x984>
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	4a40      	ldr	r2, [pc, #256]	; (80094fc <HAL_DMA_IRQHandler+0xa50>)
 80093fa:	4293      	cmp	r3, r2
 80093fc:	d018      	beq.n	8009430 <HAL_DMA_IRQHandler+0x984>
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	4a3f      	ldr	r2, [pc, #252]	; (8009500 <HAL_DMA_IRQHandler+0xa54>)
 8009404:	4293      	cmp	r3, r2
 8009406:	d013      	beq.n	8009430 <HAL_DMA_IRQHandler+0x984>
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	4a3d      	ldr	r2, [pc, #244]	; (8009504 <HAL_DMA_IRQHandler+0xa58>)
 800940e:	4293      	cmp	r3, r2
 8009410:	d00e      	beq.n	8009430 <HAL_DMA_IRQHandler+0x984>
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	4a3c      	ldr	r2, [pc, #240]	; (8009508 <HAL_DMA_IRQHandler+0xa5c>)
 8009418:	4293      	cmp	r3, r2
 800941a:	d009      	beq.n	8009430 <HAL_DMA_IRQHandler+0x984>
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	4a3a      	ldr	r2, [pc, #232]	; (800950c <HAL_DMA_IRQHandler+0xa60>)
 8009422:	4293      	cmp	r3, r2
 8009424:	d004      	beq.n	8009430 <HAL_DMA_IRQHandler+0x984>
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	4a39      	ldr	r2, [pc, #228]	; (8009510 <HAL_DMA_IRQHandler+0xa64>)
 800942c:	4293      	cmp	r3, r2
 800942e:	d101      	bne.n	8009434 <HAL_DMA_IRQHandler+0x988>
 8009430:	2301      	movs	r3, #1
 8009432:	e000      	b.n	8009436 <HAL_DMA_IRQHandler+0x98a>
 8009434:	2300      	movs	r3, #0
 8009436:	2b00      	cmp	r3, #0
 8009438:	f000 823f 	beq.w	80098ba <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009448:	f003 031f 	and.w	r3, r3, #31
 800944c:	2204      	movs	r2, #4
 800944e:	409a      	lsls	r2, r3
 8009450:	697b      	ldr	r3, [r7, #20]
 8009452:	4013      	ands	r3, r2
 8009454:	2b00      	cmp	r3, #0
 8009456:	f000 80cd 	beq.w	80095f4 <HAL_DMA_IRQHandler+0xb48>
 800945a:	693b      	ldr	r3, [r7, #16]
 800945c:	f003 0304 	and.w	r3, r3, #4
 8009460:	2b00      	cmp	r3, #0
 8009462:	f000 80c7 	beq.w	80095f4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800946a:	f003 031f 	and.w	r3, r3, #31
 800946e:	2204      	movs	r2, #4
 8009470:	409a      	lsls	r2, r3
 8009472:	69fb      	ldr	r3, [r7, #28]
 8009474:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009476:	693b      	ldr	r3, [r7, #16]
 8009478:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800947c:	2b00      	cmp	r3, #0
 800947e:	d049      	beq.n	8009514 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8009480:	693b      	ldr	r3, [r7, #16]
 8009482:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009486:	2b00      	cmp	r3, #0
 8009488:	d109      	bne.n	800949e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800948e:	2b00      	cmp	r3, #0
 8009490:	f000 8210 	beq.w	80098b4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009498:	6878      	ldr	r0, [r7, #4]
 800949a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800949c:	e20a      	b.n	80098b4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	f000 8206 	beq.w	80098b4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80094b0:	e200      	b.n	80098b4 <HAL_DMA_IRQHandler+0xe08>
 80094b2:	bf00      	nop
 80094b4:	40020010 	.word	0x40020010
 80094b8:	40020028 	.word	0x40020028
 80094bc:	40020040 	.word	0x40020040
 80094c0:	40020058 	.word	0x40020058
 80094c4:	40020070 	.word	0x40020070
 80094c8:	40020088 	.word	0x40020088
 80094cc:	400200a0 	.word	0x400200a0
 80094d0:	400200b8 	.word	0x400200b8
 80094d4:	40020410 	.word	0x40020410
 80094d8:	40020428 	.word	0x40020428
 80094dc:	40020440 	.word	0x40020440
 80094e0:	40020458 	.word	0x40020458
 80094e4:	40020470 	.word	0x40020470
 80094e8:	40020488 	.word	0x40020488
 80094ec:	400204a0 	.word	0x400204a0
 80094f0:	400204b8 	.word	0x400204b8
 80094f4:	58025408 	.word	0x58025408
 80094f8:	5802541c 	.word	0x5802541c
 80094fc:	58025430 	.word	0x58025430
 8009500:	58025444 	.word	0x58025444
 8009504:	58025458 	.word	0x58025458
 8009508:	5802546c 	.word	0x5802546c
 800950c:	58025480 	.word	0x58025480
 8009510:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8009514:	693b      	ldr	r3, [r7, #16]
 8009516:	f003 0320 	and.w	r3, r3, #32
 800951a:	2b00      	cmp	r3, #0
 800951c:	d160      	bne.n	80095e0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	4a7f      	ldr	r2, [pc, #508]	; (8009720 <HAL_DMA_IRQHandler+0xc74>)
 8009524:	4293      	cmp	r3, r2
 8009526:	d04a      	beq.n	80095be <HAL_DMA_IRQHandler+0xb12>
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	4a7d      	ldr	r2, [pc, #500]	; (8009724 <HAL_DMA_IRQHandler+0xc78>)
 800952e:	4293      	cmp	r3, r2
 8009530:	d045      	beq.n	80095be <HAL_DMA_IRQHandler+0xb12>
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	4a7c      	ldr	r2, [pc, #496]	; (8009728 <HAL_DMA_IRQHandler+0xc7c>)
 8009538:	4293      	cmp	r3, r2
 800953a:	d040      	beq.n	80095be <HAL_DMA_IRQHandler+0xb12>
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	4a7a      	ldr	r2, [pc, #488]	; (800972c <HAL_DMA_IRQHandler+0xc80>)
 8009542:	4293      	cmp	r3, r2
 8009544:	d03b      	beq.n	80095be <HAL_DMA_IRQHandler+0xb12>
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	4a79      	ldr	r2, [pc, #484]	; (8009730 <HAL_DMA_IRQHandler+0xc84>)
 800954c:	4293      	cmp	r3, r2
 800954e:	d036      	beq.n	80095be <HAL_DMA_IRQHandler+0xb12>
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	4a77      	ldr	r2, [pc, #476]	; (8009734 <HAL_DMA_IRQHandler+0xc88>)
 8009556:	4293      	cmp	r3, r2
 8009558:	d031      	beq.n	80095be <HAL_DMA_IRQHandler+0xb12>
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	4a76      	ldr	r2, [pc, #472]	; (8009738 <HAL_DMA_IRQHandler+0xc8c>)
 8009560:	4293      	cmp	r3, r2
 8009562:	d02c      	beq.n	80095be <HAL_DMA_IRQHandler+0xb12>
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	4a74      	ldr	r2, [pc, #464]	; (800973c <HAL_DMA_IRQHandler+0xc90>)
 800956a:	4293      	cmp	r3, r2
 800956c:	d027      	beq.n	80095be <HAL_DMA_IRQHandler+0xb12>
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	4a73      	ldr	r2, [pc, #460]	; (8009740 <HAL_DMA_IRQHandler+0xc94>)
 8009574:	4293      	cmp	r3, r2
 8009576:	d022      	beq.n	80095be <HAL_DMA_IRQHandler+0xb12>
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	4a71      	ldr	r2, [pc, #452]	; (8009744 <HAL_DMA_IRQHandler+0xc98>)
 800957e:	4293      	cmp	r3, r2
 8009580:	d01d      	beq.n	80095be <HAL_DMA_IRQHandler+0xb12>
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	4a70      	ldr	r2, [pc, #448]	; (8009748 <HAL_DMA_IRQHandler+0xc9c>)
 8009588:	4293      	cmp	r3, r2
 800958a:	d018      	beq.n	80095be <HAL_DMA_IRQHandler+0xb12>
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	4a6e      	ldr	r2, [pc, #440]	; (800974c <HAL_DMA_IRQHandler+0xca0>)
 8009592:	4293      	cmp	r3, r2
 8009594:	d013      	beq.n	80095be <HAL_DMA_IRQHandler+0xb12>
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	4a6d      	ldr	r2, [pc, #436]	; (8009750 <HAL_DMA_IRQHandler+0xca4>)
 800959c:	4293      	cmp	r3, r2
 800959e:	d00e      	beq.n	80095be <HAL_DMA_IRQHandler+0xb12>
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	4a6b      	ldr	r2, [pc, #428]	; (8009754 <HAL_DMA_IRQHandler+0xca8>)
 80095a6:	4293      	cmp	r3, r2
 80095a8:	d009      	beq.n	80095be <HAL_DMA_IRQHandler+0xb12>
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	4a6a      	ldr	r2, [pc, #424]	; (8009758 <HAL_DMA_IRQHandler+0xcac>)
 80095b0:	4293      	cmp	r3, r2
 80095b2:	d004      	beq.n	80095be <HAL_DMA_IRQHandler+0xb12>
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	4a68      	ldr	r2, [pc, #416]	; (800975c <HAL_DMA_IRQHandler+0xcb0>)
 80095ba:	4293      	cmp	r3, r2
 80095bc:	d108      	bne.n	80095d0 <HAL_DMA_IRQHandler+0xb24>
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	681a      	ldr	r2, [r3, #0]
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	f022 0208 	bic.w	r2, r2, #8
 80095cc:	601a      	str	r2, [r3, #0]
 80095ce:	e007      	b.n	80095e0 <HAL_DMA_IRQHandler+0xb34>
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	681a      	ldr	r2, [r3, #0]
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f022 0204 	bic.w	r2, r2, #4
 80095de:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	f000 8165 	beq.w	80098b4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80095f2:	e15f      	b.n	80098b4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095f8:	f003 031f 	and.w	r3, r3, #31
 80095fc:	2202      	movs	r2, #2
 80095fe:	409a      	lsls	r2, r3
 8009600:	697b      	ldr	r3, [r7, #20]
 8009602:	4013      	ands	r3, r2
 8009604:	2b00      	cmp	r3, #0
 8009606:	f000 80c5 	beq.w	8009794 <HAL_DMA_IRQHandler+0xce8>
 800960a:	693b      	ldr	r3, [r7, #16]
 800960c:	f003 0302 	and.w	r3, r3, #2
 8009610:	2b00      	cmp	r3, #0
 8009612:	f000 80bf 	beq.w	8009794 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800961a:	f003 031f 	and.w	r3, r3, #31
 800961e:	2202      	movs	r2, #2
 8009620:	409a      	lsls	r2, r3
 8009622:	69fb      	ldr	r3, [r7, #28]
 8009624:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009626:	693b      	ldr	r3, [r7, #16]
 8009628:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800962c:	2b00      	cmp	r3, #0
 800962e:	d018      	beq.n	8009662 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8009630:	693b      	ldr	r3, [r7, #16]
 8009632:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009636:	2b00      	cmp	r3, #0
 8009638:	d109      	bne.n	800964e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800963e:	2b00      	cmp	r3, #0
 8009640:	f000 813a 	beq.w	80098b8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800964c:	e134      	b.n	80098b8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009652:	2b00      	cmp	r3, #0
 8009654:	f000 8130 	beq.w	80098b8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800965c:	6878      	ldr	r0, [r7, #4]
 800965e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009660:	e12a      	b.n	80098b8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8009662:	693b      	ldr	r3, [r7, #16]
 8009664:	f003 0320 	and.w	r3, r3, #32
 8009668:	2b00      	cmp	r3, #0
 800966a:	f040 8089 	bne.w	8009780 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	4a2b      	ldr	r2, [pc, #172]	; (8009720 <HAL_DMA_IRQHandler+0xc74>)
 8009674:	4293      	cmp	r3, r2
 8009676:	d04a      	beq.n	800970e <HAL_DMA_IRQHandler+0xc62>
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	4a29      	ldr	r2, [pc, #164]	; (8009724 <HAL_DMA_IRQHandler+0xc78>)
 800967e:	4293      	cmp	r3, r2
 8009680:	d045      	beq.n	800970e <HAL_DMA_IRQHandler+0xc62>
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	4a28      	ldr	r2, [pc, #160]	; (8009728 <HAL_DMA_IRQHandler+0xc7c>)
 8009688:	4293      	cmp	r3, r2
 800968a:	d040      	beq.n	800970e <HAL_DMA_IRQHandler+0xc62>
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	4a26      	ldr	r2, [pc, #152]	; (800972c <HAL_DMA_IRQHandler+0xc80>)
 8009692:	4293      	cmp	r3, r2
 8009694:	d03b      	beq.n	800970e <HAL_DMA_IRQHandler+0xc62>
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	4a25      	ldr	r2, [pc, #148]	; (8009730 <HAL_DMA_IRQHandler+0xc84>)
 800969c:	4293      	cmp	r3, r2
 800969e:	d036      	beq.n	800970e <HAL_DMA_IRQHandler+0xc62>
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	4a23      	ldr	r2, [pc, #140]	; (8009734 <HAL_DMA_IRQHandler+0xc88>)
 80096a6:	4293      	cmp	r3, r2
 80096a8:	d031      	beq.n	800970e <HAL_DMA_IRQHandler+0xc62>
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	4a22      	ldr	r2, [pc, #136]	; (8009738 <HAL_DMA_IRQHandler+0xc8c>)
 80096b0:	4293      	cmp	r3, r2
 80096b2:	d02c      	beq.n	800970e <HAL_DMA_IRQHandler+0xc62>
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	4a20      	ldr	r2, [pc, #128]	; (800973c <HAL_DMA_IRQHandler+0xc90>)
 80096ba:	4293      	cmp	r3, r2
 80096bc:	d027      	beq.n	800970e <HAL_DMA_IRQHandler+0xc62>
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	4a1f      	ldr	r2, [pc, #124]	; (8009740 <HAL_DMA_IRQHandler+0xc94>)
 80096c4:	4293      	cmp	r3, r2
 80096c6:	d022      	beq.n	800970e <HAL_DMA_IRQHandler+0xc62>
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	4a1d      	ldr	r2, [pc, #116]	; (8009744 <HAL_DMA_IRQHandler+0xc98>)
 80096ce:	4293      	cmp	r3, r2
 80096d0:	d01d      	beq.n	800970e <HAL_DMA_IRQHandler+0xc62>
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	4a1c      	ldr	r2, [pc, #112]	; (8009748 <HAL_DMA_IRQHandler+0xc9c>)
 80096d8:	4293      	cmp	r3, r2
 80096da:	d018      	beq.n	800970e <HAL_DMA_IRQHandler+0xc62>
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	4a1a      	ldr	r2, [pc, #104]	; (800974c <HAL_DMA_IRQHandler+0xca0>)
 80096e2:	4293      	cmp	r3, r2
 80096e4:	d013      	beq.n	800970e <HAL_DMA_IRQHandler+0xc62>
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	4a19      	ldr	r2, [pc, #100]	; (8009750 <HAL_DMA_IRQHandler+0xca4>)
 80096ec:	4293      	cmp	r3, r2
 80096ee:	d00e      	beq.n	800970e <HAL_DMA_IRQHandler+0xc62>
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	4a17      	ldr	r2, [pc, #92]	; (8009754 <HAL_DMA_IRQHandler+0xca8>)
 80096f6:	4293      	cmp	r3, r2
 80096f8:	d009      	beq.n	800970e <HAL_DMA_IRQHandler+0xc62>
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	4a16      	ldr	r2, [pc, #88]	; (8009758 <HAL_DMA_IRQHandler+0xcac>)
 8009700:	4293      	cmp	r3, r2
 8009702:	d004      	beq.n	800970e <HAL_DMA_IRQHandler+0xc62>
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	4a14      	ldr	r2, [pc, #80]	; (800975c <HAL_DMA_IRQHandler+0xcb0>)
 800970a:	4293      	cmp	r3, r2
 800970c:	d128      	bne.n	8009760 <HAL_DMA_IRQHandler+0xcb4>
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	681a      	ldr	r2, [r3, #0]
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f022 0214 	bic.w	r2, r2, #20
 800971c:	601a      	str	r2, [r3, #0]
 800971e:	e027      	b.n	8009770 <HAL_DMA_IRQHandler+0xcc4>
 8009720:	40020010 	.word	0x40020010
 8009724:	40020028 	.word	0x40020028
 8009728:	40020040 	.word	0x40020040
 800972c:	40020058 	.word	0x40020058
 8009730:	40020070 	.word	0x40020070
 8009734:	40020088 	.word	0x40020088
 8009738:	400200a0 	.word	0x400200a0
 800973c:	400200b8 	.word	0x400200b8
 8009740:	40020410 	.word	0x40020410
 8009744:	40020428 	.word	0x40020428
 8009748:	40020440 	.word	0x40020440
 800974c:	40020458 	.word	0x40020458
 8009750:	40020470 	.word	0x40020470
 8009754:	40020488 	.word	0x40020488
 8009758:	400204a0 	.word	0x400204a0
 800975c:	400204b8 	.word	0x400204b8
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	681a      	ldr	r2, [r3, #0]
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f022 020a 	bic.w	r2, r2, #10
 800976e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2201      	movs	r2, #1
 8009774:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2200      	movs	r2, #0
 800977c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009784:	2b00      	cmp	r3, #0
 8009786:	f000 8097 	beq.w	80098b8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009792:	e091      	b.n	80098b8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009798:	f003 031f 	and.w	r3, r3, #31
 800979c:	2208      	movs	r2, #8
 800979e:	409a      	lsls	r2, r3
 80097a0:	697b      	ldr	r3, [r7, #20]
 80097a2:	4013      	ands	r3, r2
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	f000 8088 	beq.w	80098ba <HAL_DMA_IRQHandler+0xe0e>
 80097aa:	693b      	ldr	r3, [r7, #16]
 80097ac:	f003 0308 	and.w	r3, r3, #8
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	f000 8082 	beq.w	80098ba <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	4a41      	ldr	r2, [pc, #260]	; (80098c0 <HAL_DMA_IRQHandler+0xe14>)
 80097bc:	4293      	cmp	r3, r2
 80097be:	d04a      	beq.n	8009856 <HAL_DMA_IRQHandler+0xdaa>
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	4a3f      	ldr	r2, [pc, #252]	; (80098c4 <HAL_DMA_IRQHandler+0xe18>)
 80097c6:	4293      	cmp	r3, r2
 80097c8:	d045      	beq.n	8009856 <HAL_DMA_IRQHandler+0xdaa>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	4a3e      	ldr	r2, [pc, #248]	; (80098c8 <HAL_DMA_IRQHandler+0xe1c>)
 80097d0:	4293      	cmp	r3, r2
 80097d2:	d040      	beq.n	8009856 <HAL_DMA_IRQHandler+0xdaa>
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	4a3c      	ldr	r2, [pc, #240]	; (80098cc <HAL_DMA_IRQHandler+0xe20>)
 80097da:	4293      	cmp	r3, r2
 80097dc:	d03b      	beq.n	8009856 <HAL_DMA_IRQHandler+0xdaa>
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	4a3b      	ldr	r2, [pc, #236]	; (80098d0 <HAL_DMA_IRQHandler+0xe24>)
 80097e4:	4293      	cmp	r3, r2
 80097e6:	d036      	beq.n	8009856 <HAL_DMA_IRQHandler+0xdaa>
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	4a39      	ldr	r2, [pc, #228]	; (80098d4 <HAL_DMA_IRQHandler+0xe28>)
 80097ee:	4293      	cmp	r3, r2
 80097f0:	d031      	beq.n	8009856 <HAL_DMA_IRQHandler+0xdaa>
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	4a38      	ldr	r2, [pc, #224]	; (80098d8 <HAL_DMA_IRQHandler+0xe2c>)
 80097f8:	4293      	cmp	r3, r2
 80097fa:	d02c      	beq.n	8009856 <HAL_DMA_IRQHandler+0xdaa>
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	4a36      	ldr	r2, [pc, #216]	; (80098dc <HAL_DMA_IRQHandler+0xe30>)
 8009802:	4293      	cmp	r3, r2
 8009804:	d027      	beq.n	8009856 <HAL_DMA_IRQHandler+0xdaa>
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	4a35      	ldr	r2, [pc, #212]	; (80098e0 <HAL_DMA_IRQHandler+0xe34>)
 800980c:	4293      	cmp	r3, r2
 800980e:	d022      	beq.n	8009856 <HAL_DMA_IRQHandler+0xdaa>
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	4a33      	ldr	r2, [pc, #204]	; (80098e4 <HAL_DMA_IRQHandler+0xe38>)
 8009816:	4293      	cmp	r3, r2
 8009818:	d01d      	beq.n	8009856 <HAL_DMA_IRQHandler+0xdaa>
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	4a32      	ldr	r2, [pc, #200]	; (80098e8 <HAL_DMA_IRQHandler+0xe3c>)
 8009820:	4293      	cmp	r3, r2
 8009822:	d018      	beq.n	8009856 <HAL_DMA_IRQHandler+0xdaa>
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	4a30      	ldr	r2, [pc, #192]	; (80098ec <HAL_DMA_IRQHandler+0xe40>)
 800982a:	4293      	cmp	r3, r2
 800982c:	d013      	beq.n	8009856 <HAL_DMA_IRQHandler+0xdaa>
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	4a2f      	ldr	r2, [pc, #188]	; (80098f0 <HAL_DMA_IRQHandler+0xe44>)
 8009834:	4293      	cmp	r3, r2
 8009836:	d00e      	beq.n	8009856 <HAL_DMA_IRQHandler+0xdaa>
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	4a2d      	ldr	r2, [pc, #180]	; (80098f4 <HAL_DMA_IRQHandler+0xe48>)
 800983e:	4293      	cmp	r3, r2
 8009840:	d009      	beq.n	8009856 <HAL_DMA_IRQHandler+0xdaa>
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	4a2c      	ldr	r2, [pc, #176]	; (80098f8 <HAL_DMA_IRQHandler+0xe4c>)
 8009848:	4293      	cmp	r3, r2
 800984a:	d004      	beq.n	8009856 <HAL_DMA_IRQHandler+0xdaa>
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	4a2a      	ldr	r2, [pc, #168]	; (80098fc <HAL_DMA_IRQHandler+0xe50>)
 8009852:	4293      	cmp	r3, r2
 8009854:	d108      	bne.n	8009868 <HAL_DMA_IRQHandler+0xdbc>
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	681a      	ldr	r2, [r3, #0]
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f022 021c 	bic.w	r2, r2, #28
 8009864:	601a      	str	r2, [r3, #0]
 8009866:	e007      	b.n	8009878 <HAL_DMA_IRQHandler+0xdcc>
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	681a      	ldr	r2, [r3, #0]
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	f022 020e 	bic.w	r2, r2, #14
 8009876:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800987c:	f003 031f 	and.w	r3, r3, #31
 8009880:	2201      	movs	r2, #1
 8009882:	409a      	lsls	r2, r3
 8009884:	69fb      	ldr	r3, [r7, #28]
 8009886:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2201      	movs	r2, #1
 800988c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2201      	movs	r2, #1
 8009892:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2200      	movs	r2, #0
 800989a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d009      	beq.n	80098ba <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098aa:	6878      	ldr	r0, [r7, #4]
 80098ac:	4798      	blx	r3
 80098ae:	e004      	b.n	80098ba <HAL_DMA_IRQHandler+0xe0e>
          return;
 80098b0:	bf00      	nop
 80098b2:	e002      	b.n	80098ba <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80098b4:	bf00      	nop
 80098b6:	e000      	b.n	80098ba <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80098b8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80098ba:	3728      	adds	r7, #40	; 0x28
 80098bc:	46bd      	mov	sp, r7
 80098be:	bd80      	pop	{r7, pc}
 80098c0:	40020010 	.word	0x40020010
 80098c4:	40020028 	.word	0x40020028
 80098c8:	40020040 	.word	0x40020040
 80098cc:	40020058 	.word	0x40020058
 80098d0:	40020070 	.word	0x40020070
 80098d4:	40020088 	.word	0x40020088
 80098d8:	400200a0 	.word	0x400200a0
 80098dc:	400200b8 	.word	0x400200b8
 80098e0:	40020410 	.word	0x40020410
 80098e4:	40020428 	.word	0x40020428
 80098e8:	40020440 	.word	0x40020440
 80098ec:	40020458 	.word	0x40020458
 80098f0:	40020470 	.word	0x40020470
 80098f4:	40020488 	.word	0x40020488
 80098f8:	400204a0 	.word	0x400204a0
 80098fc:	400204b8 	.word	0x400204b8

08009900 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009900:	b480      	push	{r7}
 8009902:	b087      	sub	sp, #28
 8009904:	af00      	add	r7, sp, #0
 8009906:	60f8      	str	r0, [r7, #12]
 8009908:	60b9      	str	r1, [r7, #8]
 800990a:	607a      	str	r2, [r7, #4]
 800990c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009912:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009918:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	4a7f      	ldr	r2, [pc, #508]	; (8009b1c <DMA_SetConfig+0x21c>)
 8009920:	4293      	cmp	r3, r2
 8009922:	d072      	beq.n	8009a0a <DMA_SetConfig+0x10a>
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	4a7d      	ldr	r2, [pc, #500]	; (8009b20 <DMA_SetConfig+0x220>)
 800992a:	4293      	cmp	r3, r2
 800992c:	d06d      	beq.n	8009a0a <DMA_SetConfig+0x10a>
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	4a7c      	ldr	r2, [pc, #496]	; (8009b24 <DMA_SetConfig+0x224>)
 8009934:	4293      	cmp	r3, r2
 8009936:	d068      	beq.n	8009a0a <DMA_SetConfig+0x10a>
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	4a7a      	ldr	r2, [pc, #488]	; (8009b28 <DMA_SetConfig+0x228>)
 800993e:	4293      	cmp	r3, r2
 8009940:	d063      	beq.n	8009a0a <DMA_SetConfig+0x10a>
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	4a79      	ldr	r2, [pc, #484]	; (8009b2c <DMA_SetConfig+0x22c>)
 8009948:	4293      	cmp	r3, r2
 800994a:	d05e      	beq.n	8009a0a <DMA_SetConfig+0x10a>
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	4a77      	ldr	r2, [pc, #476]	; (8009b30 <DMA_SetConfig+0x230>)
 8009952:	4293      	cmp	r3, r2
 8009954:	d059      	beq.n	8009a0a <DMA_SetConfig+0x10a>
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	4a76      	ldr	r2, [pc, #472]	; (8009b34 <DMA_SetConfig+0x234>)
 800995c:	4293      	cmp	r3, r2
 800995e:	d054      	beq.n	8009a0a <DMA_SetConfig+0x10a>
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	4a74      	ldr	r2, [pc, #464]	; (8009b38 <DMA_SetConfig+0x238>)
 8009966:	4293      	cmp	r3, r2
 8009968:	d04f      	beq.n	8009a0a <DMA_SetConfig+0x10a>
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	4a73      	ldr	r2, [pc, #460]	; (8009b3c <DMA_SetConfig+0x23c>)
 8009970:	4293      	cmp	r3, r2
 8009972:	d04a      	beq.n	8009a0a <DMA_SetConfig+0x10a>
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	4a71      	ldr	r2, [pc, #452]	; (8009b40 <DMA_SetConfig+0x240>)
 800997a:	4293      	cmp	r3, r2
 800997c:	d045      	beq.n	8009a0a <DMA_SetConfig+0x10a>
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	4a70      	ldr	r2, [pc, #448]	; (8009b44 <DMA_SetConfig+0x244>)
 8009984:	4293      	cmp	r3, r2
 8009986:	d040      	beq.n	8009a0a <DMA_SetConfig+0x10a>
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	4a6e      	ldr	r2, [pc, #440]	; (8009b48 <DMA_SetConfig+0x248>)
 800998e:	4293      	cmp	r3, r2
 8009990:	d03b      	beq.n	8009a0a <DMA_SetConfig+0x10a>
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	4a6d      	ldr	r2, [pc, #436]	; (8009b4c <DMA_SetConfig+0x24c>)
 8009998:	4293      	cmp	r3, r2
 800999a:	d036      	beq.n	8009a0a <DMA_SetConfig+0x10a>
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	4a6b      	ldr	r2, [pc, #428]	; (8009b50 <DMA_SetConfig+0x250>)
 80099a2:	4293      	cmp	r3, r2
 80099a4:	d031      	beq.n	8009a0a <DMA_SetConfig+0x10a>
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	4a6a      	ldr	r2, [pc, #424]	; (8009b54 <DMA_SetConfig+0x254>)
 80099ac:	4293      	cmp	r3, r2
 80099ae:	d02c      	beq.n	8009a0a <DMA_SetConfig+0x10a>
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	4a68      	ldr	r2, [pc, #416]	; (8009b58 <DMA_SetConfig+0x258>)
 80099b6:	4293      	cmp	r3, r2
 80099b8:	d027      	beq.n	8009a0a <DMA_SetConfig+0x10a>
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	4a67      	ldr	r2, [pc, #412]	; (8009b5c <DMA_SetConfig+0x25c>)
 80099c0:	4293      	cmp	r3, r2
 80099c2:	d022      	beq.n	8009a0a <DMA_SetConfig+0x10a>
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	4a65      	ldr	r2, [pc, #404]	; (8009b60 <DMA_SetConfig+0x260>)
 80099ca:	4293      	cmp	r3, r2
 80099cc:	d01d      	beq.n	8009a0a <DMA_SetConfig+0x10a>
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	4a64      	ldr	r2, [pc, #400]	; (8009b64 <DMA_SetConfig+0x264>)
 80099d4:	4293      	cmp	r3, r2
 80099d6:	d018      	beq.n	8009a0a <DMA_SetConfig+0x10a>
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	4a62      	ldr	r2, [pc, #392]	; (8009b68 <DMA_SetConfig+0x268>)
 80099de:	4293      	cmp	r3, r2
 80099e0:	d013      	beq.n	8009a0a <DMA_SetConfig+0x10a>
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	4a61      	ldr	r2, [pc, #388]	; (8009b6c <DMA_SetConfig+0x26c>)
 80099e8:	4293      	cmp	r3, r2
 80099ea:	d00e      	beq.n	8009a0a <DMA_SetConfig+0x10a>
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	4a5f      	ldr	r2, [pc, #380]	; (8009b70 <DMA_SetConfig+0x270>)
 80099f2:	4293      	cmp	r3, r2
 80099f4:	d009      	beq.n	8009a0a <DMA_SetConfig+0x10a>
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	4a5e      	ldr	r2, [pc, #376]	; (8009b74 <DMA_SetConfig+0x274>)
 80099fc:	4293      	cmp	r3, r2
 80099fe:	d004      	beq.n	8009a0a <DMA_SetConfig+0x10a>
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	4a5c      	ldr	r2, [pc, #368]	; (8009b78 <DMA_SetConfig+0x278>)
 8009a06:	4293      	cmp	r3, r2
 8009a08:	d101      	bne.n	8009a0e <DMA_SetConfig+0x10e>
 8009a0a:	2301      	movs	r3, #1
 8009a0c:	e000      	b.n	8009a10 <DMA_SetConfig+0x110>
 8009a0e:	2300      	movs	r3, #0
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d00d      	beq.n	8009a30 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a18:	68fa      	ldr	r2, [r7, #12]
 8009a1a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009a1c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d004      	beq.n	8009a30 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a2a:	68fa      	ldr	r2, [r7, #12]
 8009a2c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009a2e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	4a39      	ldr	r2, [pc, #228]	; (8009b1c <DMA_SetConfig+0x21c>)
 8009a36:	4293      	cmp	r3, r2
 8009a38:	d04a      	beq.n	8009ad0 <DMA_SetConfig+0x1d0>
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	4a38      	ldr	r2, [pc, #224]	; (8009b20 <DMA_SetConfig+0x220>)
 8009a40:	4293      	cmp	r3, r2
 8009a42:	d045      	beq.n	8009ad0 <DMA_SetConfig+0x1d0>
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	4a36      	ldr	r2, [pc, #216]	; (8009b24 <DMA_SetConfig+0x224>)
 8009a4a:	4293      	cmp	r3, r2
 8009a4c:	d040      	beq.n	8009ad0 <DMA_SetConfig+0x1d0>
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	4a35      	ldr	r2, [pc, #212]	; (8009b28 <DMA_SetConfig+0x228>)
 8009a54:	4293      	cmp	r3, r2
 8009a56:	d03b      	beq.n	8009ad0 <DMA_SetConfig+0x1d0>
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	4a33      	ldr	r2, [pc, #204]	; (8009b2c <DMA_SetConfig+0x22c>)
 8009a5e:	4293      	cmp	r3, r2
 8009a60:	d036      	beq.n	8009ad0 <DMA_SetConfig+0x1d0>
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	4a32      	ldr	r2, [pc, #200]	; (8009b30 <DMA_SetConfig+0x230>)
 8009a68:	4293      	cmp	r3, r2
 8009a6a:	d031      	beq.n	8009ad0 <DMA_SetConfig+0x1d0>
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	4a30      	ldr	r2, [pc, #192]	; (8009b34 <DMA_SetConfig+0x234>)
 8009a72:	4293      	cmp	r3, r2
 8009a74:	d02c      	beq.n	8009ad0 <DMA_SetConfig+0x1d0>
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	4a2f      	ldr	r2, [pc, #188]	; (8009b38 <DMA_SetConfig+0x238>)
 8009a7c:	4293      	cmp	r3, r2
 8009a7e:	d027      	beq.n	8009ad0 <DMA_SetConfig+0x1d0>
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	4a2d      	ldr	r2, [pc, #180]	; (8009b3c <DMA_SetConfig+0x23c>)
 8009a86:	4293      	cmp	r3, r2
 8009a88:	d022      	beq.n	8009ad0 <DMA_SetConfig+0x1d0>
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	4a2c      	ldr	r2, [pc, #176]	; (8009b40 <DMA_SetConfig+0x240>)
 8009a90:	4293      	cmp	r3, r2
 8009a92:	d01d      	beq.n	8009ad0 <DMA_SetConfig+0x1d0>
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	4a2a      	ldr	r2, [pc, #168]	; (8009b44 <DMA_SetConfig+0x244>)
 8009a9a:	4293      	cmp	r3, r2
 8009a9c:	d018      	beq.n	8009ad0 <DMA_SetConfig+0x1d0>
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	4a29      	ldr	r2, [pc, #164]	; (8009b48 <DMA_SetConfig+0x248>)
 8009aa4:	4293      	cmp	r3, r2
 8009aa6:	d013      	beq.n	8009ad0 <DMA_SetConfig+0x1d0>
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	4a27      	ldr	r2, [pc, #156]	; (8009b4c <DMA_SetConfig+0x24c>)
 8009aae:	4293      	cmp	r3, r2
 8009ab0:	d00e      	beq.n	8009ad0 <DMA_SetConfig+0x1d0>
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	4a26      	ldr	r2, [pc, #152]	; (8009b50 <DMA_SetConfig+0x250>)
 8009ab8:	4293      	cmp	r3, r2
 8009aba:	d009      	beq.n	8009ad0 <DMA_SetConfig+0x1d0>
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	4a24      	ldr	r2, [pc, #144]	; (8009b54 <DMA_SetConfig+0x254>)
 8009ac2:	4293      	cmp	r3, r2
 8009ac4:	d004      	beq.n	8009ad0 <DMA_SetConfig+0x1d0>
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	4a23      	ldr	r2, [pc, #140]	; (8009b58 <DMA_SetConfig+0x258>)
 8009acc:	4293      	cmp	r3, r2
 8009ace:	d101      	bne.n	8009ad4 <DMA_SetConfig+0x1d4>
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	e000      	b.n	8009ad6 <DMA_SetConfig+0x1d6>
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d059      	beq.n	8009b8e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ade:	f003 031f 	and.w	r3, r3, #31
 8009ae2:	223f      	movs	r2, #63	; 0x3f
 8009ae4:	409a      	lsls	r2, r3
 8009ae6:	697b      	ldr	r3, [r7, #20]
 8009ae8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	681a      	ldr	r2, [r3, #0]
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009af8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	683a      	ldr	r2, [r7, #0]
 8009b00:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	689b      	ldr	r3, [r3, #8]
 8009b06:	2b40      	cmp	r3, #64	; 0x40
 8009b08:	d138      	bne.n	8009b7c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	687a      	ldr	r2, [r7, #4]
 8009b10:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	68ba      	ldr	r2, [r7, #8]
 8009b18:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8009b1a:	e086      	b.n	8009c2a <DMA_SetConfig+0x32a>
 8009b1c:	40020010 	.word	0x40020010
 8009b20:	40020028 	.word	0x40020028
 8009b24:	40020040 	.word	0x40020040
 8009b28:	40020058 	.word	0x40020058
 8009b2c:	40020070 	.word	0x40020070
 8009b30:	40020088 	.word	0x40020088
 8009b34:	400200a0 	.word	0x400200a0
 8009b38:	400200b8 	.word	0x400200b8
 8009b3c:	40020410 	.word	0x40020410
 8009b40:	40020428 	.word	0x40020428
 8009b44:	40020440 	.word	0x40020440
 8009b48:	40020458 	.word	0x40020458
 8009b4c:	40020470 	.word	0x40020470
 8009b50:	40020488 	.word	0x40020488
 8009b54:	400204a0 	.word	0x400204a0
 8009b58:	400204b8 	.word	0x400204b8
 8009b5c:	58025408 	.word	0x58025408
 8009b60:	5802541c 	.word	0x5802541c
 8009b64:	58025430 	.word	0x58025430
 8009b68:	58025444 	.word	0x58025444
 8009b6c:	58025458 	.word	0x58025458
 8009b70:	5802546c 	.word	0x5802546c
 8009b74:	58025480 	.word	0x58025480
 8009b78:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	68ba      	ldr	r2, [r7, #8]
 8009b82:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	687a      	ldr	r2, [r7, #4]
 8009b8a:	60da      	str	r2, [r3, #12]
}
 8009b8c:	e04d      	b.n	8009c2a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	4a29      	ldr	r2, [pc, #164]	; (8009c38 <DMA_SetConfig+0x338>)
 8009b94:	4293      	cmp	r3, r2
 8009b96:	d022      	beq.n	8009bde <DMA_SetConfig+0x2de>
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	4a27      	ldr	r2, [pc, #156]	; (8009c3c <DMA_SetConfig+0x33c>)
 8009b9e:	4293      	cmp	r3, r2
 8009ba0:	d01d      	beq.n	8009bde <DMA_SetConfig+0x2de>
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	4a26      	ldr	r2, [pc, #152]	; (8009c40 <DMA_SetConfig+0x340>)
 8009ba8:	4293      	cmp	r3, r2
 8009baa:	d018      	beq.n	8009bde <DMA_SetConfig+0x2de>
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	4a24      	ldr	r2, [pc, #144]	; (8009c44 <DMA_SetConfig+0x344>)
 8009bb2:	4293      	cmp	r3, r2
 8009bb4:	d013      	beq.n	8009bde <DMA_SetConfig+0x2de>
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	4a23      	ldr	r2, [pc, #140]	; (8009c48 <DMA_SetConfig+0x348>)
 8009bbc:	4293      	cmp	r3, r2
 8009bbe:	d00e      	beq.n	8009bde <DMA_SetConfig+0x2de>
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	4a21      	ldr	r2, [pc, #132]	; (8009c4c <DMA_SetConfig+0x34c>)
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	d009      	beq.n	8009bde <DMA_SetConfig+0x2de>
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	4a20      	ldr	r2, [pc, #128]	; (8009c50 <DMA_SetConfig+0x350>)
 8009bd0:	4293      	cmp	r3, r2
 8009bd2:	d004      	beq.n	8009bde <DMA_SetConfig+0x2de>
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	4a1e      	ldr	r2, [pc, #120]	; (8009c54 <DMA_SetConfig+0x354>)
 8009bda:	4293      	cmp	r3, r2
 8009bdc:	d101      	bne.n	8009be2 <DMA_SetConfig+0x2e2>
 8009bde:	2301      	movs	r3, #1
 8009be0:	e000      	b.n	8009be4 <DMA_SetConfig+0x2e4>
 8009be2:	2300      	movs	r3, #0
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d020      	beq.n	8009c2a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009bec:	f003 031f 	and.w	r3, r3, #31
 8009bf0:	2201      	movs	r2, #1
 8009bf2:	409a      	lsls	r2, r3
 8009bf4:	693b      	ldr	r3, [r7, #16]
 8009bf6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	683a      	ldr	r2, [r7, #0]
 8009bfe:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	689b      	ldr	r3, [r3, #8]
 8009c04:	2b40      	cmp	r3, #64	; 0x40
 8009c06:	d108      	bne.n	8009c1a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	687a      	ldr	r2, [r7, #4]
 8009c0e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	68ba      	ldr	r2, [r7, #8]
 8009c16:	60da      	str	r2, [r3, #12]
}
 8009c18:	e007      	b.n	8009c2a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	68ba      	ldr	r2, [r7, #8]
 8009c20:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	687a      	ldr	r2, [r7, #4]
 8009c28:	60da      	str	r2, [r3, #12]
}
 8009c2a:	bf00      	nop
 8009c2c:	371c      	adds	r7, #28
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c34:	4770      	bx	lr
 8009c36:	bf00      	nop
 8009c38:	58025408 	.word	0x58025408
 8009c3c:	5802541c 	.word	0x5802541c
 8009c40:	58025430 	.word	0x58025430
 8009c44:	58025444 	.word	0x58025444
 8009c48:	58025458 	.word	0x58025458
 8009c4c:	5802546c 	.word	0x5802546c
 8009c50:	58025480 	.word	0x58025480
 8009c54:	58025494 	.word	0x58025494

08009c58 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009c58:	b480      	push	{r7}
 8009c5a:	b085      	sub	sp, #20
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	4a42      	ldr	r2, [pc, #264]	; (8009d70 <DMA_CalcBaseAndBitshift+0x118>)
 8009c66:	4293      	cmp	r3, r2
 8009c68:	d04a      	beq.n	8009d00 <DMA_CalcBaseAndBitshift+0xa8>
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	4a41      	ldr	r2, [pc, #260]	; (8009d74 <DMA_CalcBaseAndBitshift+0x11c>)
 8009c70:	4293      	cmp	r3, r2
 8009c72:	d045      	beq.n	8009d00 <DMA_CalcBaseAndBitshift+0xa8>
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	4a3f      	ldr	r2, [pc, #252]	; (8009d78 <DMA_CalcBaseAndBitshift+0x120>)
 8009c7a:	4293      	cmp	r3, r2
 8009c7c:	d040      	beq.n	8009d00 <DMA_CalcBaseAndBitshift+0xa8>
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	4a3e      	ldr	r2, [pc, #248]	; (8009d7c <DMA_CalcBaseAndBitshift+0x124>)
 8009c84:	4293      	cmp	r3, r2
 8009c86:	d03b      	beq.n	8009d00 <DMA_CalcBaseAndBitshift+0xa8>
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	4a3c      	ldr	r2, [pc, #240]	; (8009d80 <DMA_CalcBaseAndBitshift+0x128>)
 8009c8e:	4293      	cmp	r3, r2
 8009c90:	d036      	beq.n	8009d00 <DMA_CalcBaseAndBitshift+0xa8>
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	4a3b      	ldr	r2, [pc, #236]	; (8009d84 <DMA_CalcBaseAndBitshift+0x12c>)
 8009c98:	4293      	cmp	r3, r2
 8009c9a:	d031      	beq.n	8009d00 <DMA_CalcBaseAndBitshift+0xa8>
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	4a39      	ldr	r2, [pc, #228]	; (8009d88 <DMA_CalcBaseAndBitshift+0x130>)
 8009ca2:	4293      	cmp	r3, r2
 8009ca4:	d02c      	beq.n	8009d00 <DMA_CalcBaseAndBitshift+0xa8>
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	4a38      	ldr	r2, [pc, #224]	; (8009d8c <DMA_CalcBaseAndBitshift+0x134>)
 8009cac:	4293      	cmp	r3, r2
 8009cae:	d027      	beq.n	8009d00 <DMA_CalcBaseAndBitshift+0xa8>
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	4a36      	ldr	r2, [pc, #216]	; (8009d90 <DMA_CalcBaseAndBitshift+0x138>)
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	d022      	beq.n	8009d00 <DMA_CalcBaseAndBitshift+0xa8>
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	4a35      	ldr	r2, [pc, #212]	; (8009d94 <DMA_CalcBaseAndBitshift+0x13c>)
 8009cc0:	4293      	cmp	r3, r2
 8009cc2:	d01d      	beq.n	8009d00 <DMA_CalcBaseAndBitshift+0xa8>
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	4a33      	ldr	r2, [pc, #204]	; (8009d98 <DMA_CalcBaseAndBitshift+0x140>)
 8009cca:	4293      	cmp	r3, r2
 8009ccc:	d018      	beq.n	8009d00 <DMA_CalcBaseAndBitshift+0xa8>
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	4a32      	ldr	r2, [pc, #200]	; (8009d9c <DMA_CalcBaseAndBitshift+0x144>)
 8009cd4:	4293      	cmp	r3, r2
 8009cd6:	d013      	beq.n	8009d00 <DMA_CalcBaseAndBitshift+0xa8>
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	4a30      	ldr	r2, [pc, #192]	; (8009da0 <DMA_CalcBaseAndBitshift+0x148>)
 8009cde:	4293      	cmp	r3, r2
 8009ce0:	d00e      	beq.n	8009d00 <DMA_CalcBaseAndBitshift+0xa8>
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	4a2f      	ldr	r2, [pc, #188]	; (8009da4 <DMA_CalcBaseAndBitshift+0x14c>)
 8009ce8:	4293      	cmp	r3, r2
 8009cea:	d009      	beq.n	8009d00 <DMA_CalcBaseAndBitshift+0xa8>
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	4a2d      	ldr	r2, [pc, #180]	; (8009da8 <DMA_CalcBaseAndBitshift+0x150>)
 8009cf2:	4293      	cmp	r3, r2
 8009cf4:	d004      	beq.n	8009d00 <DMA_CalcBaseAndBitshift+0xa8>
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	4a2c      	ldr	r2, [pc, #176]	; (8009dac <DMA_CalcBaseAndBitshift+0x154>)
 8009cfc:	4293      	cmp	r3, r2
 8009cfe:	d101      	bne.n	8009d04 <DMA_CalcBaseAndBitshift+0xac>
 8009d00:	2301      	movs	r3, #1
 8009d02:	e000      	b.n	8009d06 <DMA_CalcBaseAndBitshift+0xae>
 8009d04:	2300      	movs	r3, #0
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d024      	beq.n	8009d54 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	b2db      	uxtb	r3, r3
 8009d10:	3b10      	subs	r3, #16
 8009d12:	4a27      	ldr	r2, [pc, #156]	; (8009db0 <DMA_CalcBaseAndBitshift+0x158>)
 8009d14:	fba2 2303 	umull	r2, r3, r2, r3
 8009d18:	091b      	lsrs	r3, r3, #4
 8009d1a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	f003 0307 	and.w	r3, r3, #7
 8009d22:	4a24      	ldr	r2, [pc, #144]	; (8009db4 <DMA_CalcBaseAndBitshift+0x15c>)
 8009d24:	5cd3      	ldrb	r3, [r2, r3]
 8009d26:	461a      	mov	r2, r3
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	2b03      	cmp	r3, #3
 8009d30:	d908      	bls.n	8009d44 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	461a      	mov	r2, r3
 8009d38:	4b1f      	ldr	r3, [pc, #124]	; (8009db8 <DMA_CalcBaseAndBitshift+0x160>)
 8009d3a:	4013      	ands	r3, r2
 8009d3c:	1d1a      	adds	r2, r3, #4
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	659a      	str	r2, [r3, #88]	; 0x58
 8009d42:	e00d      	b.n	8009d60 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	461a      	mov	r2, r3
 8009d4a:	4b1b      	ldr	r3, [pc, #108]	; (8009db8 <DMA_CalcBaseAndBitshift+0x160>)
 8009d4c:	4013      	ands	r3, r2
 8009d4e:	687a      	ldr	r2, [r7, #4]
 8009d50:	6593      	str	r3, [r2, #88]	; 0x58
 8009d52:	e005      	b.n	8009d60 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8009d64:	4618      	mov	r0, r3
 8009d66:	3714      	adds	r7, #20
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6e:	4770      	bx	lr
 8009d70:	40020010 	.word	0x40020010
 8009d74:	40020028 	.word	0x40020028
 8009d78:	40020040 	.word	0x40020040
 8009d7c:	40020058 	.word	0x40020058
 8009d80:	40020070 	.word	0x40020070
 8009d84:	40020088 	.word	0x40020088
 8009d88:	400200a0 	.word	0x400200a0
 8009d8c:	400200b8 	.word	0x400200b8
 8009d90:	40020410 	.word	0x40020410
 8009d94:	40020428 	.word	0x40020428
 8009d98:	40020440 	.word	0x40020440
 8009d9c:	40020458 	.word	0x40020458
 8009da0:	40020470 	.word	0x40020470
 8009da4:	40020488 	.word	0x40020488
 8009da8:	400204a0 	.word	0x400204a0
 8009dac:	400204b8 	.word	0x400204b8
 8009db0:	aaaaaaab 	.word	0xaaaaaaab
 8009db4:	08011c48 	.word	0x08011c48
 8009db8:	fffffc00 	.word	0xfffffc00

08009dbc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009dbc:	b480      	push	{r7}
 8009dbe:	b085      	sub	sp, #20
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	699b      	ldr	r3, [r3, #24]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d120      	bne.n	8009e12 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dd4:	2b03      	cmp	r3, #3
 8009dd6:	d858      	bhi.n	8009e8a <DMA_CheckFifoParam+0xce>
 8009dd8:	a201      	add	r2, pc, #4	; (adr r2, 8009de0 <DMA_CheckFifoParam+0x24>)
 8009dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dde:	bf00      	nop
 8009de0:	08009df1 	.word	0x08009df1
 8009de4:	08009e03 	.word	0x08009e03
 8009de8:	08009df1 	.word	0x08009df1
 8009dec:	08009e8b 	.word	0x08009e8b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009df4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d048      	beq.n	8009e8e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8009dfc:	2301      	movs	r3, #1
 8009dfe:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009e00:	e045      	b.n	8009e8e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e06:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009e0a:	d142      	bne.n	8009e92 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8009e0c:	2301      	movs	r3, #1
 8009e0e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009e10:	e03f      	b.n	8009e92 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	699b      	ldr	r3, [r3, #24]
 8009e16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e1a:	d123      	bne.n	8009e64 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e20:	2b03      	cmp	r3, #3
 8009e22:	d838      	bhi.n	8009e96 <DMA_CheckFifoParam+0xda>
 8009e24:	a201      	add	r2, pc, #4	; (adr r2, 8009e2c <DMA_CheckFifoParam+0x70>)
 8009e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e2a:	bf00      	nop
 8009e2c:	08009e3d 	.word	0x08009e3d
 8009e30:	08009e43 	.word	0x08009e43
 8009e34:	08009e3d 	.word	0x08009e3d
 8009e38:	08009e55 	.word	0x08009e55
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	73fb      	strb	r3, [r7, #15]
        break;
 8009e40:	e030      	b.n	8009ea4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d025      	beq.n	8009e9a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8009e4e:	2301      	movs	r3, #1
 8009e50:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009e52:	e022      	b.n	8009e9a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e58:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009e5c:	d11f      	bne.n	8009e9e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8009e5e:	2301      	movs	r3, #1
 8009e60:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009e62:	e01c      	b.n	8009e9e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e68:	2b02      	cmp	r3, #2
 8009e6a:	d902      	bls.n	8009e72 <DMA_CheckFifoParam+0xb6>
 8009e6c:	2b03      	cmp	r3, #3
 8009e6e:	d003      	beq.n	8009e78 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8009e70:	e018      	b.n	8009ea4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8009e72:	2301      	movs	r3, #1
 8009e74:	73fb      	strb	r3, [r7, #15]
        break;
 8009e76:	e015      	b.n	8009ea4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d00e      	beq.n	8009ea2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8009e84:	2301      	movs	r3, #1
 8009e86:	73fb      	strb	r3, [r7, #15]
    break;
 8009e88:	e00b      	b.n	8009ea2 <DMA_CheckFifoParam+0xe6>
        break;
 8009e8a:	bf00      	nop
 8009e8c:	e00a      	b.n	8009ea4 <DMA_CheckFifoParam+0xe8>
        break;
 8009e8e:	bf00      	nop
 8009e90:	e008      	b.n	8009ea4 <DMA_CheckFifoParam+0xe8>
        break;
 8009e92:	bf00      	nop
 8009e94:	e006      	b.n	8009ea4 <DMA_CheckFifoParam+0xe8>
        break;
 8009e96:	bf00      	nop
 8009e98:	e004      	b.n	8009ea4 <DMA_CheckFifoParam+0xe8>
        break;
 8009e9a:	bf00      	nop
 8009e9c:	e002      	b.n	8009ea4 <DMA_CheckFifoParam+0xe8>
        break;
 8009e9e:	bf00      	nop
 8009ea0:	e000      	b.n	8009ea4 <DMA_CheckFifoParam+0xe8>
    break;
 8009ea2:	bf00      	nop
    }
  }

  return status;
 8009ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	3714      	adds	r7, #20
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb0:	4770      	bx	lr
 8009eb2:	bf00      	nop

08009eb4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009eb4:	b480      	push	{r7}
 8009eb6:	b085      	sub	sp, #20
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	4a38      	ldr	r2, [pc, #224]	; (8009fa8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8009ec8:	4293      	cmp	r3, r2
 8009eca:	d022      	beq.n	8009f12 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	4a36      	ldr	r2, [pc, #216]	; (8009fac <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8009ed2:	4293      	cmp	r3, r2
 8009ed4:	d01d      	beq.n	8009f12 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	4a35      	ldr	r2, [pc, #212]	; (8009fb0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8009edc:	4293      	cmp	r3, r2
 8009ede:	d018      	beq.n	8009f12 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	4a33      	ldr	r2, [pc, #204]	; (8009fb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8009ee6:	4293      	cmp	r3, r2
 8009ee8:	d013      	beq.n	8009f12 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	4a32      	ldr	r2, [pc, #200]	; (8009fb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8009ef0:	4293      	cmp	r3, r2
 8009ef2:	d00e      	beq.n	8009f12 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	4a30      	ldr	r2, [pc, #192]	; (8009fbc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8009efa:	4293      	cmp	r3, r2
 8009efc:	d009      	beq.n	8009f12 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	4a2f      	ldr	r2, [pc, #188]	; (8009fc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8009f04:	4293      	cmp	r3, r2
 8009f06:	d004      	beq.n	8009f12 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	4a2d      	ldr	r2, [pc, #180]	; (8009fc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8009f0e:	4293      	cmp	r3, r2
 8009f10:	d101      	bne.n	8009f16 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8009f12:	2301      	movs	r3, #1
 8009f14:	e000      	b.n	8009f18 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8009f16:	2300      	movs	r3, #0
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d01a      	beq.n	8009f52 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	b2db      	uxtb	r3, r3
 8009f22:	3b08      	subs	r3, #8
 8009f24:	4a28      	ldr	r2, [pc, #160]	; (8009fc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8009f26:	fba2 2303 	umull	r2, r3, r2, r3
 8009f2a:	091b      	lsrs	r3, r3, #4
 8009f2c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8009f2e:	68fa      	ldr	r2, [r7, #12]
 8009f30:	4b26      	ldr	r3, [pc, #152]	; (8009fcc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8009f32:	4413      	add	r3, r2
 8009f34:	009b      	lsls	r3, r3, #2
 8009f36:	461a      	mov	r2, r3
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	4a24      	ldr	r2, [pc, #144]	; (8009fd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8009f40:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	f003 031f 	and.w	r3, r3, #31
 8009f48:	2201      	movs	r2, #1
 8009f4a:	409a      	lsls	r2, r3
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8009f50:	e024      	b.n	8009f9c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	b2db      	uxtb	r3, r3
 8009f58:	3b10      	subs	r3, #16
 8009f5a:	4a1e      	ldr	r2, [pc, #120]	; (8009fd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8009f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8009f60:	091b      	lsrs	r3, r3, #4
 8009f62:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8009f64:	68bb      	ldr	r3, [r7, #8]
 8009f66:	4a1c      	ldr	r2, [pc, #112]	; (8009fd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8009f68:	4293      	cmp	r3, r2
 8009f6a:	d806      	bhi.n	8009f7a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	4a1b      	ldr	r2, [pc, #108]	; (8009fdc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8009f70:	4293      	cmp	r3, r2
 8009f72:	d902      	bls.n	8009f7a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	3308      	adds	r3, #8
 8009f78:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8009f7a:	68fa      	ldr	r2, [r7, #12]
 8009f7c:	4b18      	ldr	r3, [pc, #96]	; (8009fe0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8009f7e:	4413      	add	r3, r2
 8009f80:	009b      	lsls	r3, r3, #2
 8009f82:	461a      	mov	r2, r3
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	4a16      	ldr	r2, [pc, #88]	; (8009fe4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8009f8c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	f003 031f 	and.w	r3, r3, #31
 8009f94:	2201      	movs	r2, #1
 8009f96:	409a      	lsls	r2, r3
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8009f9c:	bf00      	nop
 8009f9e:	3714      	adds	r7, #20
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa6:	4770      	bx	lr
 8009fa8:	58025408 	.word	0x58025408
 8009fac:	5802541c 	.word	0x5802541c
 8009fb0:	58025430 	.word	0x58025430
 8009fb4:	58025444 	.word	0x58025444
 8009fb8:	58025458 	.word	0x58025458
 8009fbc:	5802546c 	.word	0x5802546c
 8009fc0:	58025480 	.word	0x58025480
 8009fc4:	58025494 	.word	0x58025494
 8009fc8:	cccccccd 	.word	0xcccccccd
 8009fcc:	16009600 	.word	0x16009600
 8009fd0:	58025880 	.word	0x58025880
 8009fd4:	aaaaaaab 	.word	0xaaaaaaab
 8009fd8:	400204b8 	.word	0x400204b8
 8009fdc:	4002040f 	.word	0x4002040f
 8009fe0:	10008200 	.word	0x10008200
 8009fe4:	40020880 	.word	0x40020880

08009fe8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009fe8:	b480      	push	{r7}
 8009fea:	b085      	sub	sp, #20
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	685b      	ldr	r3, [r3, #4]
 8009ff4:	b2db      	uxtb	r3, r3
 8009ff6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d04a      	beq.n	800a094 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	2b08      	cmp	r3, #8
 800a002:	d847      	bhi.n	800a094 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	4a25      	ldr	r2, [pc, #148]	; (800a0a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800a00a:	4293      	cmp	r3, r2
 800a00c:	d022      	beq.n	800a054 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	4a24      	ldr	r2, [pc, #144]	; (800a0a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800a014:	4293      	cmp	r3, r2
 800a016:	d01d      	beq.n	800a054 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	4a22      	ldr	r2, [pc, #136]	; (800a0a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800a01e:	4293      	cmp	r3, r2
 800a020:	d018      	beq.n	800a054 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	4a21      	ldr	r2, [pc, #132]	; (800a0ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800a028:	4293      	cmp	r3, r2
 800a02a:	d013      	beq.n	800a054 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	4a1f      	ldr	r2, [pc, #124]	; (800a0b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800a032:	4293      	cmp	r3, r2
 800a034:	d00e      	beq.n	800a054 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	4a1e      	ldr	r2, [pc, #120]	; (800a0b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800a03c:	4293      	cmp	r3, r2
 800a03e:	d009      	beq.n	800a054 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	4a1c      	ldr	r2, [pc, #112]	; (800a0b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800a046:	4293      	cmp	r3, r2
 800a048:	d004      	beq.n	800a054 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	4a1b      	ldr	r2, [pc, #108]	; (800a0bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800a050:	4293      	cmp	r3, r2
 800a052:	d101      	bne.n	800a058 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800a054:	2301      	movs	r3, #1
 800a056:	e000      	b.n	800a05a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800a058:	2300      	movs	r3, #0
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d00a      	beq.n	800a074 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800a05e:	68fa      	ldr	r2, [r7, #12]
 800a060:	4b17      	ldr	r3, [pc, #92]	; (800a0c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800a062:	4413      	add	r3, r2
 800a064:	009b      	lsls	r3, r3, #2
 800a066:	461a      	mov	r2, r3
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	4a15      	ldr	r2, [pc, #84]	; (800a0c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800a070:	671a      	str	r2, [r3, #112]	; 0x70
 800a072:	e009      	b.n	800a088 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800a074:	68fa      	ldr	r2, [r7, #12]
 800a076:	4b14      	ldr	r3, [pc, #80]	; (800a0c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800a078:	4413      	add	r3, r2
 800a07a:	009b      	lsls	r3, r3, #2
 800a07c:	461a      	mov	r2, r3
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	4a11      	ldr	r2, [pc, #68]	; (800a0cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800a086:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	3b01      	subs	r3, #1
 800a08c:	2201      	movs	r2, #1
 800a08e:	409a      	lsls	r2, r3
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800a094:	bf00      	nop
 800a096:	3714      	adds	r7, #20
 800a098:	46bd      	mov	sp, r7
 800a09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09e:	4770      	bx	lr
 800a0a0:	58025408 	.word	0x58025408
 800a0a4:	5802541c 	.word	0x5802541c
 800a0a8:	58025430 	.word	0x58025430
 800a0ac:	58025444 	.word	0x58025444
 800a0b0:	58025458 	.word	0x58025458
 800a0b4:	5802546c 	.word	0x5802546c
 800a0b8:	58025480 	.word	0x58025480
 800a0bc:	58025494 	.word	0x58025494
 800a0c0:	1600963f 	.word	0x1600963f
 800a0c4:	58025940 	.word	0x58025940
 800a0c8:	1000823f 	.word	0x1000823f
 800a0cc:	40020940 	.word	0x40020940

0800a0d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a0d0:	b480      	push	{r7}
 800a0d2:	b089      	sub	sp, #36	; 0x24
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
 800a0d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800a0de:	4b86      	ldr	r3, [pc, #536]	; (800a2f8 <HAL_GPIO_Init+0x228>)
 800a0e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a0e2:	e18c      	b.n	800a3fe <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	681a      	ldr	r2, [r3, #0]
 800a0e8:	2101      	movs	r1, #1
 800a0ea:	69fb      	ldr	r3, [r7, #28]
 800a0ec:	fa01 f303 	lsl.w	r3, r1, r3
 800a0f0:	4013      	ands	r3, r2
 800a0f2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800a0f4:	693b      	ldr	r3, [r7, #16]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	f000 817e 	beq.w	800a3f8 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	685b      	ldr	r3, [r3, #4]
 800a100:	f003 0303 	and.w	r3, r3, #3
 800a104:	2b01      	cmp	r3, #1
 800a106:	d005      	beq.n	800a114 <HAL_GPIO_Init+0x44>
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	685b      	ldr	r3, [r3, #4]
 800a10c:	f003 0303 	and.w	r3, r3, #3
 800a110:	2b02      	cmp	r3, #2
 800a112:	d130      	bne.n	800a176 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	689b      	ldr	r3, [r3, #8]
 800a118:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a11a:	69fb      	ldr	r3, [r7, #28]
 800a11c:	005b      	lsls	r3, r3, #1
 800a11e:	2203      	movs	r2, #3
 800a120:	fa02 f303 	lsl.w	r3, r2, r3
 800a124:	43db      	mvns	r3, r3
 800a126:	69ba      	ldr	r2, [r7, #24]
 800a128:	4013      	ands	r3, r2
 800a12a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	68da      	ldr	r2, [r3, #12]
 800a130:	69fb      	ldr	r3, [r7, #28]
 800a132:	005b      	lsls	r3, r3, #1
 800a134:	fa02 f303 	lsl.w	r3, r2, r3
 800a138:	69ba      	ldr	r2, [r7, #24]
 800a13a:	4313      	orrs	r3, r2
 800a13c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	69ba      	ldr	r2, [r7, #24]
 800a142:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	685b      	ldr	r3, [r3, #4]
 800a148:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a14a:	2201      	movs	r2, #1
 800a14c:	69fb      	ldr	r3, [r7, #28]
 800a14e:	fa02 f303 	lsl.w	r3, r2, r3
 800a152:	43db      	mvns	r3, r3
 800a154:	69ba      	ldr	r2, [r7, #24]
 800a156:	4013      	ands	r3, r2
 800a158:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	685b      	ldr	r3, [r3, #4]
 800a15e:	091b      	lsrs	r3, r3, #4
 800a160:	f003 0201 	and.w	r2, r3, #1
 800a164:	69fb      	ldr	r3, [r7, #28]
 800a166:	fa02 f303 	lsl.w	r3, r2, r3
 800a16a:	69ba      	ldr	r2, [r7, #24]
 800a16c:	4313      	orrs	r3, r2
 800a16e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	69ba      	ldr	r2, [r7, #24]
 800a174:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	685b      	ldr	r3, [r3, #4]
 800a17a:	f003 0303 	and.w	r3, r3, #3
 800a17e:	2b03      	cmp	r3, #3
 800a180:	d017      	beq.n	800a1b2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	68db      	ldr	r3, [r3, #12]
 800a186:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a188:	69fb      	ldr	r3, [r7, #28]
 800a18a:	005b      	lsls	r3, r3, #1
 800a18c:	2203      	movs	r2, #3
 800a18e:	fa02 f303 	lsl.w	r3, r2, r3
 800a192:	43db      	mvns	r3, r3
 800a194:	69ba      	ldr	r2, [r7, #24]
 800a196:	4013      	ands	r3, r2
 800a198:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	689a      	ldr	r2, [r3, #8]
 800a19e:	69fb      	ldr	r3, [r7, #28]
 800a1a0:	005b      	lsls	r3, r3, #1
 800a1a2:	fa02 f303 	lsl.w	r3, r2, r3
 800a1a6:	69ba      	ldr	r2, [r7, #24]
 800a1a8:	4313      	orrs	r3, r2
 800a1aa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	69ba      	ldr	r2, [r7, #24]
 800a1b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	685b      	ldr	r3, [r3, #4]
 800a1b6:	f003 0303 	and.w	r3, r3, #3
 800a1ba:	2b02      	cmp	r3, #2
 800a1bc:	d123      	bne.n	800a206 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a1be:	69fb      	ldr	r3, [r7, #28]
 800a1c0:	08da      	lsrs	r2, r3, #3
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	3208      	adds	r2, #8
 800a1c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a1cc:	69fb      	ldr	r3, [r7, #28]
 800a1ce:	f003 0307 	and.w	r3, r3, #7
 800a1d2:	009b      	lsls	r3, r3, #2
 800a1d4:	220f      	movs	r2, #15
 800a1d6:	fa02 f303 	lsl.w	r3, r2, r3
 800a1da:	43db      	mvns	r3, r3
 800a1dc:	69ba      	ldr	r2, [r7, #24]
 800a1de:	4013      	ands	r3, r2
 800a1e0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	691a      	ldr	r2, [r3, #16]
 800a1e6:	69fb      	ldr	r3, [r7, #28]
 800a1e8:	f003 0307 	and.w	r3, r3, #7
 800a1ec:	009b      	lsls	r3, r3, #2
 800a1ee:	fa02 f303 	lsl.w	r3, r2, r3
 800a1f2:	69ba      	ldr	r2, [r7, #24]
 800a1f4:	4313      	orrs	r3, r2
 800a1f6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a1f8:	69fb      	ldr	r3, [r7, #28]
 800a1fa:	08da      	lsrs	r2, r3, #3
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	3208      	adds	r2, #8
 800a200:	69b9      	ldr	r1, [r7, #24]
 800a202:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a20c:	69fb      	ldr	r3, [r7, #28]
 800a20e:	005b      	lsls	r3, r3, #1
 800a210:	2203      	movs	r2, #3
 800a212:	fa02 f303 	lsl.w	r3, r2, r3
 800a216:	43db      	mvns	r3, r3
 800a218:	69ba      	ldr	r2, [r7, #24]
 800a21a:	4013      	ands	r3, r2
 800a21c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	685b      	ldr	r3, [r3, #4]
 800a222:	f003 0203 	and.w	r2, r3, #3
 800a226:	69fb      	ldr	r3, [r7, #28]
 800a228:	005b      	lsls	r3, r3, #1
 800a22a:	fa02 f303 	lsl.w	r3, r2, r3
 800a22e:	69ba      	ldr	r2, [r7, #24]
 800a230:	4313      	orrs	r3, r2
 800a232:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	69ba      	ldr	r2, [r7, #24]
 800a238:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	685b      	ldr	r3, [r3, #4]
 800a23e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a242:	2b00      	cmp	r3, #0
 800a244:	f000 80d8 	beq.w	800a3f8 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a248:	4b2c      	ldr	r3, [pc, #176]	; (800a2fc <HAL_GPIO_Init+0x22c>)
 800a24a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a24e:	4a2b      	ldr	r2, [pc, #172]	; (800a2fc <HAL_GPIO_Init+0x22c>)
 800a250:	f043 0302 	orr.w	r3, r3, #2
 800a254:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800a258:	4b28      	ldr	r3, [pc, #160]	; (800a2fc <HAL_GPIO_Init+0x22c>)
 800a25a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a25e:	f003 0302 	and.w	r3, r3, #2
 800a262:	60fb      	str	r3, [r7, #12]
 800a264:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a266:	4a26      	ldr	r2, [pc, #152]	; (800a300 <HAL_GPIO_Init+0x230>)
 800a268:	69fb      	ldr	r3, [r7, #28]
 800a26a:	089b      	lsrs	r3, r3, #2
 800a26c:	3302      	adds	r3, #2
 800a26e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a272:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a274:	69fb      	ldr	r3, [r7, #28]
 800a276:	f003 0303 	and.w	r3, r3, #3
 800a27a:	009b      	lsls	r3, r3, #2
 800a27c:	220f      	movs	r2, #15
 800a27e:	fa02 f303 	lsl.w	r3, r2, r3
 800a282:	43db      	mvns	r3, r3
 800a284:	69ba      	ldr	r2, [r7, #24]
 800a286:	4013      	ands	r3, r2
 800a288:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	4a1d      	ldr	r2, [pc, #116]	; (800a304 <HAL_GPIO_Init+0x234>)
 800a28e:	4293      	cmp	r3, r2
 800a290:	d04a      	beq.n	800a328 <HAL_GPIO_Init+0x258>
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	4a1c      	ldr	r2, [pc, #112]	; (800a308 <HAL_GPIO_Init+0x238>)
 800a296:	4293      	cmp	r3, r2
 800a298:	d02b      	beq.n	800a2f2 <HAL_GPIO_Init+0x222>
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	4a1b      	ldr	r2, [pc, #108]	; (800a30c <HAL_GPIO_Init+0x23c>)
 800a29e:	4293      	cmp	r3, r2
 800a2a0:	d025      	beq.n	800a2ee <HAL_GPIO_Init+0x21e>
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	4a1a      	ldr	r2, [pc, #104]	; (800a310 <HAL_GPIO_Init+0x240>)
 800a2a6:	4293      	cmp	r3, r2
 800a2a8:	d01f      	beq.n	800a2ea <HAL_GPIO_Init+0x21a>
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	4a19      	ldr	r2, [pc, #100]	; (800a314 <HAL_GPIO_Init+0x244>)
 800a2ae:	4293      	cmp	r3, r2
 800a2b0:	d019      	beq.n	800a2e6 <HAL_GPIO_Init+0x216>
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	4a18      	ldr	r2, [pc, #96]	; (800a318 <HAL_GPIO_Init+0x248>)
 800a2b6:	4293      	cmp	r3, r2
 800a2b8:	d013      	beq.n	800a2e2 <HAL_GPIO_Init+0x212>
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	4a17      	ldr	r2, [pc, #92]	; (800a31c <HAL_GPIO_Init+0x24c>)
 800a2be:	4293      	cmp	r3, r2
 800a2c0:	d00d      	beq.n	800a2de <HAL_GPIO_Init+0x20e>
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	4a16      	ldr	r2, [pc, #88]	; (800a320 <HAL_GPIO_Init+0x250>)
 800a2c6:	4293      	cmp	r3, r2
 800a2c8:	d007      	beq.n	800a2da <HAL_GPIO_Init+0x20a>
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	4a15      	ldr	r2, [pc, #84]	; (800a324 <HAL_GPIO_Init+0x254>)
 800a2ce:	4293      	cmp	r3, r2
 800a2d0:	d101      	bne.n	800a2d6 <HAL_GPIO_Init+0x206>
 800a2d2:	2309      	movs	r3, #9
 800a2d4:	e029      	b.n	800a32a <HAL_GPIO_Init+0x25a>
 800a2d6:	230a      	movs	r3, #10
 800a2d8:	e027      	b.n	800a32a <HAL_GPIO_Init+0x25a>
 800a2da:	2307      	movs	r3, #7
 800a2dc:	e025      	b.n	800a32a <HAL_GPIO_Init+0x25a>
 800a2de:	2306      	movs	r3, #6
 800a2e0:	e023      	b.n	800a32a <HAL_GPIO_Init+0x25a>
 800a2e2:	2305      	movs	r3, #5
 800a2e4:	e021      	b.n	800a32a <HAL_GPIO_Init+0x25a>
 800a2e6:	2304      	movs	r3, #4
 800a2e8:	e01f      	b.n	800a32a <HAL_GPIO_Init+0x25a>
 800a2ea:	2303      	movs	r3, #3
 800a2ec:	e01d      	b.n	800a32a <HAL_GPIO_Init+0x25a>
 800a2ee:	2302      	movs	r3, #2
 800a2f0:	e01b      	b.n	800a32a <HAL_GPIO_Init+0x25a>
 800a2f2:	2301      	movs	r3, #1
 800a2f4:	e019      	b.n	800a32a <HAL_GPIO_Init+0x25a>
 800a2f6:	bf00      	nop
 800a2f8:	58000080 	.word	0x58000080
 800a2fc:	58024400 	.word	0x58024400
 800a300:	58000400 	.word	0x58000400
 800a304:	58020000 	.word	0x58020000
 800a308:	58020400 	.word	0x58020400
 800a30c:	58020800 	.word	0x58020800
 800a310:	58020c00 	.word	0x58020c00
 800a314:	58021000 	.word	0x58021000
 800a318:	58021400 	.word	0x58021400
 800a31c:	58021800 	.word	0x58021800
 800a320:	58021c00 	.word	0x58021c00
 800a324:	58022400 	.word	0x58022400
 800a328:	2300      	movs	r3, #0
 800a32a:	69fa      	ldr	r2, [r7, #28]
 800a32c:	f002 0203 	and.w	r2, r2, #3
 800a330:	0092      	lsls	r2, r2, #2
 800a332:	4093      	lsls	r3, r2
 800a334:	69ba      	ldr	r2, [r7, #24]
 800a336:	4313      	orrs	r3, r2
 800a338:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a33a:	4938      	ldr	r1, [pc, #224]	; (800a41c <HAL_GPIO_Init+0x34c>)
 800a33c:	69fb      	ldr	r3, [r7, #28]
 800a33e:	089b      	lsrs	r3, r3, #2
 800a340:	3302      	adds	r3, #2
 800a342:	69ba      	ldr	r2, [r7, #24]
 800a344:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a348:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a350:	693b      	ldr	r3, [r7, #16]
 800a352:	43db      	mvns	r3, r3
 800a354:	69ba      	ldr	r2, [r7, #24]
 800a356:	4013      	ands	r3, r2
 800a358:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	685b      	ldr	r3, [r3, #4]
 800a35e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a362:	2b00      	cmp	r3, #0
 800a364:	d003      	beq.n	800a36e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800a366:	69ba      	ldr	r2, [r7, #24]
 800a368:	693b      	ldr	r3, [r7, #16]
 800a36a:	4313      	orrs	r3, r2
 800a36c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800a36e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a372:	69bb      	ldr	r3, [r7, #24]
 800a374:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800a376:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a37a:	685b      	ldr	r3, [r3, #4]
 800a37c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a37e:	693b      	ldr	r3, [r7, #16]
 800a380:	43db      	mvns	r3, r3
 800a382:	69ba      	ldr	r2, [r7, #24]
 800a384:	4013      	ands	r3, r2
 800a386:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	685b      	ldr	r3, [r3, #4]
 800a38c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a390:	2b00      	cmp	r3, #0
 800a392:	d003      	beq.n	800a39c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800a394:	69ba      	ldr	r2, [r7, #24]
 800a396:	693b      	ldr	r3, [r7, #16]
 800a398:	4313      	orrs	r3, r2
 800a39a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800a39c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a3a0:	69bb      	ldr	r3, [r7, #24]
 800a3a2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800a3a4:	697b      	ldr	r3, [r7, #20]
 800a3a6:	685b      	ldr	r3, [r3, #4]
 800a3a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a3aa:	693b      	ldr	r3, [r7, #16]
 800a3ac:	43db      	mvns	r3, r3
 800a3ae:	69ba      	ldr	r2, [r7, #24]
 800a3b0:	4013      	ands	r3, r2
 800a3b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	685b      	ldr	r3, [r3, #4]
 800a3b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d003      	beq.n	800a3c8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800a3c0:	69ba      	ldr	r2, [r7, #24]
 800a3c2:	693b      	ldr	r3, [r7, #16]
 800a3c4:	4313      	orrs	r3, r2
 800a3c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800a3c8:	697b      	ldr	r3, [r7, #20]
 800a3ca:	69ba      	ldr	r2, [r7, #24]
 800a3cc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800a3ce:	697b      	ldr	r3, [r7, #20]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a3d4:	693b      	ldr	r3, [r7, #16]
 800a3d6:	43db      	mvns	r3, r3
 800a3d8:	69ba      	ldr	r2, [r7, #24]
 800a3da:	4013      	ands	r3, r2
 800a3dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	685b      	ldr	r3, [r3, #4]
 800a3e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d003      	beq.n	800a3f2 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800a3ea:	69ba      	ldr	r2, [r7, #24]
 800a3ec:	693b      	ldr	r3, [r7, #16]
 800a3ee:	4313      	orrs	r3, r2
 800a3f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800a3f2:	697b      	ldr	r3, [r7, #20]
 800a3f4:	69ba      	ldr	r2, [r7, #24]
 800a3f6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800a3f8:	69fb      	ldr	r3, [r7, #28]
 800a3fa:	3301      	adds	r3, #1
 800a3fc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	681a      	ldr	r2, [r3, #0]
 800a402:	69fb      	ldr	r3, [r7, #28]
 800a404:	fa22 f303 	lsr.w	r3, r2, r3
 800a408:	2b00      	cmp	r3, #0
 800a40a:	f47f ae6b 	bne.w	800a0e4 <HAL_GPIO_Init+0x14>
  }
}
 800a40e:	bf00      	nop
 800a410:	bf00      	nop
 800a412:	3724      	adds	r7, #36	; 0x24
 800a414:	46bd      	mov	sp, r7
 800a416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41a:	4770      	bx	lr
 800a41c:	58000400 	.word	0x58000400

0800a420 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800a420:	b480      	push	{r7}
 800a422:	b087      	sub	sp, #28
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
 800a428:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a42a:	2300      	movs	r3, #0
 800a42c:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800a42e:	4b72      	ldr	r3, [pc, #456]	; (800a5f8 <HAL_GPIO_DeInit+0x1d8>)
 800a430:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800a432:	e0d3      	b.n	800a5dc <HAL_GPIO_DeInit+0x1bc>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 800a434:	2201      	movs	r2, #1
 800a436:	697b      	ldr	r3, [r7, #20]
 800a438:	fa02 f303 	lsl.w	r3, r2, r3
 800a43c:	683a      	ldr	r2, [r7, #0]
 800a43e:	4013      	ands	r3, r2
 800a440:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	2b00      	cmp	r3, #0
 800a446:	f000 80c6 	beq.w	800a5d6 <HAL_GPIO_DeInit+0x1b6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 800a44a:	4a6c      	ldr	r2, [pc, #432]	; (800a5fc <HAL_GPIO_DeInit+0x1dc>)
 800a44c:	697b      	ldr	r3, [r7, #20]
 800a44e:	089b      	lsrs	r3, r3, #2
 800a450:	3302      	adds	r3, #2
 800a452:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a456:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800a458:	697b      	ldr	r3, [r7, #20]
 800a45a:	f003 0303 	and.w	r3, r3, #3
 800a45e:	009b      	lsls	r3, r3, #2
 800a460:	220f      	movs	r2, #15
 800a462:	fa02 f303 	lsl.w	r3, r2, r3
 800a466:	68ba      	ldr	r2, [r7, #8]
 800a468:	4013      	ands	r3, r2
 800a46a:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	4a64      	ldr	r2, [pc, #400]	; (800a600 <HAL_GPIO_DeInit+0x1e0>)
 800a470:	4293      	cmp	r3, r2
 800a472:	d031      	beq.n	800a4d8 <HAL_GPIO_DeInit+0xb8>
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	4a63      	ldr	r2, [pc, #396]	; (800a604 <HAL_GPIO_DeInit+0x1e4>)
 800a478:	4293      	cmp	r3, r2
 800a47a:	d02b      	beq.n	800a4d4 <HAL_GPIO_DeInit+0xb4>
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	4a62      	ldr	r2, [pc, #392]	; (800a608 <HAL_GPIO_DeInit+0x1e8>)
 800a480:	4293      	cmp	r3, r2
 800a482:	d025      	beq.n	800a4d0 <HAL_GPIO_DeInit+0xb0>
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	4a61      	ldr	r2, [pc, #388]	; (800a60c <HAL_GPIO_DeInit+0x1ec>)
 800a488:	4293      	cmp	r3, r2
 800a48a:	d01f      	beq.n	800a4cc <HAL_GPIO_DeInit+0xac>
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	4a60      	ldr	r2, [pc, #384]	; (800a610 <HAL_GPIO_DeInit+0x1f0>)
 800a490:	4293      	cmp	r3, r2
 800a492:	d019      	beq.n	800a4c8 <HAL_GPIO_DeInit+0xa8>
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	4a5f      	ldr	r2, [pc, #380]	; (800a614 <HAL_GPIO_DeInit+0x1f4>)
 800a498:	4293      	cmp	r3, r2
 800a49a:	d013      	beq.n	800a4c4 <HAL_GPIO_DeInit+0xa4>
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	4a5e      	ldr	r2, [pc, #376]	; (800a618 <HAL_GPIO_DeInit+0x1f8>)
 800a4a0:	4293      	cmp	r3, r2
 800a4a2:	d00d      	beq.n	800a4c0 <HAL_GPIO_DeInit+0xa0>
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	4a5d      	ldr	r2, [pc, #372]	; (800a61c <HAL_GPIO_DeInit+0x1fc>)
 800a4a8:	4293      	cmp	r3, r2
 800a4aa:	d007      	beq.n	800a4bc <HAL_GPIO_DeInit+0x9c>
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	4a5c      	ldr	r2, [pc, #368]	; (800a620 <HAL_GPIO_DeInit+0x200>)
 800a4b0:	4293      	cmp	r3, r2
 800a4b2:	d101      	bne.n	800a4b8 <HAL_GPIO_DeInit+0x98>
 800a4b4:	2309      	movs	r3, #9
 800a4b6:	e010      	b.n	800a4da <HAL_GPIO_DeInit+0xba>
 800a4b8:	230a      	movs	r3, #10
 800a4ba:	e00e      	b.n	800a4da <HAL_GPIO_DeInit+0xba>
 800a4bc:	2307      	movs	r3, #7
 800a4be:	e00c      	b.n	800a4da <HAL_GPIO_DeInit+0xba>
 800a4c0:	2306      	movs	r3, #6
 800a4c2:	e00a      	b.n	800a4da <HAL_GPIO_DeInit+0xba>
 800a4c4:	2305      	movs	r3, #5
 800a4c6:	e008      	b.n	800a4da <HAL_GPIO_DeInit+0xba>
 800a4c8:	2304      	movs	r3, #4
 800a4ca:	e006      	b.n	800a4da <HAL_GPIO_DeInit+0xba>
 800a4cc:	2303      	movs	r3, #3
 800a4ce:	e004      	b.n	800a4da <HAL_GPIO_DeInit+0xba>
 800a4d0:	2302      	movs	r3, #2
 800a4d2:	e002      	b.n	800a4da <HAL_GPIO_DeInit+0xba>
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	e000      	b.n	800a4da <HAL_GPIO_DeInit+0xba>
 800a4d8:	2300      	movs	r3, #0
 800a4da:	697a      	ldr	r2, [r7, #20]
 800a4dc:	f002 0203 	and.w	r2, r2, #3
 800a4e0:	0092      	lsls	r2, r2, #2
 800a4e2:	4093      	lsls	r3, r2
 800a4e4:	68ba      	ldr	r2, [r7, #8]
 800a4e6:	429a      	cmp	r2, r3
 800a4e8:	d136      	bne.n	800a558 <HAL_GPIO_DeInit+0x138>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800a4ea:	693b      	ldr	r3, [r7, #16]
 800a4ec:	681a      	ldr	r2, [r3, #0]
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	43db      	mvns	r3, r3
 800a4f2:	401a      	ands	r2, r3
 800a4f4:	693b      	ldr	r3, [r7, #16]
 800a4f6:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 800a4f8:	693b      	ldr	r3, [r7, #16]
 800a4fa:	685a      	ldr	r2, [r3, #4]
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	43db      	mvns	r3, r3
 800a500:	401a      	ands	r2, r3
 800a502:	693b      	ldr	r3, [r7, #16]
 800a504:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800a506:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a50a:	685a      	ldr	r2, [r3, #4]
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	43db      	mvns	r3, r3
 800a510:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a514:	4013      	ands	r3, r2
 800a516:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800a518:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a51c:	681a      	ldr	r2, [r3, #0]
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	43db      	mvns	r3, r3
 800a522:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a526:	4013      	ands	r3, r2
 800a528:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800a52a:	697b      	ldr	r3, [r7, #20]
 800a52c:	f003 0303 	and.w	r3, r3, #3
 800a530:	009b      	lsls	r3, r3, #2
 800a532:	220f      	movs	r2, #15
 800a534:	fa02 f303 	lsl.w	r3, r2, r3
 800a538:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800a53a:	4a30      	ldr	r2, [pc, #192]	; (800a5fc <HAL_GPIO_DeInit+0x1dc>)
 800a53c:	697b      	ldr	r3, [r7, #20]
 800a53e:	089b      	lsrs	r3, r3, #2
 800a540:	3302      	adds	r3, #2
 800a542:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a546:	68bb      	ldr	r3, [r7, #8]
 800a548:	43da      	mvns	r2, r3
 800a54a:	482c      	ldr	r0, [pc, #176]	; (800a5fc <HAL_GPIO_DeInit+0x1dc>)
 800a54c:	697b      	ldr	r3, [r7, #20]
 800a54e:	089b      	lsrs	r3, r3, #2
 800a550:	400a      	ands	r2, r1
 800a552:	3302      	adds	r3, #2
 800a554:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681a      	ldr	r2, [r3, #0]
 800a55c:	697b      	ldr	r3, [r7, #20]
 800a55e:	005b      	lsls	r3, r3, #1
 800a560:	2103      	movs	r1, #3
 800a562:	fa01 f303 	lsl.w	r3, r1, r3
 800a566:	431a      	orrs	r2, r3
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800a56c:	697b      	ldr	r3, [r7, #20]
 800a56e:	08da      	lsrs	r2, r3, #3
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	3208      	adds	r2, #8
 800a574:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a578:	697b      	ldr	r3, [r7, #20]
 800a57a:	f003 0307 	and.w	r3, r3, #7
 800a57e:	009b      	lsls	r3, r3, #2
 800a580:	220f      	movs	r2, #15
 800a582:	fa02 f303 	lsl.w	r3, r2, r3
 800a586:	43db      	mvns	r3, r3
 800a588:	697a      	ldr	r2, [r7, #20]
 800a58a:	08d2      	lsrs	r2, r2, #3
 800a58c:	4019      	ands	r1, r3
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	3208      	adds	r2, #8
 800a592:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	68da      	ldr	r2, [r3, #12]
 800a59a:	697b      	ldr	r3, [r7, #20]
 800a59c:	005b      	lsls	r3, r3, #1
 800a59e:	2103      	movs	r1, #3
 800a5a0:	fa01 f303 	lsl.w	r3, r1, r3
 800a5a4:	43db      	mvns	r3, r3
 800a5a6:	401a      	ands	r2, r3
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	685a      	ldr	r2, [r3, #4]
 800a5b0:	2101      	movs	r1, #1
 800a5b2:	697b      	ldr	r3, [r7, #20]
 800a5b4:	fa01 f303 	lsl.w	r3, r1, r3
 800a5b8:	43db      	mvns	r3, r3
 800a5ba:	401a      	ands	r2, r3
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	689a      	ldr	r2, [r3, #8]
 800a5c4:	697b      	ldr	r3, [r7, #20]
 800a5c6:	005b      	lsls	r3, r3, #1
 800a5c8:	2103      	movs	r1, #3
 800a5ca:	fa01 f303 	lsl.w	r3, r1, r3
 800a5ce:	43db      	mvns	r3, r3
 800a5d0:	401a      	ands	r2, r3
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	609a      	str	r2, [r3, #8]
    }

    position++;
 800a5d6:	697b      	ldr	r3, [r7, #20]
 800a5d8:	3301      	adds	r3, #1
 800a5da:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 800a5dc:	683a      	ldr	r2, [r7, #0]
 800a5de:	697b      	ldr	r3, [r7, #20]
 800a5e0:	fa22 f303 	lsr.w	r3, r2, r3
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	f47f af25 	bne.w	800a434 <HAL_GPIO_DeInit+0x14>
  }
}
 800a5ea:	bf00      	nop
 800a5ec:	bf00      	nop
 800a5ee:	371c      	adds	r7, #28
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f6:	4770      	bx	lr
 800a5f8:	58000080 	.word	0x58000080
 800a5fc:	58000400 	.word	0x58000400
 800a600:	58020000 	.word	0x58020000
 800a604:	58020400 	.word	0x58020400
 800a608:	58020800 	.word	0x58020800
 800a60c:	58020c00 	.word	0x58020c00
 800a610:	58021000 	.word	0x58021000
 800a614:	58021400 	.word	0x58021400
 800a618:	58021800 	.word	0x58021800
 800a61c:	58021c00 	.word	0x58021c00
 800a620:	58022400 	.word	0x58022400

0800a624 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a624:	b480      	push	{r7}
 800a626:	b085      	sub	sp, #20
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
 800a62c:	460b      	mov	r3, r1
 800a62e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	691a      	ldr	r2, [r3, #16]
 800a634:	887b      	ldrh	r3, [r7, #2]
 800a636:	4013      	ands	r3, r2
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d002      	beq.n	800a642 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a63c:	2301      	movs	r3, #1
 800a63e:	73fb      	strb	r3, [r7, #15]
 800a640:	e001      	b.n	800a646 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a642:	2300      	movs	r3, #0
 800a644:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a646:	7bfb      	ldrb	r3, [r7, #15]
}
 800a648:	4618      	mov	r0, r3
 800a64a:	3714      	adds	r7, #20
 800a64c:	46bd      	mov	sp, r7
 800a64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a652:	4770      	bx	lr

0800a654 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a654:	b480      	push	{r7}
 800a656:	b083      	sub	sp, #12
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
 800a65c:	460b      	mov	r3, r1
 800a65e:	807b      	strh	r3, [r7, #2]
 800a660:	4613      	mov	r3, r2
 800a662:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a664:	787b      	ldrb	r3, [r7, #1]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d003      	beq.n	800a672 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a66a:	887a      	ldrh	r2, [r7, #2]
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800a670:	e003      	b.n	800a67a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800a672:	887b      	ldrh	r3, [r7, #2]
 800a674:	041a      	lsls	r2, r3, #16
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	619a      	str	r2, [r3, #24]
}
 800a67a:	bf00      	nop
 800a67c:	370c      	adds	r7, #12
 800a67e:	46bd      	mov	sp, r7
 800a680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a684:	4770      	bx	lr
	...

0800a688 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b084      	sub	sp, #16
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800a690:	4b19      	ldr	r3, [pc, #100]	; (800a6f8 <HAL_PWREx_ConfigSupply+0x70>)
 800a692:	68db      	ldr	r3, [r3, #12]
 800a694:	f003 0304 	and.w	r3, r3, #4
 800a698:	2b04      	cmp	r3, #4
 800a69a:	d00a      	beq.n	800a6b2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a69c:	4b16      	ldr	r3, [pc, #88]	; (800a6f8 <HAL_PWREx_ConfigSupply+0x70>)
 800a69e:	68db      	ldr	r3, [r3, #12]
 800a6a0:	f003 0307 	and.w	r3, r3, #7
 800a6a4:	687a      	ldr	r2, [r7, #4]
 800a6a6:	429a      	cmp	r2, r3
 800a6a8:	d001      	beq.n	800a6ae <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	e01f      	b.n	800a6ee <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	e01d      	b.n	800a6ee <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a6b2:	4b11      	ldr	r3, [pc, #68]	; (800a6f8 <HAL_PWREx_ConfigSupply+0x70>)
 800a6b4:	68db      	ldr	r3, [r3, #12]
 800a6b6:	f023 0207 	bic.w	r2, r3, #7
 800a6ba:	490f      	ldr	r1, [pc, #60]	; (800a6f8 <HAL_PWREx_ConfigSupply+0x70>)
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	4313      	orrs	r3, r2
 800a6c0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a6c2:	f7fc fbc7 	bl	8006e54 <HAL_GetTick>
 800a6c6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a6c8:	e009      	b.n	800a6de <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a6ca:	f7fc fbc3 	bl	8006e54 <HAL_GetTick>
 800a6ce:	4602      	mov	r2, r0
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	1ad3      	subs	r3, r2, r3
 800a6d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a6d8:	d901      	bls.n	800a6de <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a6da:	2301      	movs	r3, #1
 800a6dc:	e007      	b.n	800a6ee <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a6de:	4b06      	ldr	r3, [pc, #24]	; (800a6f8 <HAL_PWREx_ConfigSupply+0x70>)
 800a6e0:	685b      	ldr	r3, [r3, #4]
 800a6e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a6e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6ea:	d1ee      	bne.n	800a6ca <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a6ec:	2300      	movs	r3, #0
}
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	3710      	adds	r7, #16
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	bd80      	pop	{r7, pc}
 800a6f6:	bf00      	nop
 800a6f8:	58024800 	.word	0x58024800

0800a6fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b08c      	sub	sp, #48	; 0x30
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d101      	bne.n	800a70e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a70a:	2301      	movs	r3, #1
 800a70c:	e39d      	b.n	800ae4a <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	f003 0301 	and.w	r3, r3, #1
 800a716:	2b00      	cmp	r3, #0
 800a718:	f000 8087 	beq.w	800a82a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a71c:	4b88      	ldr	r3, [pc, #544]	; (800a940 <HAL_RCC_OscConfig+0x244>)
 800a71e:	691b      	ldr	r3, [r3, #16]
 800a720:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a724:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a726:	4b86      	ldr	r3, [pc, #536]	; (800a940 <HAL_RCC_OscConfig+0x244>)
 800a728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a72a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a72c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a72e:	2b10      	cmp	r3, #16
 800a730:	d007      	beq.n	800a742 <HAL_RCC_OscConfig+0x46>
 800a732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a734:	2b18      	cmp	r3, #24
 800a736:	d110      	bne.n	800a75a <HAL_RCC_OscConfig+0x5e>
 800a738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a73a:	f003 0303 	and.w	r3, r3, #3
 800a73e:	2b02      	cmp	r3, #2
 800a740:	d10b      	bne.n	800a75a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a742:	4b7f      	ldr	r3, [pc, #508]	; (800a940 <HAL_RCC_OscConfig+0x244>)
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d06c      	beq.n	800a828 <HAL_RCC_OscConfig+0x12c>
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	685b      	ldr	r3, [r3, #4]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d168      	bne.n	800a828 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a756:	2301      	movs	r3, #1
 800a758:	e377      	b.n	800ae4a <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	685b      	ldr	r3, [r3, #4]
 800a75e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a762:	d106      	bne.n	800a772 <HAL_RCC_OscConfig+0x76>
 800a764:	4b76      	ldr	r3, [pc, #472]	; (800a940 <HAL_RCC_OscConfig+0x244>)
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	4a75      	ldr	r2, [pc, #468]	; (800a940 <HAL_RCC_OscConfig+0x244>)
 800a76a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a76e:	6013      	str	r3, [r2, #0]
 800a770:	e02e      	b.n	800a7d0 <HAL_RCC_OscConfig+0xd4>
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	685b      	ldr	r3, [r3, #4]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d10c      	bne.n	800a794 <HAL_RCC_OscConfig+0x98>
 800a77a:	4b71      	ldr	r3, [pc, #452]	; (800a940 <HAL_RCC_OscConfig+0x244>)
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	4a70      	ldr	r2, [pc, #448]	; (800a940 <HAL_RCC_OscConfig+0x244>)
 800a780:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a784:	6013      	str	r3, [r2, #0]
 800a786:	4b6e      	ldr	r3, [pc, #440]	; (800a940 <HAL_RCC_OscConfig+0x244>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	4a6d      	ldr	r2, [pc, #436]	; (800a940 <HAL_RCC_OscConfig+0x244>)
 800a78c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a790:	6013      	str	r3, [r2, #0]
 800a792:	e01d      	b.n	800a7d0 <HAL_RCC_OscConfig+0xd4>
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	685b      	ldr	r3, [r3, #4]
 800a798:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a79c:	d10c      	bne.n	800a7b8 <HAL_RCC_OscConfig+0xbc>
 800a79e:	4b68      	ldr	r3, [pc, #416]	; (800a940 <HAL_RCC_OscConfig+0x244>)
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	4a67      	ldr	r2, [pc, #412]	; (800a940 <HAL_RCC_OscConfig+0x244>)
 800a7a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a7a8:	6013      	str	r3, [r2, #0]
 800a7aa:	4b65      	ldr	r3, [pc, #404]	; (800a940 <HAL_RCC_OscConfig+0x244>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	4a64      	ldr	r2, [pc, #400]	; (800a940 <HAL_RCC_OscConfig+0x244>)
 800a7b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a7b4:	6013      	str	r3, [r2, #0]
 800a7b6:	e00b      	b.n	800a7d0 <HAL_RCC_OscConfig+0xd4>
 800a7b8:	4b61      	ldr	r3, [pc, #388]	; (800a940 <HAL_RCC_OscConfig+0x244>)
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	4a60      	ldr	r2, [pc, #384]	; (800a940 <HAL_RCC_OscConfig+0x244>)
 800a7be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a7c2:	6013      	str	r3, [r2, #0]
 800a7c4:	4b5e      	ldr	r3, [pc, #376]	; (800a940 <HAL_RCC_OscConfig+0x244>)
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	4a5d      	ldr	r2, [pc, #372]	; (800a940 <HAL_RCC_OscConfig+0x244>)
 800a7ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a7ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	685b      	ldr	r3, [r3, #4]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d013      	beq.n	800a800 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a7d8:	f7fc fb3c 	bl	8006e54 <HAL_GetTick>
 800a7dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a7de:	e008      	b.n	800a7f2 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a7e0:	f7fc fb38 	bl	8006e54 <HAL_GetTick>
 800a7e4:	4602      	mov	r2, r0
 800a7e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7e8:	1ad3      	subs	r3, r2, r3
 800a7ea:	2b64      	cmp	r3, #100	; 0x64
 800a7ec:	d901      	bls.n	800a7f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a7ee:	2303      	movs	r3, #3
 800a7f0:	e32b      	b.n	800ae4a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a7f2:	4b53      	ldr	r3, [pc, #332]	; (800a940 <HAL_RCC_OscConfig+0x244>)
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d0f0      	beq.n	800a7e0 <HAL_RCC_OscConfig+0xe4>
 800a7fe:	e014      	b.n	800a82a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a800:	f7fc fb28 	bl	8006e54 <HAL_GetTick>
 800a804:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a806:	e008      	b.n	800a81a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a808:	f7fc fb24 	bl	8006e54 <HAL_GetTick>
 800a80c:	4602      	mov	r2, r0
 800a80e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a810:	1ad3      	subs	r3, r2, r3
 800a812:	2b64      	cmp	r3, #100	; 0x64
 800a814:	d901      	bls.n	800a81a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a816:	2303      	movs	r3, #3
 800a818:	e317      	b.n	800ae4a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a81a:	4b49      	ldr	r3, [pc, #292]	; (800a940 <HAL_RCC_OscConfig+0x244>)
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a822:	2b00      	cmp	r3, #0
 800a824:	d1f0      	bne.n	800a808 <HAL_RCC_OscConfig+0x10c>
 800a826:	e000      	b.n	800a82a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a828:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	f003 0302 	and.w	r3, r3, #2
 800a832:	2b00      	cmp	r3, #0
 800a834:	f000 808c 	beq.w	800a950 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a838:	4b41      	ldr	r3, [pc, #260]	; (800a940 <HAL_RCC_OscConfig+0x244>)
 800a83a:	691b      	ldr	r3, [r3, #16]
 800a83c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a840:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a842:	4b3f      	ldr	r3, [pc, #252]	; (800a940 <HAL_RCC_OscConfig+0x244>)
 800a844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a846:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a848:	6a3b      	ldr	r3, [r7, #32]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d007      	beq.n	800a85e <HAL_RCC_OscConfig+0x162>
 800a84e:	6a3b      	ldr	r3, [r7, #32]
 800a850:	2b18      	cmp	r3, #24
 800a852:	d137      	bne.n	800a8c4 <HAL_RCC_OscConfig+0x1c8>
 800a854:	69fb      	ldr	r3, [r7, #28]
 800a856:	f003 0303 	and.w	r3, r3, #3
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d132      	bne.n	800a8c4 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a85e:	4b38      	ldr	r3, [pc, #224]	; (800a940 <HAL_RCC_OscConfig+0x244>)
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	f003 0304 	and.w	r3, r3, #4
 800a866:	2b00      	cmp	r3, #0
 800a868:	d005      	beq.n	800a876 <HAL_RCC_OscConfig+0x17a>
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	68db      	ldr	r3, [r3, #12]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d101      	bne.n	800a876 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800a872:	2301      	movs	r3, #1
 800a874:	e2e9      	b.n	800ae4a <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a876:	4b32      	ldr	r3, [pc, #200]	; (800a940 <HAL_RCC_OscConfig+0x244>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	f023 0219 	bic.w	r2, r3, #25
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	68db      	ldr	r3, [r3, #12]
 800a882:	492f      	ldr	r1, [pc, #188]	; (800a940 <HAL_RCC_OscConfig+0x244>)
 800a884:	4313      	orrs	r3, r2
 800a886:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a888:	f7fc fae4 	bl	8006e54 <HAL_GetTick>
 800a88c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a88e:	e008      	b.n	800a8a2 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a890:	f7fc fae0 	bl	8006e54 <HAL_GetTick>
 800a894:	4602      	mov	r2, r0
 800a896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a898:	1ad3      	subs	r3, r2, r3
 800a89a:	2b02      	cmp	r3, #2
 800a89c:	d901      	bls.n	800a8a2 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 800a89e:	2303      	movs	r3, #3
 800a8a0:	e2d3      	b.n	800ae4a <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a8a2:	4b27      	ldr	r3, [pc, #156]	; (800a940 <HAL_RCC_OscConfig+0x244>)
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	f003 0304 	and.w	r3, r3, #4
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d0f0      	beq.n	800a890 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a8ae:	4b24      	ldr	r3, [pc, #144]	; (800a940 <HAL_RCC_OscConfig+0x244>)
 800a8b0:	685b      	ldr	r3, [r3, #4]
 800a8b2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	691b      	ldr	r3, [r3, #16]
 800a8ba:	061b      	lsls	r3, r3, #24
 800a8bc:	4920      	ldr	r1, [pc, #128]	; (800a940 <HAL_RCC_OscConfig+0x244>)
 800a8be:	4313      	orrs	r3, r2
 800a8c0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a8c2:	e045      	b.n	800a950 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	68db      	ldr	r3, [r3, #12]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d026      	beq.n	800a91a <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a8cc:	4b1c      	ldr	r3, [pc, #112]	; (800a940 <HAL_RCC_OscConfig+0x244>)
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	f023 0219 	bic.w	r2, r3, #25
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	68db      	ldr	r3, [r3, #12]
 800a8d8:	4919      	ldr	r1, [pc, #100]	; (800a940 <HAL_RCC_OscConfig+0x244>)
 800a8da:	4313      	orrs	r3, r2
 800a8dc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a8de:	f7fc fab9 	bl	8006e54 <HAL_GetTick>
 800a8e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a8e4:	e008      	b.n	800a8f8 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a8e6:	f7fc fab5 	bl	8006e54 <HAL_GetTick>
 800a8ea:	4602      	mov	r2, r0
 800a8ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ee:	1ad3      	subs	r3, r2, r3
 800a8f0:	2b02      	cmp	r3, #2
 800a8f2:	d901      	bls.n	800a8f8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800a8f4:	2303      	movs	r3, #3
 800a8f6:	e2a8      	b.n	800ae4a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a8f8:	4b11      	ldr	r3, [pc, #68]	; (800a940 <HAL_RCC_OscConfig+0x244>)
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	f003 0304 	and.w	r3, r3, #4
 800a900:	2b00      	cmp	r3, #0
 800a902:	d0f0      	beq.n	800a8e6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a904:	4b0e      	ldr	r3, [pc, #56]	; (800a940 <HAL_RCC_OscConfig+0x244>)
 800a906:	685b      	ldr	r3, [r3, #4]
 800a908:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	691b      	ldr	r3, [r3, #16]
 800a910:	061b      	lsls	r3, r3, #24
 800a912:	490b      	ldr	r1, [pc, #44]	; (800a940 <HAL_RCC_OscConfig+0x244>)
 800a914:	4313      	orrs	r3, r2
 800a916:	604b      	str	r3, [r1, #4]
 800a918:	e01a      	b.n	800a950 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a91a:	4b09      	ldr	r3, [pc, #36]	; (800a940 <HAL_RCC_OscConfig+0x244>)
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	4a08      	ldr	r2, [pc, #32]	; (800a940 <HAL_RCC_OscConfig+0x244>)
 800a920:	f023 0301 	bic.w	r3, r3, #1
 800a924:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a926:	f7fc fa95 	bl	8006e54 <HAL_GetTick>
 800a92a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a92c:	e00a      	b.n	800a944 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a92e:	f7fc fa91 	bl	8006e54 <HAL_GetTick>
 800a932:	4602      	mov	r2, r0
 800a934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a936:	1ad3      	subs	r3, r2, r3
 800a938:	2b02      	cmp	r3, #2
 800a93a:	d903      	bls.n	800a944 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800a93c:	2303      	movs	r3, #3
 800a93e:	e284      	b.n	800ae4a <HAL_RCC_OscConfig+0x74e>
 800a940:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a944:	4b96      	ldr	r3, [pc, #600]	; (800aba0 <HAL_RCC_OscConfig+0x4a4>)
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	f003 0304 	and.w	r3, r3, #4
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d1ee      	bne.n	800a92e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	f003 0310 	and.w	r3, r3, #16
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d06a      	beq.n	800aa32 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a95c:	4b90      	ldr	r3, [pc, #576]	; (800aba0 <HAL_RCC_OscConfig+0x4a4>)
 800a95e:	691b      	ldr	r3, [r3, #16]
 800a960:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a964:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a966:	4b8e      	ldr	r3, [pc, #568]	; (800aba0 <HAL_RCC_OscConfig+0x4a4>)
 800a968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a96a:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a96c:	69bb      	ldr	r3, [r7, #24]
 800a96e:	2b08      	cmp	r3, #8
 800a970:	d007      	beq.n	800a982 <HAL_RCC_OscConfig+0x286>
 800a972:	69bb      	ldr	r3, [r7, #24]
 800a974:	2b18      	cmp	r3, #24
 800a976:	d11b      	bne.n	800a9b0 <HAL_RCC_OscConfig+0x2b4>
 800a978:	697b      	ldr	r3, [r7, #20]
 800a97a:	f003 0303 	and.w	r3, r3, #3
 800a97e:	2b01      	cmp	r3, #1
 800a980:	d116      	bne.n	800a9b0 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a982:	4b87      	ldr	r3, [pc, #540]	; (800aba0 <HAL_RCC_OscConfig+0x4a4>)
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d005      	beq.n	800a99a <HAL_RCC_OscConfig+0x29e>
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	69db      	ldr	r3, [r3, #28]
 800a992:	2b80      	cmp	r3, #128	; 0x80
 800a994:	d001      	beq.n	800a99a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800a996:	2301      	movs	r3, #1
 800a998:	e257      	b.n	800ae4a <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a99a:	4b81      	ldr	r3, [pc, #516]	; (800aba0 <HAL_RCC_OscConfig+0x4a4>)
 800a99c:	68db      	ldr	r3, [r3, #12]
 800a99e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	6a1b      	ldr	r3, [r3, #32]
 800a9a6:	061b      	lsls	r3, r3, #24
 800a9a8:	497d      	ldr	r1, [pc, #500]	; (800aba0 <HAL_RCC_OscConfig+0x4a4>)
 800a9aa:	4313      	orrs	r3, r2
 800a9ac:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a9ae:	e040      	b.n	800aa32 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	69db      	ldr	r3, [r3, #28]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d023      	beq.n	800aa00 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a9b8:	4b79      	ldr	r3, [pc, #484]	; (800aba0 <HAL_RCC_OscConfig+0x4a4>)
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	4a78      	ldr	r2, [pc, #480]	; (800aba0 <HAL_RCC_OscConfig+0x4a4>)
 800a9be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9c4:	f7fc fa46 	bl	8006e54 <HAL_GetTick>
 800a9c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a9ca:	e008      	b.n	800a9de <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800a9cc:	f7fc fa42 	bl	8006e54 <HAL_GetTick>
 800a9d0:	4602      	mov	r2, r0
 800a9d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9d4:	1ad3      	subs	r3, r2, r3
 800a9d6:	2b02      	cmp	r3, #2
 800a9d8:	d901      	bls.n	800a9de <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800a9da:	2303      	movs	r3, #3
 800a9dc:	e235      	b.n	800ae4a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a9de:	4b70      	ldr	r3, [pc, #448]	; (800aba0 <HAL_RCC_OscConfig+0x4a4>)
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d0f0      	beq.n	800a9cc <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a9ea:	4b6d      	ldr	r3, [pc, #436]	; (800aba0 <HAL_RCC_OscConfig+0x4a4>)
 800a9ec:	68db      	ldr	r3, [r3, #12]
 800a9ee:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	6a1b      	ldr	r3, [r3, #32]
 800a9f6:	061b      	lsls	r3, r3, #24
 800a9f8:	4969      	ldr	r1, [pc, #420]	; (800aba0 <HAL_RCC_OscConfig+0x4a4>)
 800a9fa:	4313      	orrs	r3, r2
 800a9fc:	60cb      	str	r3, [r1, #12]
 800a9fe:	e018      	b.n	800aa32 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800aa00:	4b67      	ldr	r3, [pc, #412]	; (800aba0 <HAL_RCC_OscConfig+0x4a4>)
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	4a66      	ldr	r2, [pc, #408]	; (800aba0 <HAL_RCC_OscConfig+0x4a4>)
 800aa06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aa0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa0c:	f7fc fa22 	bl	8006e54 <HAL_GetTick>
 800aa10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800aa12:	e008      	b.n	800aa26 <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800aa14:	f7fc fa1e 	bl	8006e54 <HAL_GetTick>
 800aa18:	4602      	mov	r2, r0
 800aa1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa1c:	1ad3      	subs	r3, r2, r3
 800aa1e:	2b02      	cmp	r3, #2
 800aa20:	d901      	bls.n	800aa26 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800aa22:	2303      	movs	r3, #3
 800aa24:	e211      	b.n	800ae4a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800aa26:	4b5e      	ldr	r3, [pc, #376]	; (800aba0 <HAL_RCC_OscConfig+0x4a4>)
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d1f0      	bne.n	800aa14 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	f003 0308 	and.w	r3, r3, #8
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d036      	beq.n	800aaac <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	695b      	ldr	r3, [r3, #20]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d019      	beq.n	800aa7a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800aa46:	4b56      	ldr	r3, [pc, #344]	; (800aba0 <HAL_RCC_OscConfig+0x4a4>)
 800aa48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa4a:	4a55      	ldr	r2, [pc, #340]	; (800aba0 <HAL_RCC_OscConfig+0x4a4>)
 800aa4c:	f043 0301 	orr.w	r3, r3, #1
 800aa50:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aa52:	f7fc f9ff 	bl	8006e54 <HAL_GetTick>
 800aa56:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800aa58:	e008      	b.n	800aa6c <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800aa5a:	f7fc f9fb 	bl	8006e54 <HAL_GetTick>
 800aa5e:	4602      	mov	r2, r0
 800aa60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa62:	1ad3      	subs	r3, r2, r3
 800aa64:	2b02      	cmp	r3, #2
 800aa66:	d901      	bls.n	800aa6c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800aa68:	2303      	movs	r3, #3
 800aa6a:	e1ee      	b.n	800ae4a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800aa6c:	4b4c      	ldr	r3, [pc, #304]	; (800aba0 <HAL_RCC_OscConfig+0x4a4>)
 800aa6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa70:	f003 0302 	and.w	r3, r3, #2
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d0f0      	beq.n	800aa5a <HAL_RCC_OscConfig+0x35e>
 800aa78:	e018      	b.n	800aaac <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800aa7a:	4b49      	ldr	r3, [pc, #292]	; (800aba0 <HAL_RCC_OscConfig+0x4a4>)
 800aa7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa7e:	4a48      	ldr	r2, [pc, #288]	; (800aba0 <HAL_RCC_OscConfig+0x4a4>)
 800aa80:	f023 0301 	bic.w	r3, r3, #1
 800aa84:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aa86:	f7fc f9e5 	bl	8006e54 <HAL_GetTick>
 800aa8a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800aa8c:	e008      	b.n	800aaa0 <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800aa8e:	f7fc f9e1 	bl	8006e54 <HAL_GetTick>
 800aa92:	4602      	mov	r2, r0
 800aa94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa96:	1ad3      	subs	r3, r2, r3
 800aa98:	2b02      	cmp	r3, #2
 800aa9a:	d901      	bls.n	800aaa0 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800aa9c:	2303      	movs	r3, #3
 800aa9e:	e1d4      	b.n	800ae4a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800aaa0:	4b3f      	ldr	r3, [pc, #252]	; (800aba0 <HAL_RCC_OscConfig+0x4a4>)
 800aaa2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aaa4:	f003 0302 	and.w	r3, r3, #2
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d1f0      	bne.n	800aa8e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	f003 0320 	and.w	r3, r3, #32
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d036      	beq.n	800ab26 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	699b      	ldr	r3, [r3, #24]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d019      	beq.n	800aaf4 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800aac0:	4b37      	ldr	r3, [pc, #220]	; (800aba0 <HAL_RCC_OscConfig+0x4a4>)
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	4a36      	ldr	r2, [pc, #216]	; (800aba0 <HAL_RCC_OscConfig+0x4a4>)
 800aac6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800aaca:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800aacc:	f7fc f9c2 	bl	8006e54 <HAL_GetTick>
 800aad0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800aad2:	e008      	b.n	800aae6 <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800aad4:	f7fc f9be 	bl	8006e54 <HAL_GetTick>
 800aad8:	4602      	mov	r2, r0
 800aada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aadc:	1ad3      	subs	r3, r2, r3
 800aade:	2b02      	cmp	r3, #2
 800aae0:	d901      	bls.n	800aae6 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800aae2:	2303      	movs	r3, #3
 800aae4:	e1b1      	b.n	800ae4a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800aae6:	4b2e      	ldr	r3, [pc, #184]	; (800aba0 <HAL_RCC_OscConfig+0x4a4>)
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d0f0      	beq.n	800aad4 <HAL_RCC_OscConfig+0x3d8>
 800aaf2:	e018      	b.n	800ab26 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800aaf4:	4b2a      	ldr	r3, [pc, #168]	; (800aba0 <HAL_RCC_OscConfig+0x4a4>)
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	4a29      	ldr	r2, [pc, #164]	; (800aba0 <HAL_RCC_OscConfig+0x4a4>)
 800aafa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aafe:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800ab00:	f7fc f9a8 	bl	8006e54 <HAL_GetTick>
 800ab04:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ab06:	e008      	b.n	800ab1a <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800ab08:	f7fc f9a4 	bl	8006e54 <HAL_GetTick>
 800ab0c:	4602      	mov	r2, r0
 800ab0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab10:	1ad3      	subs	r3, r2, r3
 800ab12:	2b02      	cmp	r3, #2
 800ab14:	d901      	bls.n	800ab1a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800ab16:	2303      	movs	r3, #3
 800ab18:	e197      	b.n	800ae4a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ab1a:	4b21      	ldr	r3, [pc, #132]	; (800aba0 <HAL_RCC_OscConfig+0x4a4>)
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d1f0      	bne.n	800ab08 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	f003 0304 	and.w	r3, r3, #4
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	f000 8086 	beq.w	800ac40 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800ab34:	4b1b      	ldr	r3, [pc, #108]	; (800aba4 <HAL_RCC_OscConfig+0x4a8>)
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	4a1a      	ldr	r2, [pc, #104]	; (800aba4 <HAL_RCC_OscConfig+0x4a8>)
 800ab3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab3e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ab40:	f7fc f988 	bl	8006e54 <HAL_GetTick>
 800ab44:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ab46:	e008      	b.n	800ab5a <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800ab48:	f7fc f984 	bl	8006e54 <HAL_GetTick>
 800ab4c:	4602      	mov	r2, r0
 800ab4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab50:	1ad3      	subs	r3, r2, r3
 800ab52:	2b64      	cmp	r3, #100	; 0x64
 800ab54:	d901      	bls.n	800ab5a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800ab56:	2303      	movs	r3, #3
 800ab58:	e177      	b.n	800ae4a <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ab5a:	4b12      	ldr	r3, [pc, #72]	; (800aba4 <HAL_RCC_OscConfig+0x4a8>)
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d0f0      	beq.n	800ab48 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	689b      	ldr	r3, [r3, #8]
 800ab6a:	2b01      	cmp	r3, #1
 800ab6c:	d106      	bne.n	800ab7c <HAL_RCC_OscConfig+0x480>
 800ab6e:	4b0c      	ldr	r3, [pc, #48]	; (800aba0 <HAL_RCC_OscConfig+0x4a4>)
 800ab70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab72:	4a0b      	ldr	r2, [pc, #44]	; (800aba0 <HAL_RCC_OscConfig+0x4a4>)
 800ab74:	f043 0301 	orr.w	r3, r3, #1
 800ab78:	6713      	str	r3, [r2, #112]	; 0x70
 800ab7a:	e032      	b.n	800abe2 <HAL_RCC_OscConfig+0x4e6>
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	689b      	ldr	r3, [r3, #8]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d111      	bne.n	800aba8 <HAL_RCC_OscConfig+0x4ac>
 800ab84:	4b06      	ldr	r3, [pc, #24]	; (800aba0 <HAL_RCC_OscConfig+0x4a4>)
 800ab86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab88:	4a05      	ldr	r2, [pc, #20]	; (800aba0 <HAL_RCC_OscConfig+0x4a4>)
 800ab8a:	f023 0301 	bic.w	r3, r3, #1
 800ab8e:	6713      	str	r3, [r2, #112]	; 0x70
 800ab90:	4b03      	ldr	r3, [pc, #12]	; (800aba0 <HAL_RCC_OscConfig+0x4a4>)
 800ab92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab94:	4a02      	ldr	r2, [pc, #8]	; (800aba0 <HAL_RCC_OscConfig+0x4a4>)
 800ab96:	f023 0304 	bic.w	r3, r3, #4
 800ab9a:	6713      	str	r3, [r2, #112]	; 0x70
 800ab9c:	e021      	b.n	800abe2 <HAL_RCC_OscConfig+0x4e6>
 800ab9e:	bf00      	nop
 800aba0:	58024400 	.word	0x58024400
 800aba4:	58024800 	.word	0x58024800
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	689b      	ldr	r3, [r3, #8]
 800abac:	2b05      	cmp	r3, #5
 800abae:	d10c      	bne.n	800abca <HAL_RCC_OscConfig+0x4ce>
 800abb0:	4b83      	ldr	r3, [pc, #524]	; (800adc0 <HAL_RCC_OscConfig+0x6c4>)
 800abb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abb4:	4a82      	ldr	r2, [pc, #520]	; (800adc0 <HAL_RCC_OscConfig+0x6c4>)
 800abb6:	f043 0304 	orr.w	r3, r3, #4
 800abba:	6713      	str	r3, [r2, #112]	; 0x70
 800abbc:	4b80      	ldr	r3, [pc, #512]	; (800adc0 <HAL_RCC_OscConfig+0x6c4>)
 800abbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abc0:	4a7f      	ldr	r2, [pc, #508]	; (800adc0 <HAL_RCC_OscConfig+0x6c4>)
 800abc2:	f043 0301 	orr.w	r3, r3, #1
 800abc6:	6713      	str	r3, [r2, #112]	; 0x70
 800abc8:	e00b      	b.n	800abe2 <HAL_RCC_OscConfig+0x4e6>
 800abca:	4b7d      	ldr	r3, [pc, #500]	; (800adc0 <HAL_RCC_OscConfig+0x6c4>)
 800abcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abce:	4a7c      	ldr	r2, [pc, #496]	; (800adc0 <HAL_RCC_OscConfig+0x6c4>)
 800abd0:	f023 0301 	bic.w	r3, r3, #1
 800abd4:	6713      	str	r3, [r2, #112]	; 0x70
 800abd6:	4b7a      	ldr	r3, [pc, #488]	; (800adc0 <HAL_RCC_OscConfig+0x6c4>)
 800abd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abda:	4a79      	ldr	r2, [pc, #484]	; (800adc0 <HAL_RCC_OscConfig+0x6c4>)
 800abdc:	f023 0304 	bic.w	r3, r3, #4
 800abe0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	689b      	ldr	r3, [r3, #8]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d015      	beq.n	800ac16 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800abea:	f7fc f933 	bl	8006e54 <HAL_GetTick>
 800abee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800abf0:	e00a      	b.n	800ac08 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800abf2:	f7fc f92f 	bl	8006e54 <HAL_GetTick>
 800abf6:	4602      	mov	r2, r0
 800abf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abfa:	1ad3      	subs	r3, r2, r3
 800abfc:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac00:	4293      	cmp	r3, r2
 800ac02:	d901      	bls.n	800ac08 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800ac04:	2303      	movs	r3, #3
 800ac06:	e120      	b.n	800ae4a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ac08:	4b6d      	ldr	r3, [pc, #436]	; (800adc0 <HAL_RCC_OscConfig+0x6c4>)
 800ac0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac0c:	f003 0302 	and.w	r3, r3, #2
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d0ee      	beq.n	800abf2 <HAL_RCC_OscConfig+0x4f6>
 800ac14:	e014      	b.n	800ac40 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac16:	f7fc f91d 	bl	8006e54 <HAL_GetTick>
 800ac1a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ac1c:	e00a      	b.n	800ac34 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ac1e:	f7fc f919 	bl	8006e54 <HAL_GetTick>
 800ac22:	4602      	mov	r2, r0
 800ac24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac26:	1ad3      	subs	r3, r2, r3
 800ac28:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac2c:	4293      	cmp	r3, r2
 800ac2e:	d901      	bls.n	800ac34 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800ac30:	2303      	movs	r3, #3
 800ac32:	e10a      	b.n	800ae4a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ac34:	4b62      	ldr	r3, [pc, #392]	; (800adc0 <HAL_RCC_OscConfig+0x6c4>)
 800ac36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac38:	f003 0302 	and.w	r3, r3, #2
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d1ee      	bne.n	800ac1e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	f000 80ff 	beq.w	800ae48 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800ac4a:	4b5d      	ldr	r3, [pc, #372]	; (800adc0 <HAL_RCC_OscConfig+0x6c4>)
 800ac4c:	691b      	ldr	r3, [r3, #16]
 800ac4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ac52:	2b18      	cmp	r3, #24
 800ac54:	f000 80ba 	beq.w	800adcc <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac5c:	2b02      	cmp	r3, #2
 800ac5e:	f040 8095 	bne.w	800ad8c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ac62:	4b57      	ldr	r3, [pc, #348]	; (800adc0 <HAL_RCC_OscConfig+0x6c4>)
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	4a56      	ldr	r2, [pc, #344]	; (800adc0 <HAL_RCC_OscConfig+0x6c4>)
 800ac68:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ac6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac6e:	f7fc f8f1 	bl	8006e54 <HAL_GetTick>
 800ac72:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ac74:	e008      	b.n	800ac88 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ac76:	f7fc f8ed 	bl	8006e54 <HAL_GetTick>
 800ac7a:	4602      	mov	r2, r0
 800ac7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac7e:	1ad3      	subs	r3, r2, r3
 800ac80:	2b02      	cmp	r3, #2
 800ac82:	d901      	bls.n	800ac88 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800ac84:	2303      	movs	r3, #3
 800ac86:	e0e0      	b.n	800ae4a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ac88:	4b4d      	ldr	r3, [pc, #308]	; (800adc0 <HAL_RCC_OscConfig+0x6c4>)
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d1f0      	bne.n	800ac76 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ac94:	4b4a      	ldr	r3, [pc, #296]	; (800adc0 <HAL_RCC_OscConfig+0x6c4>)
 800ac96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ac98:	4b4a      	ldr	r3, [pc, #296]	; (800adc4 <HAL_RCC_OscConfig+0x6c8>)
 800ac9a:	4013      	ands	r3, r2
 800ac9c:	687a      	ldr	r2, [r7, #4]
 800ac9e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800aca0:	687a      	ldr	r2, [r7, #4]
 800aca2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800aca4:	0112      	lsls	r2, r2, #4
 800aca6:	430a      	orrs	r2, r1
 800aca8:	4945      	ldr	r1, [pc, #276]	; (800adc0 <HAL_RCC_OscConfig+0x6c4>)
 800acaa:	4313      	orrs	r3, r2
 800acac:	628b      	str	r3, [r1, #40]	; 0x28
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acb2:	3b01      	subs	r3, #1
 800acb4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acbc:	3b01      	subs	r3, #1
 800acbe:	025b      	lsls	r3, r3, #9
 800acc0:	b29b      	uxth	r3, r3
 800acc2:	431a      	orrs	r2, r3
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acc8:	3b01      	subs	r3, #1
 800acca:	041b      	lsls	r3, r3, #16
 800accc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800acd0:	431a      	orrs	r2, r3
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acd6:	3b01      	subs	r3, #1
 800acd8:	061b      	lsls	r3, r3, #24
 800acda:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800acde:	4938      	ldr	r1, [pc, #224]	; (800adc0 <HAL_RCC_OscConfig+0x6c4>)
 800ace0:	4313      	orrs	r3, r2
 800ace2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800ace4:	4b36      	ldr	r3, [pc, #216]	; (800adc0 <HAL_RCC_OscConfig+0x6c4>)
 800ace6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ace8:	4a35      	ldr	r2, [pc, #212]	; (800adc0 <HAL_RCC_OscConfig+0x6c4>)
 800acea:	f023 0301 	bic.w	r3, r3, #1
 800acee:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800acf0:	4b33      	ldr	r3, [pc, #204]	; (800adc0 <HAL_RCC_OscConfig+0x6c4>)
 800acf2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800acf4:	4b34      	ldr	r3, [pc, #208]	; (800adc8 <HAL_RCC_OscConfig+0x6cc>)
 800acf6:	4013      	ands	r3, r2
 800acf8:	687a      	ldr	r2, [r7, #4]
 800acfa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800acfc:	00d2      	lsls	r2, r2, #3
 800acfe:	4930      	ldr	r1, [pc, #192]	; (800adc0 <HAL_RCC_OscConfig+0x6c4>)
 800ad00:	4313      	orrs	r3, r2
 800ad02:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800ad04:	4b2e      	ldr	r3, [pc, #184]	; (800adc0 <HAL_RCC_OscConfig+0x6c4>)
 800ad06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad08:	f023 020c 	bic.w	r2, r3, #12
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad10:	492b      	ldr	r1, [pc, #172]	; (800adc0 <HAL_RCC_OscConfig+0x6c4>)
 800ad12:	4313      	orrs	r3, r2
 800ad14:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800ad16:	4b2a      	ldr	r3, [pc, #168]	; (800adc0 <HAL_RCC_OscConfig+0x6c4>)
 800ad18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad1a:	f023 0202 	bic.w	r2, r3, #2
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad22:	4927      	ldr	r1, [pc, #156]	; (800adc0 <HAL_RCC_OscConfig+0x6c4>)
 800ad24:	4313      	orrs	r3, r2
 800ad26:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800ad28:	4b25      	ldr	r3, [pc, #148]	; (800adc0 <HAL_RCC_OscConfig+0x6c4>)
 800ad2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad2c:	4a24      	ldr	r2, [pc, #144]	; (800adc0 <HAL_RCC_OscConfig+0x6c4>)
 800ad2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ad32:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad34:	4b22      	ldr	r3, [pc, #136]	; (800adc0 <HAL_RCC_OscConfig+0x6c4>)
 800ad36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad38:	4a21      	ldr	r2, [pc, #132]	; (800adc0 <HAL_RCC_OscConfig+0x6c4>)
 800ad3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad3e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800ad40:	4b1f      	ldr	r3, [pc, #124]	; (800adc0 <HAL_RCC_OscConfig+0x6c4>)
 800ad42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad44:	4a1e      	ldr	r2, [pc, #120]	; (800adc0 <HAL_RCC_OscConfig+0x6c4>)
 800ad46:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ad4a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800ad4c:	4b1c      	ldr	r3, [pc, #112]	; (800adc0 <HAL_RCC_OscConfig+0x6c4>)
 800ad4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad50:	4a1b      	ldr	r2, [pc, #108]	; (800adc0 <HAL_RCC_OscConfig+0x6c4>)
 800ad52:	f043 0301 	orr.w	r3, r3, #1
 800ad56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ad58:	4b19      	ldr	r3, [pc, #100]	; (800adc0 <HAL_RCC_OscConfig+0x6c4>)
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	4a18      	ldr	r2, [pc, #96]	; (800adc0 <HAL_RCC_OscConfig+0x6c4>)
 800ad5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ad62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad64:	f7fc f876 	bl	8006e54 <HAL_GetTick>
 800ad68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ad6a:	e008      	b.n	800ad7e <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ad6c:	f7fc f872 	bl	8006e54 <HAL_GetTick>
 800ad70:	4602      	mov	r2, r0
 800ad72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad74:	1ad3      	subs	r3, r2, r3
 800ad76:	2b02      	cmp	r3, #2
 800ad78:	d901      	bls.n	800ad7e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800ad7a:	2303      	movs	r3, #3
 800ad7c:	e065      	b.n	800ae4a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ad7e:	4b10      	ldr	r3, [pc, #64]	; (800adc0 <HAL_RCC_OscConfig+0x6c4>)
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d0f0      	beq.n	800ad6c <HAL_RCC_OscConfig+0x670>
 800ad8a:	e05d      	b.n	800ae48 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ad8c:	4b0c      	ldr	r3, [pc, #48]	; (800adc0 <HAL_RCC_OscConfig+0x6c4>)
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	4a0b      	ldr	r2, [pc, #44]	; (800adc0 <HAL_RCC_OscConfig+0x6c4>)
 800ad92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ad96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad98:	f7fc f85c 	bl	8006e54 <HAL_GetTick>
 800ad9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ad9e:	e008      	b.n	800adb2 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ada0:	f7fc f858 	bl	8006e54 <HAL_GetTick>
 800ada4:	4602      	mov	r2, r0
 800ada6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ada8:	1ad3      	subs	r3, r2, r3
 800adaa:	2b02      	cmp	r3, #2
 800adac:	d901      	bls.n	800adb2 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800adae:	2303      	movs	r3, #3
 800adb0:	e04b      	b.n	800ae4a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800adb2:	4b03      	ldr	r3, [pc, #12]	; (800adc0 <HAL_RCC_OscConfig+0x6c4>)
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d1f0      	bne.n	800ada0 <HAL_RCC_OscConfig+0x6a4>
 800adbe:	e043      	b.n	800ae48 <HAL_RCC_OscConfig+0x74c>
 800adc0:	58024400 	.word	0x58024400
 800adc4:	fffffc0c 	.word	0xfffffc0c
 800adc8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800adcc:	4b21      	ldr	r3, [pc, #132]	; (800ae54 <HAL_RCC_OscConfig+0x758>)
 800adce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800add0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800add2:	4b20      	ldr	r3, [pc, #128]	; (800ae54 <HAL_RCC_OscConfig+0x758>)
 800add4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800add6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800addc:	2b01      	cmp	r3, #1
 800adde:	d031      	beq.n	800ae44 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ade0:	693b      	ldr	r3, [r7, #16]
 800ade2:	f003 0203 	and.w	r2, r3, #3
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800adea:	429a      	cmp	r2, r3
 800adec:	d12a      	bne.n	800ae44 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800adee:	693b      	ldr	r3, [r7, #16]
 800adf0:	091b      	lsrs	r3, r3, #4
 800adf2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800adfa:	429a      	cmp	r2, r3
 800adfc:	d122      	bne.n	800ae44 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae08:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ae0a:	429a      	cmp	r2, r3
 800ae0c:	d11a      	bne.n	800ae44 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	0a5b      	lsrs	r3, r3, #9
 800ae12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae1a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ae1c:	429a      	cmp	r2, r3
 800ae1e:	d111      	bne.n	800ae44 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	0c1b      	lsrs	r3, r3, #16
 800ae24:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae2c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ae2e:	429a      	cmp	r2, r3
 800ae30:	d108      	bne.n	800ae44 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	0e1b      	lsrs	r3, r3, #24
 800ae36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae3e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ae40:	429a      	cmp	r2, r3
 800ae42:	d001      	beq.n	800ae48 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800ae44:	2301      	movs	r3, #1
 800ae46:	e000      	b.n	800ae4a <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 800ae48:	2300      	movs	r3, #0
}
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	3730      	adds	r7, #48	; 0x30
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	bd80      	pop	{r7, pc}
 800ae52:	bf00      	nop
 800ae54:	58024400 	.word	0x58024400

0800ae58 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b086      	sub	sp, #24
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
 800ae60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d101      	bne.n	800ae6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ae68:	2301      	movs	r3, #1
 800ae6a:	e19c      	b.n	800b1a6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800ae6c:	4b8a      	ldr	r3, [pc, #552]	; (800b098 <HAL_RCC_ClockConfig+0x240>)
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	f003 030f 	and.w	r3, r3, #15
 800ae74:	683a      	ldr	r2, [r7, #0]
 800ae76:	429a      	cmp	r2, r3
 800ae78:	d910      	bls.n	800ae9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ae7a:	4b87      	ldr	r3, [pc, #540]	; (800b098 <HAL_RCC_ClockConfig+0x240>)
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	f023 020f 	bic.w	r2, r3, #15
 800ae82:	4985      	ldr	r1, [pc, #532]	; (800b098 <HAL_RCC_ClockConfig+0x240>)
 800ae84:	683b      	ldr	r3, [r7, #0]
 800ae86:	4313      	orrs	r3, r2
 800ae88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ae8a:	4b83      	ldr	r3, [pc, #524]	; (800b098 <HAL_RCC_ClockConfig+0x240>)
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	f003 030f 	and.w	r3, r3, #15
 800ae92:	683a      	ldr	r2, [r7, #0]
 800ae94:	429a      	cmp	r2, r3
 800ae96:	d001      	beq.n	800ae9c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800ae98:	2301      	movs	r3, #1
 800ae9a:	e184      	b.n	800b1a6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	f003 0304 	and.w	r3, r3, #4
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d010      	beq.n	800aeca <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	691a      	ldr	r2, [r3, #16]
 800aeac:	4b7b      	ldr	r3, [pc, #492]	; (800b09c <HAL_RCC_ClockConfig+0x244>)
 800aeae:	699b      	ldr	r3, [r3, #24]
 800aeb0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800aeb4:	429a      	cmp	r2, r3
 800aeb6:	d908      	bls.n	800aeca <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800aeb8:	4b78      	ldr	r3, [pc, #480]	; (800b09c <HAL_RCC_ClockConfig+0x244>)
 800aeba:	699b      	ldr	r3, [r3, #24]
 800aebc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	691b      	ldr	r3, [r3, #16]
 800aec4:	4975      	ldr	r1, [pc, #468]	; (800b09c <HAL_RCC_ClockConfig+0x244>)
 800aec6:	4313      	orrs	r3, r2
 800aec8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	f003 0308 	and.w	r3, r3, #8
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d010      	beq.n	800aef8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	695a      	ldr	r2, [r3, #20]
 800aeda:	4b70      	ldr	r3, [pc, #448]	; (800b09c <HAL_RCC_ClockConfig+0x244>)
 800aedc:	69db      	ldr	r3, [r3, #28]
 800aede:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800aee2:	429a      	cmp	r2, r3
 800aee4:	d908      	bls.n	800aef8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800aee6:	4b6d      	ldr	r3, [pc, #436]	; (800b09c <HAL_RCC_ClockConfig+0x244>)
 800aee8:	69db      	ldr	r3, [r3, #28]
 800aeea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	695b      	ldr	r3, [r3, #20]
 800aef2:	496a      	ldr	r1, [pc, #424]	; (800b09c <HAL_RCC_ClockConfig+0x244>)
 800aef4:	4313      	orrs	r3, r2
 800aef6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	f003 0310 	and.w	r3, r3, #16
 800af00:	2b00      	cmp	r3, #0
 800af02:	d010      	beq.n	800af26 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	699a      	ldr	r2, [r3, #24]
 800af08:	4b64      	ldr	r3, [pc, #400]	; (800b09c <HAL_RCC_ClockConfig+0x244>)
 800af0a:	69db      	ldr	r3, [r3, #28]
 800af0c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800af10:	429a      	cmp	r2, r3
 800af12:	d908      	bls.n	800af26 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800af14:	4b61      	ldr	r3, [pc, #388]	; (800b09c <HAL_RCC_ClockConfig+0x244>)
 800af16:	69db      	ldr	r3, [r3, #28]
 800af18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	699b      	ldr	r3, [r3, #24]
 800af20:	495e      	ldr	r1, [pc, #376]	; (800b09c <HAL_RCC_ClockConfig+0x244>)
 800af22:	4313      	orrs	r3, r2
 800af24:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	f003 0320 	and.w	r3, r3, #32
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d010      	beq.n	800af54 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	69da      	ldr	r2, [r3, #28]
 800af36:	4b59      	ldr	r3, [pc, #356]	; (800b09c <HAL_RCC_ClockConfig+0x244>)
 800af38:	6a1b      	ldr	r3, [r3, #32]
 800af3a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800af3e:	429a      	cmp	r2, r3
 800af40:	d908      	bls.n	800af54 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800af42:	4b56      	ldr	r3, [pc, #344]	; (800b09c <HAL_RCC_ClockConfig+0x244>)
 800af44:	6a1b      	ldr	r3, [r3, #32]
 800af46:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	69db      	ldr	r3, [r3, #28]
 800af4e:	4953      	ldr	r1, [pc, #332]	; (800b09c <HAL_RCC_ClockConfig+0x244>)
 800af50:	4313      	orrs	r3, r2
 800af52:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	f003 0302 	and.w	r3, r3, #2
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d010      	beq.n	800af82 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	68da      	ldr	r2, [r3, #12]
 800af64:	4b4d      	ldr	r3, [pc, #308]	; (800b09c <HAL_RCC_ClockConfig+0x244>)
 800af66:	699b      	ldr	r3, [r3, #24]
 800af68:	f003 030f 	and.w	r3, r3, #15
 800af6c:	429a      	cmp	r2, r3
 800af6e:	d908      	bls.n	800af82 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800af70:	4b4a      	ldr	r3, [pc, #296]	; (800b09c <HAL_RCC_ClockConfig+0x244>)
 800af72:	699b      	ldr	r3, [r3, #24]
 800af74:	f023 020f 	bic.w	r2, r3, #15
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	68db      	ldr	r3, [r3, #12]
 800af7c:	4947      	ldr	r1, [pc, #284]	; (800b09c <HAL_RCC_ClockConfig+0x244>)
 800af7e:	4313      	orrs	r3, r2
 800af80:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	f003 0301 	and.w	r3, r3, #1
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d055      	beq.n	800b03a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800af8e:	4b43      	ldr	r3, [pc, #268]	; (800b09c <HAL_RCC_ClockConfig+0x244>)
 800af90:	699b      	ldr	r3, [r3, #24]
 800af92:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	689b      	ldr	r3, [r3, #8]
 800af9a:	4940      	ldr	r1, [pc, #256]	; (800b09c <HAL_RCC_ClockConfig+0x244>)
 800af9c:	4313      	orrs	r3, r2
 800af9e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	685b      	ldr	r3, [r3, #4]
 800afa4:	2b02      	cmp	r3, #2
 800afa6:	d107      	bne.n	800afb8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800afa8:	4b3c      	ldr	r3, [pc, #240]	; (800b09c <HAL_RCC_ClockConfig+0x244>)
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d121      	bne.n	800aff8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800afb4:	2301      	movs	r3, #1
 800afb6:	e0f6      	b.n	800b1a6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	685b      	ldr	r3, [r3, #4]
 800afbc:	2b03      	cmp	r3, #3
 800afbe:	d107      	bne.n	800afd0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800afc0:	4b36      	ldr	r3, [pc, #216]	; (800b09c <HAL_RCC_ClockConfig+0x244>)
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d115      	bne.n	800aff8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800afcc:	2301      	movs	r3, #1
 800afce:	e0ea      	b.n	800b1a6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	685b      	ldr	r3, [r3, #4]
 800afd4:	2b01      	cmp	r3, #1
 800afd6:	d107      	bne.n	800afe8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800afd8:	4b30      	ldr	r3, [pc, #192]	; (800b09c <HAL_RCC_ClockConfig+0x244>)
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d109      	bne.n	800aff8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800afe4:	2301      	movs	r3, #1
 800afe6:	e0de      	b.n	800b1a6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800afe8:	4b2c      	ldr	r3, [pc, #176]	; (800b09c <HAL_RCC_ClockConfig+0x244>)
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	f003 0304 	and.w	r3, r3, #4
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d101      	bne.n	800aff8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800aff4:	2301      	movs	r3, #1
 800aff6:	e0d6      	b.n	800b1a6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800aff8:	4b28      	ldr	r3, [pc, #160]	; (800b09c <HAL_RCC_ClockConfig+0x244>)
 800affa:	691b      	ldr	r3, [r3, #16]
 800affc:	f023 0207 	bic.w	r2, r3, #7
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	685b      	ldr	r3, [r3, #4]
 800b004:	4925      	ldr	r1, [pc, #148]	; (800b09c <HAL_RCC_ClockConfig+0x244>)
 800b006:	4313      	orrs	r3, r2
 800b008:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b00a:	f7fb ff23 	bl	8006e54 <HAL_GetTick>
 800b00e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b010:	e00a      	b.n	800b028 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b012:	f7fb ff1f 	bl	8006e54 <HAL_GetTick>
 800b016:	4602      	mov	r2, r0
 800b018:	697b      	ldr	r3, [r7, #20]
 800b01a:	1ad3      	subs	r3, r2, r3
 800b01c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b020:	4293      	cmp	r3, r2
 800b022:	d901      	bls.n	800b028 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800b024:	2303      	movs	r3, #3
 800b026:	e0be      	b.n	800b1a6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b028:	4b1c      	ldr	r3, [pc, #112]	; (800b09c <HAL_RCC_ClockConfig+0x244>)
 800b02a:	691b      	ldr	r3, [r3, #16]
 800b02c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	685b      	ldr	r3, [r3, #4]
 800b034:	00db      	lsls	r3, r3, #3
 800b036:	429a      	cmp	r2, r3
 800b038:	d1eb      	bne.n	800b012 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	f003 0302 	and.w	r3, r3, #2
 800b042:	2b00      	cmp	r3, #0
 800b044:	d010      	beq.n	800b068 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	68da      	ldr	r2, [r3, #12]
 800b04a:	4b14      	ldr	r3, [pc, #80]	; (800b09c <HAL_RCC_ClockConfig+0x244>)
 800b04c:	699b      	ldr	r3, [r3, #24]
 800b04e:	f003 030f 	and.w	r3, r3, #15
 800b052:	429a      	cmp	r2, r3
 800b054:	d208      	bcs.n	800b068 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b056:	4b11      	ldr	r3, [pc, #68]	; (800b09c <HAL_RCC_ClockConfig+0x244>)
 800b058:	699b      	ldr	r3, [r3, #24]
 800b05a:	f023 020f 	bic.w	r2, r3, #15
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	68db      	ldr	r3, [r3, #12]
 800b062:	490e      	ldr	r1, [pc, #56]	; (800b09c <HAL_RCC_ClockConfig+0x244>)
 800b064:	4313      	orrs	r3, r2
 800b066:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b068:	4b0b      	ldr	r3, [pc, #44]	; (800b098 <HAL_RCC_ClockConfig+0x240>)
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	f003 030f 	and.w	r3, r3, #15
 800b070:	683a      	ldr	r2, [r7, #0]
 800b072:	429a      	cmp	r2, r3
 800b074:	d214      	bcs.n	800b0a0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b076:	4b08      	ldr	r3, [pc, #32]	; (800b098 <HAL_RCC_ClockConfig+0x240>)
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	f023 020f 	bic.w	r2, r3, #15
 800b07e:	4906      	ldr	r1, [pc, #24]	; (800b098 <HAL_RCC_ClockConfig+0x240>)
 800b080:	683b      	ldr	r3, [r7, #0]
 800b082:	4313      	orrs	r3, r2
 800b084:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b086:	4b04      	ldr	r3, [pc, #16]	; (800b098 <HAL_RCC_ClockConfig+0x240>)
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	f003 030f 	and.w	r3, r3, #15
 800b08e:	683a      	ldr	r2, [r7, #0]
 800b090:	429a      	cmp	r2, r3
 800b092:	d005      	beq.n	800b0a0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800b094:	2301      	movs	r3, #1
 800b096:	e086      	b.n	800b1a6 <HAL_RCC_ClockConfig+0x34e>
 800b098:	52002000 	.word	0x52002000
 800b09c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	f003 0304 	and.w	r3, r3, #4
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d010      	beq.n	800b0ce <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	691a      	ldr	r2, [r3, #16]
 800b0b0:	4b3f      	ldr	r3, [pc, #252]	; (800b1b0 <HAL_RCC_ClockConfig+0x358>)
 800b0b2:	699b      	ldr	r3, [r3, #24]
 800b0b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b0b8:	429a      	cmp	r2, r3
 800b0ba:	d208      	bcs.n	800b0ce <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b0bc:	4b3c      	ldr	r3, [pc, #240]	; (800b1b0 <HAL_RCC_ClockConfig+0x358>)
 800b0be:	699b      	ldr	r3, [r3, #24]
 800b0c0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	691b      	ldr	r3, [r3, #16]
 800b0c8:	4939      	ldr	r1, [pc, #228]	; (800b1b0 <HAL_RCC_ClockConfig+0x358>)
 800b0ca:	4313      	orrs	r3, r2
 800b0cc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	f003 0308 	and.w	r3, r3, #8
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d010      	beq.n	800b0fc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	695a      	ldr	r2, [r3, #20]
 800b0de:	4b34      	ldr	r3, [pc, #208]	; (800b1b0 <HAL_RCC_ClockConfig+0x358>)
 800b0e0:	69db      	ldr	r3, [r3, #28]
 800b0e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b0e6:	429a      	cmp	r2, r3
 800b0e8:	d208      	bcs.n	800b0fc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b0ea:	4b31      	ldr	r3, [pc, #196]	; (800b1b0 <HAL_RCC_ClockConfig+0x358>)
 800b0ec:	69db      	ldr	r3, [r3, #28]
 800b0ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	695b      	ldr	r3, [r3, #20]
 800b0f6:	492e      	ldr	r1, [pc, #184]	; (800b1b0 <HAL_RCC_ClockConfig+0x358>)
 800b0f8:	4313      	orrs	r3, r2
 800b0fa:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	f003 0310 	and.w	r3, r3, #16
 800b104:	2b00      	cmp	r3, #0
 800b106:	d010      	beq.n	800b12a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	699a      	ldr	r2, [r3, #24]
 800b10c:	4b28      	ldr	r3, [pc, #160]	; (800b1b0 <HAL_RCC_ClockConfig+0x358>)
 800b10e:	69db      	ldr	r3, [r3, #28]
 800b110:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b114:	429a      	cmp	r2, r3
 800b116:	d208      	bcs.n	800b12a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b118:	4b25      	ldr	r3, [pc, #148]	; (800b1b0 <HAL_RCC_ClockConfig+0x358>)
 800b11a:	69db      	ldr	r3, [r3, #28]
 800b11c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	699b      	ldr	r3, [r3, #24]
 800b124:	4922      	ldr	r1, [pc, #136]	; (800b1b0 <HAL_RCC_ClockConfig+0x358>)
 800b126:	4313      	orrs	r3, r2
 800b128:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	f003 0320 	and.w	r3, r3, #32
 800b132:	2b00      	cmp	r3, #0
 800b134:	d010      	beq.n	800b158 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	69da      	ldr	r2, [r3, #28]
 800b13a:	4b1d      	ldr	r3, [pc, #116]	; (800b1b0 <HAL_RCC_ClockConfig+0x358>)
 800b13c:	6a1b      	ldr	r3, [r3, #32]
 800b13e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b142:	429a      	cmp	r2, r3
 800b144:	d208      	bcs.n	800b158 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800b146:	4b1a      	ldr	r3, [pc, #104]	; (800b1b0 <HAL_RCC_ClockConfig+0x358>)
 800b148:	6a1b      	ldr	r3, [r3, #32]
 800b14a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	69db      	ldr	r3, [r3, #28]
 800b152:	4917      	ldr	r1, [pc, #92]	; (800b1b0 <HAL_RCC_ClockConfig+0x358>)
 800b154:	4313      	orrs	r3, r2
 800b156:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b158:	f000 f834 	bl	800b1c4 <HAL_RCC_GetSysClockFreq>
 800b15c:	4602      	mov	r2, r0
 800b15e:	4b14      	ldr	r3, [pc, #80]	; (800b1b0 <HAL_RCC_ClockConfig+0x358>)
 800b160:	699b      	ldr	r3, [r3, #24]
 800b162:	0a1b      	lsrs	r3, r3, #8
 800b164:	f003 030f 	and.w	r3, r3, #15
 800b168:	4912      	ldr	r1, [pc, #72]	; (800b1b4 <HAL_RCC_ClockConfig+0x35c>)
 800b16a:	5ccb      	ldrb	r3, [r1, r3]
 800b16c:	f003 031f 	and.w	r3, r3, #31
 800b170:	fa22 f303 	lsr.w	r3, r2, r3
 800b174:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b176:	4b0e      	ldr	r3, [pc, #56]	; (800b1b0 <HAL_RCC_ClockConfig+0x358>)
 800b178:	699b      	ldr	r3, [r3, #24]
 800b17a:	f003 030f 	and.w	r3, r3, #15
 800b17e:	4a0d      	ldr	r2, [pc, #52]	; (800b1b4 <HAL_RCC_ClockConfig+0x35c>)
 800b180:	5cd3      	ldrb	r3, [r2, r3]
 800b182:	f003 031f 	and.w	r3, r3, #31
 800b186:	693a      	ldr	r2, [r7, #16]
 800b188:	fa22 f303 	lsr.w	r3, r2, r3
 800b18c:	4a0a      	ldr	r2, [pc, #40]	; (800b1b8 <HAL_RCC_ClockConfig+0x360>)
 800b18e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b190:	4a0a      	ldr	r2, [pc, #40]	; (800b1bc <HAL_RCC_ClockConfig+0x364>)
 800b192:	693b      	ldr	r3, [r7, #16]
 800b194:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800b196:	4b0a      	ldr	r3, [pc, #40]	; (800b1c0 <HAL_RCC_ClockConfig+0x368>)
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	4618      	mov	r0, r3
 800b19c:	f7fb fe10 	bl	8006dc0 <HAL_InitTick>
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800b1a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	3718      	adds	r7, #24
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	bd80      	pop	{r7, pc}
 800b1ae:	bf00      	nop
 800b1b0:	58024400 	.word	0x58024400
 800b1b4:	08011c38 	.word	0x08011c38
 800b1b8:	24000008 	.word	0x24000008
 800b1bc:	24000004 	.word	0x24000004
 800b1c0:	2400000c 	.word	0x2400000c

0800b1c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b1c4:	b480      	push	{r7}
 800b1c6:	b089      	sub	sp, #36	; 0x24
 800b1c8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b1ca:	4bb3      	ldr	r3, [pc, #716]	; (800b498 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b1cc:	691b      	ldr	r3, [r3, #16]
 800b1ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b1d2:	2b18      	cmp	r3, #24
 800b1d4:	f200 8155 	bhi.w	800b482 <HAL_RCC_GetSysClockFreq+0x2be>
 800b1d8:	a201      	add	r2, pc, #4	; (adr r2, 800b1e0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800b1da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1de:	bf00      	nop
 800b1e0:	0800b245 	.word	0x0800b245
 800b1e4:	0800b483 	.word	0x0800b483
 800b1e8:	0800b483 	.word	0x0800b483
 800b1ec:	0800b483 	.word	0x0800b483
 800b1f0:	0800b483 	.word	0x0800b483
 800b1f4:	0800b483 	.word	0x0800b483
 800b1f8:	0800b483 	.word	0x0800b483
 800b1fc:	0800b483 	.word	0x0800b483
 800b200:	0800b26b 	.word	0x0800b26b
 800b204:	0800b483 	.word	0x0800b483
 800b208:	0800b483 	.word	0x0800b483
 800b20c:	0800b483 	.word	0x0800b483
 800b210:	0800b483 	.word	0x0800b483
 800b214:	0800b483 	.word	0x0800b483
 800b218:	0800b483 	.word	0x0800b483
 800b21c:	0800b483 	.word	0x0800b483
 800b220:	0800b271 	.word	0x0800b271
 800b224:	0800b483 	.word	0x0800b483
 800b228:	0800b483 	.word	0x0800b483
 800b22c:	0800b483 	.word	0x0800b483
 800b230:	0800b483 	.word	0x0800b483
 800b234:	0800b483 	.word	0x0800b483
 800b238:	0800b483 	.word	0x0800b483
 800b23c:	0800b483 	.word	0x0800b483
 800b240:	0800b277 	.word	0x0800b277
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b244:	4b94      	ldr	r3, [pc, #592]	; (800b498 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	f003 0320 	and.w	r3, r3, #32
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d009      	beq.n	800b264 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b250:	4b91      	ldr	r3, [pc, #580]	; (800b498 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	08db      	lsrs	r3, r3, #3
 800b256:	f003 0303 	and.w	r3, r3, #3
 800b25a:	4a90      	ldr	r2, [pc, #576]	; (800b49c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b25c:	fa22 f303 	lsr.w	r3, r2, r3
 800b260:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800b262:	e111      	b.n	800b488 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b264:	4b8d      	ldr	r3, [pc, #564]	; (800b49c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b266:	61bb      	str	r3, [r7, #24]
    break;
 800b268:	e10e      	b.n	800b488 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800b26a:	4b8d      	ldr	r3, [pc, #564]	; (800b4a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b26c:	61bb      	str	r3, [r7, #24]
    break;
 800b26e:	e10b      	b.n	800b488 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800b270:	4b8c      	ldr	r3, [pc, #560]	; (800b4a4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800b272:	61bb      	str	r3, [r7, #24]
    break;
 800b274:	e108      	b.n	800b488 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b276:	4b88      	ldr	r3, [pc, #544]	; (800b498 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b27a:	f003 0303 	and.w	r3, r3, #3
 800b27e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800b280:	4b85      	ldr	r3, [pc, #532]	; (800b498 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b284:	091b      	lsrs	r3, r3, #4
 800b286:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b28a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b28c:	4b82      	ldr	r3, [pc, #520]	; (800b498 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b28e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b290:	f003 0301 	and.w	r3, r3, #1
 800b294:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800b296:	4b80      	ldr	r3, [pc, #512]	; (800b498 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b29a:	08db      	lsrs	r3, r3, #3
 800b29c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b2a0:	68fa      	ldr	r2, [r7, #12]
 800b2a2:	fb02 f303 	mul.w	r3, r2, r3
 800b2a6:	ee07 3a90 	vmov	s15, r3
 800b2aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2ae:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800b2b2:	693b      	ldr	r3, [r7, #16]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	f000 80e1 	beq.w	800b47c <HAL_RCC_GetSysClockFreq+0x2b8>
 800b2ba:	697b      	ldr	r3, [r7, #20]
 800b2bc:	2b02      	cmp	r3, #2
 800b2be:	f000 8083 	beq.w	800b3c8 <HAL_RCC_GetSysClockFreq+0x204>
 800b2c2:	697b      	ldr	r3, [r7, #20]
 800b2c4:	2b02      	cmp	r3, #2
 800b2c6:	f200 80a1 	bhi.w	800b40c <HAL_RCC_GetSysClockFreq+0x248>
 800b2ca:	697b      	ldr	r3, [r7, #20]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d003      	beq.n	800b2d8 <HAL_RCC_GetSysClockFreq+0x114>
 800b2d0:	697b      	ldr	r3, [r7, #20]
 800b2d2:	2b01      	cmp	r3, #1
 800b2d4:	d056      	beq.n	800b384 <HAL_RCC_GetSysClockFreq+0x1c0>
 800b2d6:	e099      	b.n	800b40c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b2d8:	4b6f      	ldr	r3, [pc, #444]	; (800b498 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	f003 0320 	and.w	r3, r3, #32
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d02d      	beq.n	800b340 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b2e4:	4b6c      	ldr	r3, [pc, #432]	; (800b498 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	08db      	lsrs	r3, r3, #3
 800b2ea:	f003 0303 	and.w	r3, r3, #3
 800b2ee:	4a6b      	ldr	r2, [pc, #428]	; (800b49c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b2f0:	fa22 f303 	lsr.w	r3, r2, r3
 800b2f4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	ee07 3a90 	vmov	s15, r3
 800b2fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b300:	693b      	ldr	r3, [r7, #16]
 800b302:	ee07 3a90 	vmov	s15, r3
 800b306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b30a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b30e:	4b62      	ldr	r3, [pc, #392]	; (800b498 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b312:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b316:	ee07 3a90 	vmov	s15, r3
 800b31a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b31e:	ed97 6a02 	vldr	s12, [r7, #8]
 800b322:	eddf 5a61 	vldr	s11, [pc, #388]	; 800b4a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b326:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b32a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b32e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b332:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b336:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b33a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800b33e:	e087      	b.n	800b450 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b340:	693b      	ldr	r3, [r7, #16]
 800b342:	ee07 3a90 	vmov	s15, r3
 800b346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b34a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800b4ac <HAL_RCC_GetSysClockFreq+0x2e8>
 800b34e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b352:	4b51      	ldr	r3, [pc, #324]	; (800b498 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b356:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b35a:	ee07 3a90 	vmov	s15, r3
 800b35e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b362:	ed97 6a02 	vldr	s12, [r7, #8]
 800b366:	eddf 5a50 	vldr	s11, [pc, #320]	; 800b4a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b36a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b36e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b372:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b376:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b37a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b37e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b382:	e065      	b.n	800b450 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b384:	693b      	ldr	r3, [r7, #16]
 800b386:	ee07 3a90 	vmov	s15, r3
 800b38a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b38e:	eddf 6a48 	vldr	s13, [pc, #288]	; 800b4b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b392:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b396:	4b40      	ldr	r3, [pc, #256]	; (800b498 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b39a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b39e:	ee07 3a90 	vmov	s15, r3
 800b3a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3a6:	ed97 6a02 	vldr	s12, [r7, #8]
 800b3aa:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800b4a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b3ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b3ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b3c6:	e043      	b.n	800b450 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b3c8:	693b      	ldr	r3, [r7, #16]
 800b3ca:	ee07 3a90 	vmov	s15, r3
 800b3ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3d2:	eddf 6a38 	vldr	s13, [pc, #224]	; 800b4b4 <HAL_RCC_GetSysClockFreq+0x2f0>
 800b3d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3da:	4b2f      	ldr	r3, [pc, #188]	; (800b498 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b3dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3e2:	ee07 3a90 	vmov	s15, r3
 800b3e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3ea:	ed97 6a02 	vldr	s12, [r7, #8]
 800b3ee:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800b4a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b3f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b3fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b402:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b406:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b40a:	e021      	b.n	800b450 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b40c:	693b      	ldr	r3, [r7, #16]
 800b40e:	ee07 3a90 	vmov	s15, r3
 800b412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b416:	eddf 6a26 	vldr	s13, [pc, #152]	; 800b4b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b41a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b41e:	4b1e      	ldr	r3, [pc, #120]	; (800b498 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b422:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b426:	ee07 3a90 	vmov	s15, r3
 800b42a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b42e:	ed97 6a02 	vldr	s12, [r7, #8]
 800b432:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800b4a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b436:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b43a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b43e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b442:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b446:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b44a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b44e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800b450:	4b11      	ldr	r3, [pc, #68]	; (800b498 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b454:	0a5b      	lsrs	r3, r3, #9
 800b456:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b45a:	3301      	adds	r3, #1
 800b45c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800b45e:	683b      	ldr	r3, [r7, #0]
 800b460:	ee07 3a90 	vmov	s15, r3
 800b464:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b468:	edd7 6a07 	vldr	s13, [r7, #28]
 800b46c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b470:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b474:	ee17 3a90 	vmov	r3, s15
 800b478:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800b47a:	e005      	b.n	800b488 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800b47c:	2300      	movs	r3, #0
 800b47e:	61bb      	str	r3, [r7, #24]
    break;
 800b480:	e002      	b.n	800b488 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800b482:	4b07      	ldr	r3, [pc, #28]	; (800b4a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b484:	61bb      	str	r3, [r7, #24]
    break;
 800b486:	bf00      	nop
  }

  return sysclockfreq;
 800b488:	69bb      	ldr	r3, [r7, #24]
}
 800b48a:	4618      	mov	r0, r3
 800b48c:	3724      	adds	r7, #36	; 0x24
 800b48e:	46bd      	mov	sp, r7
 800b490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b494:	4770      	bx	lr
 800b496:	bf00      	nop
 800b498:	58024400 	.word	0x58024400
 800b49c:	03d09000 	.word	0x03d09000
 800b4a0:	003d0900 	.word	0x003d0900
 800b4a4:	007a1200 	.word	0x007a1200
 800b4a8:	46000000 	.word	0x46000000
 800b4ac:	4c742400 	.word	0x4c742400
 800b4b0:	4a742400 	.word	0x4a742400
 800b4b4:	4af42400 	.word	0x4af42400

0800b4b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b082      	sub	sp, #8
 800b4bc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b4be:	f7ff fe81 	bl	800b1c4 <HAL_RCC_GetSysClockFreq>
 800b4c2:	4602      	mov	r2, r0
 800b4c4:	4b10      	ldr	r3, [pc, #64]	; (800b508 <HAL_RCC_GetHCLKFreq+0x50>)
 800b4c6:	699b      	ldr	r3, [r3, #24]
 800b4c8:	0a1b      	lsrs	r3, r3, #8
 800b4ca:	f003 030f 	and.w	r3, r3, #15
 800b4ce:	490f      	ldr	r1, [pc, #60]	; (800b50c <HAL_RCC_GetHCLKFreq+0x54>)
 800b4d0:	5ccb      	ldrb	r3, [r1, r3]
 800b4d2:	f003 031f 	and.w	r3, r3, #31
 800b4d6:	fa22 f303 	lsr.w	r3, r2, r3
 800b4da:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b4dc:	4b0a      	ldr	r3, [pc, #40]	; (800b508 <HAL_RCC_GetHCLKFreq+0x50>)
 800b4de:	699b      	ldr	r3, [r3, #24]
 800b4e0:	f003 030f 	and.w	r3, r3, #15
 800b4e4:	4a09      	ldr	r2, [pc, #36]	; (800b50c <HAL_RCC_GetHCLKFreq+0x54>)
 800b4e6:	5cd3      	ldrb	r3, [r2, r3]
 800b4e8:	f003 031f 	and.w	r3, r3, #31
 800b4ec:	687a      	ldr	r2, [r7, #4]
 800b4ee:	fa22 f303 	lsr.w	r3, r2, r3
 800b4f2:	4a07      	ldr	r2, [pc, #28]	; (800b510 <HAL_RCC_GetHCLKFreq+0x58>)
 800b4f4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b4f6:	4a07      	ldr	r2, [pc, #28]	; (800b514 <HAL_RCC_GetHCLKFreq+0x5c>)
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b4fc:	4b04      	ldr	r3, [pc, #16]	; (800b510 <HAL_RCC_GetHCLKFreq+0x58>)
 800b4fe:	681b      	ldr	r3, [r3, #0]
}
 800b500:	4618      	mov	r0, r3
 800b502:	3708      	adds	r7, #8
 800b504:	46bd      	mov	sp, r7
 800b506:	bd80      	pop	{r7, pc}
 800b508:	58024400 	.word	0x58024400
 800b50c:	08011c38 	.word	0x08011c38
 800b510:	24000008 	.word	0x24000008
 800b514:	24000004 	.word	0x24000004

0800b518 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800b51c:	f7ff ffcc 	bl	800b4b8 <HAL_RCC_GetHCLKFreq>
 800b520:	4602      	mov	r2, r0
 800b522:	4b06      	ldr	r3, [pc, #24]	; (800b53c <HAL_RCC_GetPCLK1Freq+0x24>)
 800b524:	69db      	ldr	r3, [r3, #28]
 800b526:	091b      	lsrs	r3, r3, #4
 800b528:	f003 0307 	and.w	r3, r3, #7
 800b52c:	4904      	ldr	r1, [pc, #16]	; (800b540 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b52e:	5ccb      	ldrb	r3, [r1, r3]
 800b530:	f003 031f 	and.w	r3, r3, #31
 800b534:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800b538:	4618      	mov	r0, r3
 800b53a:	bd80      	pop	{r7, pc}
 800b53c:	58024400 	.word	0x58024400
 800b540:	08011c38 	.word	0x08011c38

0800b544 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b544:	b580      	push	{r7, lr}
 800b546:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800b548:	f7ff ffb6 	bl	800b4b8 <HAL_RCC_GetHCLKFreq>
 800b54c:	4602      	mov	r2, r0
 800b54e:	4b06      	ldr	r3, [pc, #24]	; (800b568 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b550:	69db      	ldr	r3, [r3, #28]
 800b552:	0a1b      	lsrs	r3, r3, #8
 800b554:	f003 0307 	and.w	r3, r3, #7
 800b558:	4904      	ldr	r1, [pc, #16]	; (800b56c <HAL_RCC_GetPCLK2Freq+0x28>)
 800b55a:	5ccb      	ldrb	r3, [r1, r3]
 800b55c:	f003 031f 	and.w	r3, r3, #31
 800b560:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800b564:	4618      	mov	r0, r3
 800b566:	bd80      	pop	{r7, pc}
 800b568:	58024400 	.word	0x58024400
 800b56c:	08011c38 	.word	0x08011c38

0800b570 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b086      	sub	sp, #24
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b578:	2300      	movs	r3, #0
 800b57a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b57c:	2300      	movs	r3, #0
 800b57e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d03f      	beq.n	800b60c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b590:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b594:	d02a      	beq.n	800b5ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800b596:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b59a:	d824      	bhi.n	800b5e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800b59c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b5a0:	d018      	beq.n	800b5d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b5a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b5a6:	d81e      	bhi.n	800b5e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d003      	beq.n	800b5b4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800b5ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b5b0:	d007      	beq.n	800b5c2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800b5b2:	e018      	b.n	800b5e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b5b4:	4ba4      	ldr	r3, [pc, #656]	; (800b848 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800b5b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5b8:	4aa3      	ldr	r2, [pc, #652]	; (800b848 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800b5ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b5be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800b5c0:	e015      	b.n	800b5ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	3304      	adds	r3, #4
 800b5c6:	2102      	movs	r1, #2
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	f001 f989 	bl	800c8e0 <RCCEx_PLL2_Config>
 800b5ce:	4603      	mov	r3, r0
 800b5d0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800b5d2:	e00c      	b.n	800b5ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	3324      	adds	r3, #36	; 0x24
 800b5d8:	2102      	movs	r1, #2
 800b5da:	4618      	mov	r0, r3
 800b5dc:	f001 fa32 	bl	800ca44 <RCCEx_PLL3_Config>
 800b5e0:	4603      	mov	r3, r0
 800b5e2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800b5e4:	e003      	b.n	800b5ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b5e6:	2301      	movs	r3, #1
 800b5e8:	75fb      	strb	r3, [r7, #23]
      break;
 800b5ea:	e000      	b.n	800b5ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800b5ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b5ee:	7dfb      	ldrb	r3, [r7, #23]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d109      	bne.n	800b608 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b5f4:	4b94      	ldr	r3, [pc, #592]	; (800b848 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800b5f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b600:	4991      	ldr	r1, [pc, #580]	; (800b848 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800b602:	4313      	orrs	r3, r2
 800b604:	650b      	str	r3, [r1, #80]	; 0x50
 800b606:	e001      	b.n	800b60c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b608:	7dfb      	ldrb	r3, [r7, #23]
 800b60a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b614:	2b00      	cmp	r3, #0
 800b616:	d03d      	beq.n	800b694 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b61c:	2b04      	cmp	r3, #4
 800b61e:	d826      	bhi.n	800b66e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800b620:	a201      	add	r2, pc, #4	; (adr r2, 800b628 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800b622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b626:	bf00      	nop
 800b628:	0800b63d 	.word	0x0800b63d
 800b62c:	0800b64b 	.word	0x0800b64b
 800b630:	0800b65d 	.word	0x0800b65d
 800b634:	0800b675 	.word	0x0800b675
 800b638:	0800b675 	.word	0x0800b675
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b63c:	4b82      	ldr	r3, [pc, #520]	; (800b848 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800b63e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b640:	4a81      	ldr	r2, [pc, #516]	; (800b848 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800b642:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b646:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b648:	e015      	b.n	800b676 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	3304      	adds	r3, #4
 800b64e:	2100      	movs	r1, #0
 800b650:	4618      	mov	r0, r3
 800b652:	f001 f945 	bl	800c8e0 <RCCEx_PLL2_Config>
 800b656:	4603      	mov	r3, r0
 800b658:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b65a:	e00c      	b.n	800b676 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	3324      	adds	r3, #36	; 0x24
 800b660:	2100      	movs	r1, #0
 800b662:	4618      	mov	r0, r3
 800b664:	f001 f9ee 	bl	800ca44 <RCCEx_PLL3_Config>
 800b668:	4603      	mov	r3, r0
 800b66a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b66c:	e003      	b.n	800b676 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b66e:	2301      	movs	r3, #1
 800b670:	75fb      	strb	r3, [r7, #23]
      break;
 800b672:	e000      	b.n	800b676 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800b674:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b676:	7dfb      	ldrb	r3, [r7, #23]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d109      	bne.n	800b690 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b67c:	4b72      	ldr	r3, [pc, #456]	; (800b848 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800b67e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b680:	f023 0207 	bic.w	r2, r3, #7
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b688:	496f      	ldr	r1, [pc, #444]	; (800b848 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800b68a:	4313      	orrs	r3, r2
 800b68c:	650b      	str	r3, [r1, #80]	; 0x50
 800b68e:	e001      	b.n	800b694 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b690:	7dfb      	ldrb	r3, [r7, #23]
 800b692:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d051      	beq.n	800b744 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b6a6:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800b6aa:	d036      	beq.n	800b71a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800b6ac:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800b6b0:	d830      	bhi.n	800b714 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800b6b2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b6b6:	d032      	beq.n	800b71e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800b6b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b6bc:	d82a      	bhi.n	800b714 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800b6be:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b6c2:	d02e      	beq.n	800b722 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 800b6c4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b6c8:	d824      	bhi.n	800b714 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800b6ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b6ce:	d018      	beq.n	800b702 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800b6d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b6d4:	d81e      	bhi.n	800b714 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d003      	beq.n	800b6e2 <HAL_RCCEx_PeriphCLKConfig+0x172>
 800b6da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b6de:	d007      	beq.n	800b6f0 <HAL_RCCEx_PeriphCLKConfig+0x180>
 800b6e0:	e018      	b.n	800b714 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b6e2:	4b59      	ldr	r3, [pc, #356]	; (800b848 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800b6e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6e6:	4a58      	ldr	r2, [pc, #352]	; (800b848 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800b6e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b6ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b6ee:	e019      	b.n	800b724 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	3304      	adds	r3, #4
 800b6f4:	2100      	movs	r1, #0
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	f001 f8f2 	bl	800c8e0 <RCCEx_PLL2_Config>
 800b6fc:	4603      	mov	r3, r0
 800b6fe:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800b700:	e010      	b.n	800b724 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	3324      	adds	r3, #36	; 0x24
 800b706:	2100      	movs	r1, #0
 800b708:	4618      	mov	r0, r3
 800b70a:	f001 f99b 	bl	800ca44 <RCCEx_PLL3_Config>
 800b70e:	4603      	mov	r3, r0
 800b710:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b712:	e007      	b.n	800b724 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800b714:	2301      	movs	r3, #1
 800b716:	75fb      	strb	r3, [r7, #23]
      break;
 800b718:	e004      	b.n	800b724 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800b71a:	bf00      	nop
 800b71c:	e002      	b.n	800b724 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800b71e:	bf00      	nop
 800b720:	e000      	b.n	800b724 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800b722:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b724:	7dfb      	ldrb	r3, [r7, #23]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d10a      	bne.n	800b740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b72a:	4b47      	ldr	r3, [pc, #284]	; (800b848 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800b72c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b72e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b738:	4943      	ldr	r1, [pc, #268]	; (800b848 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800b73a:	4313      	orrs	r3, r2
 800b73c:	658b      	str	r3, [r1, #88]	; 0x58
 800b73e:	e001      	b.n	800b744 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b740:	7dfb      	ldrb	r3, [r7, #23]
 800b742:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d051      	beq.n	800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b756:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800b75a:	d036      	beq.n	800b7ca <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800b75c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800b760:	d830      	bhi.n	800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800b762:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b766:	d032      	beq.n	800b7ce <HAL_RCCEx_PeriphCLKConfig+0x25e>
 800b768:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b76c:	d82a      	bhi.n	800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800b76e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b772:	d02e      	beq.n	800b7d2 <HAL_RCCEx_PeriphCLKConfig+0x262>
 800b774:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b778:	d824      	bhi.n	800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800b77a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b77e:	d018      	beq.n	800b7b2 <HAL_RCCEx_PeriphCLKConfig+0x242>
 800b780:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b784:	d81e      	bhi.n	800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800b786:	2b00      	cmp	r3, #0
 800b788:	d003      	beq.n	800b792 <HAL_RCCEx_PeriphCLKConfig+0x222>
 800b78a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b78e:	d007      	beq.n	800b7a0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800b790:	e018      	b.n	800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b792:	4b2d      	ldr	r3, [pc, #180]	; (800b848 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800b794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b796:	4a2c      	ldr	r2, [pc, #176]	; (800b848 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800b798:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b79c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b79e:	e019      	b.n	800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	3304      	adds	r3, #4
 800b7a4:	2100      	movs	r1, #0
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	f001 f89a 	bl	800c8e0 <RCCEx_PLL2_Config>
 800b7ac:	4603      	mov	r3, r0
 800b7ae:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800b7b0:	e010      	b.n	800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	3324      	adds	r3, #36	; 0x24
 800b7b6:	2100      	movs	r1, #0
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	f001 f943 	bl	800ca44 <RCCEx_PLL3_Config>
 800b7be:	4603      	mov	r3, r0
 800b7c0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b7c2:	e007      	b.n	800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800b7c4:	2301      	movs	r3, #1
 800b7c6:	75fb      	strb	r3, [r7, #23]
      break;
 800b7c8:	e004      	b.n	800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800b7ca:	bf00      	nop
 800b7cc:	e002      	b.n	800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800b7ce:	bf00      	nop
 800b7d0:	e000      	b.n	800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800b7d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b7d4:	7dfb      	ldrb	r3, [r7, #23]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d10a      	bne.n	800b7f0 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b7da:	4b1b      	ldr	r3, [pc, #108]	; (800b848 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800b7dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7de:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b7e8:	4917      	ldr	r1, [pc, #92]	; (800b848 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800b7ea:	4313      	orrs	r3, r2
 800b7ec:	658b      	str	r3, [r1, #88]	; 0x58
 800b7ee:	e001      	b.n	800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7f0:	7dfb      	ldrb	r3, [r7, #23]
 800b7f2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d035      	beq.n	800b86c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b804:	2b30      	cmp	r3, #48	; 0x30
 800b806:	d01c      	beq.n	800b842 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b808:	2b30      	cmp	r3, #48	; 0x30
 800b80a:	d817      	bhi.n	800b83c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800b80c:	2b20      	cmp	r3, #32
 800b80e:	d00c      	beq.n	800b82a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800b810:	2b20      	cmp	r3, #32
 800b812:	d813      	bhi.n	800b83c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800b814:	2b00      	cmp	r3, #0
 800b816:	d019      	beq.n	800b84c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800b818:	2b10      	cmp	r3, #16
 800b81a:	d10f      	bne.n	800b83c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b81c:	4b0a      	ldr	r3, [pc, #40]	; (800b848 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800b81e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b820:	4a09      	ldr	r2, [pc, #36]	; (800b848 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800b822:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b826:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800b828:	e011      	b.n	800b84e <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	3304      	adds	r3, #4
 800b82e:	2102      	movs	r1, #2
 800b830:	4618      	mov	r0, r3
 800b832:	f001 f855 	bl	800c8e0 <RCCEx_PLL2_Config>
 800b836:	4603      	mov	r3, r0
 800b838:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800b83a:	e008      	b.n	800b84e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800b83c:	2301      	movs	r3, #1
 800b83e:	75fb      	strb	r3, [r7, #23]
      break;
 800b840:	e005      	b.n	800b84e <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 800b842:	bf00      	nop
 800b844:	e003      	b.n	800b84e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800b846:	bf00      	nop
 800b848:	58024400 	.word	0x58024400
      break;
 800b84c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b84e:	7dfb      	ldrb	r3, [r7, #23]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d109      	bne.n	800b868 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800b854:	4ba3      	ldr	r3, [pc, #652]	; (800bae4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800b856:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b858:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b860:	49a0      	ldr	r1, [pc, #640]	; (800bae4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800b862:	4313      	orrs	r3, r2
 800b864:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b866:	e001      	b.n	800b86c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b868:	7dfb      	ldrb	r3, [r7, #23]
 800b86a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b874:	2b00      	cmp	r3, #0
 800b876:	d047      	beq.n	800b908 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b87c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b880:	d030      	beq.n	800b8e4 <HAL_RCCEx_PeriphCLKConfig+0x374>
 800b882:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b886:	d82a      	bhi.n	800b8de <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800b888:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b88c:	d02c      	beq.n	800b8e8 <HAL_RCCEx_PeriphCLKConfig+0x378>
 800b88e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b892:	d824      	bhi.n	800b8de <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800b894:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b898:	d018      	beq.n	800b8cc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800b89a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b89e:	d81e      	bhi.n	800b8de <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d003      	beq.n	800b8ac <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800b8a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b8a8:	d007      	beq.n	800b8ba <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800b8aa:	e018      	b.n	800b8de <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b8ac:	4b8d      	ldr	r3, [pc, #564]	; (800bae4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800b8ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8b0:	4a8c      	ldr	r2, [pc, #560]	; (800bae4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800b8b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b8b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b8b8:	e017      	b.n	800b8ea <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	3304      	adds	r3, #4
 800b8be:	2100      	movs	r1, #0
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	f001 f80d 	bl	800c8e0 <RCCEx_PLL2_Config>
 800b8c6:	4603      	mov	r3, r0
 800b8c8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b8ca:	e00e      	b.n	800b8ea <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	3324      	adds	r3, #36	; 0x24
 800b8d0:	2100      	movs	r1, #0
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	f001 f8b6 	bl	800ca44 <RCCEx_PLL3_Config>
 800b8d8:	4603      	mov	r3, r0
 800b8da:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b8dc:	e005      	b.n	800b8ea <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b8de:	2301      	movs	r3, #1
 800b8e0:	75fb      	strb	r3, [r7, #23]
      break;
 800b8e2:	e002      	b.n	800b8ea <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800b8e4:	bf00      	nop
 800b8e6:	e000      	b.n	800b8ea <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800b8e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b8ea:	7dfb      	ldrb	r3, [r7, #23]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d109      	bne.n	800b904 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b8f0:	4b7c      	ldr	r3, [pc, #496]	; (800bae4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800b8f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8f4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8fc:	4979      	ldr	r1, [pc, #484]	; (800bae4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800b8fe:	4313      	orrs	r3, r2
 800b900:	650b      	str	r3, [r1, #80]	; 0x50
 800b902:	e001      	b.n	800b908 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b904:	7dfb      	ldrb	r3, [r7, #23]
 800b906:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b910:	2b00      	cmp	r3, #0
 800b912:	d049      	beq.n	800b9a8 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b918:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b91c:	d02e      	beq.n	800b97c <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800b91e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b922:	d828      	bhi.n	800b976 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800b924:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b928:	d02a      	beq.n	800b980 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800b92a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b92e:	d822      	bhi.n	800b976 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800b930:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b934:	d026      	beq.n	800b984 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800b936:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b93a:	d81c      	bhi.n	800b976 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800b93c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b940:	d010      	beq.n	800b964 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800b942:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b946:	d816      	bhi.n	800b976 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d01d      	beq.n	800b988 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800b94c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b950:	d111      	bne.n	800b976 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	3304      	adds	r3, #4
 800b956:	2101      	movs	r1, #1
 800b958:	4618      	mov	r0, r3
 800b95a:	f000 ffc1 	bl	800c8e0 <RCCEx_PLL2_Config>
 800b95e:	4603      	mov	r3, r0
 800b960:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800b962:	e012      	b.n	800b98a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	3324      	adds	r3, #36	; 0x24
 800b968:	2101      	movs	r1, #1
 800b96a:	4618      	mov	r0, r3
 800b96c:	f001 f86a 	bl	800ca44 <RCCEx_PLL3_Config>
 800b970:	4603      	mov	r3, r0
 800b972:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800b974:	e009      	b.n	800b98a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b976:	2301      	movs	r3, #1
 800b978:	75fb      	strb	r3, [r7, #23]
      break;
 800b97a:	e006      	b.n	800b98a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800b97c:	bf00      	nop
 800b97e:	e004      	b.n	800b98a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800b980:	bf00      	nop
 800b982:	e002      	b.n	800b98a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800b984:	bf00      	nop
 800b986:	e000      	b.n	800b98a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800b988:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b98a:	7dfb      	ldrb	r3, [r7, #23]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d109      	bne.n	800b9a4 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b990:	4b54      	ldr	r3, [pc, #336]	; (800bae4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800b992:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b994:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b99c:	4951      	ldr	r1, [pc, #324]	; (800bae4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800b99e:	4313      	orrs	r3, r2
 800b9a0:	650b      	str	r3, [r1, #80]	; 0x50
 800b9a2:	e001      	b.n	800b9a8 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9a4:	7dfb      	ldrb	r3, [r7, #23]
 800b9a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d04b      	beq.n	800ba4c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b9ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b9be:	d02e      	beq.n	800ba1e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800b9c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b9c4:	d828      	bhi.n	800ba18 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800b9c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b9ca:	d02a      	beq.n	800ba22 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800b9cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b9d0:	d822      	bhi.n	800ba18 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800b9d2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b9d6:	d026      	beq.n	800ba26 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 800b9d8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b9dc:	d81c      	bhi.n	800ba18 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800b9de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b9e2:	d010      	beq.n	800ba06 <HAL_RCCEx_PeriphCLKConfig+0x496>
 800b9e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b9e8:	d816      	bhi.n	800ba18 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d01d      	beq.n	800ba2a <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800b9ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b9f2:	d111      	bne.n	800ba18 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	3304      	adds	r3, #4
 800b9f8:	2101      	movs	r1, #1
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	f000 ff70 	bl	800c8e0 <RCCEx_PLL2_Config>
 800ba00:	4603      	mov	r3, r0
 800ba02:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800ba04:	e012      	b.n	800ba2c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	3324      	adds	r3, #36	; 0x24
 800ba0a:	2101      	movs	r1, #1
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	f001 f819 	bl	800ca44 <RCCEx_PLL3_Config>
 800ba12:	4603      	mov	r3, r0
 800ba14:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800ba16:	e009      	b.n	800ba2c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800ba18:	2301      	movs	r3, #1
 800ba1a:	75fb      	strb	r3, [r7, #23]
      break;
 800ba1c:	e006      	b.n	800ba2c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800ba1e:	bf00      	nop
 800ba20:	e004      	b.n	800ba2c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800ba22:	bf00      	nop
 800ba24:	e002      	b.n	800ba2c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800ba26:	bf00      	nop
 800ba28:	e000      	b.n	800ba2c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800ba2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ba2c:	7dfb      	ldrb	r3, [r7, #23]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d10a      	bne.n	800ba48 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800ba32:	4b2c      	ldr	r3, [pc, #176]	; (800bae4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800ba34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba36:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ba40:	4928      	ldr	r1, [pc, #160]	; (800bae4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800ba42:	4313      	orrs	r3, r2
 800ba44:	658b      	str	r3, [r1, #88]	; 0x58
 800ba46:	e001      	b.n	800ba4c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba48:	7dfb      	ldrb	r3, [r7, #23]
 800ba4a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d02f      	beq.n	800bab8 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ba5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ba60:	d00e      	beq.n	800ba80 <HAL_RCCEx_PeriphCLKConfig+0x510>
 800ba62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ba66:	d814      	bhi.n	800ba92 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d015      	beq.n	800ba98 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800ba6c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ba70:	d10f      	bne.n	800ba92 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba72:	4b1c      	ldr	r3, [pc, #112]	; (800bae4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800ba74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba76:	4a1b      	ldr	r2, [pc, #108]	; (800bae4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800ba78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ba7c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800ba7e:	e00c      	b.n	800ba9a <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	3304      	adds	r3, #4
 800ba84:	2101      	movs	r1, #1
 800ba86:	4618      	mov	r0, r3
 800ba88:	f000 ff2a 	bl	800c8e0 <RCCEx_PLL2_Config>
 800ba8c:	4603      	mov	r3, r0
 800ba8e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800ba90:	e003      	b.n	800ba9a <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ba92:	2301      	movs	r3, #1
 800ba94:	75fb      	strb	r3, [r7, #23]
      break;
 800ba96:	e000      	b.n	800ba9a <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 800ba98:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ba9a:	7dfb      	ldrb	r3, [r7, #23]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d109      	bne.n	800bab4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800baa0:	4b10      	ldr	r3, [pc, #64]	; (800bae4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800baa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800baa4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800baac:	490d      	ldr	r1, [pc, #52]	; (800bae4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800baae:	4313      	orrs	r3, r2
 800bab0:	650b      	str	r3, [r1, #80]	; 0x50
 800bab2:	e001      	b.n	800bab8 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bab4:	7dfb      	ldrb	r3, [r7, #23]
 800bab6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d034      	beq.n	800bb2e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bac8:	2b03      	cmp	r3, #3
 800baca:	d81d      	bhi.n	800bb08 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800bacc:	a201      	add	r2, pc, #4	; (adr r2, 800bad4 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800bace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bad2:	bf00      	nop
 800bad4:	0800bb0f 	.word	0x0800bb0f
 800bad8:	0800bae9 	.word	0x0800bae9
 800badc:	0800baf7 	.word	0x0800baf7
 800bae0:	0800bb0f 	.word	0x0800bb0f
 800bae4:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bae8:	4bb1      	ldr	r3, [pc, #708]	; (800bdb0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800baea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baec:	4ab0      	ldr	r2, [pc, #704]	; (800bdb0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800baee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800baf2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800baf4:	e00c      	b.n	800bb10 <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	3304      	adds	r3, #4
 800bafa:	2102      	movs	r1, #2
 800bafc:	4618      	mov	r0, r3
 800bafe:	f000 feef 	bl	800c8e0 <RCCEx_PLL2_Config>
 800bb02:	4603      	mov	r3, r0
 800bb04:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800bb06:	e003      	b.n	800bb10 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800bb08:	2301      	movs	r3, #1
 800bb0a:	75fb      	strb	r3, [r7, #23]
      break;
 800bb0c:	e000      	b.n	800bb10 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 800bb0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bb10:	7dfb      	ldrb	r3, [r7, #23]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d109      	bne.n	800bb2a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800bb16:	4ba6      	ldr	r3, [pc, #664]	; (800bdb0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800bb18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb1a:	f023 0203 	bic.w	r2, r3, #3
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb22:	49a3      	ldr	r1, [pc, #652]	; (800bdb0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800bb24:	4313      	orrs	r3, r2
 800bb26:	64cb      	str	r3, [r1, #76]	; 0x4c
 800bb28:	e001      	b.n	800bb2e <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb2a:	7dfb      	ldrb	r3, [r7, #23]
 800bb2c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	f000 8086 	beq.w	800bc48 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bb3c:	4b9d      	ldr	r3, [pc, #628]	; (800bdb4 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	4a9c      	ldr	r2, [pc, #624]	; (800bdb4 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800bb42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bb46:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bb48:	f7fb f984 	bl	8006e54 <HAL_GetTick>
 800bb4c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bb4e:	e009      	b.n	800bb64 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bb50:	f7fb f980 	bl	8006e54 <HAL_GetTick>
 800bb54:	4602      	mov	r2, r0
 800bb56:	693b      	ldr	r3, [r7, #16]
 800bb58:	1ad3      	subs	r3, r2, r3
 800bb5a:	2b64      	cmp	r3, #100	; 0x64
 800bb5c:	d902      	bls.n	800bb64 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 800bb5e:	2303      	movs	r3, #3
 800bb60:	75fb      	strb	r3, [r7, #23]
        break;
 800bb62:	e005      	b.n	800bb70 <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bb64:	4b93      	ldr	r3, [pc, #588]	; (800bdb4 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d0ef      	beq.n	800bb50 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 800bb70:	7dfb      	ldrb	r3, [r7, #23]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d166      	bne.n	800bc44 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800bb76:	4b8e      	ldr	r3, [pc, #568]	; (800bdb0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800bb78:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bb80:	4053      	eors	r3, r2
 800bb82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d013      	beq.n	800bbb2 <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800bb8a:	4b89      	ldr	r3, [pc, #548]	; (800bdb0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800bb8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bb92:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bb94:	4b86      	ldr	r3, [pc, #536]	; (800bdb0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800bb96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb98:	4a85      	ldr	r2, [pc, #532]	; (800bdb0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800bb9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bb9e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bba0:	4b83      	ldr	r3, [pc, #524]	; (800bdb0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800bba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bba4:	4a82      	ldr	r2, [pc, #520]	; (800bdb0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800bba6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bbaa:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800bbac:	4a80      	ldr	r2, [pc, #512]	; (800bdb0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bbb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bbbc:	d115      	bne.n	800bbea <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bbbe:	f7fb f949 	bl	8006e54 <HAL_GetTick>
 800bbc2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bbc4:	e00b      	b.n	800bbde <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bbc6:	f7fb f945 	bl	8006e54 <HAL_GetTick>
 800bbca:	4602      	mov	r2, r0
 800bbcc:	693b      	ldr	r3, [r7, #16]
 800bbce:	1ad3      	subs	r3, r2, r3
 800bbd0:	f241 3288 	movw	r2, #5000	; 0x1388
 800bbd4:	4293      	cmp	r3, r2
 800bbd6:	d902      	bls.n	800bbde <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 800bbd8:	2303      	movs	r3, #3
 800bbda:	75fb      	strb	r3, [r7, #23]
            break;
 800bbdc:	e005      	b.n	800bbea <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bbde:	4b74      	ldr	r3, [pc, #464]	; (800bdb0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800bbe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbe2:	f003 0302 	and.w	r3, r3, #2
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d0ed      	beq.n	800bbc6 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 800bbea:	7dfb      	ldrb	r3, [r7, #23]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d126      	bne.n	800bc3e <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bbf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bbfa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bbfe:	d10d      	bne.n	800bc1c <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 800bc00:	4b6b      	ldr	r3, [pc, #428]	; (800bdb0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800bc02:	691b      	ldr	r3, [r3, #16]
 800bc04:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bc0e:	0919      	lsrs	r1, r3, #4
 800bc10:	4b69      	ldr	r3, [pc, #420]	; (800bdb8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800bc12:	400b      	ands	r3, r1
 800bc14:	4966      	ldr	r1, [pc, #408]	; (800bdb0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800bc16:	4313      	orrs	r3, r2
 800bc18:	610b      	str	r3, [r1, #16]
 800bc1a:	e005      	b.n	800bc28 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800bc1c:	4b64      	ldr	r3, [pc, #400]	; (800bdb0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800bc1e:	691b      	ldr	r3, [r3, #16]
 800bc20:	4a63      	ldr	r2, [pc, #396]	; (800bdb0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800bc22:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800bc26:	6113      	str	r3, [r2, #16]
 800bc28:	4b61      	ldr	r3, [pc, #388]	; (800bdb0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800bc2a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bc32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bc36:	495e      	ldr	r1, [pc, #376]	; (800bdb0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800bc38:	4313      	orrs	r3, r2
 800bc3a:	670b      	str	r3, [r1, #112]	; 0x70
 800bc3c:	e004      	b.n	800bc48 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800bc3e:	7dfb      	ldrb	r3, [r7, #23]
 800bc40:	75bb      	strb	r3, [r7, #22]
 800bc42:	e001      	b.n	800bc48 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc44:	7dfb      	ldrb	r3, [r7, #23]
 800bc46:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	f003 0301 	and.w	r3, r3, #1
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d07e      	beq.n	800bd52 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc58:	2b28      	cmp	r3, #40	; 0x28
 800bc5a:	d867      	bhi.n	800bd2c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 800bc5c:	a201      	add	r2, pc, #4	; (adr r2, 800bc64 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 800bc5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc62:	bf00      	nop
 800bc64:	0800bd33 	.word	0x0800bd33
 800bc68:	0800bd2d 	.word	0x0800bd2d
 800bc6c:	0800bd2d 	.word	0x0800bd2d
 800bc70:	0800bd2d 	.word	0x0800bd2d
 800bc74:	0800bd2d 	.word	0x0800bd2d
 800bc78:	0800bd2d 	.word	0x0800bd2d
 800bc7c:	0800bd2d 	.word	0x0800bd2d
 800bc80:	0800bd2d 	.word	0x0800bd2d
 800bc84:	0800bd09 	.word	0x0800bd09
 800bc88:	0800bd2d 	.word	0x0800bd2d
 800bc8c:	0800bd2d 	.word	0x0800bd2d
 800bc90:	0800bd2d 	.word	0x0800bd2d
 800bc94:	0800bd2d 	.word	0x0800bd2d
 800bc98:	0800bd2d 	.word	0x0800bd2d
 800bc9c:	0800bd2d 	.word	0x0800bd2d
 800bca0:	0800bd2d 	.word	0x0800bd2d
 800bca4:	0800bd1b 	.word	0x0800bd1b
 800bca8:	0800bd2d 	.word	0x0800bd2d
 800bcac:	0800bd2d 	.word	0x0800bd2d
 800bcb0:	0800bd2d 	.word	0x0800bd2d
 800bcb4:	0800bd2d 	.word	0x0800bd2d
 800bcb8:	0800bd2d 	.word	0x0800bd2d
 800bcbc:	0800bd2d 	.word	0x0800bd2d
 800bcc0:	0800bd2d 	.word	0x0800bd2d
 800bcc4:	0800bd33 	.word	0x0800bd33
 800bcc8:	0800bd2d 	.word	0x0800bd2d
 800bccc:	0800bd2d 	.word	0x0800bd2d
 800bcd0:	0800bd2d 	.word	0x0800bd2d
 800bcd4:	0800bd2d 	.word	0x0800bd2d
 800bcd8:	0800bd2d 	.word	0x0800bd2d
 800bcdc:	0800bd2d 	.word	0x0800bd2d
 800bce0:	0800bd2d 	.word	0x0800bd2d
 800bce4:	0800bd33 	.word	0x0800bd33
 800bce8:	0800bd2d 	.word	0x0800bd2d
 800bcec:	0800bd2d 	.word	0x0800bd2d
 800bcf0:	0800bd2d 	.word	0x0800bd2d
 800bcf4:	0800bd2d 	.word	0x0800bd2d
 800bcf8:	0800bd2d 	.word	0x0800bd2d
 800bcfc:	0800bd2d 	.word	0x0800bd2d
 800bd00:	0800bd2d 	.word	0x0800bd2d
 800bd04:	0800bd33 	.word	0x0800bd33
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	3304      	adds	r3, #4
 800bd0c:	2101      	movs	r1, #1
 800bd0e:	4618      	mov	r0, r3
 800bd10:	f000 fde6 	bl	800c8e0 <RCCEx_PLL2_Config>
 800bd14:	4603      	mov	r3, r0
 800bd16:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800bd18:	e00c      	b.n	800bd34 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	3324      	adds	r3, #36	; 0x24
 800bd1e:	2101      	movs	r1, #1
 800bd20:	4618      	mov	r0, r3
 800bd22:	f000 fe8f 	bl	800ca44 <RCCEx_PLL3_Config>
 800bd26:	4603      	mov	r3, r0
 800bd28:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800bd2a:	e003      	b.n	800bd34 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bd2c:	2301      	movs	r3, #1
 800bd2e:	75fb      	strb	r3, [r7, #23]
      break;
 800bd30:	e000      	b.n	800bd34 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 800bd32:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bd34:	7dfb      	ldrb	r3, [r7, #23]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d109      	bne.n	800bd4e <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800bd3a:	4b1d      	ldr	r3, [pc, #116]	; (800bdb0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800bd3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd3e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd46:	491a      	ldr	r1, [pc, #104]	; (800bdb0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800bd48:	4313      	orrs	r3, r2
 800bd4a:	654b      	str	r3, [r1, #84]	; 0x54
 800bd4c:	e001      	b.n	800bd52 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd4e:	7dfb      	ldrb	r3, [r7, #23]
 800bd50:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	f003 0302 	and.w	r3, r3, #2
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d03e      	beq.n	800bddc <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd62:	2b05      	cmp	r3, #5
 800bd64:	d820      	bhi.n	800bda8 <HAL_RCCEx_PeriphCLKConfig+0x838>
 800bd66:	a201      	add	r2, pc, #4	; (adr r2, 800bd6c <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 800bd68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd6c:	0800bdbd 	.word	0x0800bdbd
 800bd70:	0800bd85 	.word	0x0800bd85
 800bd74:	0800bd97 	.word	0x0800bd97
 800bd78:	0800bdbd 	.word	0x0800bdbd
 800bd7c:	0800bdbd 	.word	0x0800bdbd
 800bd80:	0800bdbd 	.word	0x0800bdbd
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	3304      	adds	r3, #4
 800bd88:	2101      	movs	r1, #1
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	f000 fda8 	bl	800c8e0 <RCCEx_PLL2_Config>
 800bd90:	4603      	mov	r3, r0
 800bd92:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800bd94:	e013      	b.n	800bdbe <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	3324      	adds	r3, #36	; 0x24
 800bd9a:	2101      	movs	r1, #1
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	f000 fe51 	bl	800ca44 <RCCEx_PLL3_Config>
 800bda2:	4603      	mov	r3, r0
 800bda4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800bda6:	e00a      	b.n	800bdbe <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bda8:	2301      	movs	r3, #1
 800bdaa:	75fb      	strb	r3, [r7, #23]
      break;
 800bdac:	e007      	b.n	800bdbe <HAL_RCCEx_PeriphCLKConfig+0x84e>
 800bdae:	bf00      	nop
 800bdb0:	58024400 	.word	0x58024400
 800bdb4:	58024800 	.word	0x58024800
 800bdb8:	00ffffcf 	.word	0x00ffffcf
      break;
 800bdbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bdbe:	7dfb      	ldrb	r3, [r7, #23]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d109      	bne.n	800bdd8 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800bdc4:	4b9f      	ldr	r3, [pc, #636]	; (800c044 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800bdc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdc8:	f023 0207 	bic.w	r2, r3, #7
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdd0:	499c      	ldr	r1, [pc, #624]	; (800c044 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800bdd2:	4313      	orrs	r3, r2
 800bdd4:	654b      	str	r3, [r1, #84]	; 0x54
 800bdd6:	e001      	b.n	800bddc <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bdd8:	7dfb      	ldrb	r3, [r7, #23]
 800bdda:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	f003 0304 	and.w	r3, r3, #4
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d039      	beq.n	800be5c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bdee:	2b05      	cmp	r3, #5
 800bdf0:	d820      	bhi.n	800be34 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800bdf2:	a201      	add	r2, pc, #4	; (adr r2, 800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800bdf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdf8:	0800be3b 	.word	0x0800be3b
 800bdfc:	0800be11 	.word	0x0800be11
 800be00:	0800be23 	.word	0x0800be23
 800be04:	0800be3b 	.word	0x0800be3b
 800be08:	0800be3b 	.word	0x0800be3b
 800be0c:	0800be3b 	.word	0x0800be3b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	3304      	adds	r3, #4
 800be14:	2101      	movs	r1, #1
 800be16:	4618      	mov	r0, r3
 800be18:	f000 fd62 	bl	800c8e0 <RCCEx_PLL2_Config>
 800be1c:	4603      	mov	r3, r0
 800be1e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800be20:	e00c      	b.n	800be3c <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	3324      	adds	r3, #36	; 0x24
 800be26:	2101      	movs	r1, #1
 800be28:	4618      	mov	r0, r3
 800be2a:	f000 fe0b 	bl	800ca44 <RCCEx_PLL3_Config>
 800be2e:	4603      	mov	r3, r0
 800be30:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800be32:	e003      	b.n	800be3c <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800be34:	2301      	movs	r3, #1
 800be36:	75fb      	strb	r3, [r7, #23]
      break;
 800be38:	e000      	b.n	800be3c <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 800be3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800be3c:	7dfb      	ldrb	r3, [r7, #23]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d10a      	bne.n	800be58 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800be42:	4b80      	ldr	r3, [pc, #512]	; (800c044 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800be44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be46:	f023 0207 	bic.w	r2, r3, #7
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800be50:	497c      	ldr	r1, [pc, #496]	; (800c044 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800be52:	4313      	orrs	r3, r2
 800be54:	658b      	str	r3, [r1, #88]	; 0x58
 800be56:	e001      	b.n	800be5c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be58:	7dfb      	ldrb	r3, [r7, #23]
 800be5a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	f003 0320 	and.w	r3, r3, #32
 800be64:	2b00      	cmp	r3, #0
 800be66:	d04b      	beq.n	800bf00 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800be72:	d02e      	beq.n	800bed2 <HAL_RCCEx_PeriphCLKConfig+0x962>
 800be74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800be78:	d828      	bhi.n	800becc <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800be7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be7e:	d02a      	beq.n	800bed6 <HAL_RCCEx_PeriphCLKConfig+0x966>
 800be80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be84:	d822      	bhi.n	800becc <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800be86:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800be8a:	d026      	beq.n	800beda <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800be8c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800be90:	d81c      	bhi.n	800becc <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800be92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be96:	d010      	beq.n	800beba <HAL_RCCEx_PeriphCLKConfig+0x94a>
 800be98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be9c:	d816      	bhi.n	800becc <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d01d      	beq.n	800bede <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800bea2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bea6:	d111      	bne.n	800becc <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	3304      	adds	r3, #4
 800beac:	2100      	movs	r1, #0
 800beae:	4618      	mov	r0, r3
 800beb0:	f000 fd16 	bl	800c8e0 <RCCEx_PLL2_Config>
 800beb4:	4603      	mov	r3, r0
 800beb6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800beb8:	e012      	b.n	800bee0 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	3324      	adds	r3, #36	; 0x24
 800bebe:	2102      	movs	r1, #2
 800bec0:	4618      	mov	r0, r3
 800bec2:	f000 fdbf 	bl	800ca44 <RCCEx_PLL3_Config>
 800bec6:	4603      	mov	r3, r0
 800bec8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800beca:	e009      	b.n	800bee0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800becc:	2301      	movs	r3, #1
 800bece:	75fb      	strb	r3, [r7, #23]
      break;
 800bed0:	e006      	b.n	800bee0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800bed2:	bf00      	nop
 800bed4:	e004      	b.n	800bee0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800bed6:	bf00      	nop
 800bed8:	e002      	b.n	800bee0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800beda:	bf00      	nop
 800bedc:	e000      	b.n	800bee0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800bede:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bee0:	7dfb      	ldrb	r3, [r7, #23]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d10a      	bne.n	800befc <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bee6:	4b57      	ldr	r3, [pc, #348]	; (800c044 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800bee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800beea:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bef4:	4953      	ldr	r1, [pc, #332]	; (800c044 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800bef6:	4313      	orrs	r3, r2
 800bef8:	654b      	str	r3, [r1, #84]	; 0x54
 800befa:	e001      	b.n	800bf00 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800befc:	7dfb      	ldrb	r3, [r7, #23]
 800befe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d04b      	beq.n	800bfa4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bf12:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bf16:	d02e      	beq.n	800bf76 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 800bf18:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bf1c:	d828      	bhi.n	800bf70 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800bf1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf22:	d02a      	beq.n	800bf7a <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800bf24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf28:	d822      	bhi.n	800bf70 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800bf2a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bf2e:	d026      	beq.n	800bf7e <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800bf30:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bf34:	d81c      	bhi.n	800bf70 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800bf36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bf3a:	d010      	beq.n	800bf5e <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 800bf3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bf40:	d816      	bhi.n	800bf70 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d01d      	beq.n	800bf82 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800bf46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bf4a:	d111      	bne.n	800bf70 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	3304      	adds	r3, #4
 800bf50:	2100      	movs	r1, #0
 800bf52:	4618      	mov	r0, r3
 800bf54:	f000 fcc4 	bl	800c8e0 <RCCEx_PLL2_Config>
 800bf58:	4603      	mov	r3, r0
 800bf5a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800bf5c:	e012      	b.n	800bf84 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	3324      	adds	r3, #36	; 0x24
 800bf62:	2102      	movs	r1, #2
 800bf64:	4618      	mov	r0, r3
 800bf66:	f000 fd6d 	bl	800ca44 <RCCEx_PLL3_Config>
 800bf6a:	4603      	mov	r3, r0
 800bf6c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800bf6e:	e009      	b.n	800bf84 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bf70:	2301      	movs	r3, #1
 800bf72:	75fb      	strb	r3, [r7, #23]
      break;
 800bf74:	e006      	b.n	800bf84 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800bf76:	bf00      	nop
 800bf78:	e004      	b.n	800bf84 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800bf7a:	bf00      	nop
 800bf7c:	e002      	b.n	800bf84 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800bf7e:	bf00      	nop
 800bf80:	e000      	b.n	800bf84 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800bf82:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bf84:	7dfb      	ldrb	r3, [r7, #23]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d10a      	bne.n	800bfa0 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800bf8a:	4b2e      	ldr	r3, [pc, #184]	; (800c044 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800bf8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf8e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bf98:	492a      	ldr	r1, [pc, #168]	; (800c044 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800bf9a:	4313      	orrs	r3, r2
 800bf9c:	658b      	str	r3, [r1, #88]	; 0x58
 800bf9e:	e001      	b.n	800bfa4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bfa0:	7dfb      	ldrb	r3, [r7, #23]
 800bfa2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d04d      	beq.n	800c04c <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bfb6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800bfba:	d02e      	beq.n	800c01a <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 800bfbc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800bfc0:	d828      	bhi.n	800c014 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800bfc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bfc6:	d02a      	beq.n	800c01e <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800bfc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bfcc:	d822      	bhi.n	800c014 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800bfce:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800bfd2:	d026      	beq.n	800c022 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800bfd4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800bfd8:	d81c      	bhi.n	800c014 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800bfda:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bfde:	d010      	beq.n	800c002 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 800bfe0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bfe4:	d816      	bhi.n	800c014 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d01d      	beq.n	800c026 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800bfea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bfee:	d111      	bne.n	800c014 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	3304      	adds	r3, #4
 800bff4:	2100      	movs	r1, #0
 800bff6:	4618      	mov	r0, r3
 800bff8:	f000 fc72 	bl	800c8e0 <RCCEx_PLL2_Config>
 800bffc:	4603      	mov	r3, r0
 800bffe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800c000:	e012      	b.n	800c028 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	3324      	adds	r3, #36	; 0x24
 800c006:	2102      	movs	r1, #2
 800c008:	4618      	mov	r0, r3
 800c00a:	f000 fd1b 	bl	800ca44 <RCCEx_PLL3_Config>
 800c00e:	4603      	mov	r3, r0
 800c010:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800c012:	e009      	b.n	800c028 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c014:	2301      	movs	r3, #1
 800c016:	75fb      	strb	r3, [r7, #23]
      break;
 800c018:	e006      	b.n	800c028 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800c01a:	bf00      	nop
 800c01c:	e004      	b.n	800c028 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800c01e:	bf00      	nop
 800c020:	e002      	b.n	800c028 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800c022:	bf00      	nop
 800c024:	e000      	b.n	800c028 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800c026:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c028:	7dfb      	ldrb	r3, [r7, #23]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d10c      	bne.n	800c048 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c02e:	4b05      	ldr	r3, [pc, #20]	; (800c044 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800c030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c032:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c03c:	4901      	ldr	r1, [pc, #4]	; (800c044 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800c03e:	4313      	orrs	r3, r2
 800c040:	658b      	str	r3, [r1, #88]	; 0x58
 800c042:	e003      	b.n	800c04c <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800c044:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c048:	7dfb      	ldrb	r3, [r7, #23]
 800c04a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	f003 0308 	and.w	r3, r3, #8
 800c054:	2b00      	cmp	r3, #0
 800c056:	d018      	beq.n	800c08a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c05c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c060:	d10a      	bne.n	800c078 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	3324      	adds	r3, #36	; 0x24
 800c066:	2102      	movs	r1, #2
 800c068:	4618      	mov	r0, r3
 800c06a:	f000 fceb 	bl	800ca44 <RCCEx_PLL3_Config>
 800c06e:	4603      	mov	r3, r0
 800c070:	2b00      	cmp	r3, #0
 800c072:	d001      	beq.n	800c078 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 800c074:	2301      	movs	r3, #1
 800c076:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800c078:	4b8a      	ldr	r3, [pc, #552]	; (800c2a4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800c07a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c07c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c084:	4987      	ldr	r1, [pc, #540]	; (800c2a4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800c086:	4313      	orrs	r3, r2
 800c088:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	f003 0310 	and.w	r3, r3, #16
 800c092:	2b00      	cmp	r3, #0
 800c094:	d01a      	beq.n	800c0cc <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c09c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c0a0:	d10a      	bne.n	800c0b8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	3324      	adds	r3, #36	; 0x24
 800c0a6:	2102      	movs	r1, #2
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	f000 fccb 	bl	800ca44 <RCCEx_PLL3_Config>
 800c0ae:	4603      	mov	r3, r0
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d001      	beq.n	800c0b8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 800c0b4:	2301      	movs	r3, #1
 800c0b6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c0b8:	4b7a      	ldr	r3, [pc, #488]	; (800c2a4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800c0ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c0c6:	4977      	ldr	r1, [pc, #476]	; (800c2a4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800c0c8:	4313      	orrs	r3, r2
 800c0ca:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d034      	beq.n	800c142 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c0de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c0e2:	d01d      	beq.n	800c120 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800c0e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c0e8:	d817      	bhi.n	800c11a <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d003      	beq.n	800c0f6 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800c0ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c0f2:	d009      	beq.n	800c108 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c0f4:	e011      	b.n	800c11a <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	3304      	adds	r3, #4
 800c0fa:	2100      	movs	r1, #0
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	f000 fbef 	bl	800c8e0 <RCCEx_PLL2_Config>
 800c102:	4603      	mov	r3, r0
 800c104:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800c106:	e00c      	b.n	800c122 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	3324      	adds	r3, #36	; 0x24
 800c10c:	2102      	movs	r1, #2
 800c10e:	4618      	mov	r0, r3
 800c110:	f000 fc98 	bl	800ca44 <RCCEx_PLL3_Config>
 800c114:	4603      	mov	r3, r0
 800c116:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800c118:	e003      	b.n	800c122 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c11a:	2301      	movs	r3, #1
 800c11c:	75fb      	strb	r3, [r7, #23]
      break;
 800c11e:	e000      	b.n	800c122 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 800c120:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c122:	7dfb      	ldrb	r3, [r7, #23]
 800c124:	2b00      	cmp	r3, #0
 800c126:	d10a      	bne.n	800c13e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c128:	4b5e      	ldr	r3, [pc, #376]	; (800c2a4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800c12a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c12c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c136:	495b      	ldr	r1, [pc, #364]	; (800c2a4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800c138:	4313      	orrs	r3, r2
 800c13a:	658b      	str	r3, [r1, #88]	; 0x58
 800c13c:	e001      	b.n	800c142 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c13e:	7dfb      	ldrb	r3, [r7, #23]
 800c140:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d033      	beq.n	800c1b6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c154:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c158:	d01c      	beq.n	800c194 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800c15a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c15e:	d816      	bhi.n	800c18e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800c160:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c164:	d003      	beq.n	800c16e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800c166:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c16a:	d007      	beq.n	800c17c <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 800c16c:	e00f      	b.n	800c18e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c16e:	4b4d      	ldr	r3, [pc, #308]	; (800c2a4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800c170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c172:	4a4c      	ldr	r2, [pc, #304]	; (800c2a4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800c174:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c178:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800c17a:	e00c      	b.n	800c196 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	3324      	adds	r3, #36	; 0x24
 800c180:	2101      	movs	r1, #1
 800c182:	4618      	mov	r0, r3
 800c184:	f000 fc5e 	bl	800ca44 <RCCEx_PLL3_Config>
 800c188:	4603      	mov	r3, r0
 800c18a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800c18c:	e003      	b.n	800c196 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c18e:	2301      	movs	r3, #1
 800c190:	75fb      	strb	r3, [r7, #23]
      break;
 800c192:	e000      	b.n	800c196 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 800c194:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c196:	7dfb      	ldrb	r3, [r7, #23]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d10a      	bne.n	800c1b2 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c19c:	4b41      	ldr	r3, [pc, #260]	; (800c2a4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800c19e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c1aa:	493e      	ldr	r1, [pc, #248]	; (800c2a4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800c1ac:	4313      	orrs	r3, r2
 800c1ae:	654b      	str	r3, [r1, #84]	; 0x54
 800c1b0:	e001      	b.n	800c1b6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c1b2:	7dfb      	ldrb	r3, [r7, #23]
 800c1b4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d029      	beq.n	800c216 <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d003      	beq.n	800c1d2 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800c1ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c1ce:	d007      	beq.n	800c1e0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800c1d0:	e00f      	b.n	800c1f2 <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c1d2:	4b34      	ldr	r3, [pc, #208]	; (800c2a4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800c1d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1d6:	4a33      	ldr	r2, [pc, #204]	; (800c2a4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800c1d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c1dc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800c1de:	e00b      	b.n	800c1f8 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	3304      	adds	r3, #4
 800c1e4:	2102      	movs	r1, #2
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	f000 fb7a 	bl	800c8e0 <RCCEx_PLL2_Config>
 800c1ec:	4603      	mov	r3, r0
 800c1ee:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800c1f0:	e002      	b.n	800c1f8 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 800c1f2:	2301      	movs	r3, #1
 800c1f4:	75fb      	strb	r3, [r7, #23]
      break;
 800c1f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c1f8:	7dfb      	ldrb	r3, [r7, #23]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d109      	bne.n	800c212 <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c1fe:	4b29      	ldr	r3, [pc, #164]	; (800c2a4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800c200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c202:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c20a:	4926      	ldr	r1, [pc, #152]	; (800c2a4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800c20c:	4313      	orrs	r3, r2
 800c20e:	64cb      	str	r3, [r1, #76]	; 0x4c
 800c210:	e001      	b.n	800c216 <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c212:	7dfb      	ldrb	r3, [r7, #23]
 800c214:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d00a      	beq.n	800c238 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	3324      	adds	r3, #36	; 0x24
 800c226:	2102      	movs	r1, #2
 800c228:	4618      	mov	r0, r3
 800c22a:	f000 fc0b 	bl	800ca44 <RCCEx_PLL3_Config>
 800c22e:	4603      	mov	r3, r0
 800c230:	2b00      	cmp	r3, #0
 800c232:	d001      	beq.n	800c238 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 800c234:	2301      	movs	r3, #1
 800c236:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c240:	2b00      	cmp	r3, #0
 800c242:	d033      	beq.n	800c2ac <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c248:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c24c:	d017      	beq.n	800c27e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800c24e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c252:	d811      	bhi.n	800c278 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800c254:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c258:	d013      	beq.n	800c282 <HAL_RCCEx_PeriphCLKConfig+0xd12>
 800c25a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c25e:	d80b      	bhi.n	800c278 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800c260:	2b00      	cmp	r3, #0
 800c262:	d010      	beq.n	800c286 <HAL_RCCEx_PeriphCLKConfig+0xd16>
 800c264:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c268:	d106      	bne.n	800c278 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c26a:	4b0e      	ldr	r3, [pc, #56]	; (800c2a4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800c26c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c26e:	4a0d      	ldr	r2, [pc, #52]	; (800c2a4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800c270:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c274:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800c276:	e007      	b.n	800c288 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c278:	2301      	movs	r3, #1
 800c27a:	75fb      	strb	r3, [r7, #23]
      break;
 800c27c:	e004      	b.n	800c288 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800c27e:	bf00      	nop
 800c280:	e002      	b.n	800c288 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800c282:	bf00      	nop
 800c284:	e000      	b.n	800c288 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800c286:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c288:	7dfb      	ldrb	r3, [r7, #23]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d10c      	bne.n	800c2a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c28e:	4b05      	ldr	r3, [pc, #20]	; (800c2a4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800c290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c292:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c29a:	4902      	ldr	r1, [pc, #8]	; (800c2a4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800c29c:	4313      	orrs	r3, r2
 800c29e:	654b      	str	r3, [r1, #84]	; 0x54
 800c2a0:	e004      	b.n	800c2ac <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 800c2a2:	bf00      	nop
 800c2a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2a8:	7dfb      	ldrb	r3, [r7, #23]
 800c2aa:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d008      	beq.n	800c2ca <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c2b8:	4b29      	ldr	r3, [pc, #164]	; (800c360 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800c2ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c2bc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c2c4:	4926      	ldr	r1, [pc, #152]	; (800c360 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800c2c6:	4313      	orrs	r3, r2
 800c2c8:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d008      	beq.n	800c2e8 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c2d6:	4b22      	ldr	r3, [pc, #136]	; (800c360 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800c2d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c2da:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c2e2:	491f      	ldr	r1, [pc, #124]	; (800c360 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800c2e4:	4313      	orrs	r3, r2
 800c2e6:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d00d      	beq.n	800c310 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c2f4:	4b1a      	ldr	r3, [pc, #104]	; (800c360 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800c2f6:	691b      	ldr	r3, [r3, #16]
 800c2f8:	4a19      	ldr	r2, [pc, #100]	; (800c360 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800c2fa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c2fe:	6113      	str	r3, [r2, #16]
 800c300:	4b17      	ldr	r3, [pc, #92]	; (800c360 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800c302:	691a      	ldr	r2, [r3, #16]
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c30a:	4915      	ldr	r1, [pc, #84]	; (800c360 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800c30c:	4313      	orrs	r3, r2
 800c30e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	2b00      	cmp	r3, #0
 800c316:	da08      	bge.n	800c32a <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c318:	4b11      	ldr	r3, [pc, #68]	; (800c360 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800c31a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c31c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c324:	490e      	ldr	r1, [pc, #56]	; (800c360 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800c326:	4313      	orrs	r3, r2
 800c328:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c332:	2b00      	cmp	r3, #0
 800c334:	d009      	beq.n	800c34a <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c336:	4b0a      	ldr	r3, [pc, #40]	; (800c360 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800c338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c33a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c344:	4906      	ldr	r1, [pc, #24]	; (800c360 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800c346:	4313      	orrs	r3, r2
 800c348:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800c34a:	7dbb      	ldrb	r3, [r7, #22]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d101      	bne.n	800c354 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 800c350:	2300      	movs	r3, #0
 800c352:	e000      	b.n	800c356 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 800c354:	2301      	movs	r3, #1
}
 800c356:	4618      	mov	r0, r3
 800c358:	3718      	adds	r7, #24
 800c35a:	46bd      	mov	sp, r7
 800c35c:	bd80      	pop	{r7, pc}
 800c35e:	bf00      	nop
 800c360:	58024400 	.word	0x58024400

0800c364 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c364:	b580      	push	{r7, lr}
 800c366:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c368:	f7ff f8a6 	bl	800b4b8 <HAL_RCC_GetHCLKFreq>
 800c36c:	4602      	mov	r2, r0
 800c36e:	4b06      	ldr	r3, [pc, #24]	; (800c388 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c370:	6a1b      	ldr	r3, [r3, #32]
 800c372:	091b      	lsrs	r3, r3, #4
 800c374:	f003 0307 	and.w	r3, r3, #7
 800c378:	4904      	ldr	r1, [pc, #16]	; (800c38c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c37a:	5ccb      	ldrb	r3, [r1, r3]
 800c37c:	f003 031f 	and.w	r3, r3, #31
 800c380:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c384:	4618      	mov	r0, r3
 800c386:	bd80      	pop	{r7, pc}
 800c388:	58024400 	.word	0x58024400
 800c38c:	08011c38 	.word	0x08011c38

0800c390 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800c390:	b480      	push	{r7}
 800c392:	b089      	sub	sp, #36	; 0x24
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c398:	4ba1      	ldr	r3, [pc, #644]	; (800c620 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c39a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c39c:	f003 0303 	and.w	r3, r3, #3
 800c3a0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800c3a2:	4b9f      	ldr	r3, [pc, #636]	; (800c620 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c3a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3a6:	0b1b      	lsrs	r3, r3, #12
 800c3a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c3ac:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c3ae:	4b9c      	ldr	r3, [pc, #624]	; (800c620 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c3b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3b2:	091b      	lsrs	r3, r3, #4
 800c3b4:	f003 0301 	and.w	r3, r3, #1
 800c3b8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800c3ba:	4b99      	ldr	r3, [pc, #612]	; (800c620 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c3bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3be:	08db      	lsrs	r3, r3, #3
 800c3c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c3c4:	693a      	ldr	r2, [r7, #16]
 800c3c6:	fb02 f303 	mul.w	r3, r2, r3
 800c3ca:	ee07 3a90 	vmov	s15, r3
 800c3ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3d2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c3d6:	697b      	ldr	r3, [r7, #20]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	f000 8111 	beq.w	800c600 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c3de:	69bb      	ldr	r3, [r7, #24]
 800c3e0:	2b02      	cmp	r3, #2
 800c3e2:	f000 8083 	beq.w	800c4ec <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c3e6:	69bb      	ldr	r3, [r7, #24]
 800c3e8:	2b02      	cmp	r3, #2
 800c3ea:	f200 80a1 	bhi.w	800c530 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c3ee:	69bb      	ldr	r3, [r7, #24]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d003      	beq.n	800c3fc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c3f4:	69bb      	ldr	r3, [r7, #24]
 800c3f6:	2b01      	cmp	r3, #1
 800c3f8:	d056      	beq.n	800c4a8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c3fa:	e099      	b.n	800c530 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c3fc:	4b88      	ldr	r3, [pc, #544]	; (800c620 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	f003 0320 	and.w	r3, r3, #32
 800c404:	2b00      	cmp	r3, #0
 800c406:	d02d      	beq.n	800c464 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c408:	4b85      	ldr	r3, [pc, #532]	; (800c620 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	08db      	lsrs	r3, r3, #3
 800c40e:	f003 0303 	and.w	r3, r3, #3
 800c412:	4a84      	ldr	r2, [pc, #528]	; (800c624 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c414:	fa22 f303 	lsr.w	r3, r2, r3
 800c418:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c41a:	68bb      	ldr	r3, [r7, #8]
 800c41c:	ee07 3a90 	vmov	s15, r3
 800c420:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c424:	697b      	ldr	r3, [r7, #20]
 800c426:	ee07 3a90 	vmov	s15, r3
 800c42a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c42e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c432:	4b7b      	ldr	r3, [pc, #492]	; (800c620 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c436:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c43a:	ee07 3a90 	vmov	s15, r3
 800c43e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c442:	ed97 6a03 	vldr	s12, [r7, #12]
 800c446:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c628 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c44a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c44e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c452:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c456:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c45a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c45e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800c462:	e087      	b.n	800c574 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c464:	697b      	ldr	r3, [r7, #20]
 800c466:	ee07 3a90 	vmov	s15, r3
 800c46a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c46e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c62c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c472:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c476:	4b6a      	ldr	r3, [pc, #424]	; (800c620 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c47a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c47e:	ee07 3a90 	vmov	s15, r3
 800c482:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c486:	ed97 6a03 	vldr	s12, [r7, #12]
 800c48a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c628 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c48e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c492:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c496:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c49a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c49e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c4a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c4a6:	e065      	b.n	800c574 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c4a8:	697b      	ldr	r3, [r7, #20]
 800c4aa:	ee07 3a90 	vmov	s15, r3
 800c4ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4b2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c630 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c4b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c4ba:	4b59      	ldr	r3, [pc, #356]	; (800c620 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c4bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4c2:	ee07 3a90 	vmov	s15, r3
 800c4c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c4ca:	ed97 6a03 	vldr	s12, [r7, #12]
 800c4ce:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c628 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c4d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c4d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c4da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c4de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c4e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c4e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c4ea:	e043      	b.n	800c574 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c4ec:	697b      	ldr	r3, [r7, #20]
 800c4ee:	ee07 3a90 	vmov	s15, r3
 800c4f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4f6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c634 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c4fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c4fe:	4b48      	ldr	r3, [pc, #288]	; (800c620 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c502:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c506:	ee07 3a90 	vmov	s15, r3
 800c50a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c50e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c512:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c628 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c516:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c51a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c51e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c522:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c526:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c52a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c52e:	e021      	b.n	800c574 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c530:	697b      	ldr	r3, [r7, #20]
 800c532:	ee07 3a90 	vmov	s15, r3
 800c536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c53a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c630 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c53e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c542:	4b37      	ldr	r3, [pc, #220]	; (800c620 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c546:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c54a:	ee07 3a90 	vmov	s15, r3
 800c54e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c552:	ed97 6a03 	vldr	s12, [r7, #12]
 800c556:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c628 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c55a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c55e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c562:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c566:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c56a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c56e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c572:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800c574:	4b2a      	ldr	r3, [pc, #168]	; (800c620 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c578:	0a5b      	lsrs	r3, r3, #9
 800c57a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c57e:	ee07 3a90 	vmov	s15, r3
 800c582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c586:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c58a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c58e:	edd7 6a07 	vldr	s13, [r7, #28]
 800c592:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c596:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c59a:	ee17 2a90 	vmov	r2, s15
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800c5a2:	4b1f      	ldr	r3, [pc, #124]	; (800c620 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c5a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5a6:	0c1b      	lsrs	r3, r3, #16
 800c5a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c5ac:	ee07 3a90 	vmov	s15, r3
 800c5b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c5b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c5bc:	edd7 6a07 	vldr	s13, [r7, #28]
 800c5c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c5c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c5c8:	ee17 2a90 	vmov	r2, s15
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800c5d0:	4b13      	ldr	r3, [pc, #76]	; (800c620 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c5d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5d4:	0e1b      	lsrs	r3, r3, #24
 800c5d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c5da:	ee07 3a90 	vmov	s15, r3
 800c5de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c5e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c5ea:	edd7 6a07 	vldr	s13, [r7, #28]
 800c5ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c5f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c5f6:	ee17 2a90 	vmov	r2, s15
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c5fe:	e008      	b.n	800c612 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	2200      	movs	r2, #0
 800c604:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	2200      	movs	r2, #0
 800c60a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	2200      	movs	r2, #0
 800c610:	609a      	str	r2, [r3, #8]
}
 800c612:	bf00      	nop
 800c614:	3724      	adds	r7, #36	; 0x24
 800c616:	46bd      	mov	sp, r7
 800c618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c61c:	4770      	bx	lr
 800c61e:	bf00      	nop
 800c620:	58024400 	.word	0x58024400
 800c624:	03d09000 	.word	0x03d09000
 800c628:	46000000 	.word	0x46000000
 800c62c:	4c742400 	.word	0x4c742400
 800c630:	4a742400 	.word	0x4a742400
 800c634:	4af42400 	.word	0x4af42400

0800c638 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800c638:	b480      	push	{r7}
 800c63a:	b089      	sub	sp, #36	; 0x24
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c640:	4ba1      	ldr	r3, [pc, #644]	; (800c8c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c644:	f003 0303 	and.w	r3, r3, #3
 800c648:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800c64a:	4b9f      	ldr	r3, [pc, #636]	; (800c8c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c64c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c64e:	0d1b      	lsrs	r3, r3, #20
 800c650:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c654:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c656:	4b9c      	ldr	r3, [pc, #624]	; (800c8c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c65a:	0a1b      	lsrs	r3, r3, #8
 800c65c:	f003 0301 	and.w	r3, r3, #1
 800c660:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800c662:	4b99      	ldr	r3, [pc, #612]	; (800c8c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c666:	08db      	lsrs	r3, r3, #3
 800c668:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c66c:	693a      	ldr	r2, [r7, #16]
 800c66e:	fb02 f303 	mul.w	r3, r2, r3
 800c672:	ee07 3a90 	vmov	s15, r3
 800c676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c67a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c67e:	697b      	ldr	r3, [r7, #20]
 800c680:	2b00      	cmp	r3, #0
 800c682:	f000 8111 	beq.w	800c8a8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c686:	69bb      	ldr	r3, [r7, #24]
 800c688:	2b02      	cmp	r3, #2
 800c68a:	f000 8083 	beq.w	800c794 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c68e:	69bb      	ldr	r3, [r7, #24]
 800c690:	2b02      	cmp	r3, #2
 800c692:	f200 80a1 	bhi.w	800c7d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800c696:	69bb      	ldr	r3, [r7, #24]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d003      	beq.n	800c6a4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800c69c:	69bb      	ldr	r3, [r7, #24]
 800c69e:	2b01      	cmp	r3, #1
 800c6a0:	d056      	beq.n	800c750 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800c6a2:	e099      	b.n	800c7d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c6a4:	4b88      	ldr	r3, [pc, #544]	; (800c8c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	f003 0320 	and.w	r3, r3, #32
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d02d      	beq.n	800c70c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c6b0:	4b85      	ldr	r3, [pc, #532]	; (800c8c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	08db      	lsrs	r3, r3, #3
 800c6b6:	f003 0303 	and.w	r3, r3, #3
 800c6ba:	4a84      	ldr	r2, [pc, #528]	; (800c8cc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c6bc:	fa22 f303 	lsr.w	r3, r2, r3
 800c6c0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c6c2:	68bb      	ldr	r3, [r7, #8]
 800c6c4:	ee07 3a90 	vmov	s15, r3
 800c6c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c6cc:	697b      	ldr	r3, [r7, #20]
 800c6ce:	ee07 3a90 	vmov	s15, r3
 800c6d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c6da:	4b7b      	ldr	r3, [pc, #492]	; (800c8c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c6dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6e2:	ee07 3a90 	vmov	s15, r3
 800c6e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c6ea:	ed97 6a03 	vldr	s12, [r7, #12]
 800c6ee:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c8d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c6f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c6f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c6fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c6fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c702:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c706:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800c70a:	e087      	b.n	800c81c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c70c:	697b      	ldr	r3, [r7, #20]
 800c70e:	ee07 3a90 	vmov	s15, r3
 800c712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c716:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c8d4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c71a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c71e:	4b6a      	ldr	r3, [pc, #424]	; (800c8c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c722:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c726:	ee07 3a90 	vmov	s15, r3
 800c72a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c72e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c732:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c8d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c736:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c73a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c73e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c742:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c74a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c74e:	e065      	b.n	800c81c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c750:	697b      	ldr	r3, [r7, #20]
 800c752:	ee07 3a90 	vmov	s15, r3
 800c756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c75a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c8d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c75e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c762:	4b59      	ldr	r3, [pc, #356]	; (800c8c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c766:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c76a:	ee07 3a90 	vmov	s15, r3
 800c76e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c772:	ed97 6a03 	vldr	s12, [r7, #12]
 800c776:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c8d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c77a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c77e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c782:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c786:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c78a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c78e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c792:	e043      	b.n	800c81c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c794:	697b      	ldr	r3, [r7, #20]
 800c796:	ee07 3a90 	vmov	s15, r3
 800c79a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c79e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c8dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c7a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c7a6:	4b48      	ldr	r3, [pc, #288]	; (800c8c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c7a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7ae:	ee07 3a90 	vmov	s15, r3
 800c7b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c7b6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c7ba:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c8d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c7be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c7c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c7c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c7ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c7ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c7d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c7d6:	e021      	b.n	800c81c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c7d8:	697b      	ldr	r3, [r7, #20]
 800c7da:	ee07 3a90 	vmov	s15, r3
 800c7de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7e2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c8d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c7e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c7ea:	4b37      	ldr	r3, [pc, #220]	; (800c8c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c7ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7f2:	ee07 3a90 	vmov	s15, r3
 800c7f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c7fa:	ed97 6a03 	vldr	s12, [r7, #12]
 800c7fe:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c8d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c802:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c806:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c80a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c80e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c812:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c816:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c81a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800c81c:	4b2a      	ldr	r3, [pc, #168]	; (800c8c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c81e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c820:	0a5b      	lsrs	r3, r3, #9
 800c822:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c826:	ee07 3a90 	vmov	s15, r3
 800c82a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c82e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c832:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c836:	edd7 6a07 	vldr	s13, [r7, #28]
 800c83a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c83e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c842:	ee17 2a90 	vmov	r2, s15
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800c84a:	4b1f      	ldr	r3, [pc, #124]	; (800c8c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c84c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c84e:	0c1b      	lsrs	r3, r3, #16
 800c850:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c854:	ee07 3a90 	vmov	s15, r3
 800c858:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c85c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c860:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c864:	edd7 6a07 	vldr	s13, [r7, #28]
 800c868:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c86c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c870:	ee17 2a90 	vmov	r2, s15
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800c878:	4b13      	ldr	r3, [pc, #76]	; (800c8c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c87a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c87c:	0e1b      	lsrs	r3, r3, #24
 800c87e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c882:	ee07 3a90 	vmov	s15, r3
 800c886:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c88a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c88e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c892:	edd7 6a07 	vldr	s13, [r7, #28]
 800c896:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c89a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c89e:	ee17 2a90 	vmov	r2, s15
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c8a6:	e008      	b.n	800c8ba <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	2200      	movs	r2, #0
 800c8b2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	2200      	movs	r2, #0
 800c8b8:	609a      	str	r2, [r3, #8]
}
 800c8ba:	bf00      	nop
 800c8bc:	3724      	adds	r7, #36	; 0x24
 800c8be:	46bd      	mov	sp, r7
 800c8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c4:	4770      	bx	lr
 800c8c6:	bf00      	nop
 800c8c8:	58024400 	.word	0x58024400
 800c8cc:	03d09000 	.word	0x03d09000
 800c8d0:	46000000 	.word	0x46000000
 800c8d4:	4c742400 	.word	0x4c742400
 800c8d8:	4a742400 	.word	0x4a742400
 800c8dc:	4af42400 	.word	0x4af42400

0800c8e0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c8e0:	b580      	push	{r7, lr}
 800c8e2:	b084      	sub	sp, #16
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	6078      	str	r0, [r7, #4]
 800c8e8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c8ee:	4b53      	ldr	r3, [pc, #332]	; (800ca3c <RCCEx_PLL2_Config+0x15c>)
 800c8f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8f2:	f003 0303 	and.w	r3, r3, #3
 800c8f6:	2b03      	cmp	r3, #3
 800c8f8:	d101      	bne.n	800c8fe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c8fa:	2301      	movs	r3, #1
 800c8fc:	e099      	b.n	800ca32 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c8fe:	4b4f      	ldr	r3, [pc, #316]	; (800ca3c <RCCEx_PLL2_Config+0x15c>)
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	4a4e      	ldr	r2, [pc, #312]	; (800ca3c <RCCEx_PLL2_Config+0x15c>)
 800c904:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c908:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c90a:	f7fa faa3 	bl	8006e54 <HAL_GetTick>
 800c90e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c910:	e008      	b.n	800c924 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c912:	f7fa fa9f 	bl	8006e54 <HAL_GetTick>
 800c916:	4602      	mov	r2, r0
 800c918:	68bb      	ldr	r3, [r7, #8]
 800c91a:	1ad3      	subs	r3, r2, r3
 800c91c:	2b02      	cmp	r3, #2
 800c91e:	d901      	bls.n	800c924 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c920:	2303      	movs	r3, #3
 800c922:	e086      	b.n	800ca32 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c924:	4b45      	ldr	r3, [pc, #276]	; (800ca3c <RCCEx_PLL2_Config+0x15c>)
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d1f0      	bne.n	800c912 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c930:	4b42      	ldr	r3, [pc, #264]	; (800ca3c <RCCEx_PLL2_Config+0x15c>)
 800c932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c934:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	031b      	lsls	r3, r3, #12
 800c93e:	493f      	ldr	r1, [pc, #252]	; (800ca3c <RCCEx_PLL2_Config+0x15c>)
 800c940:	4313      	orrs	r3, r2
 800c942:	628b      	str	r3, [r1, #40]	; 0x28
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	685b      	ldr	r3, [r3, #4]
 800c948:	3b01      	subs	r3, #1
 800c94a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	689b      	ldr	r3, [r3, #8]
 800c952:	3b01      	subs	r3, #1
 800c954:	025b      	lsls	r3, r3, #9
 800c956:	b29b      	uxth	r3, r3
 800c958:	431a      	orrs	r2, r3
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	68db      	ldr	r3, [r3, #12]
 800c95e:	3b01      	subs	r3, #1
 800c960:	041b      	lsls	r3, r3, #16
 800c962:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c966:	431a      	orrs	r2, r3
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	691b      	ldr	r3, [r3, #16]
 800c96c:	3b01      	subs	r3, #1
 800c96e:	061b      	lsls	r3, r3, #24
 800c970:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c974:	4931      	ldr	r1, [pc, #196]	; (800ca3c <RCCEx_PLL2_Config+0x15c>)
 800c976:	4313      	orrs	r3, r2
 800c978:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c97a:	4b30      	ldr	r3, [pc, #192]	; (800ca3c <RCCEx_PLL2_Config+0x15c>)
 800c97c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c97e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	695b      	ldr	r3, [r3, #20]
 800c986:	492d      	ldr	r1, [pc, #180]	; (800ca3c <RCCEx_PLL2_Config+0x15c>)
 800c988:	4313      	orrs	r3, r2
 800c98a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c98c:	4b2b      	ldr	r3, [pc, #172]	; (800ca3c <RCCEx_PLL2_Config+0x15c>)
 800c98e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c990:	f023 0220 	bic.w	r2, r3, #32
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	699b      	ldr	r3, [r3, #24]
 800c998:	4928      	ldr	r1, [pc, #160]	; (800ca3c <RCCEx_PLL2_Config+0x15c>)
 800c99a:	4313      	orrs	r3, r2
 800c99c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c99e:	4b27      	ldr	r3, [pc, #156]	; (800ca3c <RCCEx_PLL2_Config+0x15c>)
 800c9a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9a2:	4a26      	ldr	r2, [pc, #152]	; (800ca3c <RCCEx_PLL2_Config+0x15c>)
 800c9a4:	f023 0310 	bic.w	r3, r3, #16
 800c9a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c9aa:	4b24      	ldr	r3, [pc, #144]	; (800ca3c <RCCEx_PLL2_Config+0x15c>)
 800c9ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c9ae:	4b24      	ldr	r3, [pc, #144]	; (800ca40 <RCCEx_PLL2_Config+0x160>)
 800c9b0:	4013      	ands	r3, r2
 800c9b2:	687a      	ldr	r2, [r7, #4]
 800c9b4:	69d2      	ldr	r2, [r2, #28]
 800c9b6:	00d2      	lsls	r2, r2, #3
 800c9b8:	4920      	ldr	r1, [pc, #128]	; (800ca3c <RCCEx_PLL2_Config+0x15c>)
 800c9ba:	4313      	orrs	r3, r2
 800c9bc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c9be:	4b1f      	ldr	r3, [pc, #124]	; (800ca3c <RCCEx_PLL2_Config+0x15c>)
 800c9c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9c2:	4a1e      	ldr	r2, [pc, #120]	; (800ca3c <RCCEx_PLL2_Config+0x15c>)
 800c9c4:	f043 0310 	orr.w	r3, r3, #16
 800c9c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c9ca:	683b      	ldr	r3, [r7, #0]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d106      	bne.n	800c9de <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c9d0:	4b1a      	ldr	r3, [pc, #104]	; (800ca3c <RCCEx_PLL2_Config+0x15c>)
 800c9d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9d4:	4a19      	ldr	r2, [pc, #100]	; (800ca3c <RCCEx_PLL2_Config+0x15c>)
 800c9d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c9da:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c9dc:	e00f      	b.n	800c9fe <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c9de:	683b      	ldr	r3, [r7, #0]
 800c9e0:	2b01      	cmp	r3, #1
 800c9e2:	d106      	bne.n	800c9f2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c9e4:	4b15      	ldr	r3, [pc, #84]	; (800ca3c <RCCEx_PLL2_Config+0x15c>)
 800c9e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9e8:	4a14      	ldr	r2, [pc, #80]	; (800ca3c <RCCEx_PLL2_Config+0x15c>)
 800c9ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c9ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c9f0:	e005      	b.n	800c9fe <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c9f2:	4b12      	ldr	r3, [pc, #72]	; (800ca3c <RCCEx_PLL2_Config+0x15c>)
 800c9f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9f6:	4a11      	ldr	r2, [pc, #68]	; (800ca3c <RCCEx_PLL2_Config+0x15c>)
 800c9f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c9fc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c9fe:	4b0f      	ldr	r3, [pc, #60]	; (800ca3c <RCCEx_PLL2_Config+0x15c>)
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	4a0e      	ldr	r2, [pc, #56]	; (800ca3c <RCCEx_PLL2_Config+0x15c>)
 800ca04:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ca08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ca0a:	f7fa fa23 	bl	8006e54 <HAL_GetTick>
 800ca0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ca10:	e008      	b.n	800ca24 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800ca12:	f7fa fa1f 	bl	8006e54 <HAL_GetTick>
 800ca16:	4602      	mov	r2, r0
 800ca18:	68bb      	ldr	r3, [r7, #8]
 800ca1a:	1ad3      	subs	r3, r2, r3
 800ca1c:	2b02      	cmp	r3, #2
 800ca1e:	d901      	bls.n	800ca24 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ca20:	2303      	movs	r3, #3
 800ca22:	e006      	b.n	800ca32 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ca24:	4b05      	ldr	r3, [pc, #20]	; (800ca3c <RCCEx_PLL2_Config+0x15c>)
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d0f0      	beq.n	800ca12 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800ca30:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca32:	4618      	mov	r0, r3
 800ca34:	3710      	adds	r7, #16
 800ca36:	46bd      	mov	sp, r7
 800ca38:	bd80      	pop	{r7, pc}
 800ca3a:	bf00      	nop
 800ca3c:	58024400 	.word	0x58024400
 800ca40:	ffff0007 	.word	0xffff0007

0800ca44 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800ca44:	b580      	push	{r7, lr}
 800ca46:	b084      	sub	sp, #16
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
 800ca4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ca4e:	2300      	movs	r3, #0
 800ca50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ca52:	4b53      	ldr	r3, [pc, #332]	; (800cba0 <RCCEx_PLL3_Config+0x15c>)
 800ca54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca56:	f003 0303 	and.w	r3, r3, #3
 800ca5a:	2b03      	cmp	r3, #3
 800ca5c:	d101      	bne.n	800ca62 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800ca5e:	2301      	movs	r3, #1
 800ca60:	e099      	b.n	800cb96 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800ca62:	4b4f      	ldr	r3, [pc, #316]	; (800cba0 <RCCEx_PLL3_Config+0x15c>)
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	4a4e      	ldr	r2, [pc, #312]	; (800cba0 <RCCEx_PLL3_Config+0x15c>)
 800ca68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ca6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ca6e:	f7fa f9f1 	bl	8006e54 <HAL_GetTick>
 800ca72:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ca74:	e008      	b.n	800ca88 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800ca76:	f7fa f9ed 	bl	8006e54 <HAL_GetTick>
 800ca7a:	4602      	mov	r2, r0
 800ca7c:	68bb      	ldr	r3, [r7, #8]
 800ca7e:	1ad3      	subs	r3, r2, r3
 800ca80:	2b02      	cmp	r3, #2
 800ca82:	d901      	bls.n	800ca88 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ca84:	2303      	movs	r3, #3
 800ca86:	e086      	b.n	800cb96 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ca88:	4b45      	ldr	r3, [pc, #276]	; (800cba0 <RCCEx_PLL3_Config+0x15c>)
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d1f0      	bne.n	800ca76 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800ca94:	4b42      	ldr	r3, [pc, #264]	; (800cba0 <RCCEx_PLL3_Config+0x15c>)
 800ca96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca98:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	051b      	lsls	r3, r3, #20
 800caa2:	493f      	ldr	r1, [pc, #252]	; (800cba0 <RCCEx_PLL3_Config+0x15c>)
 800caa4:	4313      	orrs	r3, r2
 800caa6:	628b      	str	r3, [r1, #40]	; 0x28
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	685b      	ldr	r3, [r3, #4]
 800caac:	3b01      	subs	r3, #1
 800caae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	689b      	ldr	r3, [r3, #8]
 800cab6:	3b01      	subs	r3, #1
 800cab8:	025b      	lsls	r3, r3, #9
 800caba:	b29b      	uxth	r3, r3
 800cabc:	431a      	orrs	r2, r3
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	68db      	ldr	r3, [r3, #12]
 800cac2:	3b01      	subs	r3, #1
 800cac4:	041b      	lsls	r3, r3, #16
 800cac6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800caca:	431a      	orrs	r2, r3
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	691b      	ldr	r3, [r3, #16]
 800cad0:	3b01      	subs	r3, #1
 800cad2:	061b      	lsls	r3, r3, #24
 800cad4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800cad8:	4931      	ldr	r1, [pc, #196]	; (800cba0 <RCCEx_PLL3_Config+0x15c>)
 800cada:	4313      	orrs	r3, r2
 800cadc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800cade:	4b30      	ldr	r3, [pc, #192]	; (800cba0 <RCCEx_PLL3_Config+0x15c>)
 800cae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cae2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	695b      	ldr	r3, [r3, #20]
 800caea:	492d      	ldr	r1, [pc, #180]	; (800cba0 <RCCEx_PLL3_Config+0x15c>)
 800caec:	4313      	orrs	r3, r2
 800caee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800caf0:	4b2b      	ldr	r3, [pc, #172]	; (800cba0 <RCCEx_PLL3_Config+0x15c>)
 800caf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caf4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	699b      	ldr	r3, [r3, #24]
 800cafc:	4928      	ldr	r1, [pc, #160]	; (800cba0 <RCCEx_PLL3_Config+0x15c>)
 800cafe:	4313      	orrs	r3, r2
 800cb00:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800cb02:	4b27      	ldr	r3, [pc, #156]	; (800cba0 <RCCEx_PLL3_Config+0x15c>)
 800cb04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb06:	4a26      	ldr	r2, [pc, #152]	; (800cba0 <RCCEx_PLL3_Config+0x15c>)
 800cb08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cb0c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800cb0e:	4b24      	ldr	r3, [pc, #144]	; (800cba0 <RCCEx_PLL3_Config+0x15c>)
 800cb10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cb12:	4b24      	ldr	r3, [pc, #144]	; (800cba4 <RCCEx_PLL3_Config+0x160>)
 800cb14:	4013      	ands	r3, r2
 800cb16:	687a      	ldr	r2, [r7, #4]
 800cb18:	69d2      	ldr	r2, [r2, #28]
 800cb1a:	00d2      	lsls	r2, r2, #3
 800cb1c:	4920      	ldr	r1, [pc, #128]	; (800cba0 <RCCEx_PLL3_Config+0x15c>)
 800cb1e:	4313      	orrs	r3, r2
 800cb20:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800cb22:	4b1f      	ldr	r3, [pc, #124]	; (800cba0 <RCCEx_PLL3_Config+0x15c>)
 800cb24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb26:	4a1e      	ldr	r2, [pc, #120]	; (800cba0 <RCCEx_PLL3_Config+0x15c>)
 800cb28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cb2c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800cb2e:	683b      	ldr	r3, [r7, #0]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d106      	bne.n	800cb42 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800cb34:	4b1a      	ldr	r3, [pc, #104]	; (800cba0 <RCCEx_PLL3_Config+0x15c>)
 800cb36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb38:	4a19      	ldr	r2, [pc, #100]	; (800cba0 <RCCEx_PLL3_Config+0x15c>)
 800cb3a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800cb3e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cb40:	e00f      	b.n	800cb62 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800cb42:	683b      	ldr	r3, [r7, #0]
 800cb44:	2b01      	cmp	r3, #1
 800cb46:	d106      	bne.n	800cb56 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800cb48:	4b15      	ldr	r3, [pc, #84]	; (800cba0 <RCCEx_PLL3_Config+0x15c>)
 800cb4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb4c:	4a14      	ldr	r2, [pc, #80]	; (800cba0 <RCCEx_PLL3_Config+0x15c>)
 800cb4e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800cb52:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cb54:	e005      	b.n	800cb62 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800cb56:	4b12      	ldr	r3, [pc, #72]	; (800cba0 <RCCEx_PLL3_Config+0x15c>)
 800cb58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb5a:	4a11      	ldr	r2, [pc, #68]	; (800cba0 <RCCEx_PLL3_Config+0x15c>)
 800cb5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cb60:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800cb62:	4b0f      	ldr	r3, [pc, #60]	; (800cba0 <RCCEx_PLL3_Config+0x15c>)
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	4a0e      	ldr	r2, [pc, #56]	; (800cba0 <RCCEx_PLL3_Config+0x15c>)
 800cb68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cb6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cb6e:	f7fa f971 	bl	8006e54 <HAL_GetTick>
 800cb72:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cb74:	e008      	b.n	800cb88 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800cb76:	f7fa f96d 	bl	8006e54 <HAL_GetTick>
 800cb7a:	4602      	mov	r2, r0
 800cb7c:	68bb      	ldr	r3, [r7, #8]
 800cb7e:	1ad3      	subs	r3, r2, r3
 800cb80:	2b02      	cmp	r3, #2
 800cb82:	d901      	bls.n	800cb88 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cb84:	2303      	movs	r3, #3
 800cb86:	e006      	b.n	800cb96 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cb88:	4b05      	ldr	r3, [pc, #20]	; (800cba0 <RCCEx_PLL3_Config+0x15c>)
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d0f0      	beq.n	800cb76 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800cb94:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb96:	4618      	mov	r0, r3
 800cb98:	3710      	adds	r7, #16
 800cb9a:	46bd      	mov	sp, r7
 800cb9c:	bd80      	pop	{r7, pc}
 800cb9e:	bf00      	nop
 800cba0:	58024400 	.word	0x58024400
 800cba4:	ffff0007 	.word	0xffff0007

0800cba8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b082      	sub	sp, #8
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d101      	bne.n	800cbba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800cbb6:	2301      	movs	r3, #1
 800cbb8:	e049      	b.n	800cc4e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cbc0:	b2db      	uxtb	r3, r3
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d106      	bne.n	800cbd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	2200      	movs	r2, #0
 800cbca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800cbce:	6878      	ldr	r0, [r7, #4]
 800cbd0:	f7f9 fa56 	bl	8006080 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	2202      	movs	r2, #2
 800cbd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	681a      	ldr	r2, [r3, #0]
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	3304      	adds	r3, #4
 800cbe4:	4619      	mov	r1, r3
 800cbe6:	4610      	mov	r0, r2
 800cbe8:	f001 f820 	bl	800dc2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	2201      	movs	r2, #1
 800cbf0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	2201      	movs	r2, #1
 800cbf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	2201      	movs	r2, #1
 800cc00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	2201      	movs	r2, #1
 800cc08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	2201      	movs	r2, #1
 800cc10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	2201      	movs	r2, #1
 800cc18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	2201      	movs	r2, #1
 800cc20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	2201      	movs	r2, #1
 800cc28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	2201      	movs	r2, #1
 800cc30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	2201      	movs	r2, #1
 800cc38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	2201      	movs	r2, #1
 800cc40:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	2201      	movs	r2, #1
 800cc48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cc4c:	2300      	movs	r3, #0
}
 800cc4e:	4618      	mov	r0, r3
 800cc50:	3708      	adds	r7, #8
 800cc52:	46bd      	mov	sp, r7
 800cc54:	bd80      	pop	{r7, pc}
	...

0800cc58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800cc58:	b480      	push	{r7}
 800cc5a:	b085      	sub	sp, #20
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cc66:	b2db      	uxtb	r3, r3
 800cc68:	2b01      	cmp	r3, #1
 800cc6a:	d001      	beq.n	800cc70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800cc6c:	2301      	movs	r3, #1
 800cc6e:	e05e      	b.n	800cd2e <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	2202      	movs	r2, #2
 800cc74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	68da      	ldr	r2, [r3, #12]
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	f042 0201 	orr.w	r2, r2, #1
 800cc86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	4a2b      	ldr	r2, [pc, #172]	; (800cd3c <HAL_TIM_Base_Start_IT+0xe4>)
 800cc8e:	4293      	cmp	r3, r2
 800cc90:	d02c      	beq.n	800ccec <HAL_TIM_Base_Start_IT+0x94>
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc9a:	d027      	beq.n	800ccec <HAL_TIM_Base_Start_IT+0x94>
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	4a27      	ldr	r2, [pc, #156]	; (800cd40 <HAL_TIM_Base_Start_IT+0xe8>)
 800cca2:	4293      	cmp	r3, r2
 800cca4:	d022      	beq.n	800ccec <HAL_TIM_Base_Start_IT+0x94>
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	4a26      	ldr	r2, [pc, #152]	; (800cd44 <HAL_TIM_Base_Start_IT+0xec>)
 800ccac:	4293      	cmp	r3, r2
 800ccae:	d01d      	beq.n	800ccec <HAL_TIM_Base_Start_IT+0x94>
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	4a24      	ldr	r2, [pc, #144]	; (800cd48 <HAL_TIM_Base_Start_IT+0xf0>)
 800ccb6:	4293      	cmp	r3, r2
 800ccb8:	d018      	beq.n	800ccec <HAL_TIM_Base_Start_IT+0x94>
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	4a23      	ldr	r2, [pc, #140]	; (800cd4c <HAL_TIM_Base_Start_IT+0xf4>)
 800ccc0:	4293      	cmp	r3, r2
 800ccc2:	d013      	beq.n	800ccec <HAL_TIM_Base_Start_IT+0x94>
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	4a21      	ldr	r2, [pc, #132]	; (800cd50 <HAL_TIM_Base_Start_IT+0xf8>)
 800ccca:	4293      	cmp	r3, r2
 800cccc:	d00e      	beq.n	800ccec <HAL_TIM_Base_Start_IT+0x94>
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	4a20      	ldr	r2, [pc, #128]	; (800cd54 <HAL_TIM_Base_Start_IT+0xfc>)
 800ccd4:	4293      	cmp	r3, r2
 800ccd6:	d009      	beq.n	800ccec <HAL_TIM_Base_Start_IT+0x94>
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	4a1e      	ldr	r2, [pc, #120]	; (800cd58 <HAL_TIM_Base_Start_IT+0x100>)
 800ccde:	4293      	cmp	r3, r2
 800cce0:	d004      	beq.n	800ccec <HAL_TIM_Base_Start_IT+0x94>
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	4a1d      	ldr	r2, [pc, #116]	; (800cd5c <HAL_TIM_Base_Start_IT+0x104>)
 800cce8:	4293      	cmp	r3, r2
 800ccea:	d115      	bne.n	800cd18 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	689a      	ldr	r2, [r3, #8]
 800ccf2:	4b1b      	ldr	r3, [pc, #108]	; (800cd60 <HAL_TIM_Base_Start_IT+0x108>)
 800ccf4:	4013      	ands	r3, r2
 800ccf6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	2b06      	cmp	r3, #6
 800ccfc:	d015      	beq.n	800cd2a <HAL_TIM_Base_Start_IT+0xd2>
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cd04:	d011      	beq.n	800cd2a <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	681a      	ldr	r2, [r3, #0]
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	f042 0201 	orr.w	r2, r2, #1
 800cd14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cd16:	e008      	b.n	800cd2a <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	681a      	ldr	r2, [r3, #0]
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	f042 0201 	orr.w	r2, r2, #1
 800cd26:	601a      	str	r2, [r3, #0]
 800cd28:	e000      	b.n	800cd2c <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cd2a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800cd2c:	2300      	movs	r3, #0
}
 800cd2e:	4618      	mov	r0, r3
 800cd30:	3714      	adds	r7, #20
 800cd32:	46bd      	mov	sp, r7
 800cd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd38:	4770      	bx	lr
 800cd3a:	bf00      	nop
 800cd3c:	40010000 	.word	0x40010000
 800cd40:	40000400 	.word	0x40000400
 800cd44:	40000800 	.word	0x40000800
 800cd48:	40000c00 	.word	0x40000c00
 800cd4c:	40010400 	.word	0x40010400
 800cd50:	40001800 	.word	0x40001800
 800cd54:	40014000 	.word	0x40014000
 800cd58:	4000e000 	.word	0x4000e000
 800cd5c:	4000e400 	.word	0x4000e400
 800cd60:	00010007 	.word	0x00010007

0800cd64 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800cd64:	b580      	push	{r7, lr}
 800cd66:	b082      	sub	sp, #8
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d101      	bne.n	800cd76 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800cd72:	2301      	movs	r3, #1
 800cd74:	e049      	b.n	800ce0a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cd7c:	b2db      	uxtb	r3, r3
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d106      	bne.n	800cd90 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	2200      	movs	r2, #0
 800cd86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800cd8a:	6878      	ldr	r0, [r7, #4]
 800cd8c:	f7f9 fa0e 	bl	80061ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	2202      	movs	r2, #2
 800cd94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681a      	ldr	r2, [r3, #0]
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	3304      	adds	r3, #4
 800cda0:	4619      	mov	r1, r3
 800cda2:	4610      	mov	r0, r2
 800cda4:	f000 ff42 	bl	800dc2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	2201      	movs	r2, #1
 800cdac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	2201      	movs	r2, #1
 800cdb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	2201      	movs	r2, #1
 800cdbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	2201      	movs	r2, #1
 800cdc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	2201      	movs	r2, #1
 800cdcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	2201      	movs	r2, #1
 800cdd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	2201      	movs	r2, #1
 800cddc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	2201      	movs	r2, #1
 800cde4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	2201      	movs	r2, #1
 800cdec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	2201      	movs	r2, #1
 800cdf4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	2201      	movs	r2, #1
 800cdfc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	2201      	movs	r2, #1
 800ce04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ce08:	2300      	movs	r3, #0
}
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	3708      	adds	r7, #8
 800ce0e:	46bd      	mov	sp, r7
 800ce10:	bd80      	pop	{r7, pc}
	...

0800ce14 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ce14:	b580      	push	{r7, lr}
 800ce16:	b084      	sub	sp, #16
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	6078      	str	r0, [r7, #4]
 800ce1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ce1e:	683b      	ldr	r3, [r7, #0]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d109      	bne.n	800ce38 <HAL_TIM_PWM_Start+0x24>
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ce2a:	b2db      	uxtb	r3, r3
 800ce2c:	2b01      	cmp	r3, #1
 800ce2e:	bf14      	ite	ne
 800ce30:	2301      	movne	r3, #1
 800ce32:	2300      	moveq	r3, #0
 800ce34:	b2db      	uxtb	r3, r3
 800ce36:	e03c      	b.n	800ceb2 <HAL_TIM_PWM_Start+0x9e>
 800ce38:	683b      	ldr	r3, [r7, #0]
 800ce3a:	2b04      	cmp	r3, #4
 800ce3c:	d109      	bne.n	800ce52 <HAL_TIM_PWM_Start+0x3e>
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ce44:	b2db      	uxtb	r3, r3
 800ce46:	2b01      	cmp	r3, #1
 800ce48:	bf14      	ite	ne
 800ce4a:	2301      	movne	r3, #1
 800ce4c:	2300      	moveq	r3, #0
 800ce4e:	b2db      	uxtb	r3, r3
 800ce50:	e02f      	b.n	800ceb2 <HAL_TIM_PWM_Start+0x9e>
 800ce52:	683b      	ldr	r3, [r7, #0]
 800ce54:	2b08      	cmp	r3, #8
 800ce56:	d109      	bne.n	800ce6c <HAL_TIM_PWM_Start+0x58>
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ce5e:	b2db      	uxtb	r3, r3
 800ce60:	2b01      	cmp	r3, #1
 800ce62:	bf14      	ite	ne
 800ce64:	2301      	movne	r3, #1
 800ce66:	2300      	moveq	r3, #0
 800ce68:	b2db      	uxtb	r3, r3
 800ce6a:	e022      	b.n	800ceb2 <HAL_TIM_PWM_Start+0x9e>
 800ce6c:	683b      	ldr	r3, [r7, #0]
 800ce6e:	2b0c      	cmp	r3, #12
 800ce70:	d109      	bne.n	800ce86 <HAL_TIM_PWM_Start+0x72>
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ce78:	b2db      	uxtb	r3, r3
 800ce7a:	2b01      	cmp	r3, #1
 800ce7c:	bf14      	ite	ne
 800ce7e:	2301      	movne	r3, #1
 800ce80:	2300      	moveq	r3, #0
 800ce82:	b2db      	uxtb	r3, r3
 800ce84:	e015      	b.n	800ceb2 <HAL_TIM_PWM_Start+0x9e>
 800ce86:	683b      	ldr	r3, [r7, #0]
 800ce88:	2b10      	cmp	r3, #16
 800ce8a:	d109      	bne.n	800cea0 <HAL_TIM_PWM_Start+0x8c>
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ce92:	b2db      	uxtb	r3, r3
 800ce94:	2b01      	cmp	r3, #1
 800ce96:	bf14      	ite	ne
 800ce98:	2301      	movne	r3, #1
 800ce9a:	2300      	moveq	r3, #0
 800ce9c:	b2db      	uxtb	r3, r3
 800ce9e:	e008      	b.n	800ceb2 <HAL_TIM_PWM_Start+0x9e>
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800cea6:	b2db      	uxtb	r3, r3
 800cea8:	2b01      	cmp	r3, #1
 800ceaa:	bf14      	ite	ne
 800ceac:	2301      	movne	r3, #1
 800ceae:	2300      	moveq	r3, #0
 800ceb0:	b2db      	uxtb	r3, r3
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d001      	beq.n	800ceba <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800ceb6:	2301      	movs	r3, #1
 800ceb8:	e0ab      	b.n	800d012 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ceba:	683b      	ldr	r3, [r7, #0]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d104      	bne.n	800ceca <HAL_TIM_PWM_Start+0xb6>
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	2202      	movs	r2, #2
 800cec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cec8:	e023      	b.n	800cf12 <HAL_TIM_PWM_Start+0xfe>
 800ceca:	683b      	ldr	r3, [r7, #0]
 800cecc:	2b04      	cmp	r3, #4
 800cece:	d104      	bne.n	800ceda <HAL_TIM_PWM_Start+0xc6>
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	2202      	movs	r2, #2
 800ced4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ced8:	e01b      	b.n	800cf12 <HAL_TIM_PWM_Start+0xfe>
 800ceda:	683b      	ldr	r3, [r7, #0]
 800cedc:	2b08      	cmp	r3, #8
 800cede:	d104      	bne.n	800ceea <HAL_TIM_PWM_Start+0xd6>
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	2202      	movs	r2, #2
 800cee4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cee8:	e013      	b.n	800cf12 <HAL_TIM_PWM_Start+0xfe>
 800ceea:	683b      	ldr	r3, [r7, #0]
 800ceec:	2b0c      	cmp	r3, #12
 800ceee:	d104      	bne.n	800cefa <HAL_TIM_PWM_Start+0xe6>
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	2202      	movs	r2, #2
 800cef4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cef8:	e00b      	b.n	800cf12 <HAL_TIM_PWM_Start+0xfe>
 800cefa:	683b      	ldr	r3, [r7, #0]
 800cefc:	2b10      	cmp	r3, #16
 800cefe:	d104      	bne.n	800cf0a <HAL_TIM_PWM_Start+0xf6>
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	2202      	movs	r2, #2
 800cf04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cf08:	e003      	b.n	800cf12 <HAL_TIM_PWM_Start+0xfe>
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	2202      	movs	r2, #2
 800cf0e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	2201      	movs	r2, #1
 800cf18:	6839      	ldr	r1, [r7, #0]
 800cf1a:	4618      	mov	r0, r3
 800cf1c:	f001 faa0 	bl	800e460 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	4a3d      	ldr	r2, [pc, #244]	; (800d01c <HAL_TIM_PWM_Start+0x208>)
 800cf26:	4293      	cmp	r3, r2
 800cf28:	d013      	beq.n	800cf52 <HAL_TIM_PWM_Start+0x13e>
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	4a3c      	ldr	r2, [pc, #240]	; (800d020 <HAL_TIM_PWM_Start+0x20c>)
 800cf30:	4293      	cmp	r3, r2
 800cf32:	d00e      	beq.n	800cf52 <HAL_TIM_PWM_Start+0x13e>
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	4a3a      	ldr	r2, [pc, #232]	; (800d024 <HAL_TIM_PWM_Start+0x210>)
 800cf3a:	4293      	cmp	r3, r2
 800cf3c:	d009      	beq.n	800cf52 <HAL_TIM_PWM_Start+0x13e>
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	4a39      	ldr	r2, [pc, #228]	; (800d028 <HAL_TIM_PWM_Start+0x214>)
 800cf44:	4293      	cmp	r3, r2
 800cf46:	d004      	beq.n	800cf52 <HAL_TIM_PWM_Start+0x13e>
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	4a37      	ldr	r2, [pc, #220]	; (800d02c <HAL_TIM_PWM_Start+0x218>)
 800cf4e:	4293      	cmp	r3, r2
 800cf50:	d101      	bne.n	800cf56 <HAL_TIM_PWM_Start+0x142>
 800cf52:	2301      	movs	r3, #1
 800cf54:	e000      	b.n	800cf58 <HAL_TIM_PWM_Start+0x144>
 800cf56:	2300      	movs	r3, #0
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d007      	beq.n	800cf6c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cf6a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	4a2a      	ldr	r2, [pc, #168]	; (800d01c <HAL_TIM_PWM_Start+0x208>)
 800cf72:	4293      	cmp	r3, r2
 800cf74:	d02c      	beq.n	800cfd0 <HAL_TIM_PWM_Start+0x1bc>
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf7e:	d027      	beq.n	800cfd0 <HAL_TIM_PWM_Start+0x1bc>
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	4a2a      	ldr	r2, [pc, #168]	; (800d030 <HAL_TIM_PWM_Start+0x21c>)
 800cf86:	4293      	cmp	r3, r2
 800cf88:	d022      	beq.n	800cfd0 <HAL_TIM_PWM_Start+0x1bc>
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	4a29      	ldr	r2, [pc, #164]	; (800d034 <HAL_TIM_PWM_Start+0x220>)
 800cf90:	4293      	cmp	r3, r2
 800cf92:	d01d      	beq.n	800cfd0 <HAL_TIM_PWM_Start+0x1bc>
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	4a27      	ldr	r2, [pc, #156]	; (800d038 <HAL_TIM_PWM_Start+0x224>)
 800cf9a:	4293      	cmp	r3, r2
 800cf9c:	d018      	beq.n	800cfd0 <HAL_TIM_PWM_Start+0x1bc>
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	4a1f      	ldr	r2, [pc, #124]	; (800d020 <HAL_TIM_PWM_Start+0x20c>)
 800cfa4:	4293      	cmp	r3, r2
 800cfa6:	d013      	beq.n	800cfd0 <HAL_TIM_PWM_Start+0x1bc>
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	4a23      	ldr	r2, [pc, #140]	; (800d03c <HAL_TIM_PWM_Start+0x228>)
 800cfae:	4293      	cmp	r3, r2
 800cfb0:	d00e      	beq.n	800cfd0 <HAL_TIM_PWM_Start+0x1bc>
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	4a1b      	ldr	r2, [pc, #108]	; (800d024 <HAL_TIM_PWM_Start+0x210>)
 800cfb8:	4293      	cmp	r3, r2
 800cfba:	d009      	beq.n	800cfd0 <HAL_TIM_PWM_Start+0x1bc>
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	4a1f      	ldr	r2, [pc, #124]	; (800d040 <HAL_TIM_PWM_Start+0x22c>)
 800cfc2:	4293      	cmp	r3, r2
 800cfc4:	d004      	beq.n	800cfd0 <HAL_TIM_PWM_Start+0x1bc>
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	4a1e      	ldr	r2, [pc, #120]	; (800d044 <HAL_TIM_PWM_Start+0x230>)
 800cfcc:	4293      	cmp	r3, r2
 800cfce:	d115      	bne.n	800cffc <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	689a      	ldr	r2, [r3, #8]
 800cfd6:	4b1c      	ldr	r3, [pc, #112]	; (800d048 <HAL_TIM_PWM_Start+0x234>)
 800cfd8:	4013      	ands	r3, r2
 800cfda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	2b06      	cmp	r3, #6
 800cfe0:	d015      	beq.n	800d00e <HAL_TIM_PWM_Start+0x1fa>
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cfe8:	d011      	beq.n	800d00e <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	681a      	ldr	r2, [r3, #0]
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	f042 0201 	orr.w	r2, r2, #1
 800cff8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cffa:	e008      	b.n	800d00e <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	681a      	ldr	r2, [r3, #0]
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	f042 0201 	orr.w	r2, r2, #1
 800d00a:	601a      	str	r2, [r3, #0]
 800d00c:	e000      	b.n	800d010 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d00e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d010:	2300      	movs	r3, #0
}
 800d012:	4618      	mov	r0, r3
 800d014:	3710      	adds	r7, #16
 800d016:	46bd      	mov	sp, r7
 800d018:	bd80      	pop	{r7, pc}
 800d01a:	bf00      	nop
 800d01c:	40010000 	.word	0x40010000
 800d020:	40010400 	.word	0x40010400
 800d024:	40014000 	.word	0x40014000
 800d028:	40014400 	.word	0x40014400
 800d02c:	40014800 	.word	0x40014800
 800d030:	40000400 	.word	0x40000400
 800d034:	40000800 	.word	0x40000800
 800d038:	40000c00 	.word	0x40000c00
 800d03c:	40001800 	.word	0x40001800
 800d040:	4000e000 	.word	0x4000e000
 800d044:	4000e400 	.word	0x4000e400
 800d048:	00010007 	.word	0x00010007

0800d04c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d04c:	b580      	push	{r7, lr}
 800d04e:	b084      	sub	sp, #16
 800d050:	af00      	add	r7, sp, #0
 800d052:	6078      	str	r0, [r7, #4]
 800d054:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d056:	2300      	movs	r3, #0
 800d058:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d05a:	683b      	ldr	r3, [r7, #0]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d109      	bne.n	800d074 <HAL_TIM_PWM_Start_IT+0x28>
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d066:	b2db      	uxtb	r3, r3
 800d068:	2b01      	cmp	r3, #1
 800d06a:	bf14      	ite	ne
 800d06c:	2301      	movne	r3, #1
 800d06e:	2300      	moveq	r3, #0
 800d070:	b2db      	uxtb	r3, r3
 800d072:	e03c      	b.n	800d0ee <HAL_TIM_PWM_Start_IT+0xa2>
 800d074:	683b      	ldr	r3, [r7, #0]
 800d076:	2b04      	cmp	r3, #4
 800d078:	d109      	bne.n	800d08e <HAL_TIM_PWM_Start_IT+0x42>
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d080:	b2db      	uxtb	r3, r3
 800d082:	2b01      	cmp	r3, #1
 800d084:	bf14      	ite	ne
 800d086:	2301      	movne	r3, #1
 800d088:	2300      	moveq	r3, #0
 800d08a:	b2db      	uxtb	r3, r3
 800d08c:	e02f      	b.n	800d0ee <HAL_TIM_PWM_Start_IT+0xa2>
 800d08e:	683b      	ldr	r3, [r7, #0]
 800d090:	2b08      	cmp	r3, #8
 800d092:	d109      	bne.n	800d0a8 <HAL_TIM_PWM_Start_IT+0x5c>
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d09a:	b2db      	uxtb	r3, r3
 800d09c:	2b01      	cmp	r3, #1
 800d09e:	bf14      	ite	ne
 800d0a0:	2301      	movne	r3, #1
 800d0a2:	2300      	moveq	r3, #0
 800d0a4:	b2db      	uxtb	r3, r3
 800d0a6:	e022      	b.n	800d0ee <HAL_TIM_PWM_Start_IT+0xa2>
 800d0a8:	683b      	ldr	r3, [r7, #0]
 800d0aa:	2b0c      	cmp	r3, #12
 800d0ac:	d109      	bne.n	800d0c2 <HAL_TIM_PWM_Start_IT+0x76>
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d0b4:	b2db      	uxtb	r3, r3
 800d0b6:	2b01      	cmp	r3, #1
 800d0b8:	bf14      	ite	ne
 800d0ba:	2301      	movne	r3, #1
 800d0bc:	2300      	moveq	r3, #0
 800d0be:	b2db      	uxtb	r3, r3
 800d0c0:	e015      	b.n	800d0ee <HAL_TIM_PWM_Start_IT+0xa2>
 800d0c2:	683b      	ldr	r3, [r7, #0]
 800d0c4:	2b10      	cmp	r3, #16
 800d0c6:	d109      	bne.n	800d0dc <HAL_TIM_PWM_Start_IT+0x90>
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d0ce:	b2db      	uxtb	r3, r3
 800d0d0:	2b01      	cmp	r3, #1
 800d0d2:	bf14      	ite	ne
 800d0d4:	2301      	movne	r3, #1
 800d0d6:	2300      	moveq	r3, #0
 800d0d8:	b2db      	uxtb	r3, r3
 800d0da:	e008      	b.n	800d0ee <HAL_TIM_PWM_Start_IT+0xa2>
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d0e2:	b2db      	uxtb	r3, r3
 800d0e4:	2b01      	cmp	r3, #1
 800d0e6:	bf14      	ite	ne
 800d0e8:	2301      	movne	r3, #1
 800d0ea:	2300      	moveq	r3, #0
 800d0ec:	b2db      	uxtb	r3, r3
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d001      	beq.n	800d0f6 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800d0f2:	2301      	movs	r3, #1
 800d0f4:	e0f6      	b.n	800d2e4 <HAL_TIM_PWM_Start_IT+0x298>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d0f6:	683b      	ldr	r3, [r7, #0]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d104      	bne.n	800d106 <HAL_TIM_PWM_Start_IT+0xba>
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	2202      	movs	r2, #2
 800d100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d104:	e023      	b.n	800d14e <HAL_TIM_PWM_Start_IT+0x102>
 800d106:	683b      	ldr	r3, [r7, #0]
 800d108:	2b04      	cmp	r3, #4
 800d10a:	d104      	bne.n	800d116 <HAL_TIM_PWM_Start_IT+0xca>
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	2202      	movs	r2, #2
 800d110:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d114:	e01b      	b.n	800d14e <HAL_TIM_PWM_Start_IT+0x102>
 800d116:	683b      	ldr	r3, [r7, #0]
 800d118:	2b08      	cmp	r3, #8
 800d11a:	d104      	bne.n	800d126 <HAL_TIM_PWM_Start_IT+0xda>
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	2202      	movs	r2, #2
 800d120:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d124:	e013      	b.n	800d14e <HAL_TIM_PWM_Start_IT+0x102>
 800d126:	683b      	ldr	r3, [r7, #0]
 800d128:	2b0c      	cmp	r3, #12
 800d12a:	d104      	bne.n	800d136 <HAL_TIM_PWM_Start_IT+0xea>
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	2202      	movs	r2, #2
 800d130:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d134:	e00b      	b.n	800d14e <HAL_TIM_PWM_Start_IT+0x102>
 800d136:	683b      	ldr	r3, [r7, #0]
 800d138:	2b10      	cmp	r3, #16
 800d13a:	d104      	bne.n	800d146 <HAL_TIM_PWM_Start_IT+0xfa>
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	2202      	movs	r2, #2
 800d140:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d144:	e003      	b.n	800d14e <HAL_TIM_PWM_Start_IT+0x102>
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	2202      	movs	r2, #2
 800d14a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800d14e:	683b      	ldr	r3, [r7, #0]
 800d150:	2b0c      	cmp	r3, #12
 800d152:	d841      	bhi.n	800d1d8 <HAL_TIM_PWM_Start_IT+0x18c>
 800d154:	a201      	add	r2, pc, #4	; (adr r2, 800d15c <HAL_TIM_PWM_Start_IT+0x110>)
 800d156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d15a:	bf00      	nop
 800d15c:	0800d191 	.word	0x0800d191
 800d160:	0800d1d9 	.word	0x0800d1d9
 800d164:	0800d1d9 	.word	0x0800d1d9
 800d168:	0800d1d9 	.word	0x0800d1d9
 800d16c:	0800d1a3 	.word	0x0800d1a3
 800d170:	0800d1d9 	.word	0x0800d1d9
 800d174:	0800d1d9 	.word	0x0800d1d9
 800d178:	0800d1d9 	.word	0x0800d1d9
 800d17c:	0800d1b5 	.word	0x0800d1b5
 800d180:	0800d1d9 	.word	0x0800d1d9
 800d184:	0800d1d9 	.word	0x0800d1d9
 800d188:	0800d1d9 	.word	0x0800d1d9
 800d18c:	0800d1c7 	.word	0x0800d1c7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	68da      	ldr	r2, [r3, #12]
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	f042 0202 	orr.w	r2, r2, #2
 800d19e:	60da      	str	r2, [r3, #12]
      break;
 800d1a0:	e01d      	b.n	800d1de <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	68da      	ldr	r2, [r3, #12]
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	f042 0204 	orr.w	r2, r2, #4
 800d1b0:	60da      	str	r2, [r3, #12]
      break;
 800d1b2:	e014      	b.n	800d1de <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	68da      	ldr	r2, [r3, #12]
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	f042 0208 	orr.w	r2, r2, #8
 800d1c2:	60da      	str	r2, [r3, #12]
      break;
 800d1c4:	e00b      	b.n	800d1de <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	68da      	ldr	r2, [r3, #12]
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	f042 0210 	orr.w	r2, r2, #16
 800d1d4:	60da      	str	r2, [r3, #12]
      break;
 800d1d6:	e002      	b.n	800d1de <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800d1d8:	2301      	movs	r3, #1
 800d1da:	73fb      	strb	r3, [r7, #15]
      break;
 800d1dc:	bf00      	nop
  }

  if (status == HAL_OK)
 800d1de:	7bfb      	ldrb	r3, [r7, #15]
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d17e      	bne.n	800d2e2 <HAL_TIM_PWM_Start_IT+0x296>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	2201      	movs	r2, #1
 800d1ea:	6839      	ldr	r1, [r7, #0]
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	f001 f937 	bl	800e460 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	4a3d      	ldr	r2, [pc, #244]	; (800d2ec <HAL_TIM_PWM_Start_IT+0x2a0>)
 800d1f8:	4293      	cmp	r3, r2
 800d1fa:	d013      	beq.n	800d224 <HAL_TIM_PWM_Start_IT+0x1d8>
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	4a3b      	ldr	r2, [pc, #236]	; (800d2f0 <HAL_TIM_PWM_Start_IT+0x2a4>)
 800d202:	4293      	cmp	r3, r2
 800d204:	d00e      	beq.n	800d224 <HAL_TIM_PWM_Start_IT+0x1d8>
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	4a3a      	ldr	r2, [pc, #232]	; (800d2f4 <HAL_TIM_PWM_Start_IT+0x2a8>)
 800d20c:	4293      	cmp	r3, r2
 800d20e:	d009      	beq.n	800d224 <HAL_TIM_PWM_Start_IT+0x1d8>
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	4a38      	ldr	r2, [pc, #224]	; (800d2f8 <HAL_TIM_PWM_Start_IT+0x2ac>)
 800d216:	4293      	cmp	r3, r2
 800d218:	d004      	beq.n	800d224 <HAL_TIM_PWM_Start_IT+0x1d8>
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	4a37      	ldr	r2, [pc, #220]	; (800d2fc <HAL_TIM_PWM_Start_IT+0x2b0>)
 800d220:	4293      	cmp	r3, r2
 800d222:	d101      	bne.n	800d228 <HAL_TIM_PWM_Start_IT+0x1dc>
 800d224:	2301      	movs	r3, #1
 800d226:	e000      	b.n	800d22a <HAL_TIM_PWM_Start_IT+0x1de>
 800d228:	2300      	movs	r3, #0
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d007      	beq.n	800d23e <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d23c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	4a2a      	ldr	r2, [pc, #168]	; (800d2ec <HAL_TIM_PWM_Start_IT+0x2a0>)
 800d244:	4293      	cmp	r3, r2
 800d246:	d02c      	beq.n	800d2a2 <HAL_TIM_PWM_Start_IT+0x256>
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d250:	d027      	beq.n	800d2a2 <HAL_TIM_PWM_Start_IT+0x256>
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	4a2a      	ldr	r2, [pc, #168]	; (800d300 <HAL_TIM_PWM_Start_IT+0x2b4>)
 800d258:	4293      	cmp	r3, r2
 800d25a:	d022      	beq.n	800d2a2 <HAL_TIM_PWM_Start_IT+0x256>
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	4a28      	ldr	r2, [pc, #160]	; (800d304 <HAL_TIM_PWM_Start_IT+0x2b8>)
 800d262:	4293      	cmp	r3, r2
 800d264:	d01d      	beq.n	800d2a2 <HAL_TIM_PWM_Start_IT+0x256>
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	4a27      	ldr	r2, [pc, #156]	; (800d308 <HAL_TIM_PWM_Start_IT+0x2bc>)
 800d26c:	4293      	cmp	r3, r2
 800d26e:	d018      	beq.n	800d2a2 <HAL_TIM_PWM_Start_IT+0x256>
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	4a1e      	ldr	r2, [pc, #120]	; (800d2f0 <HAL_TIM_PWM_Start_IT+0x2a4>)
 800d276:	4293      	cmp	r3, r2
 800d278:	d013      	beq.n	800d2a2 <HAL_TIM_PWM_Start_IT+0x256>
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	4a23      	ldr	r2, [pc, #140]	; (800d30c <HAL_TIM_PWM_Start_IT+0x2c0>)
 800d280:	4293      	cmp	r3, r2
 800d282:	d00e      	beq.n	800d2a2 <HAL_TIM_PWM_Start_IT+0x256>
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	4a1a      	ldr	r2, [pc, #104]	; (800d2f4 <HAL_TIM_PWM_Start_IT+0x2a8>)
 800d28a:	4293      	cmp	r3, r2
 800d28c:	d009      	beq.n	800d2a2 <HAL_TIM_PWM_Start_IT+0x256>
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	4a1f      	ldr	r2, [pc, #124]	; (800d310 <HAL_TIM_PWM_Start_IT+0x2c4>)
 800d294:	4293      	cmp	r3, r2
 800d296:	d004      	beq.n	800d2a2 <HAL_TIM_PWM_Start_IT+0x256>
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	4a1d      	ldr	r2, [pc, #116]	; (800d314 <HAL_TIM_PWM_Start_IT+0x2c8>)
 800d29e:	4293      	cmp	r3, r2
 800d2a0:	d115      	bne.n	800d2ce <HAL_TIM_PWM_Start_IT+0x282>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	689a      	ldr	r2, [r3, #8]
 800d2a8:	4b1b      	ldr	r3, [pc, #108]	; (800d318 <HAL_TIM_PWM_Start_IT+0x2cc>)
 800d2aa:	4013      	ands	r3, r2
 800d2ac:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d2ae:	68bb      	ldr	r3, [r7, #8]
 800d2b0:	2b06      	cmp	r3, #6
 800d2b2:	d015      	beq.n	800d2e0 <HAL_TIM_PWM_Start_IT+0x294>
 800d2b4:	68bb      	ldr	r3, [r7, #8]
 800d2b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d2ba:	d011      	beq.n	800d2e0 <HAL_TIM_PWM_Start_IT+0x294>
      {
        __HAL_TIM_ENABLE(htim);
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	681a      	ldr	r2, [r3, #0]
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	f042 0201 	orr.w	r2, r2, #1
 800d2ca:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d2cc:	e008      	b.n	800d2e0 <HAL_TIM_PWM_Start_IT+0x294>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	681a      	ldr	r2, [r3, #0]
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	f042 0201 	orr.w	r2, r2, #1
 800d2dc:	601a      	str	r2, [r3, #0]
 800d2de:	e000      	b.n	800d2e2 <HAL_TIM_PWM_Start_IT+0x296>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d2e0:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800d2e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	3710      	adds	r7, #16
 800d2e8:	46bd      	mov	sp, r7
 800d2ea:	bd80      	pop	{r7, pc}
 800d2ec:	40010000 	.word	0x40010000
 800d2f0:	40010400 	.word	0x40010400
 800d2f4:	40014000 	.word	0x40014000
 800d2f8:	40014400 	.word	0x40014400
 800d2fc:	40014800 	.word	0x40014800
 800d300:	40000400 	.word	0x40000400
 800d304:	40000800 	.word	0x40000800
 800d308:	40000c00 	.word	0x40000c00
 800d30c:	40001800 	.word	0x40001800
 800d310:	4000e000 	.word	0x4000e000
 800d314:	4000e400 	.word	0x4000e400
 800d318:	00010007 	.word	0x00010007

0800d31c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800d31c:	b580      	push	{r7, lr}
 800d31e:	b086      	sub	sp, #24
 800d320:	af00      	add	r7, sp, #0
 800d322:	6078      	str	r0, [r7, #4]
 800d324:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d101      	bne.n	800d330 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800d32c:	2301      	movs	r3, #1
 800d32e:	e08f      	b.n	800d450 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d336:	b2db      	uxtb	r3, r3
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d106      	bne.n	800d34a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	2200      	movs	r2, #0
 800d340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800d344:	6878      	ldr	r0, [r7, #4]
 800d346:	f7f8 fd8d 	bl	8005e64 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	2202      	movs	r2, #2
 800d34e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	6899      	ldr	r1, [r3, #8]
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	681a      	ldr	r2, [r3, #0]
 800d35c:	4b3e      	ldr	r3, [pc, #248]	; (800d458 <HAL_TIM_Encoder_Init+0x13c>)
 800d35e:	400b      	ands	r3, r1
 800d360:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	681a      	ldr	r2, [r3, #0]
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	3304      	adds	r3, #4
 800d36a:	4619      	mov	r1, r3
 800d36c:	4610      	mov	r0, r2
 800d36e:	f000 fc5d 	bl	800dc2c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	689b      	ldr	r3, [r3, #8]
 800d378:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	699b      	ldr	r3, [r3, #24]
 800d380:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	6a1b      	ldr	r3, [r3, #32]
 800d388:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800d38a:	683b      	ldr	r3, [r7, #0]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	697a      	ldr	r2, [r7, #20]
 800d390:	4313      	orrs	r3, r2
 800d392:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800d394:	693a      	ldr	r2, [r7, #16]
 800d396:	4b31      	ldr	r3, [pc, #196]	; (800d45c <HAL_TIM_Encoder_Init+0x140>)
 800d398:	4013      	ands	r3, r2
 800d39a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800d39c:	683b      	ldr	r3, [r7, #0]
 800d39e:	689a      	ldr	r2, [r3, #8]
 800d3a0:	683b      	ldr	r3, [r7, #0]
 800d3a2:	699b      	ldr	r3, [r3, #24]
 800d3a4:	021b      	lsls	r3, r3, #8
 800d3a6:	4313      	orrs	r3, r2
 800d3a8:	693a      	ldr	r2, [r7, #16]
 800d3aa:	4313      	orrs	r3, r2
 800d3ac:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800d3ae:	693a      	ldr	r2, [r7, #16]
 800d3b0:	4b2b      	ldr	r3, [pc, #172]	; (800d460 <HAL_TIM_Encoder_Init+0x144>)
 800d3b2:	4013      	ands	r3, r2
 800d3b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800d3b6:	693a      	ldr	r2, [r7, #16]
 800d3b8:	4b2a      	ldr	r3, [pc, #168]	; (800d464 <HAL_TIM_Encoder_Init+0x148>)
 800d3ba:	4013      	ands	r3, r2
 800d3bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800d3be:	683b      	ldr	r3, [r7, #0]
 800d3c0:	68da      	ldr	r2, [r3, #12]
 800d3c2:	683b      	ldr	r3, [r7, #0]
 800d3c4:	69db      	ldr	r3, [r3, #28]
 800d3c6:	021b      	lsls	r3, r3, #8
 800d3c8:	4313      	orrs	r3, r2
 800d3ca:	693a      	ldr	r2, [r7, #16]
 800d3cc:	4313      	orrs	r3, r2
 800d3ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800d3d0:	683b      	ldr	r3, [r7, #0]
 800d3d2:	691b      	ldr	r3, [r3, #16]
 800d3d4:	011a      	lsls	r2, r3, #4
 800d3d6:	683b      	ldr	r3, [r7, #0]
 800d3d8:	6a1b      	ldr	r3, [r3, #32]
 800d3da:	031b      	lsls	r3, r3, #12
 800d3dc:	4313      	orrs	r3, r2
 800d3de:	693a      	ldr	r2, [r7, #16]
 800d3e0:	4313      	orrs	r3, r2
 800d3e2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800d3ea:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800d3f2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800d3f4:	683b      	ldr	r3, [r7, #0]
 800d3f6:	685a      	ldr	r2, [r3, #4]
 800d3f8:	683b      	ldr	r3, [r7, #0]
 800d3fa:	695b      	ldr	r3, [r3, #20]
 800d3fc:	011b      	lsls	r3, r3, #4
 800d3fe:	4313      	orrs	r3, r2
 800d400:	68fa      	ldr	r2, [r7, #12]
 800d402:	4313      	orrs	r3, r2
 800d404:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	697a      	ldr	r2, [r7, #20]
 800d40c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	693a      	ldr	r2, [r7, #16]
 800d414:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	68fa      	ldr	r2, [r7, #12]
 800d41c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	2201      	movs	r2, #1
 800d422:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	2201      	movs	r2, #1
 800d42a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	2201      	movs	r2, #1
 800d432:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	2201      	movs	r2, #1
 800d43a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	2201      	movs	r2, #1
 800d442:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	2201      	movs	r2, #1
 800d44a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d44e:	2300      	movs	r3, #0
}
 800d450:	4618      	mov	r0, r3
 800d452:	3718      	adds	r7, #24
 800d454:	46bd      	mov	sp, r7
 800d456:	bd80      	pop	{r7, pc}
 800d458:	fffebff8 	.word	0xfffebff8
 800d45c:	fffffcfc 	.word	0xfffffcfc
 800d460:	fffff3f3 	.word	0xfffff3f3
 800d464:	ffff0f0f 	.word	0xffff0f0f

0800d468 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d468:	b580      	push	{r7, lr}
 800d46a:	b084      	sub	sp, #16
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
 800d470:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d478:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d480:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d488:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d490:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800d492:	683b      	ldr	r3, [r7, #0]
 800d494:	2b00      	cmp	r3, #0
 800d496:	d110      	bne.n	800d4ba <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800d498:	7bfb      	ldrb	r3, [r7, #15]
 800d49a:	2b01      	cmp	r3, #1
 800d49c:	d102      	bne.n	800d4a4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800d49e:	7b7b      	ldrb	r3, [r7, #13]
 800d4a0:	2b01      	cmp	r3, #1
 800d4a2:	d001      	beq.n	800d4a8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800d4a4:	2301      	movs	r3, #1
 800d4a6:	e069      	b.n	800d57c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	2202      	movs	r2, #2
 800d4ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	2202      	movs	r2, #2
 800d4b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d4b8:	e031      	b.n	800d51e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800d4ba:	683b      	ldr	r3, [r7, #0]
 800d4bc:	2b04      	cmp	r3, #4
 800d4be:	d110      	bne.n	800d4e2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800d4c0:	7bbb      	ldrb	r3, [r7, #14]
 800d4c2:	2b01      	cmp	r3, #1
 800d4c4:	d102      	bne.n	800d4cc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800d4c6:	7b3b      	ldrb	r3, [r7, #12]
 800d4c8:	2b01      	cmp	r3, #1
 800d4ca:	d001      	beq.n	800d4d0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800d4cc:	2301      	movs	r3, #1
 800d4ce:	e055      	b.n	800d57c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	2202      	movs	r2, #2
 800d4d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	2202      	movs	r2, #2
 800d4dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d4e0:	e01d      	b.n	800d51e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800d4e2:	7bfb      	ldrb	r3, [r7, #15]
 800d4e4:	2b01      	cmp	r3, #1
 800d4e6:	d108      	bne.n	800d4fa <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800d4e8:	7bbb      	ldrb	r3, [r7, #14]
 800d4ea:	2b01      	cmp	r3, #1
 800d4ec:	d105      	bne.n	800d4fa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800d4ee:	7b7b      	ldrb	r3, [r7, #13]
 800d4f0:	2b01      	cmp	r3, #1
 800d4f2:	d102      	bne.n	800d4fa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800d4f4:	7b3b      	ldrb	r3, [r7, #12]
 800d4f6:	2b01      	cmp	r3, #1
 800d4f8:	d001      	beq.n	800d4fe <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800d4fa:	2301      	movs	r3, #1
 800d4fc:	e03e      	b.n	800d57c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	2202      	movs	r2, #2
 800d502:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	2202      	movs	r2, #2
 800d50a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	2202      	movs	r2, #2
 800d512:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	2202      	movs	r2, #2
 800d51a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800d51e:	683b      	ldr	r3, [r7, #0]
 800d520:	2b00      	cmp	r3, #0
 800d522:	d003      	beq.n	800d52c <HAL_TIM_Encoder_Start+0xc4>
 800d524:	683b      	ldr	r3, [r7, #0]
 800d526:	2b04      	cmp	r3, #4
 800d528:	d008      	beq.n	800d53c <HAL_TIM_Encoder_Start+0xd4>
 800d52a:	e00f      	b.n	800d54c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	2201      	movs	r2, #1
 800d532:	2100      	movs	r1, #0
 800d534:	4618      	mov	r0, r3
 800d536:	f000 ff93 	bl	800e460 <TIM_CCxChannelCmd>
      break;
 800d53a:	e016      	b.n	800d56a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	2201      	movs	r2, #1
 800d542:	2104      	movs	r1, #4
 800d544:	4618      	mov	r0, r3
 800d546:	f000 ff8b 	bl	800e460 <TIM_CCxChannelCmd>
      break;
 800d54a:	e00e      	b.n	800d56a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	2201      	movs	r2, #1
 800d552:	2100      	movs	r1, #0
 800d554:	4618      	mov	r0, r3
 800d556:	f000 ff83 	bl	800e460 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	2201      	movs	r2, #1
 800d560:	2104      	movs	r1, #4
 800d562:	4618      	mov	r0, r3
 800d564:	f000 ff7c 	bl	800e460 <TIM_CCxChannelCmd>
      break;
 800d568:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	681a      	ldr	r2, [r3, #0]
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	f042 0201 	orr.w	r2, r2, #1
 800d578:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800d57a:	2300      	movs	r3, #0
}
 800d57c:	4618      	mov	r0, r3
 800d57e:	3710      	adds	r7, #16
 800d580:	46bd      	mov	sp, r7
 800d582:	bd80      	pop	{r7, pc}

0800d584 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d584:	b580      	push	{r7, lr}
 800d586:	b082      	sub	sp, #8
 800d588:	af00      	add	r7, sp, #0
 800d58a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	691b      	ldr	r3, [r3, #16]
 800d592:	f003 0302 	and.w	r3, r3, #2
 800d596:	2b02      	cmp	r3, #2
 800d598:	d122      	bne.n	800d5e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	68db      	ldr	r3, [r3, #12]
 800d5a0:	f003 0302 	and.w	r3, r3, #2
 800d5a4:	2b02      	cmp	r3, #2
 800d5a6:	d11b      	bne.n	800d5e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	f06f 0202 	mvn.w	r2, #2
 800d5b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	2201      	movs	r2, #1
 800d5b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	699b      	ldr	r3, [r3, #24]
 800d5be:	f003 0303 	and.w	r3, r3, #3
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d003      	beq.n	800d5ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d5c6:	6878      	ldr	r0, [r7, #4]
 800d5c8:	f000 fb12 	bl	800dbf0 <HAL_TIM_IC_CaptureCallback>
 800d5cc:	e005      	b.n	800d5da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d5ce:	6878      	ldr	r0, [r7, #4]
 800d5d0:	f000 fb04 	bl	800dbdc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d5d4:	6878      	ldr	r0, [r7, #4]
 800d5d6:	f000 fb15 	bl	800dc04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	2200      	movs	r2, #0
 800d5de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	691b      	ldr	r3, [r3, #16]
 800d5e6:	f003 0304 	and.w	r3, r3, #4
 800d5ea:	2b04      	cmp	r3, #4
 800d5ec:	d122      	bne.n	800d634 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	68db      	ldr	r3, [r3, #12]
 800d5f4:	f003 0304 	and.w	r3, r3, #4
 800d5f8:	2b04      	cmp	r3, #4
 800d5fa:	d11b      	bne.n	800d634 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	f06f 0204 	mvn.w	r2, #4
 800d604:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	2202      	movs	r2, #2
 800d60a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	699b      	ldr	r3, [r3, #24]
 800d612:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d616:	2b00      	cmp	r3, #0
 800d618:	d003      	beq.n	800d622 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d61a:	6878      	ldr	r0, [r7, #4]
 800d61c:	f000 fae8 	bl	800dbf0 <HAL_TIM_IC_CaptureCallback>
 800d620:	e005      	b.n	800d62e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d622:	6878      	ldr	r0, [r7, #4]
 800d624:	f000 fada 	bl	800dbdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d628:	6878      	ldr	r0, [r7, #4]
 800d62a:	f000 faeb 	bl	800dc04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	2200      	movs	r2, #0
 800d632:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	691b      	ldr	r3, [r3, #16]
 800d63a:	f003 0308 	and.w	r3, r3, #8
 800d63e:	2b08      	cmp	r3, #8
 800d640:	d122      	bne.n	800d688 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	68db      	ldr	r3, [r3, #12]
 800d648:	f003 0308 	and.w	r3, r3, #8
 800d64c:	2b08      	cmp	r3, #8
 800d64e:	d11b      	bne.n	800d688 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	f06f 0208 	mvn.w	r2, #8
 800d658:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	2204      	movs	r2, #4
 800d65e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	69db      	ldr	r3, [r3, #28]
 800d666:	f003 0303 	and.w	r3, r3, #3
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d003      	beq.n	800d676 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d66e:	6878      	ldr	r0, [r7, #4]
 800d670:	f000 fabe 	bl	800dbf0 <HAL_TIM_IC_CaptureCallback>
 800d674:	e005      	b.n	800d682 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d676:	6878      	ldr	r0, [r7, #4]
 800d678:	f000 fab0 	bl	800dbdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d67c:	6878      	ldr	r0, [r7, #4]
 800d67e:	f000 fac1 	bl	800dc04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	2200      	movs	r2, #0
 800d686:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	691b      	ldr	r3, [r3, #16]
 800d68e:	f003 0310 	and.w	r3, r3, #16
 800d692:	2b10      	cmp	r3, #16
 800d694:	d122      	bne.n	800d6dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	68db      	ldr	r3, [r3, #12]
 800d69c:	f003 0310 	and.w	r3, r3, #16
 800d6a0:	2b10      	cmp	r3, #16
 800d6a2:	d11b      	bne.n	800d6dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	f06f 0210 	mvn.w	r2, #16
 800d6ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	2208      	movs	r2, #8
 800d6b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	69db      	ldr	r3, [r3, #28]
 800d6ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d003      	beq.n	800d6ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d6c2:	6878      	ldr	r0, [r7, #4]
 800d6c4:	f000 fa94 	bl	800dbf0 <HAL_TIM_IC_CaptureCallback>
 800d6c8:	e005      	b.n	800d6d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d6ca:	6878      	ldr	r0, [r7, #4]
 800d6cc:	f000 fa86 	bl	800dbdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d6d0:	6878      	ldr	r0, [r7, #4]
 800d6d2:	f000 fa97 	bl	800dc04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	2200      	movs	r2, #0
 800d6da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	691b      	ldr	r3, [r3, #16]
 800d6e2:	f003 0301 	and.w	r3, r3, #1
 800d6e6:	2b01      	cmp	r3, #1
 800d6e8:	d10e      	bne.n	800d708 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	68db      	ldr	r3, [r3, #12]
 800d6f0:	f003 0301 	and.w	r3, r3, #1
 800d6f4:	2b01      	cmp	r3, #1
 800d6f6:	d107      	bne.n	800d708 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	f06f 0201 	mvn.w	r2, #1
 800d700:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d702:	6878      	ldr	r0, [r7, #4]
 800d704:	f7f9 f8b6 	bl	8006874 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	691b      	ldr	r3, [r3, #16]
 800d70e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d712:	2b80      	cmp	r3, #128	; 0x80
 800d714:	d10e      	bne.n	800d734 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	68db      	ldr	r3, [r3, #12]
 800d71c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d720:	2b80      	cmp	r3, #128	; 0x80
 800d722:	d107      	bne.n	800d734 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d72c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d72e:	6878      	ldr	r0, [r7, #4]
 800d730:	f001 f802 	bl	800e738 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	691b      	ldr	r3, [r3, #16]
 800d73a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d73e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d742:	d10e      	bne.n	800d762 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	68db      	ldr	r3, [r3, #12]
 800d74a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d74e:	2b80      	cmp	r3, #128	; 0x80
 800d750:	d107      	bne.n	800d762 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d75a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d75c:	6878      	ldr	r0, [r7, #4]
 800d75e:	f000 fff5 	bl	800e74c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	691b      	ldr	r3, [r3, #16]
 800d768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d76c:	2b40      	cmp	r3, #64	; 0x40
 800d76e:	d10e      	bne.n	800d78e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	68db      	ldr	r3, [r3, #12]
 800d776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d77a:	2b40      	cmp	r3, #64	; 0x40
 800d77c:	d107      	bne.n	800d78e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d786:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d788:	6878      	ldr	r0, [r7, #4]
 800d78a:	f000 fa45 	bl	800dc18 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	691b      	ldr	r3, [r3, #16]
 800d794:	f003 0320 	and.w	r3, r3, #32
 800d798:	2b20      	cmp	r3, #32
 800d79a:	d10e      	bne.n	800d7ba <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	68db      	ldr	r3, [r3, #12]
 800d7a2:	f003 0320 	and.w	r3, r3, #32
 800d7a6:	2b20      	cmp	r3, #32
 800d7a8:	d107      	bne.n	800d7ba <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	f06f 0220 	mvn.w	r2, #32
 800d7b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d7b4:	6878      	ldr	r0, [r7, #4]
 800d7b6:	f000 ffb5 	bl	800e724 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d7ba:	bf00      	nop
 800d7bc:	3708      	adds	r7, #8
 800d7be:	46bd      	mov	sp, r7
 800d7c0:	bd80      	pop	{r7, pc}
	...

0800d7c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d7c4:	b580      	push	{r7, lr}
 800d7c6:	b086      	sub	sp, #24
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	60f8      	str	r0, [r7, #12]
 800d7cc:	60b9      	str	r1, [r7, #8]
 800d7ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d7d0:	2300      	movs	r3, #0
 800d7d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d7da:	2b01      	cmp	r3, #1
 800d7dc:	d101      	bne.n	800d7e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d7de:	2302      	movs	r3, #2
 800d7e0:	e0ff      	b.n	800d9e2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	2201      	movs	r2, #1
 800d7e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	2b14      	cmp	r3, #20
 800d7ee:	f200 80f0 	bhi.w	800d9d2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800d7f2:	a201      	add	r2, pc, #4	; (adr r2, 800d7f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d7f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7f8:	0800d84d 	.word	0x0800d84d
 800d7fc:	0800d9d3 	.word	0x0800d9d3
 800d800:	0800d9d3 	.word	0x0800d9d3
 800d804:	0800d9d3 	.word	0x0800d9d3
 800d808:	0800d88d 	.word	0x0800d88d
 800d80c:	0800d9d3 	.word	0x0800d9d3
 800d810:	0800d9d3 	.word	0x0800d9d3
 800d814:	0800d9d3 	.word	0x0800d9d3
 800d818:	0800d8cf 	.word	0x0800d8cf
 800d81c:	0800d9d3 	.word	0x0800d9d3
 800d820:	0800d9d3 	.word	0x0800d9d3
 800d824:	0800d9d3 	.word	0x0800d9d3
 800d828:	0800d90f 	.word	0x0800d90f
 800d82c:	0800d9d3 	.word	0x0800d9d3
 800d830:	0800d9d3 	.word	0x0800d9d3
 800d834:	0800d9d3 	.word	0x0800d9d3
 800d838:	0800d951 	.word	0x0800d951
 800d83c:	0800d9d3 	.word	0x0800d9d3
 800d840:	0800d9d3 	.word	0x0800d9d3
 800d844:	0800d9d3 	.word	0x0800d9d3
 800d848:	0800d991 	.word	0x0800d991
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	68b9      	ldr	r1, [r7, #8]
 800d852:	4618      	mov	r0, r3
 800d854:	f000 fa90 	bl	800dd78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	699a      	ldr	r2, [r3, #24]
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	f042 0208 	orr.w	r2, r2, #8
 800d866:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	699a      	ldr	r2, [r3, #24]
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	f022 0204 	bic.w	r2, r2, #4
 800d876:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	6999      	ldr	r1, [r3, #24]
 800d87e:	68bb      	ldr	r3, [r7, #8]
 800d880:	691a      	ldr	r2, [r3, #16]
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	430a      	orrs	r2, r1
 800d888:	619a      	str	r2, [r3, #24]
      break;
 800d88a:	e0a5      	b.n	800d9d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	68b9      	ldr	r1, [r7, #8]
 800d892:	4618      	mov	r0, r3
 800d894:	f000 fb00 	bl	800de98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	699a      	ldr	r2, [r3, #24]
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d8a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	699a      	ldr	r2, [r3, #24]
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d8b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	6999      	ldr	r1, [r3, #24]
 800d8be:	68bb      	ldr	r3, [r7, #8]
 800d8c0:	691b      	ldr	r3, [r3, #16]
 800d8c2:	021a      	lsls	r2, r3, #8
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	430a      	orrs	r2, r1
 800d8ca:	619a      	str	r2, [r3, #24]
      break;
 800d8cc:	e084      	b.n	800d9d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	68b9      	ldr	r1, [r7, #8]
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	f000 fb69 	bl	800dfac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	69da      	ldr	r2, [r3, #28]
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	f042 0208 	orr.w	r2, r2, #8
 800d8e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	69da      	ldr	r2, [r3, #28]
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	f022 0204 	bic.w	r2, r2, #4
 800d8f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	69d9      	ldr	r1, [r3, #28]
 800d900:	68bb      	ldr	r3, [r7, #8]
 800d902:	691a      	ldr	r2, [r3, #16]
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	430a      	orrs	r2, r1
 800d90a:	61da      	str	r2, [r3, #28]
      break;
 800d90c:	e064      	b.n	800d9d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	68b9      	ldr	r1, [r7, #8]
 800d914:	4618      	mov	r0, r3
 800d916:	f000 fbd1 	bl	800e0bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	69da      	ldr	r2, [r3, #28]
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d928:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	69da      	ldr	r2, [r3, #28]
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d938:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	69d9      	ldr	r1, [r3, #28]
 800d940:	68bb      	ldr	r3, [r7, #8]
 800d942:	691b      	ldr	r3, [r3, #16]
 800d944:	021a      	lsls	r2, r3, #8
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	430a      	orrs	r2, r1
 800d94c:	61da      	str	r2, [r3, #28]
      break;
 800d94e:	e043      	b.n	800d9d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	68b9      	ldr	r1, [r7, #8]
 800d956:	4618      	mov	r0, r3
 800d958:	f000 fc1a 	bl	800e190 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	f042 0208 	orr.w	r2, r2, #8
 800d96a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	f022 0204 	bic.w	r2, r2, #4
 800d97a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d982:	68bb      	ldr	r3, [r7, #8]
 800d984:	691a      	ldr	r2, [r3, #16]
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	430a      	orrs	r2, r1
 800d98c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d98e:	e023      	b.n	800d9d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	68b9      	ldr	r1, [r7, #8]
 800d996:	4618      	mov	r0, r3
 800d998:	f000 fc5e 	bl	800e258 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d9aa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d9ba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d9c2:	68bb      	ldr	r3, [r7, #8]
 800d9c4:	691b      	ldr	r3, [r3, #16]
 800d9c6:	021a      	lsls	r2, r3, #8
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	430a      	orrs	r2, r1
 800d9ce:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d9d0:	e002      	b.n	800d9d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800d9d2:	2301      	movs	r3, #1
 800d9d4:	75fb      	strb	r3, [r7, #23]
      break;
 800d9d6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	2200      	movs	r2, #0
 800d9dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d9e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	3718      	adds	r7, #24
 800d9e6:	46bd      	mov	sp, r7
 800d9e8:	bd80      	pop	{r7, pc}
 800d9ea:	bf00      	nop

0800d9ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d9ec:	b580      	push	{r7, lr}
 800d9ee:	b084      	sub	sp, #16
 800d9f0:	af00      	add	r7, sp, #0
 800d9f2:	6078      	str	r0, [r7, #4]
 800d9f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800da00:	2b01      	cmp	r3, #1
 800da02:	d101      	bne.n	800da08 <HAL_TIM_ConfigClockSource+0x1c>
 800da04:	2302      	movs	r3, #2
 800da06:	e0dc      	b.n	800dbc2 <HAL_TIM_ConfigClockSource+0x1d6>
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	2201      	movs	r2, #1
 800da0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	2202      	movs	r2, #2
 800da14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	689b      	ldr	r3, [r3, #8]
 800da1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800da20:	68ba      	ldr	r2, [r7, #8]
 800da22:	4b6a      	ldr	r3, [pc, #424]	; (800dbcc <HAL_TIM_ConfigClockSource+0x1e0>)
 800da24:	4013      	ands	r3, r2
 800da26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800da28:	68bb      	ldr	r3, [r7, #8]
 800da2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800da2e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	68ba      	ldr	r2, [r7, #8]
 800da36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800da38:	683b      	ldr	r3, [r7, #0]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	4a64      	ldr	r2, [pc, #400]	; (800dbd0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800da3e:	4293      	cmp	r3, r2
 800da40:	f000 80a9 	beq.w	800db96 <HAL_TIM_ConfigClockSource+0x1aa>
 800da44:	4a62      	ldr	r2, [pc, #392]	; (800dbd0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800da46:	4293      	cmp	r3, r2
 800da48:	f200 80ae 	bhi.w	800dba8 <HAL_TIM_ConfigClockSource+0x1bc>
 800da4c:	4a61      	ldr	r2, [pc, #388]	; (800dbd4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800da4e:	4293      	cmp	r3, r2
 800da50:	f000 80a1 	beq.w	800db96 <HAL_TIM_ConfigClockSource+0x1aa>
 800da54:	4a5f      	ldr	r2, [pc, #380]	; (800dbd4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800da56:	4293      	cmp	r3, r2
 800da58:	f200 80a6 	bhi.w	800dba8 <HAL_TIM_ConfigClockSource+0x1bc>
 800da5c:	4a5e      	ldr	r2, [pc, #376]	; (800dbd8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800da5e:	4293      	cmp	r3, r2
 800da60:	f000 8099 	beq.w	800db96 <HAL_TIM_ConfigClockSource+0x1aa>
 800da64:	4a5c      	ldr	r2, [pc, #368]	; (800dbd8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800da66:	4293      	cmp	r3, r2
 800da68:	f200 809e 	bhi.w	800dba8 <HAL_TIM_ConfigClockSource+0x1bc>
 800da6c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800da70:	f000 8091 	beq.w	800db96 <HAL_TIM_ConfigClockSource+0x1aa>
 800da74:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800da78:	f200 8096 	bhi.w	800dba8 <HAL_TIM_ConfigClockSource+0x1bc>
 800da7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800da80:	f000 8089 	beq.w	800db96 <HAL_TIM_ConfigClockSource+0x1aa>
 800da84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800da88:	f200 808e 	bhi.w	800dba8 <HAL_TIM_ConfigClockSource+0x1bc>
 800da8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800da90:	d03e      	beq.n	800db10 <HAL_TIM_ConfigClockSource+0x124>
 800da92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800da96:	f200 8087 	bhi.w	800dba8 <HAL_TIM_ConfigClockSource+0x1bc>
 800da9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800da9e:	f000 8086 	beq.w	800dbae <HAL_TIM_ConfigClockSource+0x1c2>
 800daa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800daa6:	d87f      	bhi.n	800dba8 <HAL_TIM_ConfigClockSource+0x1bc>
 800daa8:	2b70      	cmp	r3, #112	; 0x70
 800daaa:	d01a      	beq.n	800dae2 <HAL_TIM_ConfigClockSource+0xf6>
 800daac:	2b70      	cmp	r3, #112	; 0x70
 800daae:	d87b      	bhi.n	800dba8 <HAL_TIM_ConfigClockSource+0x1bc>
 800dab0:	2b60      	cmp	r3, #96	; 0x60
 800dab2:	d050      	beq.n	800db56 <HAL_TIM_ConfigClockSource+0x16a>
 800dab4:	2b60      	cmp	r3, #96	; 0x60
 800dab6:	d877      	bhi.n	800dba8 <HAL_TIM_ConfigClockSource+0x1bc>
 800dab8:	2b50      	cmp	r3, #80	; 0x50
 800daba:	d03c      	beq.n	800db36 <HAL_TIM_ConfigClockSource+0x14a>
 800dabc:	2b50      	cmp	r3, #80	; 0x50
 800dabe:	d873      	bhi.n	800dba8 <HAL_TIM_ConfigClockSource+0x1bc>
 800dac0:	2b40      	cmp	r3, #64	; 0x40
 800dac2:	d058      	beq.n	800db76 <HAL_TIM_ConfigClockSource+0x18a>
 800dac4:	2b40      	cmp	r3, #64	; 0x40
 800dac6:	d86f      	bhi.n	800dba8 <HAL_TIM_ConfigClockSource+0x1bc>
 800dac8:	2b30      	cmp	r3, #48	; 0x30
 800daca:	d064      	beq.n	800db96 <HAL_TIM_ConfigClockSource+0x1aa>
 800dacc:	2b30      	cmp	r3, #48	; 0x30
 800dace:	d86b      	bhi.n	800dba8 <HAL_TIM_ConfigClockSource+0x1bc>
 800dad0:	2b20      	cmp	r3, #32
 800dad2:	d060      	beq.n	800db96 <HAL_TIM_ConfigClockSource+0x1aa>
 800dad4:	2b20      	cmp	r3, #32
 800dad6:	d867      	bhi.n	800dba8 <HAL_TIM_ConfigClockSource+0x1bc>
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d05c      	beq.n	800db96 <HAL_TIM_ConfigClockSource+0x1aa>
 800dadc:	2b10      	cmp	r3, #16
 800dade:	d05a      	beq.n	800db96 <HAL_TIM_ConfigClockSource+0x1aa>
 800dae0:	e062      	b.n	800dba8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	6818      	ldr	r0, [r3, #0]
 800dae6:	683b      	ldr	r3, [r7, #0]
 800dae8:	6899      	ldr	r1, [r3, #8]
 800daea:	683b      	ldr	r3, [r7, #0]
 800daec:	685a      	ldr	r2, [r3, #4]
 800daee:	683b      	ldr	r3, [r7, #0]
 800daf0:	68db      	ldr	r3, [r3, #12]
 800daf2:	f000 fc95 	bl	800e420 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	689b      	ldr	r3, [r3, #8]
 800dafc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800dafe:	68bb      	ldr	r3, [r7, #8]
 800db00:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800db04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	68ba      	ldr	r2, [r7, #8]
 800db0c:	609a      	str	r2, [r3, #8]
      break;
 800db0e:	e04f      	b.n	800dbb0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	6818      	ldr	r0, [r3, #0]
 800db14:	683b      	ldr	r3, [r7, #0]
 800db16:	6899      	ldr	r1, [r3, #8]
 800db18:	683b      	ldr	r3, [r7, #0]
 800db1a:	685a      	ldr	r2, [r3, #4]
 800db1c:	683b      	ldr	r3, [r7, #0]
 800db1e:	68db      	ldr	r3, [r3, #12]
 800db20:	f000 fc7e 	bl	800e420 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	689a      	ldr	r2, [r3, #8]
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800db32:	609a      	str	r2, [r3, #8]
      break;
 800db34:	e03c      	b.n	800dbb0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	6818      	ldr	r0, [r3, #0]
 800db3a:	683b      	ldr	r3, [r7, #0]
 800db3c:	6859      	ldr	r1, [r3, #4]
 800db3e:	683b      	ldr	r3, [r7, #0]
 800db40:	68db      	ldr	r3, [r3, #12]
 800db42:	461a      	mov	r2, r3
 800db44:	f000 fbee 	bl	800e324 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	2150      	movs	r1, #80	; 0x50
 800db4e:	4618      	mov	r0, r3
 800db50:	f000 fc48 	bl	800e3e4 <TIM_ITRx_SetConfig>
      break;
 800db54:	e02c      	b.n	800dbb0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	6818      	ldr	r0, [r3, #0]
 800db5a:	683b      	ldr	r3, [r7, #0]
 800db5c:	6859      	ldr	r1, [r3, #4]
 800db5e:	683b      	ldr	r3, [r7, #0]
 800db60:	68db      	ldr	r3, [r3, #12]
 800db62:	461a      	mov	r2, r3
 800db64:	f000 fc0d 	bl	800e382 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	2160      	movs	r1, #96	; 0x60
 800db6e:	4618      	mov	r0, r3
 800db70:	f000 fc38 	bl	800e3e4 <TIM_ITRx_SetConfig>
      break;
 800db74:	e01c      	b.n	800dbb0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	6818      	ldr	r0, [r3, #0]
 800db7a:	683b      	ldr	r3, [r7, #0]
 800db7c:	6859      	ldr	r1, [r3, #4]
 800db7e:	683b      	ldr	r3, [r7, #0]
 800db80:	68db      	ldr	r3, [r3, #12]
 800db82:	461a      	mov	r2, r3
 800db84:	f000 fbce 	bl	800e324 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	2140      	movs	r1, #64	; 0x40
 800db8e:	4618      	mov	r0, r3
 800db90:	f000 fc28 	bl	800e3e4 <TIM_ITRx_SetConfig>
      break;
 800db94:	e00c      	b.n	800dbb0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	681a      	ldr	r2, [r3, #0]
 800db9a:	683b      	ldr	r3, [r7, #0]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	4619      	mov	r1, r3
 800dba0:	4610      	mov	r0, r2
 800dba2:	f000 fc1f 	bl	800e3e4 <TIM_ITRx_SetConfig>
      break;
 800dba6:	e003      	b.n	800dbb0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800dba8:	2301      	movs	r3, #1
 800dbaa:	73fb      	strb	r3, [r7, #15]
      break;
 800dbac:	e000      	b.n	800dbb0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800dbae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	2201      	movs	r2, #1
 800dbb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	2200      	movs	r2, #0
 800dbbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800dbc0:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbc2:	4618      	mov	r0, r3
 800dbc4:	3710      	adds	r7, #16
 800dbc6:	46bd      	mov	sp, r7
 800dbc8:	bd80      	pop	{r7, pc}
 800dbca:	bf00      	nop
 800dbcc:	ffceff88 	.word	0xffceff88
 800dbd0:	00100040 	.word	0x00100040
 800dbd4:	00100030 	.word	0x00100030
 800dbd8:	00100020 	.word	0x00100020

0800dbdc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800dbdc:	b480      	push	{r7}
 800dbde:	b083      	sub	sp, #12
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800dbe4:	bf00      	nop
 800dbe6:	370c      	adds	r7, #12
 800dbe8:	46bd      	mov	sp, r7
 800dbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbee:	4770      	bx	lr

0800dbf0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800dbf0:	b480      	push	{r7}
 800dbf2:	b083      	sub	sp, #12
 800dbf4:	af00      	add	r7, sp, #0
 800dbf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800dbf8:	bf00      	nop
 800dbfa:	370c      	adds	r7, #12
 800dbfc:	46bd      	mov	sp, r7
 800dbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc02:	4770      	bx	lr

0800dc04 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800dc04:	b480      	push	{r7}
 800dc06:	b083      	sub	sp, #12
 800dc08:	af00      	add	r7, sp, #0
 800dc0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800dc0c:	bf00      	nop
 800dc0e:	370c      	adds	r7, #12
 800dc10:	46bd      	mov	sp, r7
 800dc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc16:	4770      	bx	lr

0800dc18 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800dc18:	b480      	push	{r7}
 800dc1a:	b083      	sub	sp, #12
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800dc20:	bf00      	nop
 800dc22:	370c      	adds	r7, #12
 800dc24:	46bd      	mov	sp, r7
 800dc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc2a:	4770      	bx	lr

0800dc2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800dc2c:	b480      	push	{r7}
 800dc2e:	b085      	sub	sp, #20
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	6078      	str	r0, [r7, #4]
 800dc34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	4a44      	ldr	r2, [pc, #272]	; (800dd50 <TIM_Base_SetConfig+0x124>)
 800dc40:	4293      	cmp	r3, r2
 800dc42:	d013      	beq.n	800dc6c <TIM_Base_SetConfig+0x40>
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dc4a:	d00f      	beq.n	800dc6c <TIM_Base_SetConfig+0x40>
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	4a41      	ldr	r2, [pc, #260]	; (800dd54 <TIM_Base_SetConfig+0x128>)
 800dc50:	4293      	cmp	r3, r2
 800dc52:	d00b      	beq.n	800dc6c <TIM_Base_SetConfig+0x40>
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	4a40      	ldr	r2, [pc, #256]	; (800dd58 <TIM_Base_SetConfig+0x12c>)
 800dc58:	4293      	cmp	r3, r2
 800dc5a:	d007      	beq.n	800dc6c <TIM_Base_SetConfig+0x40>
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	4a3f      	ldr	r2, [pc, #252]	; (800dd5c <TIM_Base_SetConfig+0x130>)
 800dc60:	4293      	cmp	r3, r2
 800dc62:	d003      	beq.n	800dc6c <TIM_Base_SetConfig+0x40>
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	4a3e      	ldr	r2, [pc, #248]	; (800dd60 <TIM_Base_SetConfig+0x134>)
 800dc68:	4293      	cmp	r3, r2
 800dc6a:	d108      	bne.n	800dc7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dc72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800dc74:	683b      	ldr	r3, [r7, #0]
 800dc76:	685b      	ldr	r3, [r3, #4]
 800dc78:	68fa      	ldr	r2, [r7, #12]
 800dc7a:	4313      	orrs	r3, r2
 800dc7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	4a33      	ldr	r2, [pc, #204]	; (800dd50 <TIM_Base_SetConfig+0x124>)
 800dc82:	4293      	cmp	r3, r2
 800dc84:	d027      	beq.n	800dcd6 <TIM_Base_SetConfig+0xaa>
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dc8c:	d023      	beq.n	800dcd6 <TIM_Base_SetConfig+0xaa>
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	4a30      	ldr	r2, [pc, #192]	; (800dd54 <TIM_Base_SetConfig+0x128>)
 800dc92:	4293      	cmp	r3, r2
 800dc94:	d01f      	beq.n	800dcd6 <TIM_Base_SetConfig+0xaa>
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	4a2f      	ldr	r2, [pc, #188]	; (800dd58 <TIM_Base_SetConfig+0x12c>)
 800dc9a:	4293      	cmp	r3, r2
 800dc9c:	d01b      	beq.n	800dcd6 <TIM_Base_SetConfig+0xaa>
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	4a2e      	ldr	r2, [pc, #184]	; (800dd5c <TIM_Base_SetConfig+0x130>)
 800dca2:	4293      	cmp	r3, r2
 800dca4:	d017      	beq.n	800dcd6 <TIM_Base_SetConfig+0xaa>
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	4a2d      	ldr	r2, [pc, #180]	; (800dd60 <TIM_Base_SetConfig+0x134>)
 800dcaa:	4293      	cmp	r3, r2
 800dcac:	d013      	beq.n	800dcd6 <TIM_Base_SetConfig+0xaa>
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	4a2c      	ldr	r2, [pc, #176]	; (800dd64 <TIM_Base_SetConfig+0x138>)
 800dcb2:	4293      	cmp	r3, r2
 800dcb4:	d00f      	beq.n	800dcd6 <TIM_Base_SetConfig+0xaa>
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	4a2b      	ldr	r2, [pc, #172]	; (800dd68 <TIM_Base_SetConfig+0x13c>)
 800dcba:	4293      	cmp	r3, r2
 800dcbc:	d00b      	beq.n	800dcd6 <TIM_Base_SetConfig+0xaa>
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	4a2a      	ldr	r2, [pc, #168]	; (800dd6c <TIM_Base_SetConfig+0x140>)
 800dcc2:	4293      	cmp	r3, r2
 800dcc4:	d007      	beq.n	800dcd6 <TIM_Base_SetConfig+0xaa>
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	4a29      	ldr	r2, [pc, #164]	; (800dd70 <TIM_Base_SetConfig+0x144>)
 800dcca:	4293      	cmp	r3, r2
 800dccc:	d003      	beq.n	800dcd6 <TIM_Base_SetConfig+0xaa>
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	4a28      	ldr	r2, [pc, #160]	; (800dd74 <TIM_Base_SetConfig+0x148>)
 800dcd2:	4293      	cmp	r3, r2
 800dcd4:	d108      	bne.n	800dce8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dcdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800dcde:	683b      	ldr	r3, [r7, #0]
 800dce0:	68db      	ldr	r3, [r3, #12]
 800dce2:	68fa      	ldr	r2, [r7, #12]
 800dce4:	4313      	orrs	r3, r2
 800dce6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800dcee:	683b      	ldr	r3, [r7, #0]
 800dcf0:	695b      	ldr	r3, [r3, #20]
 800dcf2:	4313      	orrs	r3, r2
 800dcf4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	68fa      	ldr	r2, [r7, #12]
 800dcfa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800dcfc:	683b      	ldr	r3, [r7, #0]
 800dcfe:	689a      	ldr	r2, [r3, #8]
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800dd04:	683b      	ldr	r3, [r7, #0]
 800dd06:	681a      	ldr	r2, [r3, #0]
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	4a10      	ldr	r2, [pc, #64]	; (800dd50 <TIM_Base_SetConfig+0x124>)
 800dd10:	4293      	cmp	r3, r2
 800dd12:	d00f      	beq.n	800dd34 <TIM_Base_SetConfig+0x108>
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	4a12      	ldr	r2, [pc, #72]	; (800dd60 <TIM_Base_SetConfig+0x134>)
 800dd18:	4293      	cmp	r3, r2
 800dd1a:	d00b      	beq.n	800dd34 <TIM_Base_SetConfig+0x108>
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	4a11      	ldr	r2, [pc, #68]	; (800dd64 <TIM_Base_SetConfig+0x138>)
 800dd20:	4293      	cmp	r3, r2
 800dd22:	d007      	beq.n	800dd34 <TIM_Base_SetConfig+0x108>
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	4a10      	ldr	r2, [pc, #64]	; (800dd68 <TIM_Base_SetConfig+0x13c>)
 800dd28:	4293      	cmp	r3, r2
 800dd2a:	d003      	beq.n	800dd34 <TIM_Base_SetConfig+0x108>
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	4a0f      	ldr	r2, [pc, #60]	; (800dd6c <TIM_Base_SetConfig+0x140>)
 800dd30:	4293      	cmp	r3, r2
 800dd32:	d103      	bne.n	800dd3c <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800dd34:	683b      	ldr	r3, [r7, #0]
 800dd36:	691a      	ldr	r2, [r3, #16]
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	2201      	movs	r2, #1
 800dd40:	615a      	str	r2, [r3, #20]
}
 800dd42:	bf00      	nop
 800dd44:	3714      	adds	r7, #20
 800dd46:	46bd      	mov	sp, r7
 800dd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd4c:	4770      	bx	lr
 800dd4e:	bf00      	nop
 800dd50:	40010000 	.word	0x40010000
 800dd54:	40000400 	.word	0x40000400
 800dd58:	40000800 	.word	0x40000800
 800dd5c:	40000c00 	.word	0x40000c00
 800dd60:	40010400 	.word	0x40010400
 800dd64:	40014000 	.word	0x40014000
 800dd68:	40014400 	.word	0x40014400
 800dd6c:	40014800 	.word	0x40014800
 800dd70:	4000e000 	.word	0x4000e000
 800dd74:	4000e400 	.word	0x4000e400

0800dd78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800dd78:	b480      	push	{r7}
 800dd7a:	b087      	sub	sp, #28
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	6078      	str	r0, [r7, #4]
 800dd80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	6a1b      	ldr	r3, [r3, #32]
 800dd86:	f023 0201 	bic.w	r2, r3, #1
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	6a1b      	ldr	r3, [r3, #32]
 800dd92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	685b      	ldr	r3, [r3, #4]
 800dd98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	699b      	ldr	r3, [r3, #24]
 800dd9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800dda0:	68fa      	ldr	r2, [r7, #12]
 800dda2:	4b37      	ldr	r3, [pc, #220]	; (800de80 <TIM_OC1_SetConfig+0x108>)
 800dda4:	4013      	ands	r3, r2
 800dda6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	f023 0303 	bic.w	r3, r3, #3
 800ddae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ddb0:	683b      	ldr	r3, [r7, #0]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	68fa      	ldr	r2, [r7, #12]
 800ddb6:	4313      	orrs	r3, r2
 800ddb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ddba:	697b      	ldr	r3, [r7, #20]
 800ddbc:	f023 0302 	bic.w	r3, r3, #2
 800ddc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ddc2:	683b      	ldr	r3, [r7, #0]
 800ddc4:	689b      	ldr	r3, [r3, #8]
 800ddc6:	697a      	ldr	r2, [r7, #20]
 800ddc8:	4313      	orrs	r3, r2
 800ddca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	4a2d      	ldr	r2, [pc, #180]	; (800de84 <TIM_OC1_SetConfig+0x10c>)
 800ddd0:	4293      	cmp	r3, r2
 800ddd2:	d00f      	beq.n	800ddf4 <TIM_OC1_SetConfig+0x7c>
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	4a2c      	ldr	r2, [pc, #176]	; (800de88 <TIM_OC1_SetConfig+0x110>)
 800ddd8:	4293      	cmp	r3, r2
 800ddda:	d00b      	beq.n	800ddf4 <TIM_OC1_SetConfig+0x7c>
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	4a2b      	ldr	r2, [pc, #172]	; (800de8c <TIM_OC1_SetConfig+0x114>)
 800dde0:	4293      	cmp	r3, r2
 800dde2:	d007      	beq.n	800ddf4 <TIM_OC1_SetConfig+0x7c>
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	4a2a      	ldr	r2, [pc, #168]	; (800de90 <TIM_OC1_SetConfig+0x118>)
 800dde8:	4293      	cmp	r3, r2
 800ddea:	d003      	beq.n	800ddf4 <TIM_OC1_SetConfig+0x7c>
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	4a29      	ldr	r2, [pc, #164]	; (800de94 <TIM_OC1_SetConfig+0x11c>)
 800ddf0:	4293      	cmp	r3, r2
 800ddf2:	d10c      	bne.n	800de0e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ddf4:	697b      	ldr	r3, [r7, #20]
 800ddf6:	f023 0308 	bic.w	r3, r3, #8
 800ddfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ddfc:	683b      	ldr	r3, [r7, #0]
 800ddfe:	68db      	ldr	r3, [r3, #12]
 800de00:	697a      	ldr	r2, [r7, #20]
 800de02:	4313      	orrs	r3, r2
 800de04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800de06:	697b      	ldr	r3, [r7, #20]
 800de08:	f023 0304 	bic.w	r3, r3, #4
 800de0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	4a1c      	ldr	r2, [pc, #112]	; (800de84 <TIM_OC1_SetConfig+0x10c>)
 800de12:	4293      	cmp	r3, r2
 800de14:	d00f      	beq.n	800de36 <TIM_OC1_SetConfig+0xbe>
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	4a1b      	ldr	r2, [pc, #108]	; (800de88 <TIM_OC1_SetConfig+0x110>)
 800de1a:	4293      	cmp	r3, r2
 800de1c:	d00b      	beq.n	800de36 <TIM_OC1_SetConfig+0xbe>
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	4a1a      	ldr	r2, [pc, #104]	; (800de8c <TIM_OC1_SetConfig+0x114>)
 800de22:	4293      	cmp	r3, r2
 800de24:	d007      	beq.n	800de36 <TIM_OC1_SetConfig+0xbe>
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	4a19      	ldr	r2, [pc, #100]	; (800de90 <TIM_OC1_SetConfig+0x118>)
 800de2a:	4293      	cmp	r3, r2
 800de2c:	d003      	beq.n	800de36 <TIM_OC1_SetConfig+0xbe>
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	4a18      	ldr	r2, [pc, #96]	; (800de94 <TIM_OC1_SetConfig+0x11c>)
 800de32:	4293      	cmp	r3, r2
 800de34:	d111      	bne.n	800de5a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800de36:	693b      	ldr	r3, [r7, #16]
 800de38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800de3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800de3e:	693b      	ldr	r3, [r7, #16]
 800de40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800de44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800de46:	683b      	ldr	r3, [r7, #0]
 800de48:	695b      	ldr	r3, [r3, #20]
 800de4a:	693a      	ldr	r2, [r7, #16]
 800de4c:	4313      	orrs	r3, r2
 800de4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800de50:	683b      	ldr	r3, [r7, #0]
 800de52:	699b      	ldr	r3, [r3, #24]
 800de54:	693a      	ldr	r2, [r7, #16]
 800de56:	4313      	orrs	r3, r2
 800de58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	693a      	ldr	r2, [r7, #16]
 800de5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	68fa      	ldr	r2, [r7, #12]
 800de64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800de66:	683b      	ldr	r3, [r7, #0]
 800de68:	685a      	ldr	r2, [r3, #4]
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	697a      	ldr	r2, [r7, #20]
 800de72:	621a      	str	r2, [r3, #32]
}
 800de74:	bf00      	nop
 800de76:	371c      	adds	r7, #28
 800de78:	46bd      	mov	sp, r7
 800de7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de7e:	4770      	bx	lr
 800de80:	fffeff8f 	.word	0xfffeff8f
 800de84:	40010000 	.word	0x40010000
 800de88:	40010400 	.word	0x40010400
 800de8c:	40014000 	.word	0x40014000
 800de90:	40014400 	.word	0x40014400
 800de94:	40014800 	.word	0x40014800

0800de98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800de98:	b480      	push	{r7}
 800de9a:	b087      	sub	sp, #28
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	6078      	str	r0, [r7, #4]
 800dea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	6a1b      	ldr	r3, [r3, #32]
 800dea6:	f023 0210 	bic.w	r2, r3, #16
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	6a1b      	ldr	r3, [r3, #32]
 800deb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	685b      	ldr	r3, [r3, #4]
 800deb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	699b      	ldr	r3, [r3, #24]
 800debe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800dec0:	68fa      	ldr	r2, [r7, #12]
 800dec2:	4b34      	ldr	r3, [pc, #208]	; (800df94 <TIM_OC2_SetConfig+0xfc>)
 800dec4:	4013      	ands	r3, r2
 800dec6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dece:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ded0:	683b      	ldr	r3, [r7, #0]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	021b      	lsls	r3, r3, #8
 800ded6:	68fa      	ldr	r2, [r7, #12]
 800ded8:	4313      	orrs	r3, r2
 800deda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800dedc:	697b      	ldr	r3, [r7, #20]
 800dede:	f023 0320 	bic.w	r3, r3, #32
 800dee2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800dee4:	683b      	ldr	r3, [r7, #0]
 800dee6:	689b      	ldr	r3, [r3, #8]
 800dee8:	011b      	lsls	r3, r3, #4
 800deea:	697a      	ldr	r2, [r7, #20]
 800deec:	4313      	orrs	r3, r2
 800deee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	4a29      	ldr	r2, [pc, #164]	; (800df98 <TIM_OC2_SetConfig+0x100>)
 800def4:	4293      	cmp	r3, r2
 800def6:	d003      	beq.n	800df00 <TIM_OC2_SetConfig+0x68>
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	4a28      	ldr	r2, [pc, #160]	; (800df9c <TIM_OC2_SetConfig+0x104>)
 800defc:	4293      	cmp	r3, r2
 800defe:	d10d      	bne.n	800df1c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800df00:	697b      	ldr	r3, [r7, #20]
 800df02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800df06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800df08:	683b      	ldr	r3, [r7, #0]
 800df0a:	68db      	ldr	r3, [r3, #12]
 800df0c:	011b      	lsls	r3, r3, #4
 800df0e:	697a      	ldr	r2, [r7, #20]
 800df10:	4313      	orrs	r3, r2
 800df12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800df14:	697b      	ldr	r3, [r7, #20]
 800df16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800df1a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	4a1e      	ldr	r2, [pc, #120]	; (800df98 <TIM_OC2_SetConfig+0x100>)
 800df20:	4293      	cmp	r3, r2
 800df22:	d00f      	beq.n	800df44 <TIM_OC2_SetConfig+0xac>
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	4a1d      	ldr	r2, [pc, #116]	; (800df9c <TIM_OC2_SetConfig+0x104>)
 800df28:	4293      	cmp	r3, r2
 800df2a:	d00b      	beq.n	800df44 <TIM_OC2_SetConfig+0xac>
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	4a1c      	ldr	r2, [pc, #112]	; (800dfa0 <TIM_OC2_SetConfig+0x108>)
 800df30:	4293      	cmp	r3, r2
 800df32:	d007      	beq.n	800df44 <TIM_OC2_SetConfig+0xac>
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	4a1b      	ldr	r2, [pc, #108]	; (800dfa4 <TIM_OC2_SetConfig+0x10c>)
 800df38:	4293      	cmp	r3, r2
 800df3a:	d003      	beq.n	800df44 <TIM_OC2_SetConfig+0xac>
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	4a1a      	ldr	r2, [pc, #104]	; (800dfa8 <TIM_OC2_SetConfig+0x110>)
 800df40:	4293      	cmp	r3, r2
 800df42:	d113      	bne.n	800df6c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800df44:	693b      	ldr	r3, [r7, #16]
 800df46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800df4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800df4c:	693b      	ldr	r3, [r7, #16]
 800df4e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800df52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800df54:	683b      	ldr	r3, [r7, #0]
 800df56:	695b      	ldr	r3, [r3, #20]
 800df58:	009b      	lsls	r3, r3, #2
 800df5a:	693a      	ldr	r2, [r7, #16]
 800df5c:	4313      	orrs	r3, r2
 800df5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800df60:	683b      	ldr	r3, [r7, #0]
 800df62:	699b      	ldr	r3, [r3, #24]
 800df64:	009b      	lsls	r3, r3, #2
 800df66:	693a      	ldr	r2, [r7, #16]
 800df68:	4313      	orrs	r3, r2
 800df6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	693a      	ldr	r2, [r7, #16]
 800df70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	68fa      	ldr	r2, [r7, #12]
 800df76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800df78:	683b      	ldr	r3, [r7, #0]
 800df7a:	685a      	ldr	r2, [r3, #4]
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	697a      	ldr	r2, [r7, #20]
 800df84:	621a      	str	r2, [r3, #32]
}
 800df86:	bf00      	nop
 800df88:	371c      	adds	r7, #28
 800df8a:	46bd      	mov	sp, r7
 800df8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df90:	4770      	bx	lr
 800df92:	bf00      	nop
 800df94:	feff8fff 	.word	0xfeff8fff
 800df98:	40010000 	.word	0x40010000
 800df9c:	40010400 	.word	0x40010400
 800dfa0:	40014000 	.word	0x40014000
 800dfa4:	40014400 	.word	0x40014400
 800dfa8:	40014800 	.word	0x40014800

0800dfac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800dfac:	b480      	push	{r7}
 800dfae:	b087      	sub	sp, #28
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	6078      	str	r0, [r7, #4]
 800dfb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	6a1b      	ldr	r3, [r3, #32]
 800dfba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	6a1b      	ldr	r3, [r3, #32]
 800dfc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	685b      	ldr	r3, [r3, #4]
 800dfcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	69db      	ldr	r3, [r3, #28]
 800dfd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800dfd4:	68fa      	ldr	r2, [r7, #12]
 800dfd6:	4b33      	ldr	r3, [pc, #204]	; (800e0a4 <TIM_OC3_SetConfig+0xf8>)
 800dfd8:	4013      	ands	r3, r2
 800dfda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	f023 0303 	bic.w	r3, r3, #3
 800dfe2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dfe4:	683b      	ldr	r3, [r7, #0]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	68fa      	ldr	r2, [r7, #12]
 800dfea:	4313      	orrs	r3, r2
 800dfec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800dfee:	697b      	ldr	r3, [r7, #20]
 800dff0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800dff4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800dff6:	683b      	ldr	r3, [r7, #0]
 800dff8:	689b      	ldr	r3, [r3, #8]
 800dffa:	021b      	lsls	r3, r3, #8
 800dffc:	697a      	ldr	r2, [r7, #20]
 800dffe:	4313      	orrs	r3, r2
 800e000:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	4a28      	ldr	r2, [pc, #160]	; (800e0a8 <TIM_OC3_SetConfig+0xfc>)
 800e006:	4293      	cmp	r3, r2
 800e008:	d003      	beq.n	800e012 <TIM_OC3_SetConfig+0x66>
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	4a27      	ldr	r2, [pc, #156]	; (800e0ac <TIM_OC3_SetConfig+0x100>)
 800e00e:	4293      	cmp	r3, r2
 800e010:	d10d      	bne.n	800e02e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e012:	697b      	ldr	r3, [r7, #20]
 800e014:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e018:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e01a:	683b      	ldr	r3, [r7, #0]
 800e01c:	68db      	ldr	r3, [r3, #12]
 800e01e:	021b      	lsls	r3, r3, #8
 800e020:	697a      	ldr	r2, [r7, #20]
 800e022:	4313      	orrs	r3, r2
 800e024:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e026:	697b      	ldr	r3, [r7, #20]
 800e028:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e02c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	4a1d      	ldr	r2, [pc, #116]	; (800e0a8 <TIM_OC3_SetConfig+0xfc>)
 800e032:	4293      	cmp	r3, r2
 800e034:	d00f      	beq.n	800e056 <TIM_OC3_SetConfig+0xaa>
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	4a1c      	ldr	r2, [pc, #112]	; (800e0ac <TIM_OC3_SetConfig+0x100>)
 800e03a:	4293      	cmp	r3, r2
 800e03c:	d00b      	beq.n	800e056 <TIM_OC3_SetConfig+0xaa>
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	4a1b      	ldr	r2, [pc, #108]	; (800e0b0 <TIM_OC3_SetConfig+0x104>)
 800e042:	4293      	cmp	r3, r2
 800e044:	d007      	beq.n	800e056 <TIM_OC3_SetConfig+0xaa>
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	4a1a      	ldr	r2, [pc, #104]	; (800e0b4 <TIM_OC3_SetConfig+0x108>)
 800e04a:	4293      	cmp	r3, r2
 800e04c:	d003      	beq.n	800e056 <TIM_OC3_SetConfig+0xaa>
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	4a19      	ldr	r2, [pc, #100]	; (800e0b8 <TIM_OC3_SetConfig+0x10c>)
 800e052:	4293      	cmp	r3, r2
 800e054:	d113      	bne.n	800e07e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e056:	693b      	ldr	r3, [r7, #16]
 800e058:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e05c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e05e:	693b      	ldr	r3, [r7, #16]
 800e060:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e064:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e066:	683b      	ldr	r3, [r7, #0]
 800e068:	695b      	ldr	r3, [r3, #20]
 800e06a:	011b      	lsls	r3, r3, #4
 800e06c:	693a      	ldr	r2, [r7, #16]
 800e06e:	4313      	orrs	r3, r2
 800e070:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e072:	683b      	ldr	r3, [r7, #0]
 800e074:	699b      	ldr	r3, [r3, #24]
 800e076:	011b      	lsls	r3, r3, #4
 800e078:	693a      	ldr	r2, [r7, #16]
 800e07a:	4313      	orrs	r3, r2
 800e07c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	693a      	ldr	r2, [r7, #16]
 800e082:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	68fa      	ldr	r2, [r7, #12]
 800e088:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e08a:	683b      	ldr	r3, [r7, #0]
 800e08c:	685a      	ldr	r2, [r3, #4]
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	697a      	ldr	r2, [r7, #20]
 800e096:	621a      	str	r2, [r3, #32]
}
 800e098:	bf00      	nop
 800e09a:	371c      	adds	r7, #28
 800e09c:	46bd      	mov	sp, r7
 800e09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a2:	4770      	bx	lr
 800e0a4:	fffeff8f 	.word	0xfffeff8f
 800e0a8:	40010000 	.word	0x40010000
 800e0ac:	40010400 	.word	0x40010400
 800e0b0:	40014000 	.word	0x40014000
 800e0b4:	40014400 	.word	0x40014400
 800e0b8:	40014800 	.word	0x40014800

0800e0bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e0bc:	b480      	push	{r7}
 800e0be:	b087      	sub	sp, #28
 800e0c0:	af00      	add	r7, sp, #0
 800e0c2:	6078      	str	r0, [r7, #4]
 800e0c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	6a1b      	ldr	r3, [r3, #32]
 800e0ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	6a1b      	ldr	r3, [r3, #32]
 800e0d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	685b      	ldr	r3, [r3, #4]
 800e0dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	69db      	ldr	r3, [r3, #28]
 800e0e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e0e4:	68fa      	ldr	r2, [r7, #12]
 800e0e6:	4b24      	ldr	r3, [pc, #144]	; (800e178 <TIM_OC4_SetConfig+0xbc>)
 800e0e8:	4013      	ands	r3, r2
 800e0ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e0f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e0f4:	683b      	ldr	r3, [r7, #0]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	021b      	lsls	r3, r3, #8
 800e0fa:	68fa      	ldr	r2, [r7, #12]
 800e0fc:	4313      	orrs	r3, r2
 800e0fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e100:	693b      	ldr	r3, [r7, #16]
 800e102:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e106:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e108:	683b      	ldr	r3, [r7, #0]
 800e10a:	689b      	ldr	r3, [r3, #8]
 800e10c:	031b      	lsls	r3, r3, #12
 800e10e:	693a      	ldr	r2, [r7, #16]
 800e110:	4313      	orrs	r3, r2
 800e112:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	4a19      	ldr	r2, [pc, #100]	; (800e17c <TIM_OC4_SetConfig+0xc0>)
 800e118:	4293      	cmp	r3, r2
 800e11a:	d00f      	beq.n	800e13c <TIM_OC4_SetConfig+0x80>
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	4a18      	ldr	r2, [pc, #96]	; (800e180 <TIM_OC4_SetConfig+0xc4>)
 800e120:	4293      	cmp	r3, r2
 800e122:	d00b      	beq.n	800e13c <TIM_OC4_SetConfig+0x80>
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	4a17      	ldr	r2, [pc, #92]	; (800e184 <TIM_OC4_SetConfig+0xc8>)
 800e128:	4293      	cmp	r3, r2
 800e12a:	d007      	beq.n	800e13c <TIM_OC4_SetConfig+0x80>
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	4a16      	ldr	r2, [pc, #88]	; (800e188 <TIM_OC4_SetConfig+0xcc>)
 800e130:	4293      	cmp	r3, r2
 800e132:	d003      	beq.n	800e13c <TIM_OC4_SetConfig+0x80>
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	4a15      	ldr	r2, [pc, #84]	; (800e18c <TIM_OC4_SetConfig+0xd0>)
 800e138:	4293      	cmp	r3, r2
 800e13a:	d109      	bne.n	800e150 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e13c:	697b      	ldr	r3, [r7, #20]
 800e13e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e142:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e144:	683b      	ldr	r3, [r7, #0]
 800e146:	695b      	ldr	r3, [r3, #20]
 800e148:	019b      	lsls	r3, r3, #6
 800e14a:	697a      	ldr	r2, [r7, #20]
 800e14c:	4313      	orrs	r3, r2
 800e14e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	697a      	ldr	r2, [r7, #20]
 800e154:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	68fa      	ldr	r2, [r7, #12]
 800e15a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e15c:	683b      	ldr	r3, [r7, #0]
 800e15e:	685a      	ldr	r2, [r3, #4]
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	693a      	ldr	r2, [r7, #16]
 800e168:	621a      	str	r2, [r3, #32]
}
 800e16a:	bf00      	nop
 800e16c:	371c      	adds	r7, #28
 800e16e:	46bd      	mov	sp, r7
 800e170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e174:	4770      	bx	lr
 800e176:	bf00      	nop
 800e178:	feff8fff 	.word	0xfeff8fff
 800e17c:	40010000 	.word	0x40010000
 800e180:	40010400 	.word	0x40010400
 800e184:	40014000 	.word	0x40014000
 800e188:	40014400 	.word	0x40014400
 800e18c:	40014800 	.word	0x40014800

0800e190 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800e190:	b480      	push	{r7}
 800e192:	b087      	sub	sp, #28
 800e194:	af00      	add	r7, sp, #0
 800e196:	6078      	str	r0, [r7, #4]
 800e198:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	6a1b      	ldr	r3, [r3, #32]
 800e19e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	6a1b      	ldr	r3, [r3, #32]
 800e1aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	685b      	ldr	r3, [r3, #4]
 800e1b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e1b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e1b8:	68fa      	ldr	r2, [r7, #12]
 800e1ba:	4b21      	ldr	r3, [pc, #132]	; (800e240 <TIM_OC5_SetConfig+0xb0>)
 800e1bc:	4013      	ands	r3, r2
 800e1be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e1c0:	683b      	ldr	r3, [r7, #0]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	68fa      	ldr	r2, [r7, #12]
 800e1c6:	4313      	orrs	r3, r2
 800e1c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e1ca:	693b      	ldr	r3, [r7, #16]
 800e1cc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800e1d0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e1d2:	683b      	ldr	r3, [r7, #0]
 800e1d4:	689b      	ldr	r3, [r3, #8]
 800e1d6:	041b      	lsls	r3, r3, #16
 800e1d8:	693a      	ldr	r2, [r7, #16]
 800e1da:	4313      	orrs	r3, r2
 800e1dc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	4a18      	ldr	r2, [pc, #96]	; (800e244 <TIM_OC5_SetConfig+0xb4>)
 800e1e2:	4293      	cmp	r3, r2
 800e1e4:	d00f      	beq.n	800e206 <TIM_OC5_SetConfig+0x76>
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	4a17      	ldr	r2, [pc, #92]	; (800e248 <TIM_OC5_SetConfig+0xb8>)
 800e1ea:	4293      	cmp	r3, r2
 800e1ec:	d00b      	beq.n	800e206 <TIM_OC5_SetConfig+0x76>
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	4a16      	ldr	r2, [pc, #88]	; (800e24c <TIM_OC5_SetConfig+0xbc>)
 800e1f2:	4293      	cmp	r3, r2
 800e1f4:	d007      	beq.n	800e206 <TIM_OC5_SetConfig+0x76>
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	4a15      	ldr	r2, [pc, #84]	; (800e250 <TIM_OC5_SetConfig+0xc0>)
 800e1fa:	4293      	cmp	r3, r2
 800e1fc:	d003      	beq.n	800e206 <TIM_OC5_SetConfig+0x76>
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	4a14      	ldr	r2, [pc, #80]	; (800e254 <TIM_OC5_SetConfig+0xc4>)
 800e202:	4293      	cmp	r3, r2
 800e204:	d109      	bne.n	800e21a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e206:	697b      	ldr	r3, [r7, #20]
 800e208:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e20c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e20e:	683b      	ldr	r3, [r7, #0]
 800e210:	695b      	ldr	r3, [r3, #20]
 800e212:	021b      	lsls	r3, r3, #8
 800e214:	697a      	ldr	r2, [r7, #20]
 800e216:	4313      	orrs	r3, r2
 800e218:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	697a      	ldr	r2, [r7, #20]
 800e21e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	68fa      	ldr	r2, [r7, #12]
 800e224:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e226:	683b      	ldr	r3, [r7, #0]
 800e228:	685a      	ldr	r2, [r3, #4]
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	693a      	ldr	r2, [r7, #16]
 800e232:	621a      	str	r2, [r3, #32]
}
 800e234:	bf00      	nop
 800e236:	371c      	adds	r7, #28
 800e238:	46bd      	mov	sp, r7
 800e23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e23e:	4770      	bx	lr
 800e240:	fffeff8f 	.word	0xfffeff8f
 800e244:	40010000 	.word	0x40010000
 800e248:	40010400 	.word	0x40010400
 800e24c:	40014000 	.word	0x40014000
 800e250:	40014400 	.word	0x40014400
 800e254:	40014800 	.word	0x40014800

0800e258 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800e258:	b480      	push	{r7}
 800e25a:	b087      	sub	sp, #28
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	6078      	str	r0, [r7, #4]
 800e260:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	6a1b      	ldr	r3, [r3, #32]
 800e266:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	6a1b      	ldr	r3, [r3, #32]
 800e272:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	685b      	ldr	r3, [r3, #4]
 800e278:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e27e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e280:	68fa      	ldr	r2, [r7, #12]
 800e282:	4b22      	ldr	r3, [pc, #136]	; (800e30c <TIM_OC6_SetConfig+0xb4>)
 800e284:	4013      	ands	r3, r2
 800e286:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e288:	683b      	ldr	r3, [r7, #0]
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	021b      	lsls	r3, r3, #8
 800e28e:	68fa      	ldr	r2, [r7, #12]
 800e290:	4313      	orrs	r3, r2
 800e292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e294:	693b      	ldr	r3, [r7, #16]
 800e296:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e29a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e29c:	683b      	ldr	r3, [r7, #0]
 800e29e:	689b      	ldr	r3, [r3, #8]
 800e2a0:	051b      	lsls	r3, r3, #20
 800e2a2:	693a      	ldr	r2, [r7, #16]
 800e2a4:	4313      	orrs	r3, r2
 800e2a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	4a19      	ldr	r2, [pc, #100]	; (800e310 <TIM_OC6_SetConfig+0xb8>)
 800e2ac:	4293      	cmp	r3, r2
 800e2ae:	d00f      	beq.n	800e2d0 <TIM_OC6_SetConfig+0x78>
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	4a18      	ldr	r2, [pc, #96]	; (800e314 <TIM_OC6_SetConfig+0xbc>)
 800e2b4:	4293      	cmp	r3, r2
 800e2b6:	d00b      	beq.n	800e2d0 <TIM_OC6_SetConfig+0x78>
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	4a17      	ldr	r2, [pc, #92]	; (800e318 <TIM_OC6_SetConfig+0xc0>)
 800e2bc:	4293      	cmp	r3, r2
 800e2be:	d007      	beq.n	800e2d0 <TIM_OC6_SetConfig+0x78>
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	4a16      	ldr	r2, [pc, #88]	; (800e31c <TIM_OC6_SetConfig+0xc4>)
 800e2c4:	4293      	cmp	r3, r2
 800e2c6:	d003      	beq.n	800e2d0 <TIM_OC6_SetConfig+0x78>
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	4a15      	ldr	r2, [pc, #84]	; (800e320 <TIM_OC6_SetConfig+0xc8>)
 800e2cc:	4293      	cmp	r3, r2
 800e2ce:	d109      	bne.n	800e2e4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e2d0:	697b      	ldr	r3, [r7, #20]
 800e2d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e2d6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e2d8:	683b      	ldr	r3, [r7, #0]
 800e2da:	695b      	ldr	r3, [r3, #20]
 800e2dc:	029b      	lsls	r3, r3, #10
 800e2de:	697a      	ldr	r2, [r7, #20]
 800e2e0:	4313      	orrs	r3, r2
 800e2e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	697a      	ldr	r2, [r7, #20]
 800e2e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	68fa      	ldr	r2, [r7, #12]
 800e2ee:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e2f0:	683b      	ldr	r3, [r7, #0]
 800e2f2:	685a      	ldr	r2, [r3, #4]
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	693a      	ldr	r2, [r7, #16]
 800e2fc:	621a      	str	r2, [r3, #32]
}
 800e2fe:	bf00      	nop
 800e300:	371c      	adds	r7, #28
 800e302:	46bd      	mov	sp, r7
 800e304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e308:	4770      	bx	lr
 800e30a:	bf00      	nop
 800e30c:	feff8fff 	.word	0xfeff8fff
 800e310:	40010000 	.word	0x40010000
 800e314:	40010400 	.word	0x40010400
 800e318:	40014000 	.word	0x40014000
 800e31c:	40014400 	.word	0x40014400
 800e320:	40014800 	.word	0x40014800

0800e324 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e324:	b480      	push	{r7}
 800e326:	b087      	sub	sp, #28
 800e328:	af00      	add	r7, sp, #0
 800e32a:	60f8      	str	r0, [r7, #12]
 800e32c:	60b9      	str	r1, [r7, #8]
 800e32e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	6a1b      	ldr	r3, [r3, #32]
 800e334:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	6a1b      	ldr	r3, [r3, #32]
 800e33a:	f023 0201 	bic.w	r2, r3, #1
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	699b      	ldr	r3, [r3, #24]
 800e346:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e348:	693b      	ldr	r3, [r7, #16]
 800e34a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e34e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	011b      	lsls	r3, r3, #4
 800e354:	693a      	ldr	r2, [r7, #16]
 800e356:	4313      	orrs	r3, r2
 800e358:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e35a:	697b      	ldr	r3, [r7, #20]
 800e35c:	f023 030a 	bic.w	r3, r3, #10
 800e360:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e362:	697a      	ldr	r2, [r7, #20]
 800e364:	68bb      	ldr	r3, [r7, #8]
 800e366:	4313      	orrs	r3, r2
 800e368:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	693a      	ldr	r2, [r7, #16]
 800e36e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	697a      	ldr	r2, [r7, #20]
 800e374:	621a      	str	r2, [r3, #32]
}
 800e376:	bf00      	nop
 800e378:	371c      	adds	r7, #28
 800e37a:	46bd      	mov	sp, r7
 800e37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e380:	4770      	bx	lr

0800e382 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e382:	b480      	push	{r7}
 800e384:	b087      	sub	sp, #28
 800e386:	af00      	add	r7, sp, #0
 800e388:	60f8      	str	r0, [r7, #12]
 800e38a:	60b9      	str	r1, [r7, #8]
 800e38c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	6a1b      	ldr	r3, [r3, #32]
 800e392:	f023 0210 	bic.w	r2, r3, #16
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	699b      	ldr	r3, [r3, #24]
 800e39e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	6a1b      	ldr	r3, [r3, #32]
 800e3a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e3a6:	697b      	ldr	r3, [r7, #20]
 800e3a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e3ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	031b      	lsls	r3, r3, #12
 800e3b2:	697a      	ldr	r2, [r7, #20]
 800e3b4:	4313      	orrs	r3, r2
 800e3b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e3b8:	693b      	ldr	r3, [r7, #16]
 800e3ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e3be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e3c0:	68bb      	ldr	r3, [r7, #8]
 800e3c2:	011b      	lsls	r3, r3, #4
 800e3c4:	693a      	ldr	r2, [r7, #16]
 800e3c6:	4313      	orrs	r3, r2
 800e3c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	697a      	ldr	r2, [r7, #20]
 800e3ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	693a      	ldr	r2, [r7, #16]
 800e3d4:	621a      	str	r2, [r3, #32]
}
 800e3d6:	bf00      	nop
 800e3d8:	371c      	adds	r7, #28
 800e3da:	46bd      	mov	sp, r7
 800e3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e0:	4770      	bx	lr
	...

0800e3e4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e3e4:	b480      	push	{r7}
 800e3e6:	b085      	sub	sp, #20
 800e3e8:	af00      	add	r7, sp, #0
 800e3ea:	6078      	str	r0, [r7, #4]
 800e3ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	689b      	ldr	r3, [r3, #8]
 800e3f2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e3f4:	68fa      	ldr	r2, [r7, #12]
 800e3f6:	4b09      	ldr	r3, [pc, #36]	; (800e41c <TIM_ITRx_SetConfig+0x38>)
 800e3f8:	4013      	ands	r3, r2
 800e3fa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e3fc:	683a      	ldr	r2, [r7, #0]
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	4313      	orrs	r3, r2
 800e402:	f043 0307 	orr.w	r3, r3, #7
 800e406:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	68fa      	ldr	r2, [r7, #12]
 800e40c:	609a      	str	r2, [r3, #8]
}
 800e40e:	bf00      	nop
 800e410:	3714      	adds	r7, #20
 800e412:	46bd      	mov	sp, r7
 800e414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e418:	4770      	bx	lr
 800e41a:	bf00      	nop
 800e41c:	ffcfff8f 	.word	0xffcfff8f

0800e420 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e420:	b480      	push	{r7}
 800e422:	b087      	sub	sp, #28
 800e424:	af00      	add	r7, sp, #0
 800e426:	60f8      	str	r0, [r7, #12]
 800e428:	60b9      	str	r1, [r7, #8]
 800e42a:	607a      	str	r2, [r7, #4]
 800e42c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	689b      	ldr	r3, [r3, #8]
 800e432:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e434:	697b      	ldr	r3, [r7, #20]
 800e436:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e43a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e43c:	683b      	ldr	r3, [r7, #0]
 800e43e:	021a      	lsls	r2, r3, #8
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	431a      	orrs	r2, r3
 800e444:	68bb      	ldr	r3, [r7, #8]
 800e446:	4313      	orrs	r3, r2
 800e448:	697a      	ldr	r2, [r7, #20]
 800e44a:	4313      	orrs	r3, r2
 800e44c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	697a      	ldr	r2, [r7, #20]
 800e452:	609a      	str	r2, [r3, #8]
}
 800e454:	bf00      	nop
 800e456:	371c      	adds	r7, #28
 800e458:	46bd      	mov	sp, r7
 800e45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e45e:	4770      	bx	lr

0800e460 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800e460:	b480      	push	{r7}
 800e462:	b087      	sub	sp, #28
 800e464:	af00      	add	r7, sp, #0
 800e466:	60f8      	str	r0, [r7, #12]
 800e468:	60b9      	str	r1, [r7, #8]
 800e46a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e46c:	68bb      	ldr	r3, [r7, #8]
 800e46e:	f003 031f 	and.w	r3, r3, #31
 800e472:	2201      	movs	r2, #1
 800e474:	fa02 f303 	lsl.w	r3, r2, r3
 800e478:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	6a1a      	ldr	r2, [r3, #32]
 800e47e:	697b      	ldr	r3, [r7, #20]
 800e480:	43db      	mvns	r3, r3
 800e482:	401a      	ands	r2, r3
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	6a1a      	ldr	r2, [r3, #32]
 800e48c:	68bb      	ldr	r3, [r7, #8]
 800e48e:	f003 031f 	and.w	r3, r3, #31
 800e492:	6879      	ldr	r1, [r7, #4]
 800e494:	fa01 f303 	lsl.w	r3, r1, r3
 800e498:	431a      	orrs	r2, r3
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	621a      	str	r2, [r3, #32]
}
 800e49e:	bf00      	nop
 800e4a0:	371c      	adds	r7, #28
 800e4a2:	46bd      	mov	sp, r7
 800e4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4a8:	4770      	bx	lr
	...

0800e4ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e4ac:	b480      	push	{r7}
 800e4ae:	b085      	sub	sp, #20
 800e4b0:	af00      	add	r7, sp, #0
 800e4b2:	6078      	str	r0, [r7, #4]
 800e4b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e4bc:	2b01      	cmp	r3, #1
 800e4be:	d101      	bne.n	800e4c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e4c0:	2302      	movs	r3, #2
 800e4c2:	e077      	b.n	800e5b4 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	2201      	movs	r2, #1
 800e4c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	2202      	movs	r2, #2
 800e4d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	685b      	ldr	r3, [r3, #4]
 800e4da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	689b      	ldr	r3, [r3, #8]
 800e4e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	4a35      	ldr	r2, [pc, #212]	; (800e5c0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e4ea:	4293      	cmp	r3, r2
 800e4ec:	d004      	beq.n	800e4f8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	4a34      	ldr	r2, [pc, #208]	; (800e5c4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e4f4:	4293      	cmp	r3, r2
 800e4f6:	d108      	bne.n	800e50a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800e4fe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e500:	683b      	ldr	r3, [r7, #0]
 800e502:	685b      	ldr	r3, [r3, #4]
 800e504:	68fa      	ldr	r2, [r7, #12]
 800e506:	4313      	orrs	r3, r2
 800e508:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e510:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e512:	683b      	ldr	r3, [r7, #0]
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	68fa      	ldr	r2, [r7, #12]
 800e518:	4313      	orrs	r3, r2
 800e51a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	68fa      	ldr	r2, [r7, #12]
 800e522:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	4a25      	ldr	r2, [pc, #148]	; (800e5c0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e52a:	4293      	cmp	r3, r2
 800e52c:	d02c      	beq.n	800e588 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e536:	d027      	beq.n	800e588 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	4a22      	ldr	r2, [pc, #136]	; (800e5c8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800e53e:	4293      	cmp	r3, r2
 800e540:	d022      	beq.n	800e588 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	4a21      	ldr	r2, [pc, #132]	; (800e5cc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800e548:	4293      	cmp	r3, r2
 800e54a:	d01d      	beq.n	800e588 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	4a1f      	ldr	r2, [pc, #124]	; (800e5d0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800e552:	4293      	cmp	r3, r2
 800e554:	d018      	beq.n	800e588 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	4a1a      	ldr	r2, [pc, #104]	; (800e5c4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e55c:	4293      	cmp	r3, r2
 800e55e:	d013      	beq.n	800e588 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	4a1b      	ldr	r2, [pc, #108]	; (800e5d4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800e566:	4293      	cmp	r3, r2
 800e568:	d00e      	beq.n	800e588 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	4a1a      	ldr	r2, [pc, #104]	; (800e5d8 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800e570:	4293      	cmp	r3, r2
 800e572:	d009      	beq.n	800e588 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	4a18      	ldr	r2, [pc, #96]	; (800e5dc <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800e57a:	4293      	cmp	r3, r2
 800e57c:	d004      	beq.n	800e588 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	4a17      	ldr	r2, [pc, #92]	; (800e5e0 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800e584:	4293      	cmp	r3, r2
 800e586:	d10c      	bne.n	800e5a2 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e588:	68bb      	ldr	r3, [r7, #8]
 800e58a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e58e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e590:	683b      	ldr	r3, [r7, #0]
 800e592:	689b      	ldr	r3, [r3, #8]
 800e594:	68ba      	ldr	r2, [r7, #8]
 800e596:	4313      	orrs	r3, r2
 800e598:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	68ba      	ldr	r2, [r7, #8]
 800e5a0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	2201      	movs	r2, #1
 800e5a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	2200      	movs	r2, #0
 800e5ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e5b2:	2300      	movs	r3, #0
}
 800e5b4:	4618      	mov	r0, r3
 800e5b6:	3714      	adds	r7, #20
 800e5b8:	46bd      	mov	sp, r7
 800e5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5be:	4770      	bx	lr
 800e5c0:	40010000 	.word	0x40010000
 800e5c4:	40010400 	.word	0x40010400
 800e5c8:	40000400 	.word	0x40000400
 800e5cc:	40000800 	.word	0x40000800
 800e5d0:	40000c00 	.word	0x40000c00
 800e5d4:	40001800 	.word	0x40001800
 800e5d8:	40014000 	.word	0x40014000
 800e5dc:	4000e000 	.word	0x4000e000
 800e5e0:	4000e400 	.word	0x4000e400

0800e5e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800e5e4:	b480      	push	{r7}
 800e5e6:	b085      	sub	sp, #20
 800e5e8:	af00      	add	r7, sp, #0
 800e5ea:	6078      	str	r0, [r7, #4]
 800e5ec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800e5ee:	2300      	movs	r3, #0
 800e5f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e5f8:	2b01      	cmp	r3, #1
 800e5fa:	d101      	bne.n	800e600 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800e5fc:	2302      	movs	r3, #2
 800e5fe:	e087      	b.n	800e710 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	2201      	movs	r2, #1
 800e604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800e60e:	683b      	ldr	r3, [r7, #0]
 800e610:	68db      	ldr	r3, [r3, #12]
 800e612:	4313      	orrs	r3, r2
 800e614:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e61c:	683b      	ldr	r3, [r7, #0]
 800e61e:	689b      	ldr	r3, [r3, #8]
 800e620:	4313      	orrs	r3, r2
 800e622:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800e62a:	683b      	ldr	r3, [r7, #0]
 800e62c:	685b      	ldr	r3, [r3, #4]
 800e62e:	4313      	orrs	r3, r2
 800e630:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800e638:	683b      	ldr	r3, [r7, #0]
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	4313      	orrs	r3, r2
 800e63e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e646:	683b      	ldr	r3, [r7, #0]
 800e648:	691b      	ldr	r3, [r3, #16]
 800e64a:	4313      	orrs	r3, r2
 800e64c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800e654:	683b      	ldr	r3, [r7, #0]
 800e656:	695b      	ldr	r3, [r3, #20]
 800e658:	4313      	orrs	r3, r2
 800e65a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800e662:	683b      	ldr	r3, [r7, #0]
 800e664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e666:	4313      	orrs	r3, r2
 800e668:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800e670:	683b      	ldr	r3, [r7, #0]
 800e672:	699b      	ldr	r3, [r3, #24]
 800e674:	041b      	lsls	r3, r3, #16
 800e676:	4313      	orrs	r3, r2
 800e678:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	4a27      	ldr	r2, [pc, #156]	; (800e71c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800e680:	4293      	cmp	r3, r2
 800e682:	d004      	beq.n	800e68e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	4a25      	ldr	r2, [pc, #148]	; (800e720 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800e68a:	4293      	cmp	r3, r2
 800e68c:	d106      	bne.n	800e69c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800e694:	683b      	ldr	r3, [r7, #0]
 800e696:	69db      	ldr	r3, [r3, #28]
 800e698:	4313      	orrs	r3, r2
 800e69a:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	4a1e      	ldr	r2, [pc, #120]	; (800e71c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800e6a2:	4293      	cmp	r3, r2
 800e6a4:	d004      	beq.n	800e6b0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	4a1d      	ldr	r2, [pc, #116]	; (800e720 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800e6ac:	4293      	cmp	r3, r2
 800e6ae:	d126      	bne.n	800e6fe <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800e6b6:	683b      	ldr	r3, [r7, #0]
 800e6b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6ba:	051b      	lsls	r3, r3, #20
 800e6bc:	4313      	orrs	r3, r2
 800e6be:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800e6c6:	683b      	ldr	r3, [r7, #0]
 800e6c8:	6a1b      	ldr	r3, [r3, #32]
 800e6ca:	4313      	orrs	r3, r2
 800e6cc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800e6d4:	683b      	ldr	r3, [r7, #0]
 800e6d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6d8:	4313      	orrs	r3, r2
 800e6da:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	4a0e      	ldr	r2, [pc, #56]	; (800e71c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800e6e2:	4293      	cmp	r3, r2
 800e6e4:	d004      	beq.n	800e6f0 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	4a0d      	ldr	r2, [pc, #52]	; (800e720 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800e6ec:	4293      	cmp	r3, r2
 800e6ee:	d106      	bne.n	800e6fe <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800e6f6:	683b      	ldr	r3, [r7, #0]
 800e6f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6fa:	4313      	orrs	r3, r2
 800e6fc:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	68fa      	ldr	r2, [r7, #12]
 800e704:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	2200      	movs	r2, #0
 800e70a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e70e:	2300      	movs	r3, #0
}
 800e710:	4618      	mov	r0, r3
 800e712:	3714      	adds	r7, #20
 800e714:	46bd      	mov	sp, r7
 800e716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e71a:	4770      	bx	lr
 800e71c:	40010000 	.word	0x40010000
 800e720:	40010400 	.word	0x40010400

0800e724 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e724:	b480      	push	{r7}
 800e726:	b083      	sub	sp, #12
 800e728:	af00      	add	r7, sp, #0
 800e72a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e72c:	bf00      	nop
 800e72e:	370c      	adds	r7, #12
 800e730:	46bd      	mov	sp, r7
 800e732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e736:	4770      	bx	lr

0800e738 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e738:	b480      	push	{r7}
 800e73a:	b083      	sub	sp, #12
 800e73c:	af00      	add	r7, sp, #0
 800e73e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e740:	bf00      	nop
 800e742:	370c      	adds	r7, #12
 800e744:	46bd      	mov	sp, r7
 800e746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e74a:	4770      	bx	lr

0800e74c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e74c:	b480      	push	{r7}
 800e74e:	b083      	sub	sp, #12
 800e750:	af00      	add	r7, sp, #0
 800e752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e754:	bf00      	nop
 800e756:	370c      	adds	r7, #12
 800e758:	46bd      	mov	sp, r7
 800e75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e75e:	4770      	bx	lr

0800e760 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e760:	b580      	push	{r7, lr}
 800e762:	b082      	sub	sp, #8
 800e764:	af00      	add	r7, sp, #0
 800e766:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d101      	bne.n	800e772 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e76e:	2301      	movs	r3, #1
 800e770:	e042      	b.n	800e7f8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d106      	bne.n	800e78a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	2200      	movs	r2, #0
 800e780:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e784:	6878      	ldr	r0, [r7, #4]
 800e786:	f7f7 fe05 	bl	8006394 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	2224      	movs	r2, #36	; 0x24
 800e78e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	681a      	ldr	r2, [r3, #0]
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	f022 0201 	bic.w	r2, r2, #1
 800e7a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e7a2:	6878      	ldr	r0, [r7, #4]
 800e7a4:	f000 fd18 	bl	800f1d8 <UART_SetConfig>
 800e7a8:	4603      	mov	r3, r0
 800e7aa:	2b01      	cmp	r3, #1
 800e7ac:	d101      	bne.n	800e7b2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800e7ae:	2301      	movs	r3, #1
 800e7b0:	e022      	b.n	800e7f8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d002      	beq.n	800e7c0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800e7ba:	6878      	ldr	r0, [r7, #4]
 800e7bc:	f001 fb78 	bl	800feb0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	685a      	ldr	r2, [r3, #4]
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e7ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	689a      	ldr	r2, [r3, #8]
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e7de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	681a      	ldr	r2, [r3, #0]
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	f042 0201 	orr.w	r2, r2, #1
 800e7ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e7f0:	6878      	ldr	r0, [r7, #4]
 800e7f2:	f001 fbff 	bl	800fff4 <UART_CheckIdleState>
 800e7f6:	4603      	mov	r3, r0
}
 800e7f8:	4618      	mov	r0, r3
 800e7fa:	3708      	adds	r7, #8
 800e7fc:	46bd      	mov	sp, r7
 800e7fe:	bd80      	pop	{r7, pc}

0800e800 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800e800:	b580      	push	{r7, lr}
 800e802:	b082      	sub	sp, #8
 800e804:	af00      	add	r7, sp, #0
 800e806:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d101      	bne.n	800e812 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800e80e:	2301      	movs	r3, #1
 800e810:	e02e      	b.n	800e870 <HAL_UART_DeInit+0x70>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	2224      	movs	r2, #36	; 0x24
 800e816:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	681a      	ldr	r2, [r3, #0]
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	f022 0201 	bic.w	r2, r2, #1
 800e828:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	2200      	movs	r2, #0
 800e830:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	2200      	movs	r2, #0
 800e838:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	2200      	movs	r2, #0
 800e840:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800e842:	6878      	ldr	r0, [r7, #4]
 800e844:	f7f7 fe7a 	bl	800653c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	2200      	movs	r2, #0
 800e84c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->gState = HAL_UART_STATE_RESET;
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	2200      	movs	r2, #0
 800e854:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_RESET;
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	2200      	movs	r2, #0
 800e85c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	2200      	movs	r2, #0
 800e864:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	2200      	movs	r2, #0
 800e86a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e86e:	2300      	movs	r3, #0
}
 800e870:	4618      	mov	r0, r3
 800e872:	3708      	adds	r7, #8
 800e874:	46bd      	mov	sp, r7
 800e876:	bd80      	pop	{r7, pc}

0800e878 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800e878:	b580      	push	{r7, lr}
 800e87a:	b08a      	sub	sp, #40	; 0x28
 800e87c:	af00      	add	r7, sp, #0
 800e87e:	60f8      	str	r0, [r7, #12]
 800e880:	60b9      	str	r1, [r7, #8]
 800e882:	4613      	mov	r3, r2
 800e884:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e88c:	2b20      	cmp	r3, #32
 800e88e:	d17a      	bne.n	800e986 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800e890:	68bb      	ldr	r3, [r7, #8]
 800e892:	2b00      	cmp	r3, #0
 800e894:	d002      	beq.n	800e89c <HAL_UART_Transmit_DMA+0x24>
 800e896:	88fb      	ldrh	r3, [r7, #6]
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d101      	bne.n	800e8a0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800e89c:	2301      	movs	r3, #1
 800e89e:	e073      	b.n	800e988 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e8a6:	2b01      	cmp	r3, #1
 800e8a8:	d101      	bne.n	800e8ae <HAL_UART_Transmit_DMA+0x36>
 800e8aa:	2302      	movs	r3, #2
 800e8ac:	e06c      	b.n	800e988 <HAL_UART_Transmit_DMA+0x110>
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	2201      	movs	r2, #1
 800e8b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	68ba      	ldr	r2, [r7, #8]
 800e8ba:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	88fa      	ldrh	r2, [r7, #6]
 800e8c0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	88fa      	ldrh	r2, [r7, #6]
 800e8c8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	2200      	movs	r2, #0
 800e8d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	2221      	movs	r2, #33	; 0x21
 800e8d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d02c      	beq.n	800e93e <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e8e8:	4a29      	ldr	r2, [pc, #164]	; (800e990 <HAL_UART_Transmit_DMA+0x118>)
 800e8ea:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e8f0:	4a28      	ldr	r2, [pc, #160]	; (800e994 <HAL_UART_Transmit_DMA+0x11c>)
 800e8f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e8f8:	4a27      	ldr	r2, [pc, #156]	; (800e998 <HAL_UART_Transmit_DMA+0x120>)
 800e8fa:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e900:	2200      	movs	r2, #0
 800e902:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e90c:	4619      	mov	r1, r3
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	3328      	adds	r3, #40	; 0x28
 800e914:	461a      	mov	r2, r3
 800e916:	88fb      	ldrh	r3, [r7, #6]
 800e918:	f7f9 f8fa 	bl	8007b10 <HAL_DMA_Start_IT>
 800e91c:	4603      	mov	r3, r0
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d00d      	beq.n	800e93e <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	2210      	movs	r2, #16
 800e926:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	2200      	movs	r2, #0
 800e92e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	2220      	movs	r2, #32
 800e936:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800e93a:	2301      	movs	r3, #1
 800e93c:	e024      	b.n	800e988 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	2240      	movs	r2, #64	; 0x40
 800e944:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	2200      	movs	r2, #0
 800e94a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	3308      	adds	r3, #8
 800e954:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e956:	697b      	ldr	r3, [r7, #20]
 800e958:	e853 3f00 	ldrex	r3, [r3]
 800e95c:	613b      	str	r3, [r7, #16]
   return(result);
 800e95e:	693b      	ldr	r3, [r7, #16]
 800e960:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e964:	627b      	str	r3, [r7, #36]	; 0x24
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	3308      	adds	r3, #8
 800e96c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e96e:	623a      	str	r2, [r7, #32]
 800e970:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e972:	69f9      	ldr	r1, [r7, #28]
 800e974:	6a3a      	ldr	r2, [r7, #32]
 800e976:	e841 2300 	strex	r3, r2, [r1]
 800e97a:	61bb      	str	r3, [r7, #24]
   return(result);
 800e97c:	69bb      	ldr	r3, [r7, #24]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d1e5      	bne.n	800e94e <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800e982:	2300      	movs	r3, #0
 800e984:	e000      	b.n	800e988 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800e986:	2302      	movs	r3, #2
  }
}
 800e988:	4618      	mov	r0, r3
 800e98a:	3728      	adds	r7, #40	; 0x28
 800e98c:	46bd      	mov	sp, r7
 800e98e:	bd80      	pop	{r7, pc}
 800e990:	080104bd 	.word	0x080104bd
 800e994:	08010553 	.word	0x08010553
 800e998:	080106c9 	.word	0x080106c9

0800e99c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e99c:	b580      	push	{r7, lr}
 800e99e:	b08a      	sub	sp, #40	; 0x28
 800e9a0:	af00      	add	r7, sp, #0
 800e9a2:	60f8      	str	r0, [r7, #12]
 800e9a4:	60b9      	str	r1, [r7, #8]
 800e9a6:	4613      	mov	r3, r2
 800e9a8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e9b0:	2b20      	cmp	r3, #32
 800e9b2:	d142      	bne.n	800ea3a <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800e9b4:	68bb      	ldr	r3, [r7, #8]
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d002      	beq.n	800e9c0 <HAL_UART_Receive_DMA+0x24>
 800e9ba:	88fb      	ldrh	r3, [r7, #6]
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d101      	bne.n	800e9c4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800e9c0:	2301      	movs	r3, #1
 800e9c2:	e03b      	b.n	800ea3c <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e9ca:	2b01      	cmp	r3, #1
 800e9cc:	d101      	bne.n	800e9d2 <HAL_UART_Receive_DMA+0x36>
 800e9ce:	2302      	movs	r3, #2
 800e9d0:	e034      	b.n	800ea3c <HAL_UART_Receive_DMA+0xa0>
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	2201      	movs	r2, #1
 800e9d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	2200      	movs	r2, #0
 800e9de:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	4a17      	ldr	r2, [pc, #92]	; (800ea44 <HAL_UART_Receive_DMA+0xa8>)
 800e9e6:	4293      	cmp	r3, r2
 800e9e8:	d01f      	beq.n	800ea2a <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	685b      	ldr	r3, [r3, #4]
 800e9f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d018      	beq.n	800ea2a <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9fe:	697b      	ldr	r3, [r7, #20]
 800ea00:	e853 3f00 	ldrex	r3, [r3]
 800ea04:	613b      	str	r3, [r7, #16]
   return(result);
 800ea06:	693b      	ldr	r3, [r7, #16]
 800ea08:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ea0c:	627b      	str	r3, [r7, #36]	; 0x24
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	461a      	mov	r2, r3
 800ea14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea16:	623b      	str	r3, [r7, #32]
 800ea18:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea1a:	69f9      	ldr	r1, [r7, #28]
 800ea1c:	6a3a      	ldr	r2, [r7, #32]
 800ea1e:	e841 2300 	strex	r3, r2, [r1]
 800ea22:	61bb      	str	r3, [r7, #24]
   return(result);
 800ea24:	69bb      	ldr	r3, [r7, #24]
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d1e6      	bne.n	800e9f8 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800ea2a:	88fb      	ldrh	r3, [r7, #6]
 800ea2c:	461a      	mov	r2, r3
 800ea2e:	68b9      	ldr	r1, [r7, #8]
 800ea30:	68f8      	ldr	r0, [r7, #12]
 800ea32:	f001 fbf3 	bl	801021c <UART_Start_Receive_DMA>
 800ea36:	4603      	mov	r3, r0
 800ea38:	e000      	b.n	800ea3c <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800ea3a:	2302      	movs	r3, #2
  }
}
 800ea3c:	4618      	mov	r0, r3
 800ea3e:	3728      	adds	r7, #40	; 0x28
 800ea40:	46bd      	mov	sp, r7
 800ea42:	bd80      	pop	{r7, pc}
 800ea44:	58000c00 	.word	0x58000c00

0800ea48 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ea48:	b580      	push	{r7, lr}
 800ea4a:	b0ba      	sub	sp, #232	; 0xe8
 800ea4c:	af00      	add	r7, sp, #0
 800ea4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	69db      	ldr	r3, [r3, #28]
 800ea56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	689b      	ldr	r3, [r3, #8]
 800ea6a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ea6e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800ea72:	f640 030f 	movw	r3, #2063	; 0x80f
 800ea76:	4013      	ands	r3, r2
 800ea78:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800ea7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d11b      	bne.n	800eabc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ea84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ea88:	f003 0320 	and.w	r3, r3, #32
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d015      	beq.n	800eabc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ea90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ea94:	f003 0320 	and.w	r3, r3, #32
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d105      	bne.n	800eaa8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ea9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800eaa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d009      	beq.n	800eabc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	f000 835a 	beq.w	800f166 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eab6:	6878      	ldr	r0, [r7, #4]
 800eab8:	4798      	blx	r3
      }
      return;
 800eaba:	e354      	b.n	800f166 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800eabc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	f000 811f 	beq.w	800ed04 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800eac6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800eaca:	4b8b      	ldr	r3, [pc, #556]	; (800ecf8 <HAL_UART_IRQHandler+0x2b0>)
 800eacc:	4013      	ands	r3, r2
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d106      	bne.n	800eae0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ead2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800ead6:	4b89      	ldr	r3, [pc, #548]	; (800ecfc <HAL_UART_IRQHandler+0x2b4>)
 800ead8:	4013      	ands	r3, r2
 800eada:	2b00      	cmp	r3, #0
 800eadc:	f000 8112 	beq.w	800ed04 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800eae0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eae4:	f003 0301 	and.w	r3, r3, #1
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d011      	beq.n	800eb10 <HAL_UART_IRQHandler+0xc8>
 800eaec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eaf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d00b      	beq.n	800eb10 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	2201      	movs	r2, #1
 800eafe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eb06:	f043 0201 	orr.w	r2, r3, #1
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800eb10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eb14:	f003 0302 	and.w	r3, r3, #2
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d011      	beq.n	800eb40 <HAL_UART_IRQHandler+0xf8>
 800eb1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800eb20:	f003 0301 	and.w	r3, r3, #1
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d00b      	beq.n	800eb40 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	2202      	movs	r2, #2
 800eb2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eb36:	f043 0204 	orr.w	r2, r3, #4
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800eb40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eb44:	f003 0304 	and.w	r3, r3, #4
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d011      	beq.n	800eb70 <HAL_UART_IRQHandler+0x128>
 800eb4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800eb50:	f003 0301 	and.w	r3, r3, #1
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d00b      	beq.n	800eb70 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	2204      	movs	r2, #4
 800eb5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eb66:	f043 0202 	orr.w	r2, r3, #2
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800eb70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eb74:	f003 0308 	and.w	r3, r3, #8
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d017      	beq.n	800ebac <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800eb7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eb80:	f003 0320 	and.w	r3, r3, #32
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d105      	bne.n	800eb94 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800eb88:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800eb8c:	4b5a      	ldr	r3, [pc, #360]	; (800ecf8 <HAL_UART_IRQHandler+0x2b0>)
 800eb8e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d00b      	beq.n	800ebac <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	2208      	movs	r2, #8
 800eb9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eba2:	f043 0208 	orr.w	r2, r3, #8
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ebac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ebb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d012      	beq.n	800ebde <HAL_UART_IRQHandler+0x196>
 800ebb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ebbc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d00c      	beq.n	800ebde <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ebcc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ebd4:	f043 0220 	orr.w	r2, r3, #32
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	f000 82c0 	beq.w	800f16a <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ebea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ebee:	f003 0320 	and.w	r3, r3, #32
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d013      	beq.n	800ec1e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ebf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ebfa:	f003 0320 	and.w	r3, r3, #32
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d105      	bne.n	800ec0e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ec02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ec06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d007      	beq.n	800ec1e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d003      	beq.n	800ec1e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec1a:	6878      	ldr	r0, [r7, #4]
 800ec1c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ec24:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	689b      	ldr	r3, [r3, #8]
 800ec2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec32:	2b40      	cmp	r3, #64	; 0x40
 800ec34:	d005      	beq.n	800ec42 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ec36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ec3a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d04f      	beq.n	800ece2 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ec42:	6878      	ldr	r0, [r7, #4]
 800ec44:	f001 fbd4 	bl	80103f0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	689b      	ldr	r3, [r3, #8]
 800ec4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec52:	2b40      	cmp	r3, #64	; 0x40
 800ec54:	d141      	bne.n	800ecda <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	3308      	adds	r3, #8
 800ec5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ec64:	e853 3f00 	ldrex	r3, [r3]
 800ec68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ec6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ec70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ec74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	3308      	adds	r3, #8
 800ec7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ec82:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ec86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ec8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ec92:	e841 2300 	strex	r3, r2, [r1]
 800ec96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ec9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d1d9      	bne.n	800ec56 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d013      	beq.n	800ecd2 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ecae:	4a14      	ldr	r2, [pc, #80]	; (800ed00 <HAL_UART_IRQHandler+0x2b8>)
 800ecb0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ecb6:	4618      	mov	r0, r3
 800ecb8:	f7f9 fcb2 	bl	8008620 <HAL_DMA_Abort_IT>
 800ecbc:	4603      	mov	r3, r0
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d017      	beq.n	800ecf2 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ecc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ecc8:	687a      	ldr	r2, [r7, #4]
 800ecca:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800eccc:	4610      	mov	r0, r2
 800ecce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ecd0:	e00f      	b.n	800ecf2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ecd2:	6878      	ldr	r0, [r7, #4]
 800ecd4:	f7f5 f94e 	bl	8003f74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ecd8:	e00b      	b.n	800ecf2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ecda:	6878      	ldr	r0, [r7, #4]
 800ecdc:	f7f5 f94a 	bl	8003f74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ece0:	e007      	b.n	800ecf2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ece2:	6878      	ldr	r0, [r7, #4]
 800ece4:	f7f5 f946 	bl	8003f74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	2200      	movs	r2, #0
 800ecec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800ecf0:	e23b      	b.n	800f16a <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ecf2:	bf00      	nop
    return;
 800ecf4:	e239      	b.n	800f16a <HAL_UART_IRQHandler+0x722>
 800ecf6:	bf00      	nop
 800ecf8:	10000001 	.word	0x10000001
 800ecfc:	04000120 	.word	0x04000120
 800ed00:	08010749 	.word	0x08010749

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed08:	2b01      	cmp	r3, #1
 800ed0a:	f040 81ce 	bne.w	800f0aa <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ed0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ed12:	f003 0310 	and.w	r3, r3, #16
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	f000 81c7 	beq.w	800f0aa <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ed1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ed20:	f003 0310 	and.w	r3, r3, #16
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	f000 81c0 	beq.w	800f0aa <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	2210      	movs	r2, #16
 800ed30:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	689b      	ldr	r3, [r3, #8]
 800ed38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed3c:	2b40      	cmp	r3, #64	; 0x40
 800ed3e:	f040 813b 	bne.w	800efb8 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	4a8b      	ldr	r2, [pc, #556]	; (800ef78 <HAL_UART_IRQHandler+0x530>)
 800ed4a:	4293      	cmp	r3, r2
 800ed4c:	d059      	beq.n	800ee02 <HAL_UART_IRQHandler+0x3ba>
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	4a89      	ldr	r2, [pc, #548]	; (800ef7c <HAL_UART_IRQHandler+0x534>)
 800ed56:	4293      	cmp	r3, r2
 800ed58:	d053      	beq.n	800ee02 <HAL_UART_IRQHandler+0x3ba>
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	4a87      	ldr	r2, [pc, #540]	; (800ef80 <HAL_UART_IRQHandler+0x538>)
 800ed62:	4293      	cmp	r3, r2
 800ed64:	d04d      	beq.n	800ee02 <HAL_UART_IRQHandler+0x3ba>
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	4a85      	ldr	r2, [pc, #532]	; (800ef84 <HAL_UART_IRQHandler+0x53c>)
 800ed6e:	4293      	cmp	r3, r2
 800ed70:	d047      	beq.n	800ee02 <HAL_UART_IRQHandler+0x3ba>
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	4a83      	ldr	r2, [pc, #524]	; (800ef88 <HAL_UART_IRQHandler+0x540>)
 800ed7a:	4293      	cmp	r3, r2
 800ed7c:	d041      	beq.n	800ee02 <HAL_UART_IRQHandler+0x3ba>
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	4a81      	ldr	r2, [pc, #516]	; (800ef8c <HAL_UART_IRQHandler+0x544>)
 800ed86:	4293      	cmp	r3, r2
 800ed88:	d03b      	beq.n	800ee02 <HAL_UART_IRQHandler+0x3ba>
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	4a7f      	ldr	r2, [pc, #508]	; (800ef90 <HAL_UART_IRQHandler+0x548>)
 800ed92:	4293      	cmp	r3, r2
 800ed94:	d035      	beq.n	800ee02 <HAL_UART_IRQHandler+0x3ba>
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	4a7d      	ldr	r2, [pc, #500]	; (800ef94 <HAL_UART_IRQHandler+0x54c>)
 800ed9e:	4293      	cmp	r3, r2
 800eda0:	d02f      	beq.n	800ee02 <HAL_UART_IRQHandler+0x3ba>
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	4a7b      	ldr	r2, [pc, #492]	; (800ef98 <HAL_UART_IRQHandler+0x550>)
 800edaa:	4293      	cmp	r3, r2
 800edac:	d029      	beq.n	800ee02 <HAL_UART_IRQHandler+0x3ba>
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	4a79      	ldr	r2, [pc, #484]	; (800ef9c <HAL_UART_IRQHandler+0x554>)
 800edb6:	4293      	cmp	r3, r2
 800edb8:	d023      	beq.n	800ee02 <HAL_UART_IRQHandler+0x3ba>
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	4a77      	ldr	r2, [pc, #476]	; (800efa0 <HAL_UART_IRQHandler+0x558>)
 800edc2:	4293      	cmp	r3, r2
 800edc4:	d01d      	beq.n	800ee02 <HAL_UART_IRQHandler+0x3ba>
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	4a75      	ldr	r2, [pc, #468]	; (800efa4 <HAL_UART_IRQHandler+0x55c>)
 800edce:	4293      	cmp	r3, r2
 800edd0:	d017      	beq.n	800ee02 <HAL_UART_IRQHandler+0x3ba>
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	4a73      	ldr	r2, [pc, #460]	; (800efa8 <HAL_UART_IRQHandler+0x560>)
 800edda:	4293      	cmp	r3, r2
 800eddc:	d011      	beq.n	800ee02 <HAL_UART_IRQHandler+0x3ba>
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	4a71      	ldr	r2, [pc, #452]	; (800efac <HAL_UART_IRQHandler+0x564>)
 800ede6:	4293      	cmp	r3, r2
 800ede8:	d00b      	beq.n	800ee02 <HAL_UART_IRQHandler+0x3ba>
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	4a6f      	ldr	r2, [pc, #444]	; (800efb0 <HAL_UART_IRQHandler+0x568>)
 800edf2:	4293      	cmp	r3, r2
 800edf4:	d005      	beq.n	800ee02 <HAL_UART_IRQHandler+0x3ba>
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	4a6d      	ldr	r2, [pc, #436]	; (800efb4 <HAL_UART_IRQHandler+0x56c>)
 800edfe:	4293      	cmp	r3, r2
 800ee00:	d105      	bne.n	800ee0e <HAL_UART_IRQHandler+0x3c6>
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	685b      	ldr	r3, [r3, #4]
 800ee0a:	b29b      	uxth	r3, r3
 800ee0c:	e004      	b.n	800ee18 <HAL_UART_IRQHandler+0x3d0>
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	685b      	ldr	r3, [r3, #4]
 800ee16:	b29b      	uxth	r3, r3
 800ee18:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ee1c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	f000 81a4 	beq.w	800f16e <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ee2c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ee30:	429a      	cmp	r2, r3
 800ee32:	f080 819c 	bcs.w	800f16e <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ee3c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ee44:	69db      	ldr	r3, [r3, #28]
 800ee46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ee4a:	f000 8086 	beq.w	800ef5a <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee56:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ee5a:	e853 3f00 	ldrex	r3, [r3]
 800ee5e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ee62:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ee66:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ee6a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	461a      	mov	r2, r3
 800ee74:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ee78:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ee7c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee80:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ee84:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ee88:	e841 2300 	strex	r3, r2, [r1]
 800ee8c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800ee90:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d1da      	bne.n	800ee4e <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	3308      	adds	r3, #8
 800ee9e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eea0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800eea2:	e853 3f00 	ldrex	r3, [r3]
 800eea6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800eea8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800eeaa:	f023 0301 	bic.w	r3, r3, #1
 800eeae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	3308      	adds	r3, #8
 800eeb8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800eebc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800eec0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eec2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800eec4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800eec8:	e841 2300 	strex	r3, r2, [r1]
 800eecc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800eece:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d1e1      	bne.n	800ee98 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	3308      	adds	r3, #8
 800eeda:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eedc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800eede:	e853 3f00 	ldrex	r3, [r3]
 800eee2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800eee4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eee6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eeea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	3308      	adds	r3, #8
 800eef4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800eef8:	66fa      	str	r2, [r7, #108]	; 0x6c
 800eefa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eefc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800eefe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ef00:	e841 2300 	strex	r3, r2, [r1]
 800ef04:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ef06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d1e3      	bne.n	800eed4 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	2220      	movs	r2, #32
 800ef10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	2200      	movs	r2, #0
 800ef18:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef22:	e853 3f00 	ldrex	r3, [r3]
 800ef26:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ef28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ef2a:	f023 0310 	bic.w	r3, r3, #16
 800ef2e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	461a      	mov	r2, r3
 800ef38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ef3c:	65bb      	str	r3, [r7, #88]	; 0x58
 800ef3e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef40:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ef42:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ef44:	e841 2300 	strex	r3, r2, [r1]
 800ef48:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ef4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d1e4      	bne.n	800ef1a <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ef54:	4618      	mov	r0, r3
 800ef56:	f7f9 f845 	bl	8007fe4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ef66:	b29b      	uxth	r3, r3
 800ef68:	1ad3      	subs	r3, r2, r3
 800ef6a:	b29b      	uxth	r3, r3
 800ef6c:	4619      	mov	r1, r3
 800ef6e:	6878      	ldr	r0, [r7, #4]
 800ef70:	f000 f926 	bl	800f1c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ef74:	e0fb      	b.n	800f16e <HAL_UART_IRQHandler+0x726>
 800ef76:	bf00      	nop
 800ef78:	40020010 	.word	0x40020010
 800ef7c:	40020028 	.word	0x40020028
 800ef80:	40020040 	.word	0x40020040
 800ef84:	40020058 	.word	0x40020058
 800ef88:	40020070 	.word	0x40020070
 800ef8c:	40020088 	.word	0x40020088
 800ef90:	400200a0 	.word	0x400200a0
 800ef94:	400200b8 	.word	0x400200b8
 800ef98:	40020410 	.word	0x40020410
 800ef9c:	40020428 	.word	0x40020428
 800efa0:	40020440 	.word	0x40020440
 800efa4:	40020458 	.word	0x40020458
 800efa8:	40020470 	.word	0x40020470
 800efac:	40020488 	.word	0x40020488
 800efb0:	400204a0 	.word	0x400204a0
 800efb4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800efc4:	b29b      	uxth	r3, r3
 800efc6:	1ad3      	subs	r3, r2, r3
 800efc8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800efd2:	b29b      	uxth	r3, r3
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	f000 80cc 	beq.w	800f172 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800efda:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800efde:	2b00      	cmp	r3, #0
 800efe0:	f000 80c7 	beq.w	800f172 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efec:	e853 3f00 	ldrex	r3, [r3]
 800eff0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800eff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eff4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800eff8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	461a      	mov	r2, r3
 800f002:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f006:	647b      	str	r3, [r7, #68]	; 0x44
 800f008:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f00a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f00c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f00e:	e841 2300 	strex	r3, r2, [r1]
 800f012:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f014:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f016:	2b00      	cmp	r3, #0
 800f018:	d1e4      	bne.n	800efe4 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	3308      	adds	r3, #8
 800f020:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f024:	e853 3f00 	ldrex	r3, [r3]
 800f028:	623b      	str	r3, [r7, #32]
   return(result);
 800f02a:	6a3a      	ldr	r2, [r7, #32]
 800f02c:	4b54      	ldr	r3, [pc, #336]	; (800f180 <HAL_UART_IRQHandler+0x738>)
 800f02e:	4013      	ands	r3, r2
 800f030:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	3308      	adds	r3, #8
 800f03a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800f03e:	633a      	str	r2, [r7, #48]	; 0x30
 800f040:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f042:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f044:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f046:	e841 2300 	strex	r3, r2, [r1]
 800f04a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f04c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d1e3      	bne.n	800f01a <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	2220      	movs	r2, #32
 800f056:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	2200      	movs	r2, #0
 800f05e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	2200      	movs	r2, #0
 800f064:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f06c:	693b      	ldr	r3, [r7, #16]
 800f06e:	e853 3f00 	ldrex	r3, [r3]
 800f072:	60fb      	str	r3, [r7, #12]
   return(result);
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	f023 0310 	bic.w	r3, r3, #16
 800f07a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	461a      	mov	r2, r3
 800f084:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f088:	61fb      	str	r3, [r7, #28]
 800f08a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f08c:	69b9      	ldr	r1, [r7, #24]
 800f08e:	69fa      	ldr	r2, [r7, #28]
 800f090:	e841 2300 	strex	r3, r2, [r1]
 800f094:	617b      	str	r3, [r7, #20]
   return(result);
 800f096:	697b      	ldr	r3, [r7, #20]
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d1e4      	bne.n	800f066 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f09c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f0a0:	4619      	mov	r1, r3
 800f0a2:	6878      	ldr	r0, [r7, #4]
 800f0a4:	f000 f88c 	bl	800f1c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f0a8:	e063      	b.n	800f172 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800f0aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f0ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d00e      	beq.n	800f0d4 <HAL_UART_IRQHandler+0x68c>
 800f0b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f0ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d008      	beq.n	800f0d4 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800f0ca:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800f0cc:	6878      	ldr	r0, [r7, #4]
 800f0ce:	f001 fb7c 	bl	80107ca <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f0d2:	e051      	b.n	800f178 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800f0d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f0d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d014      	beq.n	800f10a <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800f0e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f0e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d105      	bne.n	800f0f8 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800f0ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f0f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d008      	beq.n	800f10a <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d03a      	beq.n	800f176 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f104:	6878      	ldr	r0, [r7, #4]
 800f106:	4798      	blx	r3
    }
    return;
 800f108:	e035      	b.n	800f176 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800f10a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f10e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f112:	2b00      	cmp	r3, #0
 800f114:	d009      	beq.n	800f12a <HAL_UART_IRQHandler+0x6e2>
 800f116:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f11a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d003      	beq.n	800f12a <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800f122:	6878      	ldr	r0, [r7, #4]
 800f124:	f001 fb26 	bl	8010774 <UART_EndTransmit_IT>
    return;
 800f128:	e026      	b.n	800f178 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800f12a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f12e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f132:	2b00      	cmp	r3, #0
 800f134:	d009      	beq.n	800f14a <HAL_UART_IRQHandler+0x702>
 800f136:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f13a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d003      	beq.n	800f14a <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800f142:	6878      	ldr	r0, [r7, #4]
 800f144:	f001 fb55 	bl	80107f2 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f148:	e016      	b.n	800f178 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800f14a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f14e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f152:	2b00      	cmp	r3, #0
 800f154:	d010      	beq.n	800f178 <HAL_UART_IRQHandler+0x730>
 800f156:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	da0c      	bge.n	800f178 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800f15e:	6878      	ldr	r0, [r7, #4]
 800f160:	f001 fb3d 	bl	80107de <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f164:	e008      	b.n	800f178 <HAL_UART_IRQHandler+0x730>
      return;
 800f166:	bf00      	nop
 800f168:	e006      	b.n	800f178 <HAL_UART_IRQHandler+0x730>
    return;
 800f16a:	bf00      	nop
 800f16c:	e004      	b.n	800f178 <HAL_UART_IRQHandler+0x730>
      return;
 800f16e:	bf00      	nop
 800f170:	e002      	b.n	800f178 <HAL_UART_IRQHandler+0x730>
      return;
 800f172:	bf00      	nop
 800f174:	e000      	b.n	800f178 <HAL_UART_IRQHandler+0x730>
    return;
 800f176:	bf00      	nop
  }
}
 800f178:	37e8      	adds	r7, #232	; 0xe8
 800f17a:	46bd      	mov	sp, r7
 800f17c:	bd80      	pop	{r7, pc}
 800f17e:	bf00      	nop
 800f180:	effffffe 	.word	0xeffffffe

0800f184 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800f184:	b480      	push	{r7}
 800f186:	b083      	sub	sp, #12
 800f188:	af00      	add	r7, sp, #0
 800f18a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800f18c:	bf00      	nop
 800f18e:	370c      	adds	r7, #12
 800f190:	46bd      	mov	sp, r7
 800f192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f196:	4770      	bx	lr

0800f198 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800f198:	b480      	push	{r7}
 800f19a:	b083      	sub	sp, #12
 800f19c:	af00      	add	r7, sp, #0
 800f19e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800f1a0:	bf00      	nop
 800f1a2:	370c      	adds	r7, #12
 800f1a4:	46bd      	mov	sp, r7
 800f1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1aa:	4770      	bx	lr

0800f1ac <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800f1ac:	b480      	push	{r7}
 800f1ae:	b083      	sub	sp, #12
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800f1b4:	bf00      	nop
 800f1b6:	370c      	adds	r7, #12
 800f1b8:	46bd      	mov	sp, r7
 800f1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1be:	4770      	bx	lr

0800f1c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800f1c0:	b480      	push	{r7}
 800f1c2:	b083      	sub	sp, #12
 800f1c4:	af00      	add	r7, sp, #0
 800f1c6:	6078      	str	r0, [r7, #4]
 800f1c8:	460b      	mov	r3, r1
 800f1ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800f1cc:	bf00      	nop
 800f1ce:	370c      	adds	r7, #12
 800f1d0:	46bd      	mov	sp, r7
 800f1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1d6:	4770      	bx	lr

0800f1d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f1d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f1dc:	b092      	sub	sp, #72	; 0x48
 800f1de:	af00      	add	r7, sp, #0
 800f1e0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f1e2:	2300      	movs	r3, #0
 800f1e4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f1e8:	697b      	ldr	r3, [r7, #20]
 800f1ea:	689a      	ldr	r2, [r3, #8]
 800f1ec:	697b      	ldr	r3, [r7, #20]
 800f1ee:	691b      	ldr	r3, [r3, #16]
 800f1f0:	431a      	orrs	r2, r3
 800f1f2:	697b      	ldr	r3, [r7, #20]
 800f1f4:	695b      	ldr	r3, [r3, #20]
 800f1f6:	431a      	orrs	r2, r3
 800f1f8:	697b      	ldr	r3, [r7, #20]
 800f1fa:	69db      	ldr	r3, [r3, #28]
 800f1fc:	4313      	orrs	r3, r2
 800f1fe:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f200:	697b      	ldr	r3, [r7, #20]
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	681a      	ldr	r2, [r3, #0]
 800f206:	4bbe      	ldr	r3, [pc, #760]	; (800f500 <UART_SetConfig+0x328>)
 800f208:	4013      	ands	r3, r2
 800f20a:	697a      	ldr	r2, [r7, #20]
 800f20c:	6812      	ldr	r2, [r2, #0]
 800f20e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f210:	430b      	orrs	r3, r1
 800f212:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f214:	697b      	ldr	r3, [r7, #20]
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	685b      	ldr	r3, [r3, #4]
 800f21a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f21e:	697b      	ldr	r3, [r7, #20]
 800f220:	68da      	ldr	r2, [r3, #12]
 800f222:	697b      	ldr	r3, [r7, #20]
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	430a      	orrs	r2, r1
 800f228:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f22a:	697b      	ldr	r3, [r7, #20]
 800f22c:	699b      	ldr	r3, [r3, #24]
 800f22e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f230:	697b      	ldr	r3, [r7, #20]
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	4ab3      	ldr	r2, [pc, #716]	; (800f504 <UART_SetConfig+0x32c>)
 800f236:	4293      	cmp	r3, r2
 800f238:	d004      	beq.n	800f244 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f23a:	697b      	ldr	r3, [r7, #20]
 800f23c:	6a1b      	ldr	r3, [r3, #32]
 800f23e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f240:	4313      	orrs	r3, r2
 800f242:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f244:	697b      	ldr	r3, [r7, #20]
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	689a      	ldr	r2, [r3, #8]
 800f24a:	4baf      	ldr	r3, [pc, #700]	; (800f508 <UART_SetConfig+0x330>)
 800f24c:	4013      	ands	r3, r2
 800f24e:	697a      	ldr	r2, [r7, #20]
 800f250:	6812      	ldr	r2, [r2, #0]
 800f252:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f254:	430b      	orrs	r3, r1
 800f256:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f258:	697b      	ldr	r3, [r7, #20]
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f25e:	f023 010f 	bic.w	r1, r3, #15
 800f262:	697b      	ldr	r3, [r7, #20]
 800f264:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f266:	697b      	ldr	r3, [r7, #20]
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	430a      	orrs	r2, r1
 800f26c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f26e:	697b      	ldr	r3, [r7, #20]
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	4aa6      	ldr	r2, [pc, #664]	; (800f50c <UART_SetConfig+0x334>)
 800f274:	4293      	cmp	r3, r2
 800f276:	d177      	bne.n	800f368 <UART_SetConfig+0x190>
 800f278:	4ba5      	ldr	r3, [pc, #660]	; (800f510 <UART_SetConfig+0x338>)
 800f27a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f27c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f280:	2b28      	cmp	r3, #40	; 0x28
 800f282:	d86d      	bhi.n	800f360 <UART_SetConfig+0x188>
 800f284:	a201      	add	r2, pc, #4	; (adr r2, 800f28c <UART_SetConfig+0xb4>)
 800f286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f28a:	bf00      	nop
 800f28c:	0800f331 	.word	0x0800f331
 800f290:	0800f361 	.word	0x0800f361
 800f294:	0800f361 	.word	0x0800f361
 800f298:	0800f361 	.word	0x0800f361
 800f29c:	0800f361 	.word	0x0800f361
 800f2a0:	0800f361 	.word	0x0800f361
 800f2a4:	0800f361 	.word	0x0800f361
 800f2a8:	0800f361 	.word	0x0800f361
 800f2ac:	0800f339 	.word	0x0800f339
 800f2b0:	0800f361 	.word	0x0800f361
 800f2b4:	0800f361 	.word	0x0800f361
 800f2b8:	0800f361 	.word	0x0800f361
 800f2bc:	0800f361 	.word	0x0800f361
 800f2c0:	0800f361 	.word	0x0800f361
 800f2c4:	0800f361 	.word	0x0800f361
 800f2c8:	0800f361 	.word	0x0800f361
 800f2cc:	0800f341 	.word	0x0800f341
 800f2d0:	0800f361 	.word	0x0800f361
 800f2d4:	0800f361 	.word	0x0800f361
 800f2d8:	0800f361 	.word	0x0800f361
 800f2dc:	0800f361 	.word	0x0800f361
 800f2e0:	0800f361 	.word	0x0800f361
 800f2e4:	0800f361 	.word	0x0800f361
 800f2e8:	0800f361 	.word	0x0800f361
 800f2ec:	0800f349 	.word	0x0800f349
 800f2f0:	0800f361 	.word	0x0800f361
 800f2f4:	0800f361 	.word	0x0800f361
 800f2f8:	0800f361 	.word	0x0800f361
 800f2fc:	0800f361 	.word	0x0800f361
 800f300:	0800f361 	.word	0x0800f361
 800f304:	0800f361 	.word	0x0800f361
 800f308:	0800f361 	.word	0x0800f361
 800f30c:	0800f351 	.word	0x0800f351
 800f310:	0800f361 	.word	0x0800f361
 800f314:	0800f361 	.word	0x0800f361
 800f318:	0800f361 	.word	0x0800f361
 800f31c:	0800f361 	.word	0x0800f361
 800f320:	0800f361 	.word	0x0800f361
 800f324:	0800f361 	.word	0x0800f361
 800f328:	0800f361 	.word	0x0800f361
 800f32c:	0800f359 	.word	0x0800f359
 800f330:	2301      	movs	r3, #1
 800f332:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f336:	e326      	b.n	800f986 <UART_SetConfig+0x7ae>
 800f338:	2304      	movs	r3, #4
 800f33a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f33e:	e322      	b.n	800f986 <UART_SetConfig+0x7ae>
 800f340:	2308      	movs	r3, #8
 800f342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f346:	e31e      	b.n	800f986 <UART_SetConfig+0x7ae>
 800f348:	2310      	movs	r3, #16
 800f34a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f34e:	e31a      	b.n	800f986 <UART_SetConfig+0x7ae>
 800f350:	2320      	movs	r3, #32
 800f352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f356:	e316      	b.n	800f986 <UART_SetConfig+0x7ae>
 800f358:	2340      	movs	r3, #64	; 0x40
 800f35a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f35e:	e312      	b.n	800f986 <UART_SetConfig+0x7ae>
 800f360:	2380      	movs	r3, #128	; 0x80
 800f362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f366:	e30e      	b.n	800f986 <UART_SetConfig+0x7ae>
 800f368:	697b      	ldr	r3, [r7, #20]
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	4a69      	ldr	r2, [pc, #420]	; (800f514 <UART_SetConfig+0x33c>)
 800f36e:	4293      	cmp	r3, r2
 800f370:	d130      	bne.n	800f3d4 <UART_SetConfig+0x1fc>
 800f372:	4b67      	ldr	r3, [pc, #412]	; (800f510 <UART_SetConfig+0x338>)
 800f374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f376:	f003 0307 	and.w	r3, r3, #7
 800f37a:	2b05      	cmp	r3, #5
 800f37c:	d826      	bhi.n	800f3cc <UART_SetConfig+0x1f4>
 800f37e:	a201      	add	r2, pc, #4	; (adr r2, 800f384 <UART_SetConfig+0x1ac>)
 800f380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f384:	0800f39d 	.word	0x0800f39d
 800f388:	0800f3a5 	.word	0x0800f3a5
 800f38c:	0800f3ad 	.word	0x0800f3ad
 800f390:	0800f3b5 	.word	0x0800f3b5
 800f394:	0800f3bd 	.word	0x0800f3bd
 800f398:	0800f3c5 	.word	0x0800f3c5
 800f39c:	2300      	movs	r3, #0
 800f39e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f3a2:	e2f0      	b.n	800f986 <UART_SetConfig+0x7ae>
 800f3a4:	2304      	movs	r3, #4
 800f3a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f3aa:	e2ec      	b.n	800f986 <UART_SetConfig+0x7ae>
 800f3ac:	2308      	movs	r3, #8
 800f3ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f3b2:	e2e8      	b.n	800f986 <UART_SetConfig+0x7ae>
 800f3b4:	2310      	movs	r3, #16
 800f3b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f3ba:	e2e4      	b.n	800f986 <UART_SetConfig+0x7ae>
 800f3bc:	2320      	movs	r3, #32
 800f3be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f3c2:	e2e0      	b.n	800f986 <UART_SetConfig+0x7ae>
 800f3c4:	2340      	movs	r3, #64	; 0x40
 800f3c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f3ca:	e2dc      	b.n	800f986 <UART_SetConfig+0x7ae>
 800f3cc:	2380      	movs	r3, #128	; 0x80
 800f3ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f3d2:	e2d8      	b.n	800f986 <UART_SetConfig+0x7ae>
 800f3d4:	697b      	ldr	r3, [r7, #20]
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	4a4f      	ldr	r2, [pc, #316]	; (800f518 <UART_SetConfig+0x340>)
 800f3da:	4293      	cmp	r3, r2
 800f3dc:	d130      	bne.n	800f440 <UART_SetConfig+0x268>
 800f3de:	4b4c      	ldr	r3, [pc, #304]	; (800f510 <UART_SetConfig+0x338>)
 800f3e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f3e2:	f003 0307 	and.w	r3, r3, #7
 800f3e6:	2b05      	cmp	r3, #5
 800f3e8:	d826      	bhi.n	800f438 <UART_SetConfig+0x260>
 800f3ea:	a201      	add	r2, pc, #4	; (adr r2, 800f3f0 <UART_SetConfig+0x218>)
 800f3ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3f0:	0800f409 	.word	0x0800f409
 800f3f4:	0800f411 	.word	0x0800f411
 800f3f8:	0800f419 	.word	0x0800f419
 800f3fc:	0800f421 	.word	0x0800f421
 800f400:	0800f429 	.word	0x0800f429
 800f404:	0800f431 	.word	0x0800f431
 800f408:	2300      	movs	r3, #0
 800f40a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f40e:	e2ba      	b.n	800f986 <UART_SetConfig+0x7ae>
 800f410:	2304      	movs	r3, #4
 800f412:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f416:	e2b6      	b.n	800f986 <UART_SetConfig+0x7ae>
 800f418:	2308      	movs	r3, #8
 800f41a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f41e:	e2b2      	b.n	800f986 <UART_SetConfig+0x7ae>
 800f420:	2310      	movs	r3, #16
 800f422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f426:	e2ae      	b.n	800f986 <UART_SetConfig+0x7ae>
 800f428:	2320      	movs	r3, #32
 800f42a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f42e:	e2aa      	b.n	800f986 <UART_SetConfig+0x7ae>
 800f430:	2340      	movs	r3, #64	; 0x40
 800f432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f436:	e2a6      	b.n	800f986 <UART_SetConfig+0x7ae>
 800f438:	2380      	movs	r3, #128	; 0x80
 800f43a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f43e:	e2a2      	b.n	800f986 <UART_SetConfig+0x7ae>
 800f440:	697b      	ldr	r3, [r7, #20]
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	4a35      	ldr	r2, [pc, #212]	; (800f51c <UART_SetConfig+0x344>)
 800f446:	4293      	cmp	r3, r2
 800f448:	d130      	bne.n	800f4ac <UART_SetConfig+0x2d4>
 800f44a:	4b31      	ldr	r3, [pc, #196]	; (800f510 <UART_SetConfig+0x338>)
 800f44c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f44e:	f003 0307 	and.w	r3, r3, #7
 800f452:	2b05      	cmp	r3, #5
 800f454:	d826      	bhi.n	800f4a4 <UART_SetConfig+0x2cc>
 800f456:	a201      	add	r2, pc, #4	; (adr r2, 800f45c <UART_SetConfig+0x284>)
 800f458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f45c:	0800f475 	.word	0x0800f475
 800f460:	0800f47d 	.word	0x0800f47d
 800f464:	0800f485 	.word	0x0800f485
 800f468:	0800f48d 	.word	0x0800f48d
 800f46c:	0800f495 	.word	0x0800f495
 800f470:	0800f49d 	.word	0x0800f49d
 800f474:	2300      	movs	r3, #0
 800f476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f47a:	e284      	b.n	800f986 <UART_SetConfig+0x7ae>
 800f47c:	2304      	movs	r3, #4
 800f47e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f482:	e280      	b.n	800f986 <UART_SetConfig+0x7ae>
 800f484:	2308      	movs	r3, #8
 800f486:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f48a:	e27c      	b.n	800f986 <UART_SetConfig+0x7ae>
 800f48c:	2310      	movs	r3, #16
 800f48e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f492:	e278      	b.n	800f986 <UART_SetConfig+0x7ae>
 800f494:	2320      	movs	r3, #32
 800f496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f49a:	e274      	b.n	800f986 <UART_SetConfig+0x7ae>
 800f49c:	2340      	movs	r3, #64	; 0x40
 800f49e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f4a2:	e270      	b.n	800f986 <UART_SetConfig+0x7ae>
 800f4a4:	2380      	movs	r3, #128	; 0x80
 800f4a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f4aa:	e26c      	b.n	800f986 <UART_SetConfig+0x7ae>
 800f4ac:	697b      	ldr	r3, [r7, #20]
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	4a1b      	ldr	r2, [pc, #108]	; (800f520 <UART_SetConfig+0x348>)
 800f4b2:	4293      	cmp	r3, r2
 800f4b4:	d142      	bne.n	800f53c <UART_SetConfig+0x364>
 800f4b6:	4b16      	ldr	r3, [pc, #88]	; (800f510 <UART_SetConfig+0x338>)
 800f4b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f4ba:	f003 0307 	and.w	r3, r3, #7
 800f4be:	2b05      	cmp	r3, #5
 800f4c0:	d838      	bhi.n	800f534 <UART_SetConfig+0x35c>
 800f4c2:	a201      	add	r2, pc, #4	; (adr r2, 800f4c8 <UART_SetConfig+0x2f0>)
 800f4c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4c8:	0800f4e1 	.word	0x0800f4e1
 800f4cc:	0800f4e9 	.word	0x0800f4e9
 800f4d0:	0800f4f1 	.word	0x0800f4f1
 800f4d4:	0800f4f9 	.word	0x0800f4f9
 800f4d8:	0800f525 	.word	0x0800f525
 800f4dc:	0800f52d 	.word	0x0800f52d
 800f4e0:	2300      	movs	r3, #0
 800f4e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f4e6:	e24e      	b.n	800f986 <UART_SetConfig+0x7ae>
 800f4e8:	2304      	movs	r3, #4
 800f4ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f4ee:	e24a      	b.n	800f986 <UART_SetConfig+0x7ae>
 800f4f0:	2308      	movs	r3, #8
 800f4f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f4f6:	e246      	b.n	800f986 <UART_SetConfig+0x7ae>
 800f4f8:	2310      	movs	r3, #16
 800f4fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f4fe:	e242      	b.n	800f986 <UART_SetConfig+0x7ae>
 800f500:	cfff69f3 	.word	0xcfff69f3
 800f504:	58000c00 	.word	0x58000c00
 800f508:	11fff4ff 	.word	0x11fff4ff
 800f50c:	40011000 	.word	0x40011000
 800f510:	58024400 	.word	0x58024400
 800f514:	40004400 	.word	0x40004400
 800f518:	40004800 	.word	0x40004800
 800f51c:	40004c00 	.word	0x40004c00
 800f520:	40005000 	.word	0x40005000
 800f524:	2320      	movs	r3, #32
 800f526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f52a:	e22c      	b.n	800f986 <UART_SetConfig+0x7ae>
 800f52c:	2340      	movs	r3, #64	; 0x40
 800f52e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f532:	e228      	b.n	800f986 <UART_SetConfig+0x7ae>
 800f534:	2380      	movs	r3, #128	; 0x80
 800f536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f53a:	e224      	b.n	800f986 <UART_SetConfig+0x7ae>
 800f53c:	697b      	ldr	r3, [r7, #20]
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	4ab1      	ldr	r2, [pc, #708]	; (800f808 <UART_SetConfig+0x630>)
 800f542:	4293      	cmp	r3, r2
 800f544:	d176      	bne.n	800f634 <UART_SetConfig+0x45c>
 800f546:	4bb1      	ldr	r3, [pc, #708]	; (800f80c <UART_SetConfig+0x634>)
 800f548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f54a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f54e:	2b28      	cmp	r3, #40	; 0x28
 800f550:	d86c      	bhi.n	800f62c <UART_SetConfig+0x454>
 800f552:	a201      	add	r2, pc, #4	; (adr r2, 800f558 <UART_SetConfig+0x380>)
 800f554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f558:	0800f5fd 	.word	0x0800f5fd
 800f55c:	0800f62d 	.word	0x0800f62d
 800f560:	0800f62d 	.word	0x0800f62d
 800f564:	0800f62d 	.word	0x0800f62d
 800f568:	0800f62d 	.word	0x0800f62d
 800f56c:	0800f62d 	.word	0x0800f62d
 800f570:	0800f62d 	.word	0x0800f62d
 800f574:	0800f62d 	.word	0x0800f62d
 800f578:	0800f605 	.word	0x0800f605
 800f57c:	0800f62d 	.word	0x0800f62d
 800f580:	0800f62d 	.word	0x0800f62d
 800f584:	0800f62d 	.word	0x0800f62d
 800f588:	0800f62d 	.word	0x0800f62d
 800f58c:	0800f62d 	.word	0x0800f62d
 800f590:	0800f62d 	.word	0x0800f62d
 800f594:	0800f62d 	.word	0x0800f62d
 800f598:	0800f60d 	.word	0x0800f60d
 800f59c:	0800f62d 	.word	0x0800f62d
 800f5a0:	0800f62d 	.word	0x0800f62d
 800f5a4:	0800f62d 	.word	0x0800f62d
 800f5a8:	0800f62d 	.word	0x0800f62d
 800f5ac:	0800f62d 	.word	0x0800f62d
 800f5b0:	0800f62d 	.word	0x0800f62d
 800f5b4:	0800f62d 	.word	0x0800f62d
 800f5b8:	0800f615 	.word	0x0800f615
 800f5bc:	0800f62d 	.word	0x0800f62d
 800f5c0:	0800f62d 	.word	0x0800f62d
 800f5c4:	0800f62d 	.word	0x0800f62d
 800f5c8:	0800f62d 	.word	0x0800f62d
 800f5cc:	0800f62d 	.word	0x0800f62d
 800f5d0:	0800f62d 	.word	0x0800f62d
 800f5d4:	0800f62d 	.word	0x0800f62d
 800f5d8:	0800f61d 	.word	0x0800f61d
 800f5dc:	0800f62d 	.word	0x0800f62d
 800f5e0:	0800f62d 	.word	0x0800f62d
 800f5e4:	0800f62d 	.word	0x0800f62d
 800f5e8:	0800f62d 	.word	0x0800f62d
 800f5ec:	0800f62d 	.word	0x0800f62d
 800f5f0:	0800f62d 	.word	0x0800f62d
 800f5f4:	0800f62d 	.word	0x0800f62d
 800f5f8:	0800f625 	.word	0x0800f625
 800f5fc:	2301      	movs	r3, #1
 800f5fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f602:	e1c0      	b.n	800f986 <UART_SetConfig+0x7ae>
 800f604:	2304      	movs	r3, #4
 800f606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f60a:	e1bc      	b.n	800f986 <UART_SetConfig+0x7ae>
 800f60c:	2308      	movs	r3, #8
 800f60e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f612:	e1b8      	b.n	800f986 <UART_SetConfig+0x7ae>
 800f614:	2310      	movs	r3, #16
 800f616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f61a:	e1b4      	b.n	800f986 <UART_SetConfig+0x7ae>
 800f61c:	2320      	movs	r3, #32
 800f61e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f622:	e1b0      	b.n	800f986 <UART_SetConfig+0x7ae>
 800f624:	2340      	movs	r3, #64	; 0x40
 800f626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f62a:	e1ac      	b.n	800f986 <UART_SetConfig+0x7ae>
 800f62c:	2380      	movs	r3, #128	; 0x80
 800f62e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f632:	e1a8      	b.n	800f986 <UART_SetConfig+0x7ae>
 800f634:	697b      	ldr	r3, [r7, #20]
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	4a75      	ldr	r2, [pc, #468]	; (800f810 <UART_SetConfig+0x638>)
 800f63a:	4293      	cmp	r3, r2
 800f63c:	d130      	bne.n	800f6a0 <UART_SetConfig+0x4c8>
 800f63e:	4b73      	ldr	r3, [pc, #460]	; (800f80c <UART_SetConfig+0x634>)
 800f640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f642:	f003 0307 	and.w	r3, r3, #7
 800f646:	2b05      	cmp	r3, #5
 800f648:	d826      	bhi.n	800f698 <UART_SetConfig+0x4c0>
 800f64a:	a201      	add	r2, pc, #4	; (adr r2, 800f650 <UART_SetConfig+0x478>)
 800f64c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f650:	0800f669 	.word	0x0800f669
 800f654:	0800f671 	.word	0x0800f671
 800f658:	0800f679 	.word	0x0800f679
 800f65c:	0800f681 	.word	0x0800f681
 800f660:	0800f689 	.word	0x0800f689
 800f664:	0800f691 	.word	0x0800f691
 800f668:	2300      	movs	r3, #0
 800f66a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f66e:	e18a      	b.n	800f986 <UART_SetConfig+0x7ae>
 800f670:	2304      	movs	r3, #4
 800f672:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f676:	e186      	b.n	800f986 <UART_SetConfig+0x7ae>
 800f678:	2308      	movs	r3, #8
 800f67a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f67e:	e182      	b.n	800f986 <UART_SetConfig+0x7ae>
 800f680:	2310      	movs	r3, #16
 800f682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f686:	e17e      	b.n	800f986 <UART_SetConfig+0x7ae>
 800f688:	2320      	movs	r3, #32
 800f68a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f68e:	e17a      	b.n	800f986 <UART_SetConfig+0x7ae>
 800f690:	2340      	movs	r3, #64	; 0x40
 800f692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f696:	e176      	b.n	800f986 <UART_SetConfig+0x7ae>
 800f698:	2380      	movs	r3, #128	; 0x80
 800f69a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f69e:	e172      	b.n	800f986 <UART_SetConfig+0x7ae>
 800f6a0:	697b      	ldr	r3, [r7, #20]
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	4a5b      	ldr	r2, [pc, #364]	; (800f814 <UART_SetConfig+0x63c>)
 800f6a6:	4293      	cmp	r3, r2
 800f6a8:	d130      	bne.n	800f70c <UART_SetConfig+0x534>
 800f6aa:	4b58      	ldr	r3, [pc, #352]	; (800f80c <UART_SetConfig+0x634>)
 800f6ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f6ae:	f003 0307 	and.w	r3, r3, #7
 800f6b2:	2b05      	cmp	r3, #5
 800f6b4:	d826      	bhi.n	800f704 <UART_SetConfig+0x52c>
 800f6b6:	a201      	add	r2, pc, #4	; (adr r2, 800f6bc <UART_SetConfig+0x4e4>)
 800f6b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6bc:	0800f6d5 	.word	0x0800f6d5
 800f6c0:	0800f6dd 	.word	0x0800f6dd
 800f6c4:	0800f6e5 	.word	0x0800f6e5
 800f6c8:	0800f6ed 	.word	0x0800f6ed
 800f6cc:	0800f6f5 	.word	0x0800f6f5
 800f6d0:	0800f6fd 	.word	0x0800f6fd
 800f6d4:	2300      	movs	r3, #0
 800f6d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f6da:	e154      	b.n	800f986 <UART_SetConfig+0x7ae>
 800f6dc:	2304      	movs	r3, #4
 800f6de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f6e2:	e150      	b.n	800f986 <UART_SetConfig+0x7ae>
 800f6e4:	2308      	movs	r3, #8
 800f6e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f6ea:	e14c      	b.n	800f986 <UART_SetConfig+0x7ae>
 800f6ec:	2310      	movs	r3, #16
 800f6ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f6f2:	e148      	b.n	800f986 <UART_SetConfig+0x7ae>
 800f6f4:	2320      	movs	r3, #32
 800f6f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f6fa:	e144      	b.n	800f986 <UART_SetConfig+0x7ae>
 800f6fc:	2340      	movs	r3, #64	; 0x40
 800f6fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f702:	e140      	b.n	800f986 <UART_SetConfig+0x7ae>
 800f704:	2380      	movs	r3, #128	; 0x80
 800f706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f70a:	e13c      	b.n	800f986 <UART_SetConfig+0x7ae>
 800f70c:	697b      	ldr	r3, [r7, #20]
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	4a41      	ldr	r2, [pc, #260]	; (800f818 <UART_SetConfig+0x640>)
 800f712:	4293      	cmp	r3, r2
 800f714:	f040 8082 	bne.w	800f81c <UART_SetConfig+0x644>
 800f718:	4b3c      	ldr	r3, [pc, #240]	; (800f80c <UART_SetConfig+0x634>)
 800f71a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f71c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f720:	2b28      	cmp	r3, #40	; 0x28
 800f722:	d86d      	bhi.n	800f800 <UART_SetConfig+0x628>
 800f724:	a201      	add	r2, pc, #4	; (adr r2, 800f72c <UART_SetConfig+0x554>)
 800f726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f72a:	bf00      	nop
 800f72c:	0800f7d1 	.word	0x0800f7d1
 800f730:	0800f801 	.word	0x0800f801
 800f734:	0800f801 	.word	0x0800f801
 800f738:	0800f801 	.word	0x0800f801
 800f73c:	0800f801 	.word	0x0800f801
 800f740:	0800f801 	.word	0x0800f801
 800f744:	0800f801 	.word	0x0800f801
 800f748:	0800f801 	.word	0x0800f801
 800f74c:	0800f7d9 	.word	0x0800f7d9
 800f750:	0800f801 	.word	0x0800f801
 800f754:	0800f801 	.word	0x0800f801
 800f758:	0800f801 	.word	0x0800f801
 800f75c:	0800f801 	.word	0x0800f801
 800f760:	0800f801 	.word	0x0800f801
 800f764:	0800f801 	.word	0x0800f801
 800f768:	0800f801 	.word	0x0800f801
 800f76c:	0800f7e1 	.word	0x0800f7e1
 800f770:	0800f801 	.word	0x0800f801
 800f774:	0800f801 	.word	0x0800f801
 800f778:	0800f801 	.word	0x0800f801
 800f77c:	0800f801 	.word	0x0800f801
 800f780:	0800f801 	.word	0x0800f801
 800f784:	0800f801 	.word	0x0800f801
 800f788:	0800f801 	.word	0x0800f801
 800f78c:	0800f7e9 	.word	0x0800f7e9
 800f790:	0800f801 	.word	0x0800f801
 800f794:	0800f801 	.word	0x0800f801
 800f798:	0800f801 	.word	0x0800f801
 800f79c:	0800f801 	.word	0x0800f801
 800f7a0:	0800f801 	.word	0x0800f801
 800f7a4:	0800f801 	.word	0x0800f801
 800f7a8:	0800f801 	.word	0x0800f801
 800f7ac:	0800f7f1 	.word	0x0800f7f1
 800f7b0:	0800f801 	.word	0x0800f801
 800f7b4:	0800f801 	.word	0x0800f801
 800f7b8:	0800f801 	.word	0x0800f801
 800f7bc:	0800f801 	.word	0x0800f801
 800f7c0:	0800f801 	.word	0x0800f801
 800f7c4:	0800f801 	.word	0x0800f801
 800f7c8:	0800f801 	.word	0x0800f801
 800f7cc:	0800f7f9 	.word	0x0800f7f9
 800f7d0:	2301      	movs	r3, #1
 800f7d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7d6:	e0d6      	b.n	800f986 <UART_SetConfig+0x7ae>
 800f7d8:	2304      	movs	r3, #4
 800f7da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7de:	e0d2      	b.n	800f986 <UART_SetConfig+0x7ae>
 800f7e0:	2308      	movs	r3, #8
 800f7e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7e6:	e0ce      	b.n	800f986 <UART_SetConfig+0x7ae>
 800f7e8:	2310      	movs	r3, #16
 800f7ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7ee:	e0ca      	b.n	800f986 <UART_SetConfig+0x7ae>
 800f7f0:	2320      	movs	r3, #32
 800f7f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7f6:	e0c6      	b.n	800f986 <UART_SetConfig+0x7ae>
 800f7f8:	2340      	movs	r3, #64	; 0x40
 800f7fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7fe:	e0c2      	b.n	800f986 <UART_SetConfig+0x7ae>
 800f800:	2380      	movs	r3, #128	; 0x80
 800f802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f806:	e0be      	b.n	800f986 <UART_SetConfig+0x7ae>
 800f808:	40011400 	.word	0x40011400
 800f80c:	58024400 	.word	0x58024400
 800f810:	40007800 	.word	0x40007800
 800f814:	40007c00 	.word	0x40007c00
 800f818:	40011800 	.word	0x40011800
 800f81c:	697b      	ldr	r3, [r7, #20]
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	4aad      	ldr	r2, [pc, #692]	; (800fad8 <UART_SetConfig+0x900>)
 800f822:	4293      	cmp	r3, r2
 800f824:	d176      	bne.n	800f914 <UART_SetConfig+0x73c>
 800f826:	4bad      	ldr	r3, [pc, #692]	; (800fadc <UART_SetConfig+0x904>)
 800f828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f82a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f82e:	2b28      	cmp	r3, #40	; 0x28
 800f830:	d86c      	bhi.n	800f90c <UART_SetConfig+0x734>
 800f832:	a201      	add	r2, pc, #4	; (adr r2, 800f838 <UART_SetConfig+0x660>)
 800f834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f838:	0800f8dd 	.word	0x0800f8dd
 800f83c:	0800f90d 	.word	0x0800f90d
 800f840:	0800f90d 	.word	0x0800f90d
 800f844:	0800f90d 	.word	0x0800f90d
 800f848:	0800f90d 	.word	0x0800f90d
 800f84c:	0800f90d 	.word	0x0800f90d
 800f850:	0800f90d 	.word	0x0800f90d
 800f854:	0800f90d 	.word	0x0800f90d
 800f858:	0800f8e5 	.word	0x0800f8e5
 800f85c:	0800f90d 	.word	0x0800f90d
 800f860:	0800f90d 	.word	0x0800f90d
 800f864:	0800f90d 	.word	0x0800f90d
 800f868:	0800f90d 	.word	0x0800f90d
 800f86c:	0800f90d 	.word	0x0800f90d
 800f870:	0800f90d 	.word	0x0800f90d
 800f874:	0800f90d 	.word	0x0800f90d
 800f878:	0800f8ed 	.word	0x0800f8ed
 800f87c:	0800f90d 	.word	0x0800f90d
 800f880:	0800f90d 	.word	0x0800f90d
 800f884:	0800f90d 	.word	0x0800f90d
 800f888:	0800f90d 	.word	0x0800f90d
 800f88c:	0800f90d 	.word	0x0800f90d
 800f890:	0800f90d 	.word	0x0800f90d
 800f894:	0800f90d 	.word	0x0800f90d
 800f898:	0800f8f5 	.word	0x0800f8f5
 800f89c:	0800f90d 	.word	0x0800f90d
 800f8a0:	0800f90d 	.word	0x0800f90d
 800f8a4:	0800f90d 	.word	0x0800f90d
 800f8a8:	0800f90d 	.word	0x0800f90d
 800f8ac:	0800f90d 	.word	0x0800f90d
 800f8b0:	0800f90d 	.word	0x0800f90d
 800f8b4:	0800f90d 	.word	0x0800f90d
 800f8b8:	0800f8fd 	.word	0x0800f8fd
 800f8bc:	0800f90d 	.word	0x0800f90d
 800f8c0:	0800f90d 	.word	0x0800f90d
 800f8c4:	0800f90d 	.word	0x0800f90d
 800f8c8:	0800f90d 	.word	0x0800f90d
 800f8cc:	0800f90d 	.word	0x0800f90d
 800f8d0:	0800f90d 	.word	0x0800f90d
 800f8d4:	0800f90d 	.word	0x0800f90d
 800f8d8:	0800f905 	.word	0x0800f905
 800f8dc:	2301      	movs	r3, #1
 800f8de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8e2:	e050      	b.n	800f986 <UART_SetConfig+0x7ae>
 800f8e4:	2304      	movs	r3, #4
 800f8e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8ea:	e04c      	b.n	800f986 <UART_SetConfig+0x7ae>
 800f8ec:	2308      	movs	r3, #8
 800f8ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8f2:	e048      	b.n	800f986 <UART_SetConfig+0x7ae>
 800f8f4:	2310      	movs	r3, #16
 800f8f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8fa:	e044      	b.n	800f986 <UART_SetConfig+0x7ae>
 800f8fc:	2320      	movs	r3, #32
 800f8fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f902:	e040      	b.n	800f986 <UART_SetConfig+0x7ae>
 800f904:	2340      	movs	r3, #64	; 0x40
 800f906:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f90a:	e03c      	b.n	800f986 <UART_SetConfig+0x7ae>
 800f90c:	2380      	movs	r3, #128	; 0x80
 800f90e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f912:	e038      	b.n	800f986 <UART_SetConfig+0x7ae>
 800f914:	697b      	ldr	r3, [r7, #20]
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	4a71      	ldr	r2, [pc, #452]	; (800fae0 <UART_SetConfig+0x908>)
 800f91a:	4293      	cmp	r3, r2
 800f91c:	d130      	bne.n	800f980 <UART_SetConfig+0x7a8>
 800f91e:	4b6f      	ldr	r3, [pc, #444]	; (800fadc <UART_SetConfig+0x904>)
 800f920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f922:	f003 0307 	and.w	r3, r3, #7
 800f926:	2b05      	cmp	r3, #5
 800f928:	d826      	bhi.n	800f978 <UART_SetConfig+0x7a0>
 800f92a:	a201      	add	r2, pc, #4	; (adr r2, 800f930 <UART_SetConfig+0x758>)
 800f92c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f930:	0800f949 	.word	0x0800f949
 800f934:	0800f951 	.word	0x0800f951
 800f938:	0800f959 	.word	0x0800f959
 800f93c:	0800f961 	.word	0x0800f961
 800f940:	0800f969 	.word	0x0800f969
 800f944:	0800f971 	.word	0x0800f971
 800f948:	2302      	movs	r3, #2
 800f94a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f94e:	e01a      	b.n	800f986 <UART_SetConfig+0x7ae>
 800f950:	2304      	movs	r3, #4
 800f952:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f956:	e016      	b.n	800f986 <UART_SetConfig+0x7ae>
 800f958:	2308      	movs	r3, #8
 800f95a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f95e:	e012      	b.n	800f986 <UART_SetConfig+0x7ae>
 800f960:	2310      	movs	r3, #16
 800f962:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f966:	e00e      	b.n	800f986 <UART_SetConfig+0x7ae>
 800f968:	2320      	movs	r3, #32
 800f96a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f96e:	e00a      	b.n	800f986 <UART_SetConfig+0x7ae>
 800f970:	2340      	movs	r3, #64	; 0x40
 800f972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f976:	e006      	b.n	800f986 <UART_SetConfig+0x7ae>
 800f978:	2380      	movs	r3, #128	; 0x80
 800f97a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f97e:	e002      	b.n	800f986 <UART_SetConfig+0x7ae>
 800f980:	2380      	movs	r3, #128	; 0x80
 800f982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f986:	697b      	ldr	r3, [r7, #20]
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	4a55      	ldr	r2, [pc, #340]	; (800fae0 <UART_SetConfig+0x908>)
 800f98c:	4293      	cmp	r3, r2
 800f98e:	f040 80f8 	bne.w	800fb82 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f992:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f996:	2b20      	cmp	r3, #32
 800f998:	dc46      	bgt.n	800fa28 <UART_SetConfig+0x850>
 800f99a:	2b02      	cmp	r3, #2
 800f99c:	db75      	blt.n	800fa8a <UART_SetConfig+0x8b2>
 800f99e:	3b02      	subs	r3, #2
 800f9a0:	2b1e      	cmp	r3, #30
 800f9a2:	d872      	bhi.n	800fa8a <UART_SetConfig+0x8b2>
 800f9a4:	a201      	add	r2, pc, #4	; (adr r2, 800f9ac <UART_SetConfig+0x7d4>)
 800f9a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9aa:	bf00      	nop
 800f9ac:	0800fa2f 	.word	0x0800fa2f
 800f9b0:	0800fa8b 	.word	0x0800fa8b
 800f9b4:	0800fa37 	.word	0x0800fa37
 800f9b8:	0800fa8b 	.word	0x0800fa8b
 800f9bc:	0800fa8b 	.word	0x0800fa8b
 800f9c0:	0800fa8b 	.word	0x0800fa8b
 800f9c4:	0800fa47 	.word	0x0800fa47
 800f9c8:	0800fa8b 	.word	0x0800fa8b
 800f9cc:	0800fa8b 	.word	0x0800fa8b
 800f9d0:	0800fa8b 	.word	0x0800fa8b
 800f9d4:	0800fa8b 	.word	0x0800fa8b
 800f9d8:	0800fa8b 	.word	0x0800fa8b
 800f9dc:	0800fa8b 	.word	0x0800fa8b
 800f9e0:	0800fa8b 	.word	0x0800fa8b
 800f9e4:	0800fa57 	.word	0x0800fa57
 800f9e8:	0800fa8b 	.word	0x0800fa8b
 800f9ec:	0800fa8b 	.word	0x0800fa8b
 800f9f0:	0800fa8b 	.word	0x0800fa8b
 800f9f4:	0800fa8b 	.word	0x0800fa8b
 800f9f8:	0800fa8b 	.word	0x0800fa8b
 800f9fc:	0800fa8b 	.word	0x0800fa8b
 800fa00:	0800fa8b 	.word	0x0800fa8b
 800fa04:	0800fa8b 	.word	0x0800fa8b
 800fa08:	0800fa8b 	.word	0x0800fa8b
 800fa0c:	0800fa8b 	.word	0x0800fa8b
 800fa10:	0800fa8b 	.word	0x0800fa8b
 800fa14:	0800fa8b 	.word	0x0800fa8b
 800fa18:	0800fa8b 	.word	0x0800fa8b
 800fa1c:	0800fa8b 	.word	0x0800fa8b
 800fa20:	0800fa8b 	.word	0x0800fa8b
 800fa24:	0800fa7d 	.word	0x0800fa7d
 800fa28:	2b40      	cmp	r3, #64	; 0x40
 800fa2a:	d02a      	beq.n	800fa82 <UART_SetConfig+0x8aa>
 800fa2c:	e02d      	b.n	800fa8a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800fa2e:	f7fc fc99 	bl	800c364 <HAL_RCCEx_GetD3PCLK1Freq>
 800fa32:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fa34:	e02f      	b.n	800fa96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fa36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fa3a:	4618      	mov	r0, r3
 800fa3c:	f7fc fca8 	bl	800c390 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fa40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fa44:	e027      	b.n	800fa96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fa46:	f107 0318 	add.w	r3, r7, #24
 800fa4a:	4618      	mov	r0, r3
 800fa4c:	f7fc fdf4 	bl	800c638 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fa50:	69fb      	ldr	r3, [r7, #28]
 800fa52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fa54:	e01f      	b.n	800fa96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fa56:	4b21      	ldr	r3, [pc, #132]	; (800fadc <UART_SetConfig+0x904>)
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	f003 0320 	and.w	r3, r3, #32
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d009      	beq.n	800fa76 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fa62:	4b1e      	ldr	r3, [pc, #120]	; (800fadc <UART_SetConfig+0x904>)
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	08db      	lsrs	r3, r3, #3
 800fa68:	f003 0303 	and.w	r3, r3, #3
 800fa6c:	4a1d      	ldr	r2, [pc, #116]	; (800fae4 <UART_SetConfig+0x90c>)
 800fa6e:	fa22 f303 	lsr.w	r3, r2, r3
 800fa72:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fa74:	e00f      	b.n	800fa96 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800fa76:	4b1b      	ldr	r3, [pc, #108]	; (800fae4 <UART_SetConfig+0x90c>)
 800fa78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fa7a:	e00c      	b.n	800fa96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fa7c:	4b1a      	ldr	r3, [pc, #104]	; (800fae8 <UART_SetConfig+0x910>)
 800fa7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fa80:	e009      	b.n	800fa96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fa82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fa86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fa88:	e005      	b.n	800fa96 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800fa8a:	2300      	movs	r3, #0
 800fa8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800fa8e:	2301      	movs	r3, #1
 800fa90:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800fa94:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800fa96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	f000 81ee 	beq.w	800fe7a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800fa9e:	697b      	ldr	r3, [r7, #20]
 800faa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800faa2:	4a12      	ldr	r2, [pc, #72]	; (800faec <UART_SetConfig+0x914>)
 800faa4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800faa8:	461a      	mov	r2, r3
 800faaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800faac:	fbb3 f3f2 	udiv	r3, r3, r2
 800fab0:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fab2:	697b      	ldr	r3, [r7, #20]
 800fab4:	685a      	ldr	r2, [r3, #4]
 800fab6:	4613      	mov	r3, r2
 800fab8:	005b      	lsls	r3, r3, #1
 800faba:	4413      	add	r3, r2
 800fabc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fabe:	429a      	cmp	r2, r3
 800fac0:	d305      	bcc.n	800face <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800fac2:	697b      	ldr	r3, [r7, #20]
 800fac4:	685b      	ldr	r3, [r3, #4]
 800fac6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fac8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800faca:	429a      	cmp	r2, r3
 800facc:	d910      	bls.n	800faf0 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800face:	2301      	movs	r3, #1
 800fad0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800fad4:	e1d1      	b.n	800fe7a <UART_SetConfig+0xca2>
 800fad6:	bf00      	nop
 800fad8:	40011c00 	.word	0x40011c00
 800fadc:	58024400 	.word	0x58024400
 800fae0:	58000c00 	.word	0x58000c00
 800fae4:	03d09000 	.word	0x03d09000
 800fae8:	003d0900 	.word	0x003d0900
 800faec:	08011c50 	.word	0x08011c50
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800faf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800faf2:	2200      	movs	r2, #0
 800faf4:	60bb      	str	r3, [r7, #8]
 800faf6:	60fa      	str	r2, [r7, #12]
 800faf8:	697b      	ldr	r3, [r7, #20]
 800fafa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fafc:	4ac0      	ldr	r2, [pc, #768]	; (800fe00 <UART_SetConfig+0xc28>)
 800fafe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fb02:	b29b      	uxth	r3, r3
 800fb04:	2200      	movs	r2, #0
 800fb06:	603b      	str	r3, [r7, #0]
 800fb08:	607a      	str	r2, [r7, #4]
 800fb0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fb0e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800fb12:	f7f0 fc05 	bl	8000320 <__aeabi_uldivmod>
 800fb16:	4602      	mov	r2, r0
 800fb18:	460b      	mov	r3, r1
 800fb1a:	4610      	mov	r0, r2
 800fb1c:	4619      	mov	r1, r3
 800fb1e:	f04f 0200 	mov.w	r2, #0
 800fb22:	f04f 0300 	mov.w	r3, #0
 800fb26:	020b      	lsls	r3, r1, #8
 800fb28:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800fb2c:	0202      	lsls	r2, r0, #8
 800fb2e:	6979      	ldr	r1, [r7, #20]
 800fb30:	6849      	ldr	r1, [r1, #4]
 800fb32:	0849      	lsrs	r1, r1, #1
 800fb34:	2000      	movs	r0, #0
 800fb36:	460c      	mov	r4, r1
 800fb38:	4605      	mov	r5, r0
 800fb3a:	eb12 0804 	adds.w	r8, r2, r4
 800fb3e:	eb43 0905 	adc.w	r9, r3, r5
 800fb42:	697b      	ldr	r3, [r7, #20]
 800fb44:	685b      	ldr	r3, [r3, #4]
 800fb46:	2200      	movs	r2, #0
 800fb48:	469a      	mov	sl, r3
 800fb4a:	4693      	mov	fp, r2
 800fb4c:	4652      	mov	r2, sl
 800fb4e:	465b      	mov	r3, fp
 800fb50:	4640      	mov	r0, r8
 800fb52:	4649      	mov	r1, r9
 800fb54:	f7f0 fbe4 	bl	8000320 <__aeabi_uldivmod>
 800fb58:	4602      	mov	r2, r0
 800fb5a:	460b      	mov	r3, r1
 800fb5c:	4613      	mov	r3, r2
 800fb5e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800fb60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fb66:	d308      	bcc.n	800fb7a <UART_SetConfig+0x9a2>
 800fb68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fb6e:	d204      	bcs.n	800fb7a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800fb70:	697b      	ldr	r3, [r7, #20]
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fb76:	60da      	str	r2, [r3, #12]
 800fb78:	e17f      	b.n	800fe7a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800fb7a:	2301      	movs	r3, #1
 800fb7c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800fb80:	e17b      	b.n	800fe7a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fb82:	697b      	ldr	r3, [r7, #20]
 800fb84:	69db      	ldr	r3, [r3, #28]
 800fb86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fb8a:	f040 80bd 	bne.w	800fd08 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800fb8e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800fb92:	2b20      	cmp	r3, #32
 800fb94:	dc48      	bgt.n	800fc28 <UART_SetConfig+0xa50>
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	db7b      	blt.n	800fc92 <UART_SetConfig+0xaba>
 800fb9a:	2b20      	cmp	r3, #32
 800fb9c:	d879      	bhi.n	800fc92 <UART_SetConfig+0xaba>
 800fb9e:	a201      	add	r2, pc, #4	; (adr r2, 800fba4 <UART_SetConfig+0x9cc>)
 800fba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fba4:	0800fc2f 	.word	0x0800fc2f
 800fba8:	0800fc37 	.word	0x0800fc37
 800fbac:	0800fc93 	.word	0x0800fc93
 800fbb0:	0800fc93 	.word	0x0800fc93
 800fbb4:	0800fc3f 	.word	0x0800fc3f
 800fbb8:	0800fc93 	.word	0x0800fc93
 800fbbc:	0800fc93 	.word	0x0800fc93
 800fbc0:	0800fc93 	.word	0x0800fc93
 800fbc4:	0800fc4f 	.word	0x0800fc4f
 800fbc8:	0800fc93 	.word	0x0800fc93
 800fbcc:	0800fc93 	.word	0x0800fc93
 800fbd0:	0800fc93 	.word	0x0800fc93
 800fbd4:	0800fc93 	.word	0x0800fc93
 800fbd8:	0800fc93 	.word	0x0800fc93
 800fbdc:	0800fc93 	.word	0x0800fc93
 800fbe0:	0800fc93 	.word	0x0800fc93
 800fbe4:	0800fc5f 	.word	0x0800fc5f
 800fbe8:	0800fc93 	.word	0x0800fc93
 800fbec:	0800fc93 	.word	0x0800fc93
 800fbf0:	0800fc93 	.word	0x0800fc93
 800fbf4:	0800fc93 	.word	0x0800fc93
 800fbf8:	0800fc93 	.word	0x0800fc93
 800fbfc:	0800fc93 	.word	0x0800fc93
 800fc00:	0800fc93 	.word	0x0800fc93
 800fc04:	0800fc93 	.word	0x0800fc93
 800fc08:	0800fc93 	.word	0x0800fc93
 800fc0c:	0800fc93 	.word	0x0800fc93
 800fc10:	0800fc93 	.word	0x0800fc93
 800fc14:	0800fc93 	.word	0x0800fc93
 800fc18:	0800fc93 	.word	0x0800fc93
 800fc1c:	0800fc93 	.word	0x0800fc93
 800fc20:	0800fc93 	.word	0x0800fc93
 800fc24:	0800fc85 	.word	0x0800fc85
 800fc28:	2b40      	cmp	r3, #64	; 0x40
 800fc2a:	d02e      	beq.n	800fc8a <UART_SetConfig+0xab2>
 800fc2c:	e031      	b.n	800fc92 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fc2e:	f7fb fc73 	bl	800b518 <HAL_RCC_GetPCLK1Freq>
 800fc32:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fc34:	e033      	b.n	800fc9e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fc36:	f7fb fc85 	bl	800b544 <HAL_RCC_GetPCLK2Freq>
 800fc3a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fc3c:	e02f      	b.n	800fc9e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fc3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fc42:	4618      	mov	r0, r3
 800fc44:	f7fc fba4 	bl	800c390 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fc48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fc4c:	e027      	b.n	800fc9e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fc4e:	f107 0318 	add.w	r3, r7, #24
 800fc52:	4618      	mov	r0, r3
 800fc54:	f7fc fcf0 	bl	800c638 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fc58:	69fb      	ldr	r3, [r7, #28]
 800fc5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fc5c:	e01f      	b.n	800fc9e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fc5e:	4b69      	ldr	r3, [pc, #420]	; (800fe04 <UART_SetConfig+0xc2c>)
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	f003 0320 	and.w	r3, r3, #32
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d009      	beq.n	800fc7e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fc6a:	4b66      	ldr	r3, [pc, #408]	; (800fe04 <UART_SetConfig+0xc2c>)
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	08db      	lsrs	r3, r3, #3
 800fc70:	f003 0303 	and.w	r3, r3, #3
 800fc74:	4a64      	ldr	r2, [pc, #400]	; (800fe08 <UART_SetConfig+0xc30>)
 800fc76:	fa22 f303 	lsr.w	r3, r2, r3
 800fc7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fc7c:	e00f      	b.n	800fc9e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800fc7e:	4b62      	ldr	r3, [pc, #392]	; (800fe08 <UART_SetConfig+0xc30>)
 800fc80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fc82:	e00c      	b.n	800fc9e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fc84:	4b61      	ldr	r3, [pc, #388]	; (800fe0c <UART_SetConfig+0xc34>)
 800fc86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fc88:	e009      	b.n	800fc9e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fc8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fc8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fc90:	e005      	b.n	800fc9e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800fc92:	2300      	movs	r3, #0
 800fc94:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800fc96:	2301      	movs	r3, #1
 800fc98:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800fc9c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800fc9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	f000 80ea 	beq.w	800fe7a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fca6:	697b      	ldr	r3, [r7, #20]
 800fca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcaa:	4a55      	ldr	r2, [pc, #340]	; (800fe00 <UART_SetConfig+0xc28>)
 800fcac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fcb0:	461a      	mov	r2, r3
 800fcb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fcb4:	fbb3 f3f2 	udiv	r3, r3, r2
 800fcb8:	005a      	lsls	r2, r3, #1
 800fcba:	697b      	ldr	r3, [r7, #20]
 800fcbc:	685b      	ldr	r3, [r3, #4]
 800fcbe:	085b      	lsrs	r3, r3, #1
 800fcc0:	441a      	add	r2, r3
 800fcc2:	697b      	ldr	r3, [r7, #20]
 800fcc4:	685b      	ldr	r3, [r3, #4]
 800fcc6:	fbb2 f3f3 	udiv	r3, r2, r3
 800fcca:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcce:	2b0f      	cmp	r3, #15
 800fcd0:	d916      	bls.n	800fd00 <UART_SetConfig+0xb28>
 800fcd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fcd8:	d212      	bcs.n	800fd00 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800fcda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcdc:	b29b      	uxth	r3, r3
 800fcde:	f023 030f 	bic.w	r3, r3, #15
 800fce2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800fce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fce6:	085b      	lsrs	r3, r3, #1
 800fce8:	b29b      	uxth	r3, r3
 800fcea:	f003 0307 	and.w	r3, r3, #7
 800fcee:	b29a      	uxth	r2, r3
 800fcf0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fcf2:	4313      	orrs	r3, r2
 800fcf4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800fcf6:	697b      	ldr	r3, [r7, #20]
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800fcfc:	60da      	str	r2, [r3, #12]
 800fcfe:	e0bc      	b.n	800fe7a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800fd00:	2301      	movs	r3, #1
 800fd02:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800fd06:	e0b8      	b.n	800fe7a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800fd08:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800fd0c:	2b20      	cmp	r3, #32
 800fd0e:	dc4b      	bgt.n	800fda8 <UART_SetConfig+0xbd0>
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	f2c0 8087 	blt.w	800fe24 <UART_SetConfig+0xc4c>
 800fd16:	2b20      	cmp	r3, #32
 800fd18:	f200 8084 	bhi.w	800fe24 <UART_SetConfig+0xc4c>
 800fd1c:	a201      	add	r2, pc, #4	; (adr r2, 800fd24 <UART_SetConfig+0xb4c>)
 800fd1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd22:	bf00      	nop
 800fd24:	0800fdaf 	.word	0x0800fdaf
 800fd28:	0800fdb7 	.word	0x0800fdb7
 800fd2c:	0800fe25 	.word	0x0800fe25
 800fd30:	0800fe25 	.word	0x0800fe25
 800fd34:	0800fdbf 	.word	0x0800fdbf
 800fd38:	0800fe25 	.word	0x0800fe25
 800fd3c:	0800fe25 	.word	0x0800fe25
 800fd40:	0800fe25 	.word	0x0800fe25
 800fd44:	0800fdcf 	.word	0x0800fdcf
 800fd48:	0800fe25 	.word	0x0800fe25
 800fd4c:	0800fe25 	.word	0x0800fe25
 800fd50:	0800fe25 	.word	0x0800fe25
 800fd54:	0800fe25 	.word	0x0800fe25
 800fd58:	0800fe25 	.word	0x0800fe25
 800fd5c:	0800fe25 	.word	0x0800fe25
 800fd60:	0800fe25 	.word	0x0800fe25
 800fd64:	0800fddf 	.word	0x0800fddf
 800fd68:	0800fe25 	.word	0x0800fe25
 800fd6c:	0800fe25 	.word	0x0800fe25
 800fd70:	0800fe25 	.word	0x0800fe25
 800fd74:	0800fe25 	.word	0x0800fe25
 800fd78:	0800fe25 	.word	0x0800fe25
 800fd7c:	0800fe25 	.word	0x0800fe25
 800fd80:	0800fe25 	.word	0x0800fe25
 800fd84:	0800fe25 	.word	0x0800fe25
 800fd88:	0800fe25 	.word	0x0800fe25
 800fd8c:	0800fe25 	.word	0x0800fe25
 800fd90:	0800fe25 	.word	0x0800fe25
 800fd94:	0800fe25 	.word	0x0800fe25
 800fd98:	0800fe25 	.word	0x0800fe25
 800fd9c:	0800fe25 	.word	0x0800fe25
 800fda0:	0800fe25 	.word	0x0800fe25
 800fda4:	0800fe17 	.word	0x0800fe17
 800fda8:	2b40      	cmp	r3, #64	; 0x40
 800fdaa:	d037      	beq.n	800fe1c <UART_SetConfig+0xc44>
 800fdac:	e03a      	b.n	800fe24 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fdae:	f7fb fbb3 	bl	800b518 <HAL_RCC_GetPCLK1Freq>
 800fdb2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fdb4:	e03c      	b.n	800fe30 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fdb6:	f7fb fbc5 	bl	800b544 <HAL_RCC_GetPCLK2Freq>
 800fdba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fdbc:	e038      	b.n	800fe30 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fdbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fdc2:	4618      	mov	r0, r3
 800fdc4:	f7fc fae4 	bl	800c390 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fdc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fdcc:	e030      	b.n	800fe30 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fdce:	f107 0318 	add.w	r3, r7, #24
 800fdd2:	4618      	mov	r0, r3
 800fdd4:	f7fc fc30 	bl	800c638 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fdd8:	69fb      	ldr	r3, [r7, #28]
 800fdda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fddc:	e028      	b.n	800fe30 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fdde:	4b09      	ldr	r3, [pc, #36]	; (800fe04 <UART_SetConfig+0xc2c>)
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	f003 0320 	and.w	r3, r3, #32
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d012      	beq.n	800fe10 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fdea:	4b06      	ldr	r3, [pc, #24]	; (800fe04 <UART_SetConfig+0xc2c>)
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	08db      	lsrs	r3, r3, #3
 800fdf0:	f003 0303 	and.w	r3, r3, #3
 800fdf4:	4a04      	ldr	r2, [pc, #16]	; (800fe08 <UART_SetConfig+0xc30>)
 800fdf6:	fa22 f303 	lsr.w	r3, r2, r3
 800fdfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fdfc:	e018      	b.n	800fe30 <UART_SetConfig+0xc58>
 800fdfe:	bf00      	nop
 800fe00:	08011c50 	.word	0x08011c50
 800fe04:	58024400 	.word	0x58024400
 800fe08:	03d09000 	.word	0x03d09000
 800fe0c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800fe10:	4b24      	ldr	r3, [pc, #144]	; (800fea4 <UART_SetConfig+0xccc>)
 800fe12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fe14:	e00c      	b.n	800fe30 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fe16:	4b24      	ldr	r3, [pc, #144]	; (800fea8 <UART_SetConfig+0xcd0>)
 800fe18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fe1a:	e009      	b.n	800fe30 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fe1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fe20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fe22:	e005      	b.n	800fe30 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800fe24:	2300      	movs	r3, #0
 800fe26:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800fe28:	2301      	movs	r3, #1
 800fe2a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800fe2e:	bf00      	nop
    }

    if (pclk != 0U)
 800fe30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d021      	beq.n	800fe7a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fe36:	697b      	ldr	r3, [r7, #20]
 800fe38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe3a:	4a1c      	ldr	r2, [pc, #112]	; (800feac <UART_SetConfig+0xcd4>)
 800fe3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fe40:	461a      	mov	r2, r3
 800fe42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe44:	fbb3 f2f2 	udiv	r2, r3, r2
 800fe48:	697b      	ldr	r3, [r7, #20]
 800fe4a:	685b      	ldr	r3, [r3, #4]
 800fe4c:	085b      	lsrs	r3, r3, #1
 800fe4e:	441a      	add	r2, r3
 800fe50:	697b      	ldr	r3, [r7, #20]
 800fe52:	685b      	ldr	r3, [r3, #4]
 800fe54:	fbb2 f3f3 	udiv	r3, r2, r3
 800fe58:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fe5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe5c:	2b0f      	cmp	r3, #15
 800fe5e:	d909      	bls.n	800fe74 <UART_SetConfig+0xc9c>
 800fe60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fe66:	d205      	bcs.n	800fe74 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800fe68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe6a:	b29a      	uxth	r2, r3
 800fe6c:	697b      	ldr	r3, [r7, #20]
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	60da      	str	r2, [r3, #12]
 800fe72:	e002      	b.n	800fe7a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800fe74:	2301      	movs	r3, #1
 800fe76:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800fe7a:	697b      	ldr	r3, [r7, #20]
 800fe7c:	2201      	movs	r2, #1
 800fe7e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800fe82:	697b      	ldr	r3, [r7, #20]
 800fe84:	2201      	movs	r2, #1
 800fe86:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800fe8a:	697b      	ldr	r3, [r7, #20]
 800fe8c:	2200      	movs	r2, #0
 800fe8e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800fe90:	697b      	ldr	r3, [r7, #20]
 800fe92:	2200      	movs	r2, #0
 800fe94:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800fe96:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800fe9a:	4618      	mov	r0, r3
 800fe9c:	3748      	adds	r7, #72	; 0x48
 800fe9e:	46bd      	mov	sp, r7
 800fea0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800fea4:	03d09000 	.word	0x03d09000
 800fea8:	003d0900 	.word	0x003d0900
 800feac:	08011c50 	.word	0x08011c50

0800feb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800feb0:	b480      	push	{r7}
 800feb2:	b083      	sub	sp, #12
 800feb4:	af00      	add	r7, sp, #0
 800feb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800febc:	f003 0301 	and.w	r3, r3, #1
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d00a      	beq.n	800feda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	685b      	ldr	r3, [r3, #4]
 800feca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	681b      	ldr	r3, [r3, #0]
 800fed6:	430a      	orrs	r2, r1
 800fed8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fede:	f003 0302 	and.w	r3, r3, #2
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d00a      	beq.n	800fefc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	681b      	ldr	r3, [r3, #0]
 800feea:	685b      	ldr	r3, [r3, #4]
 800feec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	430a      	orrs	r2, r1
 800fefa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff00:	f003 0304 	and.w	r3, r3, #4
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d00a      	beq.n	800ff1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	685b      	ldr	r3, [r3, #4]
 800ff0e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	430a      	orrs	r2, r1
 800ff1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff22:	f003 0308 	and.w	r3, r3, #8
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d00a      	beq.n	800ff40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	685b      	ldr	r3, [r3, #4]
 800ff30:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	430a      	orrs	r2, r1
 800ff3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff44:	f003 0310 	and.w	r3, r3, #16
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d00a      	beq.n	800ff62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	689b      	ldr	r3, [r3, #8]
 800ff52:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	430a      	orrs	r2, r1
 800ff60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff66:	f003 0320 	and.w	r3, r3, #32
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d00a      	beq.n	800ff84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	689b      	ldr	r3, [r3, #8]
 800ff74:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	430a      	orrs	r2, r1
 800ff82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d01a      	beq.n	800ffc6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	685b      	ldr	r3, [r3, #4]
 800ff96:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	430a      	orrs	r2, r1
 800ffa4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ffaa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ffae:	d10a      	bne.n	800ffc6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	685b      	ldr	r3, [r3, #4]
 800ffb6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	430a      	orrs	r2, r1
 800ffc4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ffca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d00a      	beq.n	800ffe8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	685b      	ldr	r3, [r3, #4]
 800ffd8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	430a      	orrs	r2, r1
 800ffe6:	605a      	str	r2, [r3, #4]
  }
}
 800ffe8:	bf00      	nop
 800ffea:	370c      	adds	r7, #12
 800ffec:	46bd      	mov	sp, r7
 800ffee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fff2:	4770      	bx	lr

0800fff4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800fff4:	b580      	push	{r7, lr}
 800fff6:	b086      	sub	sp, #24
 800fff8:	af02      	add	r7, sp, #8
 800fffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	2200      	movs	r2, #0
 8010000:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010004:	f7f6 ff26 	bl	8006e54 <HAL_GetTick>
 8010008:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	f003 0308 	and.w	r3, r3, #8
 8010014:	2b08      	cmp	r3, #8
 8010016:	d10e      	bne.n	8010036 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010018:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801001c:	9300      	str	r3, [sp, #0]
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	2200      	movs	r2, #0
 8010022:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8010026:	6878      	ldr	r0, [r7, #4]
 8010028:	f000 f82f 	bl	801008a <UART_WaitOnFlagUntilTimeout>
 801002c:	4603      	mov	r3, r0
 801002e:	2b00      	cmp	r3, #0
 8010030:	d001      	beq.n	8010036 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010032:	2303      	movs	r3, #3
 8010034:	e025      	b.n	8010082 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	f003 0304 	and.w	r3, r3, #4
 8010040:	2b04      	cmp	r3, #4
 8010042:	d10e      	bne.n	8010062 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010044:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010048:	9300      	str	r3, [sp, #0]
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	2200      	movs	r2, #0
 801004e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8010052:	6878      	ldr	r0, [r7, #4]
 8010054:	f000 f819 	bl	801008a <UART_WaitOnFlagUntilTimeout>
 8010058:	4603      	mov	r3, r0
 801005a:	2b00      	cmp	r3, #0
 801005c:	d001      	beq.n	8010062 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801005e:	2303      	movs	r3, #3
 8010060:	e00f      	b.n	8010082 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	2220      	movs	r2, #32
 8010066:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	2220      	movs	r2, #32
 801006e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	2200      	movs	r2, #0
 8010076:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	2200      	movs	r2, #0
 801007c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010080:	2300      	movs	r3, #0
}
 8010082:	4618      	mov	r0, r3
 8010084:	3710      	adds	r7, #16
 8010086:	46bd      	mov	sp, r7
 8010088:	bd80      	pop	{r7, pc}

0801008a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801008a:	b580      	push	{r7, lr}
 801008c:	b09c      	sub	sp, #112	; 0x70
 801008e:	af00      	add	r7, sp, #0
 8010090:	60f8      	str	r0, [r7, #12]
 8010092:	60b9      	str	r1, [r7, #8]
 8010094:	603b      	str	r3, [r7, #0]
 8010096:	4613      	mov	r3, r2
 8010098:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801009a:	e0a9      	b.n	80101f0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801009c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801009e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100a2:	f000 80a5 	beq.w	80101f0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80100a6:	f7f6 fed5 	bl	8006e54 <HAL_GetTick>
 80100aa:	4602      	mov	r2, r0
 80100ac:	683b      	ldr	r3, [r7, #0]
 80100ae:	1ad3      	subs	r3, r2, r3
 80100b0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80100b2:	429a      	cmp	r2, r3
 80100b4:	d302      	bcc.n	80100bc <UART_WaitOnFlagUntilTimeout+0x32>
 80100b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d140      	bne.n	801013e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80100c4:	e853 3f00 	ldrex	r3, [r3]
 80100c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80100ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80100cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80100d0:	667b      	str	r3, [r7, #100]	; 0x64
 80100d2:	68fb      	ldr	r3, [r7, #12]
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	461a      	mov	r2, r3
 80100d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80100da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80100dc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80100e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80100e2:	e841 2300 	strex	r3, r2, [r1]
 80100e6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80100e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d1e6      	bne.n	80100bc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	681b      	ldr	r3, [r3, #0]
 80100f2:	3308      	adds	r3, #8
 80100f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80100f8:	e853 3f00 	ldrex	r3, [r3]
 80100fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80100fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010100:	f023 0301 	bic.w	r3, r3, #1
 8010104:	663b      	str	r3, [r7, #96]	; 0x60
 8010106:	68fb      	ldr	r3, [r7, #12]
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	3308      	adds	r3, #8
 801010c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801010e:	64ba      	str	r2, [r7, #72]	; 0x48
 8010110:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010112:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010114:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010116:	e841 2300 	strex	r3, r2, [r1]
 801011a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801011c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801011e:	2b00      	cmp	r3, #0
 8010120:	d1e5      	bne.n	80100ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	2220      	movs	r2, #32
 8010126:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	2220      	movs	r2, #32
 801012e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	2200      	movs	r2, #0
 8010136:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 801013a:	2303      	movs	r3, #3
 801013c:	e069      	b.n	8010212 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801013e:	68fb      	ldr	r3, [r7, #12]
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	f003 0304 	and.w	r3, r3, #4
 8010148:	2b00      	cmp	r3, #0
 801014a:	d051      	beq.n	80101f0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	69db      	ldr	r3, [r3, #28]
 8010152:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010156:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801015a:	d149      	bne.n	80101f0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801015c:	68fb      	ldr	r3, [r7, #12]
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010164:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8010166:	68fb      	ldr	r3, [r7, #12]
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801016c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801016e:	e853 3f00 	ldrex	r3, [r3]
 8010172:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010176:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801017a:	66fb      	str	r3, [r7, #108]	; 0x6c
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	461a      	mov	r2, r3
 8010182:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010184:	637b      	str	r3, [r7, #52]	; 0x34
 8010186:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010188:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801018a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801018c:	e841 2300 	strex	r3, r2, [r1]
 8010190:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8010192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010194:	2b00      	cmp	r3, #0
 8010196:	d1e6      	bne.n	8010166 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	3308      	adds	r3, #8
 801019e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101a0:	697b      	ldr	r3, [r7, #20]
 80101a2:	e853 3f00 	ldrex	r3, [r3]
 80101a6:	613b      	str	r3, [r7, #16]
   return(result);
 80101a8:	693b      	ldr	r3, [r7, #16]
 80101aa:	f023 0301 	bic.w	r3, r3, #1
 80101ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	3308      	adds	r3, #8
 80101b6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80101b8:	623a      	str	r2, [r7, #32]
 80101ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101bc:	69f9      	ldr	r1, [r7, #28]
 80101be:	6a3a      	ldr	r2, [r7, #32]
 80101c0:	e841 2300 	strex	r3, r2, [r1]
 80101c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80101c6:	69bb      	ldr	r3, [r7, #24]
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	d1e5      	bne.n	8010198 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	2220      	movs	r2, #32
 80101d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	2220      	movs	r2, #32
 80101d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	2220      	movs	r2, #32
 80101e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	2200      	movs	r2, #0
 80101e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80101ec:	2303      	movs	r3, #3
 80101ee:	e010      	b.n	8010212 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80101f0:	68fb      	ldr	r3, [r7, #12]
 80101f2:	681b      	ldr	r3, [r3, #0]
 80101f4:	69da      	ldr	r2, [r3, #28]
 80101f6:	68bb      	ldr	r3, [r7, #8]
 80101f8:	4013      	ands	r3, r2
 80101fa:	68ba      	ldr	r2, [r7, #8]
 80101fc:	429a      	cmp	r2, r3
 80101fe:	bf0c      	ite	eq
 8010200:	2301      	moveq	r3, #1
 8010202:	2300      	movne	r3, #0
 8010204:	b2db      	uxtb	r3, r3
 8010206:	461a      	mov	r2, r3
 8010208:	79fb      	ldrb	r3, [r7, #7]
 801020a:	429a      	cmp	r2, r3
 801020c:	f43f af46 	beq.w	801009c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010210:	2300      	movs	r3, #0
}
 8010212:	4618      	mov	r0, r3
 8010214:	3770      	adds	r7, #112	; 0x70
 8010216:	46bd      	mov	sp, r7
 8010218:	bd80      	pop	{r7, pc}
	...

0801021c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801021c:	b580      	push	{r7, lr}
 801021e:	b096      	sub	sp, #88	; 0x58
 8010220:	af00      	add	r7, sp, #0
 8010222:	60f8      	str	r0, [r7, #12]
 8010224:	60b9      	str	r1, [r7, #8]
 8010226:	4613      	mov	r3, r2
 8010228:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	68ba      	ldr	r2, [r7, #8]
 801022e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8010230:	68fb      	ldr	r3, [r7, #12]
 8010232:	88fa      	ldrh	r2, [r7, #6]
 8010234:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	2200      	movs	r2, #0
 801023c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010240:	68fb      	ldr	r3, [r7, #12]
 8010242:	2222      	movs	r2, #34	; 0x22
 8010244:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 8010248:	68fb      	ldr	r3, [r7, #12]
 801024a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801024c:	2b00      	cmp	r3, #0
 801024e:	d02c      	beq.n	80102aa <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8010250:	68fb      	ldr	r3, [r7, #12]
 8010252:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010254:	4a42      	ldr	r2, [pc, #264]	; (8010360 <UART_Start_Receive_DMA+0x144>)
 8010256:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801025c:	4a41      	ldr	r2, [pc, #260]	; (8010364 <UART_Start_Receive_DMA+0x148>)
 801025e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8010260:	68fb      	ldr	r3, [r7, #12]
 8010262:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010264:	4a40      	ldr	r2, [pc, #256]	; (8010368 <UART_Start_Receive_DMA+0x14c>)
 8010266:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8010268:	68fb      	ldr	r3, [r7, #12]
 801026a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801026c:	2200      	movs	r2, #0
 801026e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	3324      	adds	r3, #36	; 0x24
 801027a:	4619      	mov	r1, r3
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010280:	461a      	mov	r2, r3
 8010282:	88fb      	ldrh	r3, [r7, #6]
 8010284:	f7f7 fc44 	bl	8007b10 <HAL_DMA_Start_IT>
 8010288:	4603      	mov	r3, r0
 801028a:	2b00      	cmp	r3, #0
 801028c:	d00d      	beq.n	80102aa <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 801028e:	68fb      	ldr	r3, [r7, #12]
 8010290:	2210      	movs	r2, #16
 8010292:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	2200      	movs	r2, #0
 801029a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	2220      	movs	r2, #32
 80102a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 80102a6:	2301      	movs	r3, #1
 80102a8:	e055      	b.n	8010356 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 80102aa:	68fb      	ldr	r3, [r7, #12]
 80102ac:	2200      	movs	r2, #0
 80102ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80102b2:	68fb      	ldr	r3, [r7, #12]
 80102b4:	691b      	ldr	r3, [r3, #16]
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d018      	beq.n	80102ec <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80102ba:	68fb      	ldr	r3, [r7, #12]
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80102c2:	e853 3f00 	ldrex	r3, [r3]
 80102c6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80102c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80102ce:	657b      	str	r3, [r7, #84]	; 0x54
 80102d0:	68fb      	ldr	r3, [r7, #12]
 80102d2:	681b      	ldr	r3, [r3, #0]
 80102d4:	461a      	mov	r2, r3
 80102d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80102d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80102da:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102dc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80102de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80102e0:	e841 2300 	strex	r3, r2, [r1]
 80102e4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80102e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d1e6      	bne.n	80102ba <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	3308      	adds	r3, #8
 80102f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102f6:	e853 3f00 	ldrex	r3, [r3]
 80102fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80102fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102fe:	f043 0301 	orr.w	r3, r3, #1
 8010302:	653b      	str	r3, [r7, #80]	; 0x50
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	681b      	ldr	r3, [r3, #0]
 8010308:	3308      	adds	r3, #8
 801030a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801030c:	637a      	str	r2, [r7, #52]	; 0x34
 801030e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010310:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010312:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010314:	e841 2300 	strex	r3, r2, [r1]
 8010318:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801031a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801031c:	2b00      	cmp	r3, #0
 801031e:	d1e5      	bne.n	80102ec <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	3308      	adds	r3, #8
 8010326:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010328:	697b      	ldr	r3, [r7, #20]
 801032a:	e853 3f00 	ldrex	r3, [r3]
 801032e:	613b      	str	r3, [r7, #16]
   return(result);
 8010330:	693b      	ldr	r3, [r7, #16]
 8010332:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010336:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	3308      	adds	r3, #8
 801033e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010340:	623a      	str	r2, [r7, #32]
 8010342:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010344:	69f9      	ldr	r1, [r7, #28]
 8010346:	6a3a      	ldr	r2, [r7, #32]
 8010348:	e841 2300 	strex	r3, r2, [r1]
 801034c:	61bb      	str	r3, [r7, #24]
   return(result);
 801034e:	69bb      	ldr	r3, [r7, #24]
 8010350:	2b00      	cmp	r3, #0
 8010352:	d1e5      	bne.n	8010320 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 8010354:	2300      	movs	r3, #0
}
 8010356:	4618      	mov	r0, r3
 8010358:	3758      	adds	r7, #88	; 0x58
 801035a:	46bd      	mov	sp, r7
 801035c:	bd80      	pop	{r7, pc}
 801035e:	bf00      	nop
 8010360:	0801056f 	.word	0x0801056f
 8010364:	08010691 	.word	0x08010691
 8010368:	080106c9 	.word	0x080106c9

0801036c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801036c:	b480      	push	{r7}
 801036e:	b08f      	sub	sp, #60	; 0x3c
 8010370:	af00      	add	r7, sp, #0
 8010372:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	681b      	ldr	r3, [r3, #0]
 8010378:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801037a:	6a3b      	ldr	r3, [r7, #32]
 801037c:	e853 3f00 	ldrex	r3, [r3]
 8010380:	61fb      	str	r3, [r7, #28]
   return(result);
 8010382:	69fb      	ldr	r3, [r7, #28]
 8010384:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8010388:	637b      	str	r3, [r7, #52]	; 0x34
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	461a      	mov	r2, r3
 8010390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010392:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010394:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010396:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010398:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801039a:	e841 2300 	strex	r3, r2, [r1]
 801039e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80103a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d1e6      	bne.n	8010374 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	3308      	adds	r3, #8
 80103ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	e853 3f00 	ldrex	r3, [r3]
 80103b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80103b6:	68bb      	ldr	r3, [r7, #8]
 80103b8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80103bc:	633b      	str	r3, [r7, #48]	; 0x30
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	681b      	ldr	r3, [r3, #0]
 80103c2:	3308      	adds	r3, #8
 80103c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80103c6:	61ba      	str	r2, [r7, #24]
 80103c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103ca:	6979      	ldr	r1, [r7, #20]
 80103cc:	69ba      	ldr	r2, [r7, #24]
 80103ce:	e841 2300 	strex	r3, r2, [r1]
 80103d2:	613b      	str	r3, [r7, #16]
   return(result);
 80103d4:	693b      	ldr	r3, [r7, #16]
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d1e5      	bne.n	80103a6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	2220      	movs	r2, #32
 80103de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 80103e2:	bf00      	nop
 80103e4:	373c      	adds	r7, #60	; 0x3c
 80103e6:	46bd      	mov	sp, r7
 80103e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ec:	4770      	bx	lr
	...

080103f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80103f0:	b480      	push	{r7}
 80103f2:	b095      	sub	sp, #84	; 0x54
 80103f4:	af00      	add	r7, sp, #0
 80103f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	681b      	ldr	r3, [r3, #0]
 80103fc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010400:	e853 3f00 	ldrex	r3, [r3]
 8010404:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010408:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801040c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	461a      	mov	r2, r3
 8010414:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010416:	643b      	str	r3, [r7, #64]	; 0x40
 8010418:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801041a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801041c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801041e:	e841 2300 	strex	r3, r2, [r1]
 8010422:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010426:	2b00      	cmp	r3, #0
 8010428:	d1e6      	bne.n	80103f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	3308      	adds	r3, #8
 8010430:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010432:	6a3b      	ldr	r3, [r7, #32]
 8010434:	e853 3f00 	ldrex	r3, [r3]
 8010438:	61fb      	str	r3, [r7, #28]
   return(result);
 801043a:	69fa      	ldr	r2, [r7, #28]
 801043c:	4b1e      	ldr	r3, [pc, #120]	; (80104b8 <UART_EndRxTransfer+0xc8>)
 801043e:	4013      	ands	r3, r2
 8010440:	64bb      	str	r3, [r7, #72]	; 0x48
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	681b      	ldr	r3, [r3, #0]
 8010446:	3308      	adds	r3, #8
 8010448:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801044a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801044c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801044e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010450:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010452:	e841 2300 	strex	r3, r2, [r1]
 8010456:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801045a:	2b00      	cmp	r3, #0
 801045c:	d1e5      	bne.n	801042a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010462:	2b01      	cmp	r3, #1
 8010464:	d118      	bne.n	8010498 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801046c:	68fb      	ldr	r3, [r7, #12]
 801046e:	e853 3f00 	ldrex	r3, [r3]
 8010472:	60bb      	str	r3, [r7, #8]
   return(result);
 8010474:	68bb      	ldr	r3, [r7, #8]
 8010476:	f023 0310 	bic.w	r3, r3, #16
 801047a:	647b      	str	r3, [r7, #68]	; 0x44
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	461a      	mov	r2, r3
 8010482:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010484:	61bb      	str	r3, [r7, #24]
 8010486:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010488:	6979      	ldr	r1, [r7, #20]
 801048a:	69ba      	ldr	r2, [r7, #24]
 801048c:	e841 2300 	strex	r3, r2, [r1]
 8010490:	613b      	str	r3, [r7, #16]
   return(result);
 8010492:	693b      	ldr	r3, [r7, #16]
 8010494:	2b00      	cmp	r3, #0
 8010496:	d1e6      	bne.n	8010466 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	2220      	movs	r2, #32
 801049c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	2200      	movs	r2, #0
 80104a4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	2200      	movs	r2, #0
 80104aa:	671a      	str	r2, [r3, #112]	; 0x70
}
 80104ac:	bf00      	nop
 80104ae:	3754      	adds	r7, #84	; 0x54
 80104b0:	46bd      	mov	sp, r7
 80104b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104b6:	4770      	bx	lr
 80104b8:	effffffe 	.word	0xeffffffe

080104bc <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80104bc:	b580      	push	{r7, lr}
 80104be:	b090      	sub	sp, #64	; 0x40
 80104c0:	af00      	add	r7, sp, #0
 80104c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80104c8:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	69db      	ldr	r3, [r3, #28]
 80104ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80104d2:	d037      	beq.n	8010544 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 80104d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80104d6:	2200      	movs	r2, #0
 80104d8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80104dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	3308      	adds	r3, #8
 80104e2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104e6:	e853 3f00 	ldrex	r3, [r3]
 80104ea:	623b      	str	r3, [r7, #32]
   return(result);
 80104ec:	6a3b      	ldr	r3, [r7, #32]
 80104ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80104f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80104f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80104f6:	681b      	ldr	r3, [r3, #0]
 80104f8:	3308      	adds	r3, #8
 80104fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80104fc:	633a      	str	r2, [r7, #48]	; 0x30
 80104fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010500:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010502:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010504:	e841 2300 	strex	r3, r2, [r1]
 8010508:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801050a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801050c:	2b00      	cmp	r3, #0
 801050e:	d1e5      	bne.n	80104dc <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010510:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010512:	681b      	ldr	r3, [r3, #0]
 8010514:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010516:	693b      	ldr	r3, [r7, #16]
 8010518:	e853 3f00 	ldrex	r3, [r3]
 801051c:	60fb      	str	r3, [r7, #12]
   return(result);
 801051e:	68fb      	ldr	r3, [r7, #12]
 8010520:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010524:	637b      	str	r3, [r7, #52]	; 0x34
 8010526:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	461a      	mov	r2, r3
 801052c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801052e:	61fb      	str	r3, [r7, #28]
 8010530:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010532:	69b9      	ldr	r1, [r7, #24]
 8010534:	69fa      	ldr	r2, [r7, #28]
 8010536:	e841 2300 	strex	r3, r2, [r1]
 801053a:	617b      	str	r3, [r7, #20]
   return(result);
 801053c:	697b      	ldr	r3, [r7, #20]
 801053e:	2b00      	cmp	r3, #0
 8010540:	d1e6      	bne.n	8010510 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010542:	e002      	b.n	801054a <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8010544:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010546:	f7f3 fd03 	bl	8003f50 <HAL_UART_TxCpltCallback>
}
 801054a:	bf00      	nop
 801054c:	3740      	adds	r7, #64	; 0x40
 801054e:	46bd      	mov	sp, r7
 8010550:	bd80      	pop	{r7, pc}

08010552 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010552:	b580      	push	{r7, lr}
 8010554:	b084      	sub	sp, #16
 8010556:	af00      	add	r7, sp, #0
 8010558:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801055e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8010560:	68f8      	ldr	r0, [r7, #12]
 8010562:	f7fe fe0f 	bl	800f184 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010566:	bf00      	nop
 8010568:	3710      	adds	r7, #16
 801056a:	46bd      	mov	sp, r7
 801056c:	bd80      	pop	{r7, pc}

0801056e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801056e:	b580      	push	{r7, lr}
 8010570:	b09c      	sub	sp, #112	; 0x70
 8010572:	af00      	add	r7, sp, #0
 8010574:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801057a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	69db      	ldr	r3, [r3, #28]
 8010580:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010584:	d071      	beq.n	801066a <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8010586:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010588:	2200      	movs	r2, #0
 801058a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801058e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010590:	681b      	ldr	r3, [r3, #0]
 8010592:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010594:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010596:	e853 3f00 	ldrex	r3, [r3]
 801059a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801059c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801059e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80105a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80105a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	461a      	mov	r2, r3
 80105aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80105ac:	65bb      	str	r3, [r7, #88]	; 0x58
 80105ae:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105b0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80105b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80105b4:	e841 2300 	strex	r3, r2, [r1]
 80105b8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80105ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d1e6      	bne.n	801058e <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80105c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	3308      	adds	r3, #8
 80105c6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105ca:	e853 3f00 	ldrex	r3, [r3]
 80105ce:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80105d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105d2:	f023 0301 	bic.w	r3, r3, #1
 80105d6:	667b      	str	r3, [r7, #100]	; 0x64
 80105d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	3308      	adds	r3, #8
 80105de:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80105e0:	647a      	str	r2, [r7, #68]	; 0x44
 80105e2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105e4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80105e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80105e8:	e841 2300 	strex	r3, r2, [r1]
 80105ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80105ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d1e5      	bne.n	80105c0 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80105f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	3308      	adds	r3, #8
 80105fa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105fe:	e853 3f00 	ldrex	r3, [r3]
 8010602:	623b      	str	r3, [r7, #32]
   return(result);
 8010604:	6a3b      	ldr	r3, [r7, #32]
 8010606:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801060a:	663b      	str	r3, [r7, #96]	; 0x60
 801060c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	3308      	adds	r3, #8
 8010612:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010614:	633a      	str	r2, [r7, #48]	; 0x30
 8010616:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010618:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801061a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801061c:	e841 2300 	strex	r3, r2, [r1]
 8010620:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010624:	2b00      	cmp	r3, #0
 8010626:	d1e5      	bne.n	80105f4 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010628:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801062a:	2220      	movs	r2, #32
 801062c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010630:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010632:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010634:	2b01      	cmp	r3, #1
 8010636:	d118      	bne.n	801066a <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010638:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801063a:	681b      	ldr	r3, [r3, #0]
 801063c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801063e:	693b      	ldr	r3, [r7, #16]
 8010640:	e853 3f00 	ldrex	r3, [r3]
 8010644:	60fb      	str	r3, [r7, #12]
   return(result);
 8010646:	68fb      	ldr	r3, [r7, #12]
 8010648:	f023 0310 	bic.w	r3, r3, #16
 801064c:	65fb      	str	r3, [r7, #92]	; 0x5c
 801064e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	461a      	mov	r2, r3
 8010654:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010656:	61fb      	str	r3, [r7, #28]
 8010658:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801065a:	69b9      	ldr	r1, [r7, #24]
 801065c:	69fa      	ldr	r2, [r7, #28]
 801065e:	e841 2300 	strex	r3, r2, [r1]
 8010662:	617b      	str	r3, [r7, #20]
   return(result);
 8010664:	697b      	ldr	r3, [r7, #20]
 8010666:	2b00      	cmp	r3, #0
 8010668:	d1e6      	bne.n	8010638 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801066a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801066c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801066e:	2b01      	cmp	r3, #1
 8010670:	d107      	bne.n	8010682 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010672:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010674:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010678:	4619      	mov	r1, r3
 801067a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801067c:	f7fe fda0 	bl	800f1c0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010680:	e002      	b.n	8010688 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 8010682:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8010684:	f7fe fd88 	bl	800f198 <HAL_UART_RxCpltCallback>
}
 8010688:	bf00      	nop
 801068a:	3770      	adds	r7, #112	; 0x70
 801068c:	46bd      	mov	sp, r7
 801068e:	bd80      	pop	{r7, pc}

08010690 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010690:	b580      	push	{r7, lr}
 8010692:	b084      	sub	sp, #16
 8010694:	af00      	add	r7, sp, #0
 8010696:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801069c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801069e:	68fb      	ldr	r3, [r7, #12]
 80106a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80106a2:	2b01      	cmp	r3, #1
 80106a4:	d109      	bne.n	80106ba <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80106ac:	085b      	lsrs	r3, r3, #1
 80106ae:	b29b      	uxth	r3, r3
 80106b0:	4619      	mov	r1, r3
 80106b2:	68f8      	ldr	r0, [r7, #12]
 80106b4:	f7fe fd84 	bl	800f1c0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80106b8:	e002      	b.n	80106c0 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 80106ba:	68f8      	ldr	r0, [r7, #12]
 80106bc:	f7fe fd76 	bl	800f1ac <HAL_UART_RxHalfCpltCallback>
}
 80106c0:	bf00      	nop
 80106c2:	3710      	adds	r7, #16
 80106c4:	46bd      	mov	sp, r7
 80106c6:	bd80      	pop	{r7, pc}

080106c8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80106c8:	b580      	push	{r7, lr}
 80106ca:	b086      	sub	sp, #24
 80106cc:	af00      	add	r7, sp, #0
 80106ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80106d4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80106d6:	697b      	ldr	r3, [r7, #20]
 80106d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80106dc:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80106de:	697b      	ldr	r3, [r7, #20]
 80106e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80106e4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80106e6:	697b      	ldr	r3, [r7, #20]
 80106e8:	681b      	ldr	r3, [r3, #0]
 80106ea:	689b      	ldr	r3, [r3, #8]
 80106ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80106f0:	2b80      	cmp	r3, #128	; 0x80
 80106f2:	d109      	bne.n	8010708 <UART_DMAError+0x40>
 80106f4:	693b      	ldr	r3, [r7, #16]
 80106f6:	2b21      	cmp	r3, #33	; 0x21
 80106f8:	d106      	bne.n	8010708 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80106fa:	697b      	ldr	r3, [r7, #20]
 80106fc:	2200      	movs	r2, #0
 80106fe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8010702:	6978      	ldr	r0, [r7, #20]
 8010704:	f7ff fe32 	bl	801036c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8010708:	697b      	ldr	r3, [r7, #20]
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	689b      	ldr	r3, [r3, #8]
 801070e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010712:	2b40      	cmp	r3, #64	; 0x40
 8010714:	d109      	bne.n	801072a <UART_DMAError+0x62>
 8010716:	68fb      	ldr	r3, [r7, #12]
 8010718:	2b22      	cmp	r3, #34	; 0x22
 801071a:	d106      	bne.n	801072a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 801071c:	697b      	ldr	r3, [r7, #20]
 801071e:	2200      	movs	r2, #0
 8010720:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8010724:	6978      	ldr	r0, [r7, #20]
 8010726:	f7ff fe63 	bl	80103f0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801072a:	697b      	ldr	r3, [r7, #20]
 801072c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010730:	f043 0210 	orr.w	r2, r3, #16
 8010734:	697b      	ldr	r3, [r7, #20]
 8010736:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801073a:	6978      	ldr	r0, [r7, #20]
 801073c:	f7f3 fc1a 	bl	8003f74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010740:	bf00      	nop
 8010742:	3718      	adds	r7, #24
 8010744:	46bd      	mov	sp, r7
 8010746:	bd80      	pop	{r7, pc}

08010748 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010748:	b580      	push	{r7, lr}
 801074a:	b084      	sub	sp, #16
 801074c:	af00      	add	r7, sp, #0
 801074e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010754:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8010756:	68fb      	ldr	r3, [r7, #12]
 8010758:	2200      	movs	r2, #0
 801075a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 801075e:	68fb      	ldr	r3, [r7, #12]
 8010760:	2200      	movs	r2, #0
 8010762:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010766:	68f8      	ldr	r0, [r7, #12]
 8010768:	f7f3 fc04 	bl	8003f74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801076c:	bf00      	nop
 801076e:	3710      	adds	r7, #16
 8010770:	46bd      	mov	sp, r7
 8010772:	bd80      	pop	{r7, pc}

08010774 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010774:	b580      	push	{r7, lr}
 8010776:	b088      	sub	sp, #32
 8010778:	af00      	add	r7, sp, #0
 801077a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010782:	68fb      	ldr	r3, [r7, #12]
 8010784:	e853 3f00 	ldrex	r3, [r3]
 8010788:	60bb      	str	r3, [r7, #8]
   return(result);
 801078a:	68bb      	ldr	r3, [r7, #8]
 801078c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010790:	61fb      	str	r3, [r7, #28]
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	681b      	ldr	r3, [r3, #0]
 8010796:	461a      	mov	r2, r3
 8010798:	69fb      	ldr	r3, [r7, #28]
 801079a:	61bb      	str	r3, [r7, #24]
 801079c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801079e:	6979      	ldr	r1, [r7, #20]
 80107a0:	69ba      	ldr	r2, [r7, #24]
 80107a2:	e841 2300 	strex	r3, r2, [r1]
 80107a6:	613b      	str	r3, [r7, #16]
   return(result);
 80107a8:	693b      	ldr	r3, [r7, #16]
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d1e6      	bne.n	801077c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	2220      	movs	r2, #32
 80107b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	2200      	movs	r2, #0
 80107ba:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80107bc:	6878      	ldr	r0, [r7, #4]
 80107be:	f7f3 fbc7 	bl	8003f50 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80107c2:	bf00      	nop
 80107c4:	3720      	adds	r7, #32
 80107c6:	46bd      	mov	sp, r7
 80107c8:	bd80      	pop	{r7, pc}

080107ca <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80107ca:	b480      	push	{r7}
 80107cc:	b083      	sub	sp, #12
 80107ce:	af00      	add	r7, sp, #0
 80107d0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80107d2:	bf00      	nop
 80107d4:	370c      	adds	r7, #12
 80107d6:	46bd      	mov	sp, r7
 80107d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107dc:	4770      	bx	lr

080107de <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80107de:	b480      	push	{r7}
 80107e0:	b083      	sub	sp, #12
 80107e2:	af00      	add	r7, sp, #0
 80107e4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80107e6:	bf00      	nop
 80107e8:	370c      	adds	r7, #12
 80107ea:	46bd      	mov	sp, r7
 80107ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107f0:	4770      	bx	lr

080107f2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80107f2:	b480      	push	{r7}
 80107f4:	b083      	sub	sp, #12
 80107f6:	af00      	add	r7, sp, #0
 80107f8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80107fa:	bf00      	nop
 80107fc:	370c      	adds	r7, #12
 80107fe:	46bd      	mov	sp, r7
 8010800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010804:	4770      	bx	lr

08010806 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010806:	b480      	push	{r7}
 8010808:	b085      	sub	sp, #20
 801080a:	af00      	add	r7, sp, #0
 801080c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010814:	2b01      	cmp	r3, #1
 8010816:	d101      	bne.n	801081c <HAL_UARTEx_DisableFifoMode+0x16>
 8010818:	2302      	movs	r3, #2
 801081a:	e027      	b.n	801086c <HAL_UARTEx_DisableFifoMode+0x66>
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	2201      	movs	r2, #1
 8010820:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	2224      	movs	r2, #36	; 0x24
 8010828:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	681b      	ldr	r3, [r3, #0]
 8010830:	681b      	ldr	r3, [r3, #0]
 8010832:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	681b      	ldr	r3, [r3, #0]
 8010838:	681a      	ldr	r2, [r3, #0]
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	681b      	ldr	r3, [r3, #0]
 801083e:	f022 0201 	bic.w	r2, r2, #1
 8010842:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010844:	68fb      	ldr	r3, [r7, #12]
 8010846:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801084a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	2200      	movs	r2, #0
 8010850:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	68fa      	ldr	r2, [r7, #12]
 8010858:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	2220      	movs	r2, #32
 801085e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	2200      	movs	r2, #0
 8010866:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801086a:	2300      	movs	r3, #0
}
 801086c:	4618      	mov	r0, r3
 801086e:	3714      	adds	r7, #20
 8010870:	46bd      	mov	sp, r7
 8010872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010876:	4770      	bx	lr

08010878 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010878:	b580      	push	{r7, lr}
 801087a:	b084      	sub	sp, #16
 801087c:	af00      	add	r7, sp, #0
 801087e:	6078      	str	r0, [r7, #4]
 8010880:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010888:	2b01      	cmp	r3, #1
 801088a:	d101      	bne.n	8010890 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801088c:	2302      	movs	r3, #2
 801088e:	e02d      	b.n	80108ec <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	2201      	movs	r2, #1
 8010894:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	2224      	movs	r2, #36	; 0x24
 801089c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	681b      	ldr	r3, [r3, #0]
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	681a      	ldr	r2, [r3, #0]
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	681b      	ldr	r3, [r3, #0]
 80108b2:	f022 0201 	bic.w	r2, r2, #1
 80108b6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	689b      	ldr	r3, [r3, #8]
 80108be:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	681b      	ldr	r3, [r3, #0]
 80108c6:	683a      	ldr	r2, [r7, #0]
 80108c8:	430a      	orrs	r2, r1
 80108ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80108cc:	6878      	ldr	r0, [r7, #4]
 80108ce:	f000 f84f 	bl	8010970 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	681b      	ldr	r3, [r3, #0]
 80108d6:	68fa      	ldr	r2, [r7, #12]
 80108d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	2220      	movs	r2, #32
 80108de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	2200      	movs	r2, #0
 80108e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80108ea:	2300      	movs	r3, #0
}
 80108ec:	4618      	mov	r0, r3
 80108ee:	3710      	adds	r7, #16
 80108f0:	46bd      	mov	sp, r7
 80108f2:	bd80      	pop	{r7, pc}

080108f4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80108f4:	b580      	push	{r7, lr}
 80108f6:	b084      	sub	sp, #16
 80108f8:	af00      	add	r7, sp, #0
 80108fa:	6078      	str	r0, [r7, #4]
 80108fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010904:	2b01      	cmp	r3, #1
 8010906:	d101      	bne.n	801090c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010908:	2302      	movs	r3, #2
 801090a:	e02d      	b.n	8010968 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	2201      	movs	r2, #1
 8010910:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	2224      	movs	r2, #36	; 0x24
 8010918:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	681b      	ldr	r3, [r3, #0]
 8010928:	681a      	ldr	r2, [r3, #0]
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	681b      	ldr	r3, [r3, #0]
 801092e:	f022 0201 	bic.w	r2, r2, #1
 8010932:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	689b      	ldr	r3, [r3, #8]
 801093a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	683a      	ldr	r2, [r7, #0]
 8010944:	430a      	orrs	r2, r1
 8010946:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010948:	6878      	ldr	r0, [r7, #4]
 801094a:	f000 f811 	bl	8010970 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	681b      	ldr	r3, [r3, #0]
 8010952:	68fa      	ldr	r2, [r7, #12]
 8010954:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	2220      	movs	r2, #32
 801095a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	2200      	movs	r2, #0
 8010962:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010966:	2300      	movs	r3, #0
}
 8010968:	4618      	mov	r0, r3
 801096a:	3710      	adds	r7, #16
 801096c:	46bd      	mov	sp, r7
 801096e:	bd80      	pop	{r7, pc}

08010970 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010970:	b480      	push	{r7}
 8010972:	b085      	sub	sp, #20
 8010974:	af00      	add	r7, sp, #0
 8010976:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801097c:	2b00      	cmp	r3, #0
 801097e:	d108      	bne.n	8010992 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	2201      	movs	r2, #1
 8010984:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	2201      	movs	r2, #1
 801098c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010990:	e031      	b.n	80109f6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010992:	2310      	movs	r3, #16
 8010994:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010996:	2310      	movs	r3, #16
 8010998:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	689b      	ldr	r3, [r3, #8]
 80109a0:	0e5b      	lsrs	r3, r3, #25
 80109a2:	b2db      	uxtb	r3, r3
 80109a4:	f003 0307 	and.w	r3, r3, #7
 80109a8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	689b      	ldr	r3, [r3, #8]
 80109b0:	0f5b      	lsrs	r3, r3, #29
 80109b2:	b2db      	uxtb	r3, r3
 80109b4:	f003 0307 	and.w	r3, r3, #7
 80109b8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80109ba:	7bbb      	ldrb	r3, [r7, #14]
 80109bc:	7b3a      	ldrb	r2, [r7, #12]
 80109be:	4911      	ldr	r1, [pc, #68]	; (8010a04 <UARTEx_SetNbDataToProcess+0x94>)
 80109c0:	5c8a      	ldrb	r2, [r1, r2]
 80109c2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80109c6:	7b3a      	ldrb	r2, [r7, #12]
 80109c8:	490f      	ldr	r1, [pc, #60]	; (8010a08 <UARTEx_SetNbDataToProcess+0x98>)
 80109ca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80109cc:	fb93 f3f2 	sdiv	r3, r3, r2
 80109d0:	b29a      	uxth	r2, r3
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80109d8:	7bfb      	ldrb	r3, [r7, #15]
 80109da:	7b7a      	ldrb	r2, [r7, #13]
 80109dc:	4909      	ldr	r1, [pc, #36]	; (8010a04 <UARTEx_SetNbDataToProcess+0x94>)
 80109de:	5c8a      	ldrb	r2, [r1, r2]
 80109e0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80109e4:	7b7a      	ldrb	r2, [r7, #13]
 80109e6:	4908      	ldr	r1, [pc, #32]	; (8010a08 <UARTEx_SetNbDataToProcess+0x98>)
 80109e8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80109ea:	fb93 f3f2 	sdiv	r3, r3, r2
 80109ee:	b29a      	uxth	r2, r3
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80109f6:	bf00      	nop
 80109f8:	3714      	adds	r7, #20
 80109fa:	46bd      	mov	sp, r7
 80109fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a00:	4770      	bx	lr
 8010a02:	bf00      	nop
 8010a04:	08011c68 	.word	0x08011c68
 8010a08:	08011c70 	.word	0x08011c70

08010a0c <__cxa_pure_virtual>:
 8010a0c:	b508      	push	{r3, lr}
 8010a0e:	f000 f80d 	bl	8010a2c <_ZSt9terminatev>

08010a12 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8010a12:	b508      	push	{r3, lr}
 8010a14:	4780      	blx	r0
 8010a16:	f000 fd93 	bl	8011540 <abort>
	...

08010a1c <_ZSt13get_terminatev>:
 8010a1c:	4b02      	ldr	r3, [pc, #8]	; (8010a28 <_ZSt13get_terminatev+0xc>)
 8010a1e:	6818      	ldr	r0, [r3, #0]
 8010a20:	f3bf 8f5b 	dmb	ish
 8010a24:	4770      	bx	lr
 8010a26:	bf00      	nop
 8010a28:	24000014 	.word	0x24000014

08010a2c <_ZSt9terminatev>:
 8010a2c:	b508      	push	{r3, lr}
 8010a2e:	f7ff fff5 	bl	8010a1c <_ZSt13get_terminatev>
 8010a32:	f7ff ffee 	bl	8010a12 <_ZN10__cxxabiv111__terminateEPFvvE>

08010a36 <checkint>:
 8010a36:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8010a3a:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8010a3e:	429a      	cmp	r2, r3
 8010a40:	b570      	push	{r4, r5, r6, lr}
 8010a42:	dd2a      	ble.n	8010a9a <checkint+0x64>
 8010a44:	f240 4333 	movw	r3, #1075	; 0x433
 8010a48:	429a      	cmp	r2, r3
 8010a4a:	dc24      	bgt.n	8010a96 <checkint+0x60>
 8010a4c:	1a9b      	subs	r3, r3, r2
 8010a4e:	f1a3 0620 	sub.w	r6, r3, #32
 8010a52:	f04f 32ff 	mov.w	r2, #4294967295
 8010a56:	fa02 f403 	lsl.w	r4, r2, r3
 8010a5a:	fa02 f606 	lsl.w	r6, r2, r6
 8010a5e:	f1c3 0520 	rsb	r5, r3, #32
 8010a62:	fa22 f505 	lsr.w	r5, r2, r5
 8010a66:	4334      	orrs	r4, r6
 8010a68:	432c      	orrs	r4, r5
 8010a6a:	409a      	lsls	r2, r3
 8010a6c:	ea20 0202 	bic.w	r2, r0, r2
 8010a70:	ea21 0404 	bic.w	r4, r1, r4
 8010a74:	4322      	orrs	r2, r4
 8010a76:	f1a3 0420 	sub.w	r4, r3, #32
 8010a7a:	f1c3 0220 	rsb	r2, r3, #32
 8010a7e:	d10c      	bne.n	8010a9a <checkint+0x64>
 8010a80:	40d8      	lsrs	r0, r3
 8010a82:	fa01 f302 	lsl.w	r3, r1, r2
 8010a86:	4318      	orrs	r0, r3
 8010a88:	40e1      	lsrs	r1, r4
 8010a8a:	4308      	orrs	r0, r1
 8010a8c:	f000 0001 	and.w	r0, r0, #1
 8010a90:	f1d0 0002 	rsbs	r0, r0, #2
 8010a94:	bd70      	pop	{r4, r5, r6, pc}
 8010a96:	2002      	movs	r0, #2
 8010a98:	e7fc      	b.n	8010a94 <checkint+0x5e>
 8010a9a:	2000      	movs	r0, #0
 8010a9c:	e7fa      	b.n	8010a94 <checkint+0x5e>
	...

08010aa0 <pow>:
 8010aa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010aa4:	ee10 4a90 	vmov	r4, s1
 8010aa8:	ed2d 8b0a 	vpush	{d8-d12}
 8010aac:	ea4f 5a14 	mov.w	sl, r4, lsr #20
 8010ab0:	ee11 7a90 	vmov	r7, s3
 8010ab4:	f10a 32ff 	add.w	r2, sl, #4294967295
 8010ab8:	f240 73fd 	movw	r3, #2045	; 0x7fd
 8010abc:	429a      	cmp	r2, r3
 8010abe:	ee10 6a10 	vmov	r6, s0
 8010ac2:	ee11 0a10 	vmov	r0, s2
 8010ac6:	b086      	sub	sp, #24
 8010ac8:	46d4      	mov	ip, sl
 8010aca:	ea4f 5517 	mov.w	r5, r7, lsr #20
 8010ace:	d806      	bhi.n	8010ade <pow+0x3e>
 8010ad0:	f3c5 030a 	ubfx	r3, r5, #0, #11
 8010ad4:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 8010ad8:	2b7f      	cmp	r3, #127	; 0x7f
 8010ada:	f240 8156 	bls.w	8010d8a <pow+0x2ea>
 8010ade:	1802      	adds	r2, r0, r0
 8010ae0:	eb47 0107 	adc.w	r1, r7, r7
 8010ae4:	f06f 0e01 	mvn.w	lr, #1
 8010ae8:	f112 39ff 	adds.w	r9, r2, #4294967295
 8010aec:	f141 38ff 	adc.w	r8, r1, #4294967295
 8010af0:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 8010af4:	45ce      	cmp	lr, r9
 8010af6:	eb73 0808 	sbcs.w	r8, r3, r8
 8010afa:	d23f      	bcs.n	8010b7c <pow+0xdc>
 8010afc:	ea52 0301 	orrs.w	r3, r2, r1
 8010b00:	f04f 0300 	mov.w	r3, #0
 8010b04:	d10c      	bne.n	8010b20 <pow+0x80>
 8010b06:	19b6      	adds	r6, r6, r6
 8010b08:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 8010b0c:	4164      	adcs	r4, r4
 8010b0e:	42b3      	cmp	r3, r6
 8010b10:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8010b14:	41a3      	sbcs	r3, r4
 8010b16:	f0c0 808c 	bcc.w	8010c32 <pow+0x192>
 8010b1a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8010b1e:	e028      	b.n	8010b72 <pow+0xd2>
 8010b20:	4da3      	ldr	r5, [pc, #652]	; (8010db0 <pow+0x310>)
 8010b22:	42ac      	cmp	r4, r5
 8010b24:	bf08      	it	eq
 8010b26:	429e      	cmpeq	r6, r3
 8010b28:	d107      	bne.n	8010b3a <pow+0x9a>
 8010b2a:	1800      	adds	r0, r0, r0
 8010b2c:	f487 2700 	eor.w	r7, r7, #524288	; 0x80000
 8010b30:	417f      	adcs	r7, r7
 8010b32:	4283      	cmp	r3, r0
 8010b34:	4b9f      	ldr	r3, [pc, #636]	; (8010db4 <pow+0x314>)
 8010b36:	41bb      	sbcs	r3, r7
 8010b38:	e7ed      	b.n	8010b16 <pow+0x76>
 8010b3a:	19b6      	adds	r6, r6, r6
 8010b3c:	489e      	ldr	r0, [pc, #632]	; (8010db8 <pow+0x318>)
 8010b3e:	4164      	adcs	r4, r4
 8010b40:	42b3      	cmp	r3, r6
 8010b42:	eb70 0504 	sbcs.w	r5, r0, r4
 8010b46:	d374      	bcc.n	8010c32 <pow+0x192>
 8010b48:	4281      	cmp	r1, r0
 8010b4a:	bf08      	it	eq
 8010b4c:	429a      	cmpeq	r2, r3
 8010b4e:	d170      	bne.n	8010c32 <pow+0x192>
 8010b50:	4a9a      	ldr	r2, [pc, #616]	; (8010dbc <pow+0x31c>)
 8010b52:	4294      	cmp	r4, r2
 8010b54:	bf08      	it	eq
 8010b56:	429e      	cmpeq	r6, r3
 8010b58:	d0df      	beq.n	8010b1a <pow+0x7a>
 8010b5a:	4294      	cmp	r4, r2
 8010b5c:	ea6f 0707 	mvn.w	r7, r7
 8010b60:	bf34      	ite	cc
 8010b62:	2400      	movcc	r4, #0
 8010b64:	2401      	movcs	r4, #1
 8010b66:	0fff      	lsrs	r7, r7, #31
 8010b68:	42bc      	cmp	r4, r7
 8010b6a:	f040 81d9 	bne.w	8010f20 <pow+0x480>
 8010b6e:	ee21 0b01 	vmul.f64	d0, d1, d1
 8010b72:	b006      	add	sp, #24
 8010b74:	ecbd 8b0a 	vpop	{d8-d12}
 8010b78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b7c:	eb16 0806 	adds.w	r8, r6, r6
 8010b80:	eb44 0904 	adc.w	r9, r4, r4
 8010b84:	f118 31ff 	adds.w	r1, r8, #4294967295
 8010b88:	f169 0200 	sbc.w	r2, r9, #0
 8010b8c:	458e      	cmp	lr, r1
 8010b8e:	4193      	sbcs	r3, r2
 8010b90:	d223      	bcs.n	8010bda <pow+0x13a>
 8010b92:	ee20 0b00 	vmul.f64	d0, d0, d0
 8010b96:	2c00      	cmp	r4, #0
 8010b98:	da12      	bge.n	8010bc0 <pow+0x120>
 8010b9a:	4639      	mov	r1, r7
 8010b9c:	f7ff ff4b 	bl	8010a36 <checkint>
 8010ba0:	2801      	cmp	r0, #1
 8010ba2:	d10d      	bne.n	8010bc0 <pow+0x120>
 8010ba4:	eeb1 0b40 	vneg.f64	d0, d0
 8010ba8:	ea58 0309 	orrs.w	r3, r8, r9
 8010bac:	d10a      	bne.n	8010bc4 <pow+0x124>
 8010bae:	2f00      	cmp	r7, #0
 8010bb0:	dadf      	bge.n	8010b72 <pow+0xd2>
 8010bb2:	b006      	add	sp, #24
 8010bb4:	ecbd 8b0a 	vpop	{d8-d12}
 8010bb8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010bbc:	f000 bc74 	b.w	80114a8 <__math_divzero>
 8010bc0:	2000      	movs	r0, #0
 8010bc2:	e7f1      	b.n	8010ba8 <pow+0x108>
 8010bc4:	2f00      	cmp	r7, #0
 8010bc6:	dad4      	bge.n	8010b72 <pow+0xd2>
 8010bc8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8010bcc:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8010bd0:	ed8d 7b00 	vstr	d7, [sp]
 8010bd4:	ed9d 0b00 	vldr	d0, [sp]
 8010bd8:	e7cb      	b.n	8010b72 <pow+0xd2>
 8010bda:	2c00      	cmp	r4, #0
 8010bdc:	da2c      	bge.n	8010c38 <pow+0x198>
 8010bde:	4639      	mov	r1, r7
 8010be0:	f7ff ff29 	bl	8010a36 <checkint>
 8010be4:	b930      	cbnz	r0, 8010bf4 <pow+0x154>
 8010be6:	b006      	add	sp, #24
 8010be8:	ecbd 8b0a 	vpop	{d8-d12}
 8010bec:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010bf0:	f000 bc72 	b.w	80114d8 <__math_invalid>
 8010bf4:	2801      	cmp	r0, #1
 8010bf6:	bf14      	ite	ne
 8010bf8:	2000      	movne	r0, #0
 8010bfa:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 8010bfe:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8010c02:	f3ca 0c0a 	ubfx	ip, sl, #0, #11
 8010c06:	f3c5 020a 	ubfx	r2, r5, #0, #11
 8010c0a:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 8010c0e:	2b7f      	cmp	r3, #127	; 0x7f
 8010c10:	d92d      	bls.n	8010c6e <pow+0x1ce>
 8010c12:	4b67      	ldr	r3, [pc, #412]	; (8010db0 <pow+0x310>)
 8010c14:	2000      	movs	r0, #0
 8010c16:	429c      	cmp	r4, r3
 8010c18:	bf08      	it	eq
 8010c1a:	4286      	cmpeq	r6, r0
 8010c1c:	f43f af7d 	beq.w	8010b1a <pow+0x7a>
 8010c20:	f240 31bd 	movw	r1, #957	; 0x3bd
 8010c24:	428a      	cmp	r2, r1
 8010c26:	d80c      	bhi.n	8010c42 <pow+0x1a2>
 8010c28:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8010c2c:	42b0      	cmp	r0, r6
 8010c2e:	41a3      	sbcs	r3, r4
 8010c30:	d204      	bcs.n	8010c3c <pow+0x19c>
 8010c32:	ee31 0b00 	vadd.f64	d0, d1, d0
 8010c36:	e79c      	b.n	8010b72 <pow+0xd2>
 8010c38:	2000      	movs	r0, #0
 8010c3a:	e7e4      	b.n	8010c06 <pow+0x166>
 8010c3c:	ee30 0b41 	vsub.f64	d0, d0, d1
 8010c40:	e797      	b.n	8010b72 <pow+0xd2>
 8010c42:	2e01      	cmp	r6, #1
 8010c44:	eb74 0303 	sbcs.w	r3, r4, r3
 8010c48:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8010c4c:	bf34      	ite	cc
 8010c4e:	2301      	movcc	r3, #1
 8010c50:	2300      	movcs	r3, #0
 8010c52:	4295      	cmp	r5, r2
 8010c54:	bf8c      	ite	hi
 8010c56:	2500      	movhi	r5, #0
 8010c58:	2501      	movls	r5, #1
 8010c5a:	42ab      	cmp	r3, r5
 8010c5c:	f000 809d 	beq.w	8010d9a <pow+0x2fa>
 8010c60:	b006      	add	sp, #24
 8010c62:	ecbd 8b0a 	vpop	{d8-d12}
 8010c66:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c6a:	f000 bc15 	b.w	8011498 <__math_oflow>
 8010c6e:	f1bc 0f00 	cmp.w	ip, #0
 8010c72:	d10b      	bne.n	8010c8c <pow+0x1ec>
 8010c74:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8010da8 <pow+0x308>
 8010c78:	ee20 7b07 	vmul.f64	d7, d0, d7
 8010c7c:	ec53 2b17 	vmov	r2, r3, d7
 8010c80:	ee17 6a10 	vmov	r6, s14
 8010c84:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8010c88:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 8010c8c:	4b4c      	ldr	r3, [pc, #304]	; (8010dc0 <pow+0x320>)
 8010c8e:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8010c92:	4423      	add	r3, r4
 8010c94:	f3c3 3246 	ubfx	r2, r3, #13, #7
 8010c98:	1519      	asrs	r1, r3, #20
 8010c9a:	0d1b      	lsrs	r3, r3, #20
 8010c9c:	051b      	lsls	r3, r3, #20
 8010c9e:	eba4 0903 	sub.w	r9, r4, r3
 8010ca2:	4b48      	ldr	r3, [pc, #288]	; (8010dc4 <pow+0x324>)
 8010ca4:	ee04 1a10 	vmov	s8, r1
 8010ca8:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 8010cac:	f1b6 0800 	subs.w	r8, r6, #0
 8010cb0:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 8010cb4:	ec49 8b15 	vmov	d5, r8, r9
 8010cb8:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 8010cbc:	eea5 6b07 	vfma.f64	d6, d5, d7
 8010cc0:	ed93 7b00 	vldr	d7, [r3]
 8010cc4:	ed93 5b02 	vldr	d5, [r3, #8]
 8010cc8:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
 8010ccc:	eea4 2b07 	vfma.f64	d2, d4, d7
 8010cd0:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 8010cd4:	ee36 ab02 	vadd.f64	d10, d6, d2
 8010cd8:	ee32 2b4a 	vsub.f64	d2, d2, d10
 8010cdc:	eea4 7b05 	vfma.f64	d7, d4, d5
 8010ce0:	ed93 5b04 	vldr	d5, [r3, #16]
 8010ce4:	ee32 2b06 	vadd.f64	d2, d2, d6
 8010ce8:	ee37 7b02 	vadd.f64	d7, d7, d2
 8010cec:	ee26 5b05 	vmul.f64	d5, d6, d5
 8010cf0:	ed93 4b08 	vldr	d4, [r3, #32]
 8010cf4:	ee26 0b05 	vmul.f64	d0, d6, d5
 8010cf8:	eeb0 9b40 	vmov.f64	d9, d0
 8010cfc:	ee95 9b06 	vfnms.f64	d9, d5, d6
 8010d00:	ed93 5b06 	vldr	d5, [r3, #24]
 8010d04:	ee3a 8b00 	vadd.f64	d8, d10, d0
 8010d08:	ee26 bb00 	vmul.f64	d11, d6, d0
 8010d0c:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 8010d10:	eea6 5b04 	vfma.f64	d5, d6, d4
 8010d14:	ee3a ab48 	vsub.f64	d10, d10, d8
 8010d18:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 8010d1c:	ee37 9b09 	vadd.f64	d9, d7, d9
 8010d20:	ee3a ab00 	vadd.f64	d10, d10, d0
 8010d24:	eea6 4b03 	vfma.f64	d4, d6, d3
 8010d28:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 8010d2c:	ee39 ab0a 	vadd.f64	d10, d9, d10
 8010d30:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 8010d34:	eea6 3b0c 	vfma.f64	d3, d6, d12
 8010d38:	eea0 4b03 	vfma.f64	d4, d0, d3
 8010d3c:	eea0 5b04 	vfma.f64	d5, d0, d4
 8010d40:	eeab ab05 	vfma.f64	d10, d11, d5
 8010d44:	ee38 6b0a 	vadd.f64	d6, d8, d10
 8010d48:	ee21 7b06 	vmul.f64	d7, d1, d6
 8010d4c:	ee17 3a90 	vmov	r3, s15
 8010d50:	eeb0 5b47 	vmov.f64	d5, d7
 8010d54:	f3c3 560a 	ubfx	r6, r3, #20, #11
 8010d58:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 8010d5c:	18b2      	adds	r2, r6, r2
 8010d5e:	2a3e      	cmp	r2, #62	; 0x3e
 8010d60:	ee91 5b06 	vfnms.f64	d5, d1, d6
 8010d64:	ee38 8b46 	vsub.f64	d8, d8, d6
 8010d68:	ee38 ab0a 	vadd.f64	d10, d8, d10
 8010d6c:	eea1 5b0a 	vfma.f64	d5, d1, d10
 8010d70:	d92b      	bls.n	8010dca <pow+0x32a>
 8010d72:	2a00      	cmp	r2, #0
 8010d74:	da0b      	bge.n	8010d8e <pow+0x2ee>
 8010d76:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8010d7a:	ee37 0b00 	vadd.f64	d0, d7, d0
 8010d7e:	2800      	cmp	r0, #0
 8010d80:	f43f aef7 	beq.w	8010b72 <pow+0xd2>
 8010d84:	eeb1 0b40 	vneg.f64	d0, d0
 8010d88:	e6f3      	b.n	8010b72 <pow+0xd2>
 8010d8a:	2000      	movs	r0, #0
 8010d8c:	e77e      	b.n	8010c8c <pow+0x1ec>
 8010d8e:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 8010d92:	d919      	bls.n	8010dc8 <pow+0x328>
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	f6bf af63 	bge.w	8010c60 <pow+0x1c0>
 8010d9a:	b006      	add	sp, #24
 8010d9c:	ecbd 8b0a 	vpop	{d8-d12}
 8010da0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010da4:	f000 bb70 	b.w	8011488 <__math_uflow>
 8010da8:	00000000 	.word	0x00000000
 8010dac:	43300000 	.word	0x43300000
 8010db0:	3ff00000 	.word	0x3ff00000
 8010db4:	fff00000 	.word	0xfff00000
 8010db8:	ffe00000 	.word	0xffe00000
 8010dbc:	7fe00000 	.word	0x7fe00000
 8010dc0:	c0196aab 	.word	0xc0196aab
 8010dc4:	08011c78 	.word	0x08011c78
 8010dc8:	2600      	movs	r6, #0
 8010dca:	495d      	ldr	r1, [pc, #372]	; (8010f40 <pow+0x4a0>)
 8010dcc:	ed91 4b02 	vldr	d4, [r1, #8]
 8010dd0:	ed91 3b00 	vldr	d3, [r1]
 8010dd4:	eeb0 6b44 	vmov.f64	d6, d4
 8010dd8:	eea7 6b03 	vfma.f64	d6, d7, d3
 8010ddc:	ee16 5a10 	vmov	r5, s12
 8010de0:	ee36 6b44 	vsub.f64	d6, d6, d4
 8010de4:	ed91 4b04 	vldr	d4, [r1, #16]
 8010de8:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 8010dec:	eea6 7b04 	vfma.f64	d7, d6, d4
 8010df0:	eeb0 0b47 	vmov.f64	d0, d7
 8010df4:	ed91 7b06 	vldr	d7, [r1, #24]
 8010df8:	18dc      	adds	r4, r3, r3
 8010dfa:	f104 030f 	add.w	r3, r4, #15
 8010dfe:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8010e02:	eea6 0b07 	vfma.f64	d0, d6, d7
 8010e06:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 8010e0a:	ee35 0b00 	vadd.f64	d0, d5, d0
 8010e0e:	ee20 6b00 	vmul.f64	d6, d0, d0
 8010e12:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 8010e16:	ed91 5b08 	vldr	d5, [r1, #32]
 8010e1a:	ee30 7b07 	vadd.f64	d7, d0, d7
 8010e1e:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8010e22:	eea0 5b04 	vfma.f64	d5, d0, d4
 8010e26:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 8010e2a:	eea6 7b05 	vfma.f64	d7, d6, d5
 8010e2e:	ee26 6b06 	vmul.f64	d6, d6, d6
 8010e32:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 8010e36:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 8010e3a:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8010e3e:	eea0 5b04 	vfma.f64	d5, d0, d4
 8010e42:	1940      	adds	r0, r0, r5
 8010e44:	2700      	movs	r7, #0
 8010e46:	eb17 020c 	adds.w	r2, r7, ip
 8010e4a:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 8010e4e:	eea6 7b05 	vfma.f64	d7, d6, d5
 8010e52:	2e00      	cmp	r6, #0
 8010e54:	d15f      	bne.n	8010f16 <pow+0x476>
 8010e56:	42bd      	cmp	r5, r7
 8010e58:	db13      	blt.n	8010e82 <pow+0x3e2>
 8010e5a:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 8010e5e:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 8010e62:	4610      	mov	r0, r2
 8010e64:	ec41 0b10 	vmov	d0, r0, r1
 8010e68:	eea7 0b00 	vfma.f64	d0, d7, d0
 8010e6c:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8010f28 <pow+0x488>
 8010e70:	ee20 0b07 	vmul.f64	d0, d0, d7
 8010e74:	b006      	add	sp, #24
 8010e76:	ecbd 8b0a 	vpop	{d8-d12}
 8010e7a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e7e:	f000 bb43 	b.w	8011508 <__math_check_oflow>
 8010e82:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8010e86:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 8010e8a:	4610      	mov	r0, r2
 8010e8c:	ec41 0b15 	vmov	d5, r0, r1
 8010e90:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8010e94:	ee27 6b05 	vmul.f64	d6, d7, d5
 8010e98:	ee35 7b06 	vadd.f64	d7, d5, d6
 8010e9c:	eeb0 3bc7 	vabs.f64	d3, d7
 8010ea0:	eeb4 3bc4 	vcmpe.f64	d3, d4
 8010ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ea8:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8010f30 <pow+0x490>
 8010eac:	d52a      	bpl.n	8010f04 <pow+0x464>
 8010eae:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8010eb2:	ee35 5b47 	vsub.f64	d5, d5, d7
 8010eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010eba:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 8010ebe:	ee35 6b06 	vadd.f64	d6, d5, d6
 8010ec2:	bf48      	it	mi
 8010ec4:	eeb0 4b43 	vmovmi.f64	d4, d3
 8010ec8:	ee37 3b04 	vadd.f64	d3, d7, d4
 8010ecc:	ee34 5b43 	vsub.f64	d5, d4, d3
 8010ed0:	ee35 7b07 	vadd.f64	d7, d5, d7
 8010ed4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010ed8:	ee37 7b03 	vadd.f64	d7, d7, d3
 8010edc:	ee37 7b44 	vsub.f64	d7, d7, d4
 8010ee0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ee8:	d104      	bne.n	8010ef4 <pow+0x454>
 8010eea:	4632      	mov	r2, r6
 8010eec:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8010ef0:	ec43 2b17 	vmov	d7, r2, r3
 8010ef4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010ef8:	ed9d 6b02 	vldr	d6, [sp, #8]
 8010efc:	ee26 6b00 	vmul.f64	d6, d6, d0
 8010f00:	ed8d 6b04 	vstr	d6, [sp, #16]
 8010f04:	ee27 0b00 	vmul.f64	d0, d7, d0
 8010f08:	b006      	add	sp, #24
 8010f0a:	ecbd 8b0a 	vpop	{d8-d12}
 8010f0e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010f12:	f000 baf0 	b.w	80114f6 <__math_check_uflow>
 8010f16:	ec43 2b10 	vmov	d0, r2, r3
 8010f1a:	eea7 0b00 	vfma.f64	d0, d7, d0
 8010f1e:	e628      	b.n	8010b72 <pow+0xd2>
 8010f20:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8010f38 <pow+0x498>
 8010f24:	e625      	b.n	8010b72 <pow+0xd2>
 8010f26:	bf00      	nop
 8010f28:	00000000 	.word	0x00000000
 8010f2c:	7f000000 	.word	0x7f000000
 8010f30:	00000000 	.word	0x00000000
 8010f34:	00100000 	.word	0x00100000
	...
 8010f40:	08012d08 	.word	0x08012d08
 8010f44:	00000000 	.word	0x00000000

08010f48 <atan>:
 8010f48:	b538      	push	{r3, r4, r5, lr}
 8010f4a:	eeb0 7b40 	vmov.f64	d7, d0
 8010f4e:	ee17 5a90 	vmov	r5, s15
 8010f52:	4b73      	ldr	r3, [pc, #460]	; (8011120 <atan+0x1d8>)
 8010f54:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8010f58:	429c      	cmp	r4, r3
 8010f5a:	dd13      	ble.n	8010f84 <atan+0x3c>
 8010f5c:	4b71      	ldr	r3, [pc, #452]	; (8011124 <atan+0x1dc>)
 8010f5e:	429c      	cmp	r4, r3
 8010f60:	dc03      	bgt.n	8010f6a <atan+0x22>
 8010f62:	d107      	bne.n	8010f74 <atan+0x2c>
 8010f64:	ee10 3a10 	vmov	r3, s0
 8010f68:	b123      	cbz	r3, 8010f74 <atan+0x2c>
 8010f6a:	ee37 7b07 	vadd.f64	d7, d7, d7
 8010f6e:	eeb0 0b47 	vmov.f64	d0, d7
 8010f72:	bd38      	pop	{r3, r4, r5, pc}
 8010f74:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 80110b0 <atan+0x168>
 8010f78:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 80110b8 <atan+0x170>
 8010f7c:	2d00      	cmp	r5, #0
 8010f7e:	fe36 7b07 	vselgt.f64	d7, d6, d7
 8010f82:	e7f4      	b.n	8010f6e <atan+0x26>
 8010f84:	4b68      	ldr	r3, [pc, #416]	; (8011128 <atan+0x1e0>)
 8010f86:	429c      	cmp	r4, r3
 8010f88:	dc11      	bgt.n	8010fae <atan+0x66>
 8010f8a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8010f8e:	429c      	cmp	r4, r3
 8010f90:	dc0a      	bgt.n	8010fa8 <atan+0x60>
 8010f92:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8010f96:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 80110c0 <atan+0x178>
 8010f9a:	ee30 6b06 	vadd.f64	d6, d0, d6
 8010f9e:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8010fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fa6:	dce2      	bgt.n	8010f6e <atan+0x26>
 8010fa8:	f04f 33ff 	mov.w	r3, #4294967295
 8010fac:	e013      	b.n	8010fd6 <atan+0x8e>
 8010fae:	f000 f8c5 	bl	801113c <fabs>
 8010fb2:	4b5e      	ldr	r3, [pc, #376]	; (801112c <atan+0x1e4>)
 8010fb4:	429c      	cmp	r4, r3
 8010fb6:	dc4f      	bgt.n	8011058 <atan+0x110>
 8010fb8:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8010fbc:	429c      	cmp	r4, r3
 8010fbe:	dc41      	bgt.n	8011044 <atan+0xfc>
 8010fc0:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8010fc4:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8010fc8:	2300      	movs	r3, #0
 8010fca:	eea0 6b07 	vfma.f64	d6, d0, d7
 8010fce:	ee30 0b07 	vadd.f64	d0, d0, d7
 8010fd2:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8010fd6:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 80110c8 <atan+0x180>
 8010fda:	ee27 4b07 	vmul.f64	d4, d7, d7
 8010fde:	ee24 5b04 	vmul.f64	d5, d4, d4
 8010fe2:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 80110d0 <atan+0x188>
 8010fe6:	eea5 3b06 	vfma.f64	d3, d5, d6
 8010fea:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 80110d8 <atan+0x190>
 8010fee:	eea3 6b05 	vfma.f64	d6, d3, d5
 8010ff2:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 80110e0 <atan+0x198>
 8010ff6:	eea6 3b05 	vfma.f64	d3, d6, d5
 8010ffa:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 80110e8 <atan+0x1a0>
 8010ffe:	eea3 6b05 	vfma.f64	d6, d3, d5
 8011002:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 80110f0 <atan+0x1a8>
 8011006:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 80110f8 <atan+0x1b0>
 801100a:	eea6 3b05 	vfma.f64	d3, d6, d5
 801100e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8011100 <atan+0x1b8>
 8011012:	eea5 2b06 	vfma.f64	d2, d5, d6
 8011016:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8011108 <atan+0x1c0>
 801101a:	eea2 6b05 	vfma.f64	d6, d2, d5
 801101e:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8011110 <atan+0x1c8>
 8011022:	eea6 2b05 	vfma.f64	d2, d6, d5
 8011026:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8011118 <atan+0x1d0>
 801102a:	1c5a      	adds	r2, r3, #1
 801102c:	eea2 6b05 	vfma.f64	d6, d2, d5
 8011030:	ee26 6b05 	vmul.f64	d6, d6, d5
 8011034:	eea3 6b04 	vfma.f64	d6, d3, d4
 8011038:	ee27 6b06 	vmul.f64	d6, d7, d6
 801103c:	d121      	bne.n	8011082 <atan+0x13a>
 801103e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011042:	e794      	b.n	8010f6e <atan+0x26>
 8011044:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8011048:	2301      	movs	r3, #1
 801104a:	ee30 6b47 	vsub.f64	d6, d0, d7
 801104e:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011052:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8011056:	e7be      	b.n	8010fd6 <atan+0x8e>
 8011058:	4b35      	ldr	r3, [pc, #212]	; (8011130 <atan+0x1e8>)
 801105a:	429c      	cmp	r4, r3
 801105c:	da0b      	bge.n	8011076 <atan+0x12e>
 801105e:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8011062:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8011066:	ee30 5b47 	vsub.f64	d5, d0, d7
 801106a:	eea0 6b07 	vfma.f64	d6, d0, d7
 801106e:	2302      	movs	r3, #2
 8011070:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8011074:	e7af      	b.n	8010fd6 <atan+0x8e>
 8011076:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 801107a:	2303      	movs	r3, #3
 801107c:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8011080:	e7a9      	b.n	8010fd6 <atan+0x8e>
 8011082:	4a2c      	ldr	r2, [pc, #176]	; (8011134 <atan+0x1ec>)
 8011084:	492c      	ldr	r1, [pc, #176]	; (8011138 <atan+0x1f0>)
 8011086:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801108a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 801108e:	ed93 5b00 	vldr	d5, [r3]
 8011092:	ee36 6b45 	vsub.f64	d6, d6, d5
 8011096:	ee36 7b47 	vsub.f64	d7, d6, d7
 801109a:	ed92 6b00 	vldr	d6, [r2]
 801109e:	2d00      	cmp	r5, #0
 80110a0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80110a4:	bfb8      	it	lt
 80110a6:	eeb1 7b47 	vneglt.f64	d7, d7
 80110aa:	e760      	b.n	8010f6e <atan+0x26>
 80110ac:	f3af 8000 	nop.w
 80110b0:	54442d18 	.word	0x54442d18
 80110b4:	3ff921fb 	.word	0x3ff921fb
 80110b8:	54442d18 	.word	0x54442d18
 80110bc:	bff921fb 	.word	0xbff921fb
 80110c0:	8800759c 	.word	0x8800759c
 80110c4:	7e37e43c 	.word	0x7e37e43c
 80110c8:	e322da11 	.word	0xe322da11
 80110cc:	3f90ad3a 	.word	0x3f90ad3a
 80110d0:	24760deb 	.word	0x24760deb
 80110d4:	3fa97b4b 	.word	0x3fa97b4b
 80110d8:	a0d03d51 	.word	0xa0d03d51
 80110dc:	3fb10d66 	.word	0x3fb10d66
 80110e0:	c54c206e 	.word	0xc54c206e
 80110e4:	3fb745cd 	.word	0x3fb745cd
 80110e8:	920083ff 	.word	0x920083ff
 80110ec:	3fc24924 	.word	0x3fc24924
 80110f0:	5555550d 	.word	0x5555550d
 80110f4:	3fd55555 	.word	0x3fd55555
 80110f8:	52defd9a 	.word	0x52defd9a
 80110fc:	bfadde2d 	.word	0xbfadde2d
 8011100:	2c6a6c2f 	.word	0x2c6a6c2f
 8011104:	bfa2b444 	.word	0xbfa2b444
 8011108:	af749a6d 	.word	0xaf749a6d
 801110c:	bfb3b0f2 	.word	0xbfb3b0f2
 8011110:	fe231671 	.word	0xfe231671
 8011114:	bfbc71c6 	.word	0xbfbc71c6
 8011118:	9998ebc4 	.word	0x9998ebc4
 801111c:	bfc99999 	.word	0xbfc99999
 8011120:	440fffff 	.word	0x440fffff
 8011124:	7ff00000 	.word	0x7ff00000
 8011128:	3fdbffff 	.word	0x3fdbffff
 801112c:	3ff2ffff 	.word	0x3ff2ffff
 8011130:	40038000 	.word	0x40038000
 8011134:	08012cc0 	.word	0x08012cc0
 8011138:	08012ce0 	.word	0x08012ce0

0801113c <fabs>:
 801113c:	ec51 0b10 	vmov	r0, r1, d0
 8011140:	ee10 2a10 	vmov	r2, s0
 8011144:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011148:	ec43 2b10 	vmov	d0, r2, r3
 801114c:	4770      	bx	lr
	...

08011150 <acos>:
 8011150:	b508      	push	{r3, lr}
 8011152:	ed2d 8b04 	vpush	{d8-d9}
 8011156:	eeb0 8b40 	vmov.f64	d8, d0
 801115a:	f000 f845 	bl	80111e8 <__ieee754_acos>
 801115e:	eeb4 8b48 	vcmp.f64	d8, d8
 8011162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011166:	eeb0 9b40 	vmov.f64	d9, d0
 801116a:	d615      	bvs.n	8011198 <acos+0x48>
 801116c:	eeb0 0b48 	vmov.f64	d0, d8
 8011170:	f7ff ffe4 	bl	801113c <fabs>
 8011174:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8011178:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801117c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011180:	dd0a      	ble.n	8011198 <acos+0x48>
 8011182:	f000 f9e5 	bl	8011550 <__errno>
 8011186:	ecbd 8b04 	vpop	{d8-d9}
 801118a:	2321      	movs	r3, #33	; 0x21
 801118c:	6003      	str	r3, [r0, #0]
 801118e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8011192:	4804      	ldr	r0, [pc, #16]	; (80111a4 <acos+0x54>)
 8011194:	f000 b9cc 	b.w	8011530 <nan>
 8011198:	eeb0 0b49 	vmov.f64	d0, d9
 801119c:	ecbd 8b04 	vpop	{d8-d9}
 80111a0:	bd08      	pop	{r3, pc}
 80111a2:	bf00      	nop
 80111a4:	08012d00 	.word	0x08012d00

080111a8 <sqrt>:
 80111a8:	b508      	push	{r3, lr}
 80111aa:	ed2d 8b04 	vpush	{d8-d9}
 80111ae:	eeb0 8b40 	vmov.f64	d8, d0
 80111b2:	f000 f947 	bl	8011444 <__ieee754_sqrt>
 80111b6:	eeb4 8b48 	vcmp.f64	d8, d8
 80111ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111be:	d60c      	bvs.n	80111da <sqrt+0x32>
 80111c0:	ed9f 9b07 	vldr	d9, [pc, #28]	; 80111e0 <sqrt+0x38>
 80111c4:	eeb4 8bc9 	vcmpe.f64	d8, d9
 80111c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111cc:	d505      	bpl.n	80111da <sqrt+0x32>
 80111ce:	f000 f9bf 	bl	8011550 <__errno>
 80111d2:	ee89 0b09 	vdiv.f64	d0, d9, d9
 80111d6:	2321      	movs	r3, #33	; 0x21
 80111d8:	6003      	str	r3, [r0, #0]
 80111da:	ecbd 8b04 	vpop	{d8-d9}
 80111de:	bd08      	pop	{r3, pc}
	...

080111e8 <__ieee754_acos>:
 80111e8:	b500      	push	{lr}
 80111ea:	ee10 2a90 	vmov	r2, s1
 80111ee:	ed2d 8b10 	vpush	{d8-d15}
 80111f2:	4991      	ldr	r1, [pc, #580]	; (8011438 <__ieee754_acos+0x250>)
 80111f4:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 80111f8:	428b      	cmp	r3, r1
 80111fa:	b087      	sub	sp, #28
 80111fc:	dd18      	ble.n	8011230 <__ieee754_acos+0x48>
 80111fe:	ee10 1a10 	vmov	r1, s0
 8011202:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8011206:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801120a:	430b      	orrs	r3, r1
 801120c:	d10b      	bne.n	8011226 <__ieee754_acos+0x3e>
 801120e:	ed9f 0b6c 	vldr	d0, [pc, #432]	; 80113c0 <__ieee754_acos+0x1d8>
 8011212:	ed9f 7b6d 	vldr	d7, [pc, #436]	; 80113c8 <__ieee754_acos+0x1e0>
 8011216:	2a00      	cmp	r2, #0
 8011218:	fe30 0b07 	vselgt.f64	d0, d0, d7
 801121c:	b007      	add	sp, #28
 801121e:	ecbd 8b10 	vpop	{d8-d15}
 8011222:	f85d fb04 	ldr.w	pc, [sp], #4
 8011226:	ee30 8b40 	vsub.f64	d8, d0, d0
 801122a:	ee88 0b08 	vdiv.f64	d0, d8, d8
 801122e:	e7f5      	b.n	801121c <__ieee754_acos+0x34>
 8011230:	4982      	ldr	r1, [pc, #520]	; (801143c <__ieee754_acos+0x254>)
 8011232:	428b      	cmp	r3, r1
 8011234:	dc3c      	bgt.n	80112b0 <__ieee754_acos+0xc8>
 8011236:	4a82      	ldr	r2, [pc, #520]	; (8011440 <__ieee754_acos+0x258>)
 8011238:	4293      	cmp	r3, r2
 801123a:	ed9f 7b65 	vldr	d7, [pc, #404]	; 80113d0 <__ieee754_acos+0x1e8>
 801123e:	f340 80bc 	ble.w	80113ba <__ieee754_acos+0x1d2>
 8011242:	ee20 6b00 	vmul.f64	d6, d0, d0
 8011246:	ed9f 4b64 	vldr	d4, [pc, #400]	; 80113d8 <__ieee754_acos+0x1f0>
 801124a:	ed9f 5b65 	vldr	d5, [pc, #404]	; 80113e0 <__ieee754_acos+0x1f8>
 801124e:	eea6 5b04 	vfma.f64	d5, d6, d4
 8011252:	ed9f 4b65 	vldr	d4, [pc, #404]	; 80113e8 <__ieee754_acos+0x200>
 8011256:	eea5 4b06 	vfma.f64	d4, d5, d6
 801125a:	ed9f 5b65 	vldr	d5, [pc, #404]	; 80113f0 <__ieee754_acos+0x208>
 801125e:	eea4 5b06 	vfma.f64	d5, d4, d6
 8011262:	ed9f 4b65 	vldr	d4, [pc, #404]	; 80113f8 <__ieee754_acos+0x210>
 8011266:	eea5 4b06 	vfma.f64	d4, d5, d6
 801126a:	ed9f 5b65 	vldr	d5, [pc, #404]	; 8011400 <__ieee754_acos+0x218>
 801126e:	ed9f 3b66 	vldr	d3, [pc, #408]	; 8011408 <__ieee754_acos+0x220>
 8011272:	eea4 5b06 	vfma.f64	d5, d4, d6
 8011276:	ee25 5b06 	vmul.f64	d5, d5, d6
 801127a:	ed9f 4b65 	vldr	d4, [pc, #404]	; 8011410 <__ieee754_acos+0x228>
 801127e:	eea6 3b04 	vfma.f64	d3, d6, d4
 8011282:	ed9f 4b65 	vldr	d4, [pc, #404]	; 8011418 <__ieee754_acos+0x230>
 8011286:	ed9f 8b66 	vldr	d8, [pc, #408]	; 8011420 <__ieee754_acos+0x238>
 801128a:	eea3 4b06 	vfma.f64	d4, d3, d6
 801128e:	ed9f 3b66 	vldr	d3, [pc, #408]	; 8011428 <__ieee754_acos+0x240>
 8011292:	eea4 3b06 	vfma.f64	d3, d4, d6
 8011296:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 801129a:	eea3 4b06 	vfma.f64	d4, d3, d6
 801129e:	ee85 6b04 	vdiv.f64	d6, d5, d4
 80112a2:	eea0 8b46 	vfms.f64	d8, d0, d6
 80112a6:	ee30 0b48 	vsub.f64	d0, d0, d8
 80112aa:	ee37 0b40 	vsub.f64	d0, d7, d0
 80112ae:	e7b5      	b.n	801121c <__ieee754_acos+0x34>
 80112b0:	2a00      	cmp	r2, #0
 80112b2:	ed9f eb49 	vldr	d14, [pc, #292]	; 80113d8 <__ieee754_acos+0x1f0>
 80112b6:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
 80112ba:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 80112be:	ed9f db48 	vldr	d13, [pc, #288]	; 80113e0 <__ieee754_acos+0x1f8>
 80112c2:	ed9f cb49 	vldr	d12, [pc, #292]	; 80113e8 <__ieee754_acos+0x200>
 80112c6:	ed9f bb4a 	vldr	d11, [pc, #296]	; 80113f0 <__ieee754_acos+0x208>
 80112ca:	ed9f ab4b 	vldr	d10, [pc, #300]	; 80113f8 <__ieee754_acos+0x210>
 80112ce:	ed9f fb4c 	vldr	d15, [pc, #304]	; 8011400 <__ieee754_acos+0x218>
 80112d2:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 8011408 <__ieee754_acos+0x220>
 80112d6:	ed9f 2b50 	vldr	d2, [pc, #320]	; 8011418 <__ieee754_acos+0x230>
 80112da:	ed9f 1b53 	vldr	d1, [pc, #332]	; 8011428 <__ieee754_acos+0x240>
 80112de:	da2a      	bge.n	8011336 <__ieee754_acos+0x14e>
 80112e0:	ee30 0b09 	vadd.f64	d0, d0, d9
 80112e4:	ee20 0b08 	vmul.f64	d0, d0, d8
 80112e8:	ed9f 7b49 	vldr	d7, [pc, #292]	; 8011410 <__ieee754_acos+0x228>
 80112ec:	eea0 db0e 	vfma.f64	d13, d0, d14
 80112f0:	eead cb00 	vfma.f64	d12, d13, d0
 80112f4:	eea0 3b07 	vfma.f64	d3, d0, d7
 80112f8:	eeac bb00 	vfma.f64	d11, d12, d0
 80112fc:	eea3 2b00 	vfma.f64	d2, d3, d0
 8011300:	eeab ab00 	vfma.f64	d10, d11, d0
 8011304:	eea2 1b00 	vfma.f64	d1, d2, d0
 8011308:	eeaa fb00 	vfma.f64	d15, d10, d0
 801130c:	eea1 9b00 	vfma.f64	d9, d1, d0
 8011310:	ee2f fb00 	vmul.f64	d15, d15, d0
 8011314:	f000 f896 	bl	8011444 <__ieee754_sqrt>
 8011318:	ee8f 6b09 	vdiv.f64	d6, d15, d9
 801131c:	ed9f 7b44 	vldr	d7, [pc, #272]	; 8011430 <__ieee754_acos+0x248>
 8011320:	eea0 7b06 	vfma.f64	d7, d0, d6
 8011324:	ee37 7b00 	vadd.f64	d7, d7, d0
 8011328:	ed9f 0b27 	vldr	d0, [pc, #156]	; 80113c8 <__ieee754_acos+0x1e0>
 801132c:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 8011330:	eea7 0b46 	vfms.f64	d0, d7, d6
 8011334:	e772      	b.n	801121c <__ieee754_acos+0x34>
 8011336:	ee39 0b40 	vsub.f64	d0, d9, d0
 801133a:	ee20 8b08 	vmul.f64	d8, d0, d8
 801133e:	eeb0 0b48 	vmov.f64	d0, d8
 8011342:	ed8d 1b04 	vstr	d1, [sp, #16]
 8011346:	ed8d 2b02 	vstr	d2, [sp, #8]
 801134a:	ed8d 3b00 	vstr	d3, [sp]
 801134e:	f000 f879 	bl	8011444 <__ieee754_sqrt>
 8011352:	eeb0 5b48 	vmov.f64	d5, d8
 8011356:	eea8 db0e 	vfma.f64	d13, d8, d14
 801135a:	ec53 2b10 	vmov	r2, r3, d0
 801135e:	eead cb08 	vfma.f64	d12, d13, d8
 8011362:	2200      	movs	r2, #0
 8011364:	ec43 2b17 	vmov	d7, r2, r3
 8011368:	eeac bb08 	vfma.f64	d11, d12, d8
 801136c:	ee30 6b07 	vadd.f64	d6, d0, d7
 8011370:	eea7 5b47 	vfms.f64	d5, d7, d7
 8011374:	ed9d 3b00 	vldr	d3, [sp]
 8011378:	ee85 4b06 	vdiv.f64	d4, d5, d6
 801137c:	eeab ab08 	vfma.f64	d10, d11, d8
 8011380:	ed9f 6b23 	vldr	d6, [pc, #140]	; 8011410 <__ieee754_acos+0x228>
 8011384:	eeaa fb08 	vfma.f64	d15, d10, d8
 8011388:	ee2f fb08 	vmul.f64	d15, d15, d8
 801138c:	ed9d 2b02 	vldr	d2, [sp, #8]
 8011390:	eea8 3b06 	vfma.f64	d3, d8, d6
 8011394:	eeb0 6b44 	vmov.f64	d6, d4
 8011398:	ed9d 1b04 	vldr	d1, [sp, #16]
 801139c:	eea3 2b08 	vfma.f64	d2, d3, d8
 80113a0:	eea2 1b08 	vfma.f64	d1, d2, d8
 80113a4:	eea1 9b08 	vfma.f64	d9, d1, d8
 80113a8:	ee8f 5b09 	vdiv.f64	d5, d15, d9
 80113ac:	eea0 6b05 	vfma.f64	d6, d0, d5
 80113b0:	ee37 0b06 	vadd.f64	d0, d7, d6
 80113b4:	ee30 0b00 	vadd.f64	d0, d0, d0
 80113b8:	e730      	b.n	801121c <__ieee754_acos+0x34>
 80113ba:	eeb0 0b47 	vmov.f64	d0, d7
 80113be:	e72d      	b.n	801121c <__ieee754_acos+0x34>
	...
 80113c8:	54442d18 	.word	0x54442d18
 80113cc:	400921fb 	.word	0x400921fb
 80113d0:	54442d18 	.word	0x54442d18
 80113d4:	3ff921fb 	.word	0x3ff921fb
 80113d8:	0dfdf709 	.word	0x0dfdf709
 80113dc:	3f023de1 	.word	0x3f023de1
 80113e0:	7501b288 	.word	0x7501b288
 80113e4:	3f49efe0 	.word	0x3f49efe0
 80113e8:	b5688f3b 	.word	0xb5688f3b
 80113ec:	bfa48228 	.word	0xbfa48228
 80113f0:	0e884455 	.word	0x0e884455
 80113f4:	3fc9c155 	.word	0x3fc9c155
 80113f8:	03eb6f7d 	.word	0x03eb6f7d
 80113fc:	bfd4d612 	.word	0xbfd4d612
 8011400:	55555555 	.word	0x55555555
 8011404:	3fc55555 	.word	0x3fc55555
 8011408:	1b8d0159 	.word	0x1b8d0159
 801140c:	bfe6066c 	.word	0xbfe6066c
 8011410:	b12e9282 	.word	0xb12e9282
 8011414:	3fb3b8c5 	.word	0x3fb3b8c5
 8011418:	9c598ac8 	.word	0x9c598ac8
 801141c:	40002ae5 	.word	0x40002ae5
 8011420:	33145c07 	.word	0x33145c07
 8011424:	3c91a626 	.word	0x3c91a626
 8011428:	1c8a2d4b 	.word	0x1c8a2d4b
 801142c:	c0033a27 	.word	0xc0033a27
 8011430:	33145c07 	.word	0x33145c07
 8011434:	bc91a626 	.word	0xbc91a626
 8011438:	3fefffff 	.word	0x3fefffff
 801143c:	3fdfffff 	.word	0x3fdfffff
 8011440:	3c600000 	.word	0x3c600000

08011444 <__ieee754_sqrt>:
 8011444:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8011448:	4770      	bx	lr

0801144a <with_errno>:
 801144a:	b513      	push	{r0, r1, r4, lr}
 801144c:	4604      	mov	r4, r0
 801144e:	ed8d 0b00 	vstr	d0, [sp]
 8011452:	f000 f87d 	bl	8011550 <__errno>
 8011456:	ed9d 0b00 	vldr	d0, [sp]
 801145a:	6004      	str	r4, [r0, #0]
 801145c:	b002      	add	sp, #8
 801145e:	bd10      	pop	{r4, pc}

08011460 <xflow>:
 8011460:	b082      	sub	sp, #8
 8011462:	b158      	cbz	r0, 801147c <xflow+0x1c>
 8011464:	eeb1 7b40 	vneg.f64	d7, d0
 8011468:	ed8d 7b00 	vstr	d7, [sp]
 801146c:	ed9d 7b00 	vldr	d7, [sp]
 8011470:	2022      	movs	r0, #34	; 0x22
 8011472:	ee20 0b07 	vmul.f64	d0, d0, d7
 8011476:	b002      	add	sp, #8
 8011478:	f7ff bfe7 	b.w	801144a <with_errno>
 801147c:	eeb0 7b40 	vmov.f64	d7, d0
 8011480:	e7f2      	b.n	8011468 <xflow+0x8>
 8011482:	0000      	movs	r0, r0
 8011484:	0000      	movs	r0, r0
	...

08011488 <__math_uflow>:
 8011488:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011490 <__math_uflow+0x8>
 801148c:	f7ff bfe8 	b.w	8011460 <xflow>
 8011490:	00000000 	.word	0x00000000
 8011494:	10000000 	.word	0x10000000

08011498 <__math_oflow>:
 8011498:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80114a0 <__math_oflow+0x8>
 801149c:	f7ff bfe0 	b.w	8011460 <xflow>
 80114a0:	00000000 	.word	0x00000000
 80114a4:	70000000 	.word	0x70000000

080114a8 <__math_divzero>:
 80114a8:	b082      	sub	sp, #8
 80114aa:	2800      	cmp	r0, #0
 80114ac:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80114b0:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 80114b4:	fe06 7b07 	vseleq.f64	d7, d6, d7
 80114b8:	ed8d 7b00 	vstr	d7, [sp]
 80114bc:	ed9d 0b00 	vldr	d0, [sp]
 80114c0:	ed9f 7b03 	vldr	d7, [pc, #12]	; 80114d0 <__math_divzero+0x28>
 80114c4:	2022      	movs	r0, #34	; 0x22
 80114c6:	ee80 0b07 	vdiv.f64	d0, d0, d7
 80114ca:	b002      	add	sp, #8
 80114cc:	f7ff bfbd 	b.w	801144a <with_errno>
	...

080114d8 <__math_invalid>:
 80114d8:	eeb0 7b40 	vmov.f64	d7, d0
 80114dc:	eeb4 7b47 	vcmp.f64	d7, d7
 80114e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114e4:	ee30 6b40 	vsub.f64	d6, d0, d0
 80114e8:	ee86 0b06 	vdiv.f64	d0, d6, d6
 80114ec:	d602      	bvs.n	80114f4 <__math_invalid+0x1c>
 80114ee:	2021      	movs	r0, #33	; 0x21
 80114f0:	f7ff bfab 	b.w	801144a <with_errno>
 80114f4:	4770      	bx	lr

080114f6 <__math_check_uflow>:
 80114f6:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80114fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114fe:	d102      	bne.n	8011506 <__math_check_uflow+0x10>
 8011500:	2022      	movs	r0, #34	; 0x22
 8011502:	f7ff bfa2 	b.w	801144a <with_errno>
 8011506:	4770      	bx	lr

08011508 <__math_check_oflow>:
 8011508:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8011528 <__math_check_oflow+0x20>
 801150c:	eeb0 7bc0 	vabs.f64	d7, d0
 8011510:	eeb4 7b46 	vcmp.f64	d7, d6
 8011514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011518:	dd02      	ble.n	8011520 <__math_check_oflow+0x18>
 801151a:	2022      	movs	r0, #34	; 0x22
 801151c:	f7ff bf95 	b.w	801144a <with_errno>
 8011520:	4770      	bx	lr
 8011522:	bf00      	nop
 8011524:	f3af 8000 	nop.w
 8011528:	ffffffff 	.word	0xffffffff
 801152c:	7fefffff 	.word	0x7fefffff

08011530 <nan>:
 8011530:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011538 <nan+0x8>
 8011534:	4770      	bx	lr
 8011536:	bf00      	nop
 8011538:	00000000 	.word	0x00000000
 801153c:	7ff80000 	.word	0x7ff80000

08011540 <abort>:
 8011540:	b508      	push	{r3, lr}
 8011542:	2006      	movs	r0, #6
 8011544:	f000 f874 	bl	8011630 <raise>
 8011548:	2001      	movs	r0, #1
 801154a:	f7f5 f8db 	bl	8006704 <_exit>
	...

08011550 <__errno>:
 8011550:	4b01      	ldr	r3, [pc, #4]	; (8011558 <__errno+0x8>)
 8011552:	6818      	ldr	r0, [r3, #0]
 8011554:	4770      	bx	lr
 8011556:	bf00      	nop
 8011558:	24000018 	.word	0x24000018

0801155c <__libc_init_array>:
 801155c:	b570      	push	{r4, r5, r6, lr}
 801155e:	4d0d      	ldr	r5, [pc, #52]	; (8011594 <__libc_init_array+0x38>)
 8011560:	4c0d      	ldr	r4, [pc, #52]	; (8011598 <__libc_init_array+0x3c>)
 8011562:	1b64      	subs	r4, r4, r5
 8011564:	10a4      	asrs	r4, r4, #2
 8011566:	2600      	movs	r6, #0
 8011568:	42a6      	cmp	r6, r4
 801156a:	d109      	bne.n	8011580 <__libc_init_array+0x24>
 801156c:	4d0b      	ldr	r5, [pc, #44]	; (801159c <__libc_init_array+0x40>)
 801156e:	4c0c      	ldr	r4, [pc, #48]	; (80115a0 <__libc_init_array+0x44>)
 8011570:	f000 f9b0 	bl	80118d4 <_init>
 8011574:	1b64      	subs	r4, r4, r5
 8011576:	10a4      	asrs	r4, r4, #2
 8011578:	2600      	movs	r6, #0
 801157a:	42a6      	cmp	r6, r4
 801157c:	d105      	bne.n	801158a <__libc_init_array+0x2e>
 801157e:	bd70      	pop	{r4, r5, r6, pc}
 8011580:	f855 3b04 	ldr.w	r3, [r5], #4
 8011584:	4798      	blx	r3
 8011586:	3601      	adds	r6, #1
 8011588:	e7ee      	b.n	8011568 <__libc_init_array+0xc>
 801158a:	f855 3b04 	ldr.w	r3, [r5], #4
 801158e:	4798      	blx	r3
 8011590:	3601      	adds	r6, #1
 8011592:	e7f2      	b.n	801157a <__libc_init_array+0x1e>
 8011594:	08013580 	.word	0x08013580
 8011598:	08013580 	.word	0x08013580
 801159c:	08013580 	.word	0x08013580
 80115a0:	08013594 	.word	0x08013594

080115a4 <memcpy>:
 80115a4:	440a      	add	r2, r1
 80115a6:	4291      	cmp	r1, r2
 80115a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80115ac:	d100      	bne.n	80115b0 <memcpy+0xc>
 80115ae:	4770      	bx	lr
 80115b0:	b510      	push	{r4, lr}
 80115b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80115b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80115ba:	4291      	cmp	r1, r2
 80115bc:	d1f9      	bne.n	80115b2 <memcpy+0xe>
 80115be:	bd10      	pop	{r4, pc}

080115c0 <memset>:
 80115c0:	4402      	add	r2, r0
 80115c2:	4603      	mov	r3, r0
 80115c4:	4293      	cmp	r3, r2
 80115c6:	d100      	bne.n	80115ca <memset+0xa>
 80115c8:	4770      	bx	lr
 80115ca:	f803 1b01 	strb.w	r1, [r3], #1
 80115ce:	e7f9      	b.n	80115c4 <memset+0x4>

080115d0 <realloc>:
 80115d0:	4b02      	ldr	r3, [pc, #8]	; (80115dc <realloc+0xc>)
 80115d2:	460a      	mov	r2, r1
 80115d4:	4601      	mov	r1, r0
 80115d6:	6818      	ldr	r0, [r3, #0]
 80115d8:	f000 b8da 	b.w	8011790 <_realloc_r>
 80115dc:	24000018 	.word	0x24000018

080115e0 <_raise_r>:
 80115e0:	291f      	cmp	r1, #31
 80115e2:	b538      	push	{r3, r4, r5, lr}
 80115e4:	4604      	mov	r4, r0
 80115e6:	460d      	mov	r5, r1
 80115e8:	d904      	bls.n	80115f4 <_raise_r+0x14>
 80115ea:	2316      	movs	r3, #22
 80115ec:	6003      	str	r3, [r0, #0]
 80115ee:	f04f 30ff 	mov.w	r0, #4294967295
 80115f2:	bd38      	pop	{r3, r4, r5, pc}
 80115f4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80115f6:	b112      	cbz	r2, 80115fe <_raise_r+0x1e>
 80115f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80115fc:	b94b      	cbnz	r3, 8011612 <_raise_r+0x32>
 80115fe:	4620      	mov	r0, r4
 8011600:	f000 f830 	bl	8011664 <_getpid_r>
 8011604:	462a      	mov	r2, r5
 8011606:	4601      	mov	r1, r0
 8011608:	4620      	mov	r0, r4
 801160a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801160e:	f000 b817 	b.w	8011640 <_kill_r>
 8011612:	2b01      	cmp	r3, #1
 8011614:	d00a      	beq.n	801162c <_raise_r+0x4c>
 8011616:	1c59      	adds	r1, r3, #1
 8011618:	d103      	bne.n	8011622 <_raise_r+0x42>
 801161a:	2316      	movs	r3, #22
 801161c:	6003      	str	r3, [r0, #0]
 801161e:	2001      	movs	r0, #1
 8011620:	e7e7      	b.n	80115f2 <_raise_r+0x12>
 8011622:	2400      	movs	r4, #0
 8011624:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011628:	4628      	mov	r0, r5
 801162a:	4798      	blx	r3
 801162c:	2000      	movs	r0, #0
 801162e:	e7e0      	b.n	80115f2 <_raise_r+0x12>

08011630 <raise>:
 8011630:	4b02      	ldr	r3, [pc, #8]	; (801163c <raise+0xc>)
 8011632:	4601      	mov	r1, r0
 8011634:	6818      	ldr	r0, [r3, #0]
 8011636:	f7ff bfd3 	b.w	80115e0 <_raise_r>
 801163a:	bf00      	nop
 801163c:	24000018 	.word	0x24000018

08011640 <_kill_r>:
 8011640:	b538      	push	{r3, r4, r5, lr}
 8011642:	4d07      	ldr	r5, [pc, #28]	; (8011660 <_kill_r+0x20>)
 8011644:	2300      	movs	r3, #0
 8011646:	4604      	mov	r4, r0
 8011648:	4608      	mov	r0, r1
 801164a:	4611      	mov	r1, r2
 801164c:	602b      	str	r3, [r5, #0]
 801164e:	f7f5 f849 	bl	80066e4 <_kill>
 8011652:	1c43      	adds	r3, r0, #1
 8011654:	d102      	bne.n	801165c <_kill_r+0x1c>
 8011656:	682b      	ldr	r3, [r5, #0]
 8011658:	b103      	cbz	r3, 801165c <_kill_r+0x1c>
 801165a:	6023      	str	r3, [r4, #0]
 801165c:	bd38      	pop	{r3, r4, r5, pc}
 801165e:	bf00      	nop
 8011660:	24002344 	.word	0x24002344

08011664 <_getpid_r>:
 8011664:	f7f5 b836 	b.w	80066d4 <_getpid>

08011668 <sbrk_aligned>:
 8011668:	b570      	push	{r4, r5, r6, lr}
 801166a:	4e0e      	ldr	r6, [pc, #56]	; (80116a4 <sbrk_aligned+0x3c>)
 801166c:	460c      	mov	r4, r1
 801166e:	6831      	ldr	r1, [r6, #0]
 8011670:	4605      	mov	r5, r0
 8011672:	b911      	cbnz	r1, 801167a <sbrk_aligned+0x12>
 8011674:	f000 f8bc 	bl	80117f0 <_sbrk_r>
 8011678:	6030      	str	r0, [r6, #0]
 801167a:	4621      	mov	r1, r4
 801167c:	4628      	mov	r0, r5
 801167e:	f000 f8b7 	bl	80117f0 <_sbrk_r>
 8011682:	1c43      	adds	r3, r0, #1
 8011684:	d00a      	beq.n	801169c <sbrk_aligned+0x34>
 8011686:	1cc4      	adds	r4, r0, #3
 8011688:	f024 0403 	bic.w	r4, r4, #3
 801168c:	42a0      	cmp	r0, r4
 801168e:	d007      	beq.n	80116a0 <sbrk_aligned+0x38>
 8011690:	1a21      	subs	r1, r4, r0
 8011692:	4628      	mov	r0, r5
 8011694:	f000 f8ac 	bl	80117f0 <_sbrk_r>
 8011698:	3001      	adds	r0, #1
 801169a:	d101      	bne.n	80116a0 <sbrk_aligned+0x38>
 801169c:	f04f 34ff 	mov.w	r4, #4294967295
 80116a0:	4620      	mov	r0, r4
 80116a2:	bd70      	pop	{r4, r5, r6, pc}
 80116a4:	24002340 	.word	0x24002340

080116a8 <_malloc_r>:
 80116a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80116ac:	1ccd      	adds	r5, r1, #3
 80116ae:	f025 0503 	bic.w	r5, r5, #3
 80116b2:	3508      	adds	r5, #8
 80116b4:	2d0c      	cmp	r5, #12
 80116b6:	bf38      	it	cc
 80116b8:	250c      	movcc	r5, #12
 80116ba:	2d00      	cmp	r5, #0
 80116bc:	4607      	mov	r7, r0
 80116be:	db01      	blt.n	80116c4 <_malloc_r+0x1c>
 80116c0:	42a9      	cmp	r1, r5
 80116c2:	d905      	bls.n	80116d0 <_malloc_r+0x28>
 80116c4:	230c      	movs	r3, #12
 80116c6:	603b      	str	r3, [r7, #0]
 80116c8:	2600      	movs	r6, #0
 80116ca:	4630      	mov	r0, r6
 80116cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116d0:	4e2e      	ldr	r6, [pc, #184]	; (801178c <_malloc_r+0xe4>)
 80116d2:	f000 f89d 	bl	8011810 <__malloc_lock>
 80116d6:	6833      	ldr	r3, [r6, #0]
 80116d8:	461c      	mov	r4, r3
 80116da:	bb34      	cbnz	r4, 801172a <_malloc_r+0x82>
 80116dc:	4629      	mov	r1, r5
 80116de:	4638      	mov	r0, r7
 80116e0:	f7ff ffc2 	bl	8011668 <sbrk_aligned>
 80116e4:	1c43      	adds	r3, r0, #1
 80116e6:	4604      	mov	r4, r0
 80116e8:	d14d      	bne.n	8011786 <_malloc_r+0xde>
 80116ea:	6834      	ldr	r4, [r6, #0]
 80116ec:	4626      	mov	r6, r4
 80116ee:	2e00      	cmp	r6, #0
 80116f0:	d140      	bne.n	8011774 <_malloc_r+0xcc>
 80116f2:	6823      	ldr	r3, [r4, #0]
 80116f4:	4631      	mov	r1, r6
 80116f6:	4638      	mov	r0, r7
 80116f8:	eb04 0803 	add.w	r8, r4, r3
 80116fc:	f000 f878 	bl	80117f0 <_sbrk_r>
 8011700:	4580      	cmp	r8, r0
 8011702:	d13a      	bne.n	801177a <_malloc_r+0xd2>
 8011704:	6821      	ldr	r1, [r4, #0]
 8011706:	3503      	adds	r5, #3
 8011708:	1a6d      	subs	r5, r5, r1
 801170a:	f025 0503 	bic.w	r5, r5, #3
 801170e:	3508      	adds	r5, #8
 8011710:	2d0c      	cmp	r5, #12
 8011712:	bf38      	it	cc
 8011714:	250c      	movcc	r5, #12
 8011716:	4629      	mov	r1, r5
 8011718:	4638      	mov	r0, r7
 801171a:	f7ff ffa5 	bl	8011668 <sbrk_aligned>
 801171e:	3001      	adds	r0, #1
 8011720:	d02b      	beq.n	801177a <_malloc_r+0xd2>
 8011722:	6823      	ldr	r3, [r4, #0]
 8011724:	442b      	add	r3, r5
 8011726:	6023      	str	r3, [r4, #0]
 8011728:	e00e      	b.n	8011748 <_malloc_r+0xa0>
 801172a:	6822      	ldr	r2, [r4, #0]
 801172c:	1b52      	subs	r2, r2, r5
 801172e:	d41e      	bmi.n	801176e <_malloc_r+0xc6>
 8011730:	2a0b      	cmp	r2, #11
 8011732:	d916      	bls.n	8011762 <_malloc_r+0xba>
 8011734:	1961      	adds	r1, r4, r5
 8011736:	42a3      	cmp	r3, r4
 8011738:	6025      	str	r5, [r4, #0]
 801173a:	bf18      	it	ne
 801173c:	6059      	strne	r1, [r3, #4]
 801173e:	6863      	ldr	r3, [r4, #4]
 8011740:	bf08      	it	eq
 8011742:	6031      	streq	r1, [r6, #0]
 8011744:	5162      	str	r2, [r4, r5]
 8011746:	604b      	str	r3, [r1, #4]
 8011748:	4638      	mov	r0, r7
 801174a:	f104 060b 	add.w	r6, r4, #11
 801174e:	f000 f865 	bl	801181c <__malloc_unlock>
 8011752:	f026 0607 	bic.w	r6, r6, #7
 8011756:	1d23      	adds	r3, r4, #4
 8011758:	1af2      	subs	r2, r6, r3
 801175a:	d0b6      	beq.n	80116ca <_malloc_r+0x22>
 801175c:	1b9b      	subs	r3, r3, r6
 801175e:	50a3      	str	r3, [r4, r2]
 8011760:	e7b3      	b.n	80116ca <_malloc_r+0x22>
 8011762:	6862      	ldr	r2, [r4, #4]
 8011764:	42a3      	cmp	r3, r4
 8011766:	bf0c      	ite	eq
 8011768:	6032      	streq	r2, [r6, #0]
 801176a:	605a      	strne	r2, [r3, #4]
 801176c:	e7ec      	b.n	8011748 <_malloc_r+0xa0>
 801176e:	4623      	mov	r3, r4
 8011770:	6864      	ldr	r4, [r4, #4]
 8011772:	e7b2      	b.n	80116da <_malloc_r+0x32>
 8011774:	4634      	mov	r4, r6
 8011776:	6876      	ldr	r6, [r6, #4]
 8011778:	e7b9      	b.n	80116ee <_malloc_r+0x46>
 801177a:	230c      	movs	r3, #12
 801177c:	603b      	str	r3, [r7, #0]
 801177e:	4638      	mov	r0, r7
 8011780:	f000 f84c 	bl	801181c <__malloc_unlock>
 8011784:	e7a1      	b.n	80116ca <_malloc_r+0x22>
 8011786:	6025      	str	r5, [r4, #0]
 8011788:	e7de      	b.n	8011748 <_malloc_r+0xa0>
 801178a:	bf00      	nop
 801178c:	2400233c 	.word	0x2400233c

08011790 <_realloc_r>:
 8011790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011794:	4680      	mov	r8, r0
 8011796:	4614      	mov	r4, r2
 8011798:	460e      	mov	r6, r1
 801179a:	b921      	cbnz	r1, 80117a6 <_realloc_r+0x16>
 801179c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80117a0:	4611      	mov	r1, r2
 80117a2:	f7ff bf81 	b.w	80116a8 <_malloc_r>
 80117a6:	b92a      	cbnz	r2, 80117b4 <_realloc_r+0x24>
 80117a8:	f000 f83e 	bl	8011828 <_free_r>
 80117ac:	4625      	mov	r5, r4
 80117ae:	4628      	mov	r0, r5
 80117b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80117b4:	f000 f884 	bl	80118c0 <_malloc_usable_size_r>
 80117b8:	4284      	cmp	r4, r0
 80117ba:	4607      	mov	r7, r0
 80117bc:	d802      	bhi.n	80117c4 <_realloc_r+0x34>
 80117be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80117c2:	d812      	bhi.n	80117ea <_realloc_r+0x5a>
 80117c4:	4621      	mov	r1, r4
 80117c6:	4640      	mov	r0, r8
 80117c8:	f7ff ff6e 	bl	80116a8 <_malloc_r>
 80117cc:	4605      	mov	r5, r0
 80117ce:	2800      	cmp	r0, #0
 80117d0:	d0ed      	beq.n	80117ae <_realloc_r+0x1e>
 80117d2:	42bc      	cmp	r4, r7
 80117d4:	4622      	mov	r2, r4
 80117d6:	4631      	mov	r1, r6
 80117d8:	bf28      	it	cs
 80117da:	463a      	movcs	r2, r7
 80117dc:	f7ff fee2 	bl	80115a4 <memcpy>
 80117e0:	4631      	mov	r1, r6
 80117e2:	4640      	mov	r0, r8
 80117e4:	f000 f820 	bl	8011828 <_free_r>
 80117e8:	e7e1      	b.n	80117ae <_realloc_r+0x1e>
 80117ea:	4635      	mov	r5, r6
 80117ec:	e7df      	b.n	80117ae <_realloc_r+0x1e>
	...

080117f0 <_sbrk_r>:
 80117f0:	b538      	push	{r3, r4, r5, lr}
 80117f2:	4d06      	ldr	r5, [pc, #24]	; (801180c <_sbrk_r+0x1c>)
 80117f4:	2300      	movs	r3, #0
 80117f6:	4604      	mov	r4, r0
 80117f8:	4608      	mov	r0, r1
 80117fa:	602b      	str	r3, [r5, #0]
 80117fc:	f7f4 ff8c 	bl	8006718 <_sbrk>
 8011800:	1c43      	adds	r3, r0, #1
 8011802:	d102      	bne.n	801180a <_sbrk_r+0x1a>
 8011804:	682b      	ldr	r3, [r5, #0]
 8011806:	b103      	cbz	r3, 801180a <_sbrk_r+0x1a>
 8011808:	6023      	str	r3, [r4, #0]
 801180a:	bd38      	pop	{r3, r4, r5, pc}
 801180c:	24002344 	.word	0x24002344

08011810 <__malloc_lock>:
 8011810:	4801      	ldr	r0, [pc, #4]	; (8011818 <__malloc_lock+0x8>)
 8011812:	f000 b85d 	b.w	80118d0 <__retarget_lock_acquire_recursive>
 8011816:	bf00      	nop
 8011818:	24002348 	.word	0x24002348

0801181c <__malloc_unlock>:
 801181c:	4801      	ldr	r0, [pc, #4]	; (8011824 <__malloc_unlock+0x8>)
 801181e:	f000 b858 	b.w	80118d2 <__retarget_lock_release_recursive>
 8011822:	bf00      	nop
 8011824:	24002348 	.word	0x24002348

08011828 <_free_r>:
 8011828:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801182a:	2900      	cmp	r1, #0
 801182c:	d044      	beq.n	80118b8 <_free_r+0x90>
 801182e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011832:	9001      	str	r0, [sp, #4]
 8011834:	2b00      	cmp	r3, #0
 8011836:	f1a1 0404 	sub.w	r4, r1, #4
 801183a:	bfb8      	it	lt
 801183c:	18e4      	addlt	r4, r4, r3
 801183e:	f7ff ffe7 	bl	8011810 <__malloc_lock>
 8011842:	4a1e      	ldr	r2, [pc, #120]	; (80118bc <_free_r+0x94>)
 8011844:	9801      	ldr	r0, [sp, #4]
 8011846:	6813      	ldr	r3, [r2, #0]
 8011848:	b933      	cbnz	r3, 8011858 <_free_r+0x30>
 801184a:	6063      	str	r3, [r4, #4]
 801184c:	6014      	str	r4, [r2, #0]
 801184e:	b003      	add	sp, #12
 8011850:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011854:	f7ff bfe2 	b.w	801181c <__malloc_unlock>
 8011858:	42a3      	cmp	r3, r4
 801185a:	d908      	bls.n	801186e <_free_r+0x46>
 801185c:	6825      	ldr	r5, [r4, #0]
 801185e:	1961      	adds	r1, r4, r5
 8011860:	428b      	cmp	r3, r1
 8011862:	bf01      	itttt	eq
 8011864:	6819      	ldreq	r1, [r3, #0]
 8011866:	685b      	ldreq	r3, [r3, #4]
 8011868:	1949      	addeq	r1, r1, r5
 801186a:	6021      	streq	r1, [r4, #0]
 801186c:	e7ed      	b.n	801184a <_free_r+0x22>
 801186e:	461a      	mov	r2, r3
 8011870:	685b      	ldr	r3, [r3, #4]
 8011872:	b10b      	cbz	r3, 8011878 <_free_r+0x50>
 8011874:	42a3      	cmp	r3, r4
 8011876:	d9fa      	bls.n	801186e <_free_r+0x46>
 8011878:	6811      	ldr	r1, [r2, #0]
 801187a:	1855      	adds	r5, r2, r1
 801187c:	42a5      	cmp	r5, r4
 801187e:	d10b      	bne.n	8011898 <_free_r+0x70>
 8011880:	6824      	ldr	r4, [r4, #0]
 8011882:	4421      	add	r1, r4
 8011884:	1854      	adds	r4, r2, r1
 8011886:	42a3      	cmp	r3, r4
 8011888:	6011      	str	r1, [r2, #0]
 801188a:	d1e0      	bne.n	801184e <_free_r+0x26>
 801188c:	681c      	ldr	r4, [r3, #0]
 801188e:	685b      	ldr	r3, [r3, #4]
 8011890:	6053      	str	r3, [r2, #4]
 8011892:	4421      	add	r1, r4
 8011894:	6011      	str	r1, [r2, #0]
 8011896:	e7da      	b.n	801184e <_free_r+0x26>
 8011898:	d902      	bls.n	80118a0 <_free_r+0x78>
 801189a:	230c      	movs	r3, #12
 801189c:	6003      	str	r3, [r0, #0]
 801189e:	e7d6      	b.n	801184e <_free_r+0x26>
 80118a0:	6825      	ldr	r5, [r4, #0]
 80118a2:	1961      	adds	r1, r4, r5
 80118a4:	428b      	cmp	r3, r1
 80118a6:	bf04      	itt	eq
 80118a8:	6819      	ldreq	r1, [r3, #0]
 80118aa:	685b      	ldreq	r3, [r3, #4]
 80118ac:	6063      	str	r3, [r4, #4]
 80118ae:	bf04      	itt	eq
 80118b0:	1949      	addeq	r1, r1, r5
 80118b2:	6021      	streq	r1, [r4, #0]
 80118b4:	6054      	str	r4, [r2, #4]
 80118b6:	e7ca      	b.n	801184e <_free_r+0x26>
 80118b8:	b003      	add	sp, #12
 80118ba:	bd30      	pop	{r4, r5, pc}
 80118bc:	2400233c 	.word	0x2400233c

080118c0 <_malloc_usable_size_r>:
 80118c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80118c4:	1f18      	subs	r0, r3, #4
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	bfbc      	itt	lt
 80118ca:	580b      	ldrlt	r3, [r1, r0]
 80118cc:	18c0      	addlt	r0, r0, r3
 80118ce:	4770      	bx	lr

080118d0 <__retarget_lock_acquire_recursive>:
 80118d0:	4770      	bx	lr

080118d2 <__retarget_lock_release_recursive>:
 80118d2:	4770      	bx	lr

080118d4 <_init>:
 80118d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118d6:	bf00      	nop
 80118d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80118da:	bc08      	pop	{r3}
 80118dc:	469e      	mov	lr, r3
 80118de:	4770      	bx	lr

080118e0 <_fini>:
 80118e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118e2:	bf00      	nop
 80118e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80118e6:	bc08      	pop	{r3}
 80118e8:	469e      	mov	lr, r3
 80118ea:	4770      	bx	lr
