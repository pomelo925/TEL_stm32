
tel_comp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011634  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001c90  08011908  08011908  00021908  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08013598  08013598  00023598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000014  080135a0  080135a0  000235a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080135b4  080135b4  000235b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000007c  24000000  080135b8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000022d4  24000080  08013634  00030080  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  24002354  08013634  00032354  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0003007c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003094b  00000000  00000000  000300aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005138  00000000  00000000  000609f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000016b0  00000000  00000000  00065b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001518  00000000  00000000  000671e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00036eda  00000000  00000000  000686f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00021a56  00000000  00000000  0009f5d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00154a03  00000000  00000000  000c1028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00215a2b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006654  00000000  00000000  00215a7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000080 	.word	0x24000080
 80002ec:	00000000 	.word	0x00000000
 80002f0:	080118ec 	.word	0x080118ec

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000084 	.word	0x24000084
 800030c:	080118ec 	.word	0x080118ec

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b974 	b.w	8000620 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468e      	mov	lr, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	d14d      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035e:	428a      	cmp	r2, r1
 8000360:	4694      	mov	ip, r2
 8000362:	d969      	bls.n	8000438 <__udivmoddi4+0xe8>
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	b152      	cbz	r2, 8000380 <__udivmoddi4+0x30>
 800036a:	fa01 f302 	lsl.w	r3, r1, r2
 800036e:	f1c2 0120 	rsb	r1, r2, #32
 8000372:	fa20 f101 	lsr.w	r1, r0, r1
 8000376:	fa0c fc02 	lsl.w	ip, ip, r2
 800037a:	ea41 0e03 	orr.w	lr, r1, r3
 800037e:	4094      	lsls	r4, r2
 8000380:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000384:	0c21      	lsrs	r1, r4, #16
 8000386:	fbbe f6f8 	udiv	r6, lr, r8
 800038a:	fa1f f78c 	uxth.w	r7, ip
 800038e:	fb08 e316 	mls	r3, r8, r6, lr
 8000392:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000396:	fb06 f107 	mul.w	r1, r6, r7
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 30ff 	add.w	r0, r6, #4294967295
 80003a6:	f080 811f 	bcs.w	80005e8 <__udivmoddi4+0x298>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 811c 	bls.w	80005e8 <__udivmoddi4+0x298>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c4:	fb00 f707 	mul.w	r7, r0, r7
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	d90a      	bls.n	80003e2 <__udivmoddi4+0x92>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	f080 810a 	bcs.w	80005ec <__udivmoddi4+0x29c>
 80003d8:	42a7      	cmp	r7, r4
 80003da:	f240 8107 	bls.w	80005ec <__udivmoddi4+0x29c>
 80003de:	4464      	add	r4, ip
 80003e0:	3802      	subs	r0, #2
 80003e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e6:	1be4      	subs	r4, r4, r7
 80003e8:	2600      	movs	r6, #0
 80003ea:	b11d      	cbz	r5, 80003f4 <__udivmoddi4+0xa4>
 80003ec:	40d4      	lsrs	r4, r2
 80003ee:	2300      	movs	r3, #0
 80003f0:	e9c5 4300 	strd	r4, r3, [r5]
 80003f4:	4631      	mov	r1, r6
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0xc2>
 80003fe:	2d00      	cmp	r5, #0
 8000400:	f000 80ef 	beq.w	80005e2 <__udivmoddi4+0x292>
 8000404:	2600      	movs	r6, #0
 8000406:	e9c5 0100 	strd	r0, r1, [r5]
 800040a:	4630      	mov	r0, r6
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	fab3 f683 	clz	r6, r3
 8000416:	2e00      	cmp	r6, #0
 8000418:	d14a      	bne.n	80004b0 <__udivmoddi4+0x160>
 800041a:	428b      	cmp	r3, r1
 800041c:	d302      	bcc.n	8000424 <__udivmoddi4+0xd4>
 800041e:	4282      	cmp	r2, r0
 8000420:	f200 80f9 	bhi.w	8000616 <__udivmoddi4+0x2c6>
 8000424:	1a84      	subs	r4, r0, r2
 8000426:	eb61 0303 	sbc.w	r3, r1, r3
 800042a:	2001      	movs	r0, #1
 800042c:	469e      	mov	lr, r3
 800042e:	2d00      	cmp	r5, #0
 8000430:	d0e0      	beq.n	80003f4 <__udivmoddi4+0xa4>
 8000432:	e9c5 4e00 	strd	r4, lr, [r5]
 8000436:	e7dd      	b.n	80003f4 <__udivmoddi4+0xa4>
 8000438:	b902      	cbnz	r2, 800043c <__udivmoddi4+0xec>
 800043a:	deff      	udf	#255	; 0xff
 800043c:	fab2 f282 	clz	r2, r2
 8000440:	2a00      	cmp	r2, #0
 8000442:	f040 8092 	bne.w	800056a <__udivmoddi4+0x21a>
 8000446:	eba1 010c 	sub.w	r1, r1, ip
 800044a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044e:	fa1f fe8c 	uxth.w	lr, ip
 8000452:	2601      	movs	r6, #1
 8000454:	0c20      	lsrs	r0, r4, #16
 8000456:	fbb1 f3f7 	udiv	r3, r1, r7
 800045a:	fb07 1113 	mls	r1, r7, r3, r1
 800045e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000462:	fb0e f003 	mul.w	r0, lr, r3
 8000466:	4288      	cmp	r0, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x12c>
 800046a:	eb1c 0101 	adds.w	r1, ip, r1
 800046e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x12a>
 8000474:	4288      	cmp	r0, r1
 8000476:	f200 80cb 	bhi.w	8000610 <__udivmoddi4+0x2c0>
 800047a:	4643      	mov	r3, r8
 800047c:	1a09      	subs	r1, r1, r0
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb1 f0f7 	udiv	r0, r1, r7
 8000484:	fb07 1110 	mls	r1, r7, r0, r1
 8000488:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800048c:	fb0e fe00 	mul.w	lr, lr, r0
 8000490:	45a6      	cmp	lr, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x156>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f100 31ff 	add.w	r1, r0, #4294967295
 800049c:	d202      	bcs.n	80004a4 <__udivmoddi4+0x154>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f200 80bb 	bhi.w	800061a <__udivmoddi4+0x2ca>
 80004a4:	4608      	mov	r0, r1
 80004a6:	eba4 040e 	sub.w	r4, r4, lr
 80004aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004ae:	e79c      	b.n	80003ea <__udivmoddi4+0x9a>
 80004b0:	f1c6 0720 	rsb	r7, r6, #32
 80004b4:	40b3      	lsls	r3, r6
 80004b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80004be:	fa20 f407 	lsr.w	r4, r0, r7
 80004c2:	fa01 f306 	lsl.w	r3, r1, r6
 80004c6:	431c      	orrs	r4, r3
 80004c8:	40f9      	lsrs	r1, r7
 80004ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ce:	fa00 f306 	lsl.w	r3, r0, r6
 80004d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004d6:	0c20      	lsrs	r0, r4, #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fb09 1118 	mls	r1, r9, r8, r1
 80004e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e4:	fb08 f00e 	mul.w	r0, r8, lr
 80004e8:	4288      	cmp	r0, r1
 80004ea:	fa02 f206 	lsl.w	r2, r2, r6
 80004ee:	d90b      	bls.n	8000508 <__udivmoddi4+0x1b8>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004f8:	f080 8088 	bcs.w	800060c <__udivmoddi4+0x2bc>
 80004fc:	4288      	cmp	r0, r1
 80004fe:	f240 8085 	bls.w	800060c <__udivmoddi4+0x2bc>
 8000502:	f1a8 0802 	sub.w	r8, r8, #2
 8000506:	4461      	add	r1, ip
 8000508:	1a09      	subs	r1, r1, r0
 800050a:	b2a4      	uxth	r4, r4
 800050c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000510:	fb09 1110 	mls	r1, r9, r0, r1
 8000514:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000518:	fb00 fe0e 	mul.w	lr, r0, lr
 800051c:	458e      	cmp	lr, r1
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x1e2>
 8000520:	eb1c 0101 	adds.w	r1, ip, r1
 8000524:	f100 34ff 	add.w	r4, r0, #4294967295
 8000528:	d26c      	bcs.n	8000604 <__udivmoddi4+0x2b4>
 800052a:	458e      	cmp	lr, r1
 800052c:	d96a      	bls.n	8000604 <__udivmoddi4+0x2b4>
 800052e:	3802      	subs	r0, #2
 8000530:	4461      	add	r1, ip
 8000532:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000536:	fba0 9402 	umull	r9, r4, r0, r2
 800053a:	eba1 010e 	sub.w	r1, r1, lr
 800053e:	42a1      	cmp	r1, r4
 8000540:	46c8      	mov	r8, r9
 8000542:	46a6      	mov	lr, r4
 8000544:	d356      	bcc.n	80005f4 <__udivmoddi4+0x2a4>
 8000546:	d053      	beq.n	80005f0 <__udivmoddi4+0x2a0>
 8000548:	b15d      	cbz	r5, 8000562 <__udivmoddi4+0x212>
 800054a:	ebb3 0208 	subs.w	r2, r3, r8
 800054e:	eb61 010e 	sbc.w	r1, r1, lr
 8000552:	fa01 f707 	lsl.w	r7, r1, r7
 8000556:	fa22 f306 	lsr.w	r3, r2, r6
 800055a:	40f1      	lsrs	r1, r6
 800055c:	431f      	orrs	r7, r3
 800055e:	e9c5 7100 	strd	r7, r1, [r5]
 8000562:	2600      	movs	r6, #0
 8000564:	4631      	mov	r1, r6
 8000566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	40d8      	lsrs	r0, r3
 8000570:	fa0c fc02 	lsl.w	ip, ip, r2
 8000574:	fa21 f303 	lsr.w	r3, r1, r3
 8000578:	4091      	lsls	r1, r2
 800057a:	4301      	orrs	r1, r0
 800057c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000580:	fa1f fe8c 	uxth.w	lr, ip
 8000584:	fbb3 f0f7 	udiv	r0, r3, r7
 8000588:	fb07 3610 	mls	r6, r7, r0, r3
 800058c:	0c0b      	lsrs	r3, r1, #16
 800058e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000592:	fb00 f60e 	mul.w	r6, r0, lr
 8000596:	429e      	cmp	r6, r3
 8000598:	fa04 f402 	lsl.w	r4, r4, r2
 800059c:	d908      	bls.n	80005b0 <__udivmoddi4+0x260>
 800059e:	eb1c 0303 	adds.w	r3, ip, r3
 80005a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80005a6:	d22f      	bcs.n	8000608 <__udivmoddi4+0x2b8>
 80005a8:	429e      	cmp	r6, r3
 80005aa:	d92d      	bls.n	8000608 <__udivmoddi4+0x2b8>
 80005ac:	3802      	subs	r0, #2
 80005ae:	4463      	add	r3, ip
 80005b0:	1b9b      	subs	r3, r3, r6
 80005b2:	b289      	uxth	r1, r1
 80005b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005b8:	fb07 3316 	mls	r3, r7, r6, r3
 80005bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005c0:	fb06 f30e 	mul.w	r3, r6, lr
 80005c4:	428b      	cmp	r3, r1
 80005c6:	d908      	bls.n	80005da <__udivmoddi4+0x28a>
 80005c8:	eb1c 0101 	adds.w	r1, ip, r1
 80005cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005d0:	d216      	bcs.n	8000600 <__udivmoddi4+0x2b0>
 80005d2:	428b      	cmp	r3, r1
 80005d4:	d914      	bls.n	8000600 <__udivmoddi4+0x2b0>
 80005d6:	3e02      	subs	r6, #2
 80005d8:	4461      	add	r1, ip
 80005da:	1ac9      	subs	r1, r1, r3
 80005dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005e0:	e738      	b.n	8000454 <__udivmoddi4+0x104>
 80005e2:	462e      	mov	r6, r5
 80005e4:	4628      	mov	r0, r5
 80005e6:	e705      	b.n	80003f4 <__udivmoddi4+0xa4>
 80005e8:	4606      	mov	r6, r0
 80005ea:	e6e3      	b.n	80003b4 <__udivmoddi4+0x64>
 80005ec:	4618      	mov	r0, r3
 80005ee:	e6f8      	b.n	80003e2 <__udivmoddi4+0x92>
 80005f0:	454b      	cmp	r3, r9
 80005f2:	d2a9      	bcs.n	8000548 <__udivmoddi4+0x1f8>
 80005f4:	ebb9 0802 	subs.w	r8, r9, r2
 80005f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005fc:	3801      	subs	r0, #1
 80005fe:	e7a3      	b.n	8000548 <__udivmoddi4+0x1f8>
 8000600:	4646      	mov	r6, r8
 8000602:	e7ea      	b.n	80005da <__udivmoddi4+0x28a>
 8000604:	4620      	mov	r0, r4
 8000606:	e794      	b.n	8000532 <__udivmoddi4+0x1e2>
 8000608:	4640      	mov	r0, r8
 800060a:	e7d1      	b.n	80005b0 <__udivmoddi4+0x260>
 800060c:	46d0      	mov	r8, sl
 800060e:	e77b      	b.n	8000508 <__udivmoddi4+0x1b8>
 8000610:	3b02      	subs	r3, #2
 8000612:	4461      	add	r1, ip
 8000614:	e732      	b.n	800047c <__udivmoddi4+0x12c>
 8000616:	4630      	mov	r0, r6
 8000618:	e709      	b.n	800042e <__udivmoddi4+0xde>
 800061a:	4464      	add	r4, ip
 800061c:	3802      	subs	r0, #2
 800061e:	e742      	b.n	80004a6 <__udivmoddi4+0x156>

08000620 <__aeabi_idiv0>:
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop

08000624 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	0a5a      	lsrs	r2, r3, #9
 8000634:	490f      	ldr	r1, [pc, #60]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000636:	fba1 1202 	umull	r1, r2, r1, r2
 800063a:	09d2      	lsrs	r2, r2, #7
 800063c:	490e      	ldr	r1, [pc, #56]	; (8000678 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800063e:	fb01 f202 	mul.w	r2, r1, r2
 8000642:	1a9b      	subs	r3, r3, r2
 8000644:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	0a5b      	lsrs	r3, r3, #9
 800064c:	4a09      	ldr	r2, [pc, #36]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800064e:	fba2 2303 	umull	r2, r3, r2, r3
 8000652:	09db      	lsrs	r3, r3, #7
 8000654:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	441a      	add	r2, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	68fa      	ldr	r2, [r7, #12]
 8000666:	601a      	str	r2, [r3, #0]
}
 8000668:	bf00      	nop
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	00044b83 	.word	0x00044b83
 8000678:	3b9aca00 	.word	0x3b9aca00

0800067c <_Z13DC_motor_initv>:
//DC_motor fl(5.5, 85, 0, 0.001, 43193, 200);
//DC_motor br(148.3, 2813.3, 0.537, 0.001, 26734, 200);
//DC_motor bl(0, 0, 0, 0.001, 41296, 200);


void DC_motor_init(){
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1);
 8000680:	2100      	movs	r1, #0
 8000682:	4822      	ldr	r0, [pc, #136]	; (800070c <_Z13DC_motor_initv+0x90>)
 8000684:	f00c fefc 	bl	800d480 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_2);
 8000688:	2104      	movs	r1, #4
 800068a:	4820      	ldr	r0, [pc, #128]	; (800070c <_Z13DC_motor_initv+0x90>)
 800068c:	f00c fef8 	bl	800d480 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_1);
 8000690:	2100      	movs	r1, #0
 8000692:	481f      	ldr	r0, [pc, #124]	; (8000710 <_Z13DC_motor_initv+0x94>)
 8000694:	f00c fef4 	bl	800d480 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_2);
 8000698:	2104      	movs	r1, #4
 800069a:	481d      	ldr	r0, [pc, #116]	; (8000710 <_Z13DC_motor_initv+0x94>)
 800069c:	f00c fef0 	bl	800d480 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1);
 80006a0:	2100      	movs	r1, #0
 80006a2:	481c      	ldr	r0, [pc, #112]	; (8000714 <_Z13DC_motor_initv+0x98>)
 80006a4:	f00c feec 	bl	800d480 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_2);
 80006a8:	2104      	movs	r1, #4
 80006aa:	481a      	ldr	r0, [pc, #104]	; (8000714 <_Z13DC_motor_initv+0x98>)
 80006ac:	f00c fee8 	bl	800d480 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 80006b0:	2100      	movs	r1, #0
 80006b2:	4819      	ldr	r0, [pc, #100]	; (8000718 <_Z13DC_motor_initv+0x9c>)
 80006b4:	f00c fee4 	bl	800d480 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_2);
 80006b8:	2104      	movs	r1, #4
 80006ba:	4817      	ldr	r0, [pc, #92]	; (8000718 <_Z13DC_motor_initv+0x9c>)
 80006bc:	f00c fee0 	bl	800d480 <HAL_TIM_Encoder_Start>

	HAL_TIM_PWM_Start_IT(&htim12, TIM_CHANNEL_2);
 80006c0:	2104      	movs	r1, #4
 80006c2:	4816      	ldr	r0, [pc, #88]	; (800071c <_Z13DC_motor_initv+0xa0>)
 80006c4:	f00c fcce 	bl	800d064 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim12, TIM_CHANNEL_1);
 80006c8:	2100      	movs	r1, #0
 80006ca:	4814      	ldr	r0, [pc, #80]	; (800071c <_Z13DC_motor_initv+0xa0>)
 80006cc:	f00c fcca 	bl	800d064 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim15, TIM_CHANNEL_2);
 80006d0:	2104      	movs	r1, #4
 80006d2:	4813      	ldr	r0, [pc, #76]	; (8000720 <_Z13DC_motor_initv+0xa4>)
 80006d4:	f00c fcc6 	bl	800d064 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim15, TIM_CHANNEL_1);
 80006d8:	2100      	movs	r1, #0
 80006da:	4811      	ldr	r0, [pc, #68]	; (8000720 <_Z13DC_motor_initv+0xa4>)
 80006dc:	f00c fcc2 	bl	800d064 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start(&htim23, TIM_CHANNEL_1);
 80006e0:	2100      	movs	r1, #0
 80006e2:	4810      	ldr	r0, [pc, #64]	; (8000724 <_Z13DC_motor_initv+0xa8>)
 80006e4:	f00c fba2 	bl	800ce2c <HAL_TIM_PWM_Start>

	HAL_TIM_Base_Start_IT(&htim7);
 80006e8:	480f      	ldr	r0, [pc, #60]	; (8000728 <_Z13DC_motor_initv+0xac>)
 80006ea:	f00c fac1 	bl	800cc70 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim8);
 80006ee:	480f      	ldr	r0, [pc, #60]	; (800072c <_Z13DC_motor_initv+0xb0>)
 80006f0:	f00c fabe 	bl	800cc70 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 80006f4:	480e      	ldr	r0, [pc, #56]	; (8000730 <_Z13DC_motor_initv+0xb4>)
 80006f6:	f00c fabb 	bl	800cc70 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim14);
 80006fa:	480e      	ldr	r0, [pc, #56]	; (8000734 <_Z13DC_motor_initv+0xb8>)
 80006fc:	f00c fab8 	bl	800cc70 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim23);
 8000700:	4808      	ldr	r0, [pc, #32]	; (8000724 <_Z13DC_motor_initv+0xa8>)
 8000702:	f00c fab5 	bl	800cc70 <HAL_TIM_Base_Start_IT>
}
 8000706:	bf00      	nop
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	24000280 	.word	0x24000280
 8000710:	24000364 	.word	0x24000364
 8000714:	240002cc 	.word	0x240002cc
 8000718:	24000318 	.word	0x24000318
 800071c:	24000448 	.word	0x24000448
 8000720:	2400052c 	.word	0x2400052c
 8000724:	24000578 	.word	0x24000578
 8000728:	240003b0 	.word	0x240003b0
 800072c:	240003fc 	.word	0x240003fc
 8000730:	24000494 	.word	0x24000494
 8000734:	240004e0 	.word	0x240004e0

08000738 <_ZN8DC_motorC1Edddddd>:

DC_motor::DC_motor(double p, double i, double d, double time, double res, double ratio){
 8000738:	b480      	push	{r7}
 800073a:	b08f      	sub	sp, #60	; 0x3c
 800073c:	af00      	add	r7, sp, #0
 800073e:	6378      	str	r0, [r7, #52]	; 0x34
 8000740:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 8000744:	ed87 1b08 	vstr	d1, [r7, #32]
 8000748:	ed87 2b06 	vstr	d2, [r7, #24]
 800074c:	ed87 3b04 	vstr	d3, [r7, #16]
 8000750:	ed87 4b02 	vstr	d4, [r7, #8]
 8000754:	ed87 5b00 	vstr	d5, [r7]
	this->kp = p;
 8000758:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800075a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800075e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	this->ki = i;
 8000762:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000764:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000768:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	this->kd = d;
 800076c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800076e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000772:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	this->time = time;
 8000776:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000778:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800077c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	this->res_encoder = res;
 8000780:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000782:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000786:	e9c1 2300 	strd	r2, r3, [r1]
	this->sr_ratio = ratio;
 800078a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800078c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000790:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 8000794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000796:	4618      	mov	r0, r3
 8000798:	373c      	adds	r7, #60	; 0x3c
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr

080007a2 <_ZN8DC_motor10PIDControlEv>:
//	if(PID<-1) PID=-1;
//
//	return rps_now;
//}

void DC_motor::PIDControl(void){
 80007a2:	b480      	push	{r7}
 80007a4:	b083      	sub	sp, #12
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	6078      	str	r0, [r7, #4]
	rps_now = (double) CountNow / 4 / res_encoder / sr_ratio / time;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 80007b0:	ee07 3a90 	vmov	s15, r3
 80007b4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80007b8:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 80007bc:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	ed93 7b00 	vldr	d7, [r3]
 80007c6:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	ed93 7b02 	vldr	d7, [r3, #8]
 80007d0:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	ed93 6b0c 	vldr	d6, [r3, #48]	; 0x30
 80007da:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40

	error = rps_goal - rps_now;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	ed93 6b0e 	vldr	d6, [r3, #56]	; 0x38
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80007f0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	ed83 7b04 	vstr	d7, [r3, #16]
	error_total += error;
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	ed93 6b06 	vldr	d6, [r3, #24]
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	ed93 7b04 	vldr	d7, [r3, #16]
 8000806:	ee36 7b07 	vadd.f64	d7, d6, d7
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	ed83 7b06 	vstr	d7, [r3, #24]
	PWM = error*kp + error_total*ki + error_last*kd;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	ed93 6b04 	vldr	d6, [r3, #16]
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 800081c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	ed93 5b06 	vldr	d5, [r3, #24]
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 800082c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000830:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	ed93 5b08 	vldr	d5, [r3, #32]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 8000840:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000844:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	ed83 7b1a 	vstr	d7, [r3, #104]	; 0x68
	error_last = error;
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8000854:	6879      	ldr	r1, [r7, #4]
 8000856:	e9c1 2308 	strd	r2, r3, [r1, #32]
}
 800085a:	bf00      	nop
 800085c:	370c      	adds	r7, #12
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
	...

08000868 <_Z41__static_initialization_and_destruction_0ii>:
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
 8000870:	6039      	str	r1, [r7, #0]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	2b01      	cmp	r3, #1
 8000876:	d140      	bne.n	80008fa <_Z41__static_initialization_and_destruction_0ii+0x92>
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800087e:	4293      	cmp	r3, r2
 8000880:	d13b      	bne.n	80008fa <_Z41__static_initialization_and_destruction_0ii+0x92>
DC_motor fr(2500,0.6,0, 0.001,512,20.8);
 8000882:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8000908 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 8000886:	ed9f 4b22 	vldr	d4, [pc, #136]	; 8000910 <_Z41__static_initialization_and_destruction_0ii+0xa8>
 800088a:	ed9f 3b23 	vldr	d3, [pc, #140]	; 8000918 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 800088e:	ed9f 2b24 	vldr	d2, [pc, #144]	; 8000920 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 8000892:	ed9f 1b25 	vldr	d1, [pc, #148]	; 8000928 <_Z41__static_initialization_and_destruction_0ii+0xc0>
 8000896:	ed9f 0b26 	vldr	d0, [pc, #152]	; 8000930 <_Z41__static_initialization_and_destruction_0ii+0xc8>
 800089a:	482f      	ldr	r0, [pc, #188]	; (8000958 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 800089c:	f7ff ff4c 	bl	8000738 <_ZN8DC_motorC1Edddddd>
DC_motor fl(1500,0.6,0, 0.001,512,20.8);
 80008a0:	ed9f 5b19 	vldr	d5, [pc, #100]	; 8000908 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 80008a4:	ed9f 4b1a 	vldr	d4, [pc, #104]	; 8000910 <_Z41__static_initialization_and_destruction_0ii+0xa8>
 80008a8:	ed9f 3b1b 	vldr	d3, [pc, #108]	; 8000918 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 80008ac:	ed9f 2b1c 	vldr	d2, [pc, #112]	; 8000920 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 80008b0:	ed9f 1b1d 	vldr	d1, [pc, #116]	; 8000928 <_Z41__static_initialization_and_destruction_0ii+0xc0>
 80008b4:	ed9f 0b20 	vldr	d0, [pc, #128]	; 8000938 <_Z41__static_initialization_and_destruction_0ii+0xd0>
 80008b8:	4828      	ldr	r0, [pc, #160]	; (800095c <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 80008ba:	f7ff ff3d 	bl	8000738 <_ZN8DC_motorC1Edddddd>
DC_motor br(3500,0.6,0.002, 0.001,512,20.8);
 80008be:	ed9f 5b12 	vldr	d5, [pc, #72]	; 8000908 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 80008c2:	ed9f 4b13 	vldr	d4, [pc, #76]	; 8000910 <_Z41__static_initialization_and_destruction_0ii+0xa8>
 80008c6:	ed9f 3b14 	vldr	d3, [pc, #80]	; 8000918 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 80008ca:	ed9f 2b1d 	vldr	d2, [pc, #116]	; 8000940 <_Z41__static_initialization_and_destruction_0ii+0xd8>
 80008ce:	ed9f 1b16 	vldr	d1, [pc, #88]	; 8000928 <_Z41__static_initialization_and_destruction_0ii+0xc0>
 80008d2:	ed9f 0b1d 	vldr	d0, [pc, #116]	; 8000948 <_Z41__static_initialization_and_destruction_0ii+0xe0>
 80008d6:	4822      	ldr	r0, [pc, #136]	; (8000960 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 80008d8:	f7ff ff2e 	bl	8000738 <_ZN8DC_motorC1Edddddd>
DC_motor bl(3000,0.6,0, 0.001,512,20.8);
 80008dc:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 8000908 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 80008e0:	ed9f 4b0b 	vldr	d4, [pc, #44]	; 8000910 <_Z41__static_initialization_and_destruction_0ii+0xa8>
 80008e4:	ed9f 3b0c 	vldr	d3, [pc, #48]	; 8000918 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 80008e8:	ed9f 2b0d 	vldr	d2, [pc, #52]	; 8000920 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 80008ec:	ed9f 1b0e 	vldr	d1, [pc, #56]	; 8000928 <_Z41__static_initialization_and_destruction_0ii+0xc0>
 80008f0:	ed9f 0b17 	vldr	d0, [pc, #92]	; 8000950 <_Z41__static_initialization_and_destruction_0ii+0xe8>
 80008f4:	481b      	ldr	r0, [pc, #108]	; (8000964 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 80008f6:	f7ff ff1f 	bl	8000738 <_ZN8DC_motorC1Edddddd>
}
 80008fa:	bf00      	nop
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	f3af 8000 	nop.w
 8000908:	cccccccd 	.word	0xcccccccd
 800090c:	4034cccc 	.word	0x4034cccc
 8000910:	00000000 	.word	0x00000000
 8000914:	40800000 	.word	0x40800000
 8000918:	d2f1a9fc 	.word	0xd2f1a9fc
 800091c:	3f50624d 	.word	0x3f50624d
	...
 8000928:	33333333 	.word	0x33333333
 800092c:	3fe33333 	.word	0x3fe33333
 8000930:	00000000 	.word	0x00000000
 8000934:	40a38800 	.word	0x40a38800
 8000938:	00000000 	.word	0x00000000
 800093c:	40977000 	.word	0x40977000
 8000940:	d2f1a9fc 	.word	0xd2f1a9fc
 8000944:	3f60624d 	.word	0x3f60624d
 8000948:	00000000 	.word	0x00000000
 800094c:	40ab5800 	.word	0x40ab5800
 8000950:	00000000 	.word	0x00000000
 8000954:	40a77000 	.word	0x40a77000
 8000958:	240000a0 	.word	0x240000a0
 800095c:	24000110 	.word	0x24000110
 8000960:	24000180 	.word	0x24000180
 8000964:	240001f0 	.word	0x240001f0

08000968 <_GLOBAL__sub_I_fr>:
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
 800096c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000970:	2001      	movs	r0, #1
 8000972:	f7ff ff79 	bl	8000868 <_Z41__static_initialization_and_destruction_0ii>
 8000976:	bd80      	pop	{r7, pc}

08000978 <_Z10debug_loopv>:
bool mecanum_debug = false;
bool intake_debug = false;
bool scara_debug = true;


void debug_loop(){
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
	while(1){
		if(mecanum_debug) mecanum.run();
 800097c:	4b0a      	ldr	r3, [pc, #40]	; (80009a8 <_Z10debug_loopv+0x30>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d002      	beq.n	800098a <_Z10debug_loopv+0x12>
 8000984:	4809      	ldr	r0, [pc, #36]	; (80009ac <_Z10debug_loopv+0x34>)
 8000986:	f000 fef1 	bl	800176c <_ZN7Mecanum3runEv>
		if(intake_debug) INTAKE::run();
 800098a:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <_Z10debug_loopv+0x38>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <_Z10debug_loopv+0x1e>
 8000992:	f000 f813 	bl	80009bc <_ZN6INTAKE3runEv>
		if(scara_debug) sc.run();
 8000996:	4b07      	ldr	r3, [pc, #28]	; (80009b4 <_Z10debug_loopv+0x3c>)
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d0ee      	beq.n	800097c <_Z10debug_loopv+0x4>
 800099e:	4806      	ldr	r0, [pc, #24]	; (80009b8 <_Z10debug_loopv+0x40>)
 80009a0:	f004 fb16 	bl	8004fd0 <_ZN5SCARA3runEv>
		if(mecanum_debug) mecanum.run();
 80009a4:	e7ea      	b.n	800097c <_Z10debug_loopv+0x4>
 80009a6:	bf00      	nop
 80009a8:	24000261 	.word	0x24000261
 80009ac:	24000748 	.word	0x24000748
 80009b0:	24000262 	.word	0x24000262
 80009b4:	24000000 	.word	0x24000000
 80009b8:	24002250 	.word	0x24002250

080009bc <_ZN6INTAKE3runEv>:
namespace INTAKE{
	double tilt, stretch, suck;
}


void INTAKE::run(void){
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
	 /*stretch*/
	    if (INTAKE::stretch == 0){
 80009c0:	4b5c      	ldr	r3, [pc, #368]	; (8000b34 <_ZN6INTAKE3runEv+0x178>)
 80009c2:	ed93 7b00 	vldr	d7, [r3]
 80009c6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80009ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009ce:	d10a      	bne.n	80009e6 <_ZN6INTAKE3runEv+0x2a>
	    	HAL_GPIO_WritePin(STRETCH_INA_PORT, STRETCH_INA_PIN, GPIO_PIN_RESET);
 80009d0:	2200      	movs	r2, #0
 80009d2:	2140      	movs	r1, #64	; 0x40
 80009d4:	4858      	ldr	r0, [pc, #352]	; (8000b38 <_ZN6INTAKE3runEv+0x17c>)
 80009d6:	f009 fe49 	bl	800a66c <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(STRETCH_INB_PORT, STRETCH_INB_PIN, GPIO_PIN_RESET);
 80009da:	2200      	movs	r2, #0
 80009dc:	2180      	movs	r1, #128	; 0x80
 80009de:	4856      	ldr	r0, [pc, #344]	; (8000b38 <_ZN6INTAKE3runEv+0x17c>)
 80009e0:	f009 fe44 	bl	800a66c <HAL_GPIO_WritePin>
 80009e4:	e028      	b.n	8000a38 <_ZN6INTAKE3runEv+0x7c>
	    } else if (INTAKE::stretch == -1){
 80009e6:	4b53      	ldr	r3, [pc, #332]	; (8000b34 <_ZN6INTAKE3runEv+0x178>)
 80009e8:	ed93 7b00 	vldr	d7, [r3]
 80009ec:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 80009f0:	eeb4 7b46 	vcmp.f64	d7, d6
 80009f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009f8:	d10a      	bne.n	8000a10 <_ZN6INTAKE3runEv+0x54>
	    	HAL_GPIO_WritePin(STRETCH_INA_PORT, STRETCH_INA_PIN, GPIO_PIN_SET);
 80009fa:	2201      	movs	r2, #1
 80009fc:	2140      	movs	r1, #64	; 0x40
 80009fe:	484e      	ldr	r0, [pc, #312]	; (8000b38 <_ZN6INTAKE3runEv+0x17c>)
 8000a00:	f009 fe34 	bl	800a66c <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(STRETCH_INB_PORT, STRETCH_INB_PIN, GPIO_PIN_RESET);
 8000a04:	2200      	movs	r2, #0
 8000a06:	2180      	movs	r1, #128	; 0x80
 8000a08:	484b      	ldr	r0, [pc, #300]	; (8000b38 <_ZN6INTAKE3runEv+0x17c>)
 8000a0a:	f009 fe2f 	bl	800a66c <HAL_GPIO_WritePin>
 8000a0e:	e013      	b.n	8000a38 <_ZN6INTAKE3runEv+0x7c>
	    } else if (INTAKE::stretch == 1){
 8000a10:	4b48      	ldr	r3, [pc, #288]	; (8000b34 <_ZN6INTAKE3runEv+0x178>)
 8000a12:	ed93 7b00 	vldr	d7, [r3]
 8000a16:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000a1a:	eeb4 7b46 	vcmp.f64	d7, d6
 8000a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a22:	d109      	bne.n	8000a38 <_ZN6INTAKE3runEv+0x7c>
	    	HAL_GPIO_WritePin(STRETCH_INA_PORT, STRETCH_INA_PIN, GPIO_PIN_RESET);
 8000a24:	2200      	movs	r2, #0
 8000a26:	2140      	movs	r1, #64	; 0x40
 8000a28:	4843      	ldr	r0, [pc, #268]	; (8000b38 <_ZN6INTAKE3runEv+0x17c>)
 8000a2a:	f009 fe1f 	bl	800a66c <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(STRETCH_INB_PORT, STRETCH_INB_PIN, GPIO_PIN_SET);
 8000a2e:	2201      	movs	r2, #1
 8000a30:	2180      	movs	r1, #128	; 0x80
 8000a32:	4841      	ldr	r0, [pc, #260]	; (8000b38 <_ZN6INTAKE3runEv+0x17c>)
 8000a34:	f009 fe1a 	bl	800a66c <HAL_GPIO_WritePin>
	    }

	/*tilt*/
	    if (INTAKE::tilt == 0){
 8000a38:	4b40      	ldr	r3, [pc, #256]	; (8000b3c <_ZN6INTAKE3runEv+0x180>)
 8000a3a:	ed93 7b00 	vldr	d7, [r3]
 8000a3e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8000a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a46:	d10b      	bne.n	8000a60 <_ZN6INTAKE3runEv+0xa4>
	    	HAL_GPIO_WritePin(TILT_INA_PORT, TILT_INA_PIN, GPIO_PIN_RESET);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a4e:	483a      	ldr	r0, [pc, #232]	; (8000b38 <_ZN6INTAKE3runEv+0x17c>)
 8000a50:	f009 fe0c 	bl	800a66c <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(TILT_INB_PORT, TILT_INB_PIN, GPIO_PIN_RESET);
 8000a54:	2200      	movs	r2, #0
 8000a56:	2110      	movs	r1, #16
 8000a58:	4839      	ldr	r0, [pc, #228]	; (8000b40 <_ZN6INTAKE3runEv+0x184>)
 8000a5a:	f009 fe07 	bl	800a66c <HAL_GPIO_WritePin>
 8000a5e:	e02a      	b.n	8000ab6 <_ZN6INTAKE3runEv+0xfa>
	    } else if (INTAKE::tilt == 1){
 8000a60:	4b36      	ldr	r3, [pc, #216]	; (8000b3c <_ZN6INTAKE3runEv+0x180>)
 8000a62:	ed93 7b00 	vldr	d7, [r3]
 8000a66:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000a6a:	eeb4 7b46 	vcmp.f64	d7, d6
 8000a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a72:	d10b      	bne.n	8000a8c <_ZN6INTAKE3runEv+0xd0>
	    	HAL_GPIO_WritePin(TILT_INA_PORT, TILT_INA_PIN, GPIO_PIN_RESET);
 8000a74:	2200      	movs	r2, #0
 8000a76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a7a:	482f      	ldr	r0, [pc, #188]	; (8000b38 <_ZN6INTAKE3runEv+0x17c>)
 8000a7c:	f009 fdf6 	bl	800a66c <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(TILT_INB_PORT, TILT_INB_PIN, GPIO_PIN_SET);
 8000a80:	2201      	movs	r2, #1
 8000a82:	2110      	movs	r1, #16
 8000a84:	482e      	ldr	r0, [pc, #184]	; (8000b40 <_ZN6INTAKE3runEv+0x184>)
 8000a86:	f009 fdf1 	bl	800a66c <HAL_GPIO_WritePin>
 8000a8a:	e014      	b.n	8000ab6 <_ZN6INTAKE3runEv+0xfa>
	    } else if (INTAKE::tilt == -1){
 8000a8c:	4b2b      	ldr	r3, [pc, #172]	; (8000b3c <_ZN6INTAKE3runEv+0x180>)
 8000a8e:	ed93 7b00 	vldr	d7, [r3]
 8000a92:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8000a96:	eeb4 7b46 	vcmp.f64	d7, d6
 8000a9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a9e:	d10a      	bne.n	8000ab6 <_ZN6INTAKE3runEv+0xfa>
	    	HAL_GPIO_WritePin(TILT_INA_PORT, TILT_INA_PIN, GPIO_PIN_SET);
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000aa6:	4824      	ldr	r0, [pc, #144]	; (8000b38 <_ZN6INTAKE3runEv+0x17c>)
 8000aa8:	f009 fde0 	bl	800a66c <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(TILT_INB_PORT, TILT_INB_PIN, GPIO_PIN_RESET);
 8000aac:	2200      	movs	r2, #0
 8000aae:	2110      	movs	r1, #16
 8000ab0:	4823      	ldr	r0, [pc, #140]	; (8000b40 <_ZN6INTAKE3runEv+0x184>)
 8000ab2:	f009 fddb 	bl	800a66c <HAL_GPIO_WritePin>
	    }

    /*suck*/
	    if (INTAKE::suck == 0){
 8000ab6:	4b23      	ldr	r3, [pc, #140]	; (8000b44 <_ZN6INTAKE3runEv+0x188>)
 8000ab8:	ed93 7b00 	vldr	d7, [r3]
 8000abc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8000ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ac4:	d10a      	bne.n	8000adc <_ZN6INTAKE3runEv+0x120>
	    	HAL_GPIO_WritePin(SUCK_INA_PORT, SUCK_INA_PIN, GPIO_PIN_RESET);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2140      	movs	r1, #64	; 0x40
 8000aca:	481f      	ldr	r0, [pc, #124]	; (8000b48 <_ZN6INTAKE3runEv+0x18c>)
 8000acc:	f009 fdce 	bl	800a66c <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(SUCK_INB_PORT, SUCK_INB_PIN, GPIO_PIN_RESET);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	2180      	movs	r1, #128	; 0x80
 8000ad4:	481c      	ldr	r0, [pc, #112]	; (8000b48 <_ZN6INTAKE3runEv+0x18c>)
 8000ad6:	f009 fdc9 	bl	800a66c <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(SUCK_INB_PORT, SUCK_INB_PIN, GPIO_PIN_RESET);
	    } else if (INTAKE::suck == -1){
	    	HAL_GPIO_WritePin(SUCK_INA_PORT, SUCK_INA_PIN, GPIO_PIN_RESET);
	    	HAL_GPIO_WritePin(SUCK_INB_PORT, SUCK_INB_PIN, GPIO_PIN_SET);
	    }
}
 8000ada:	e028      	b.n	8000b2e <_ZN6INTAKE3runEv+0x172>
	    } else if (INTAKE::suck == 1){
 8000adc:	4b19      	ldr	r3, [pc, #100]	; (8000b44 <_ZN6INTAKE3runEv+0x188>)
 8000ade:	ed93 7b00 	vldr	d7, [r3]
 8000ae2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000ae6:	eeb4 7b46 	vcmp.f64	d7, d6
 8000aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000aee:	d10a      	bne.n	8000b06 <_ZN6INTAKE3runEv+0x14a>
	    	HAL_GPIO_WritePin(SUCK_INA_PORT, SUCK_INA_PIN, GPIO_PIN_SET);
 8000af0:	2201      	movs	r2, #1
 8000af2:	2140      	movs	r1, #64	; 0x40
 8000af4:	4814      	ldr	r0, [pc, #80]	; (8000b48 <_ZN6INTAKE3runEv+0x18c>)
 8000af6:	f009 fdb9 	bl	800a66c <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(SUCK_INB_PORT, SUCK_INB_PIN, GPIO_PIN_RESET);
 8000afa:	2200      	movs	r2, #0
 8000afc:	2180      	movs	r1, #128	; 0x80
 8000afe:	4812      	ldr	r0, [pc, #72]	; (8000b48 <_ZN6INTAKE3runEv+0x18c>)
 8000b00:	f009 fdb4 	bl	800a66c <HAL_GPIO_WritePin>
}
 8000b04:	e013      	b.n	8000b2e <_ZN6INTAKE3runEv+0x172>
	    } else if (INTAKE::suck == -1){
 8000b06:	4b0f      	ldr	r3, [pc, #60]	; (8000b44 <_ZN6INTAKE3runEv+0x188>)
 8000b08:	ed93 7b00 	vldr	d7, [r3]
 8000b0c:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8000b10:	eeb4 7b46 	vcmp.f64	d7, d6
 8000b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b18:	d109      	bne.n	8000b2e <_ZN6INTAKE3runEv+0x172>
	    	HAL_GPIO_WritePin(SUCK_INA_PORT, SUCK_INA_PIN, GPIO_PIN_RESET);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2140      	movs	r1, #64	; 0x40
 8000b1e:	480a      	ldr	r0, [pc, #40]	; (8000b48 <_ZN6INTAKE3runEv+0x18c>)
 8000b20:	f009 fda4 	bl	800a66c <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(SUCK_INB_PORT, SUCK_INB_PIN, GPIO_PIN_SET);
 8000b24:	2201      	movs	r2, #1
 8000b26:	2180      	movs	r1, #128	; 0x80
 8000b28:	4807      	ldr	r0, [pc, #28]	; (8000b48 <_ZN6INTAKE3runEv+0x18c>)
 8000b2a:	f009 fd9f 	bl	800a66c <HAL_GPIO_WritePin>
}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	24000270 	.word	0x24000270
 8000b38:	58020400 	.word	0x58020400
 8000b3c:	24000268 	.word	0x24000268
 8000b40:	58020800 	.word	0x58020800
 8000b44:	24000278 	.word	0x24000278
 8000b48:	58020000 	.word	0x58020000

08000b4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b50:	f006 f906 	bl	8006d60 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b54:	f000 f820 	bl	8000b98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b58:	f000 fc64 	bl	8001424 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000b5c:	f000 f88c 	bl	8000c78 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000b60:	f000 f8de 	bl	8000d20 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000b64:	f000 f932 	bl	8000dcc <MX_TIM4_Init>
  MX_TIM5_Init();
 8000b68:	f000 f986 	bl	8000e78 <MX_TIM5_Init>
  MX_TIM12_Init();
 8000b6c:	f000 fa64 	bl	8001038 <MX_TIM12_Init>
  MX_TIM13_Init();
 8000b70:	f000 fab2 	bl	80010d8 <MX_TIM13_Init>
  MX_TIM15_Init();
 8000b74:	f000 faf6 	bl	8001164 <MX_TIM15_Init>
  MX_DMA_Init();
 8000b78:	f000 fc2c 	bl	80013d4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000b7c:	f000 fbde 	bl	800133c <MX_USART1_UART_Init>
  MX_TIM8_Init();
 8000b80:	f000 fa06 	bl	8000f90 <MX_TIM8_Init>
  MX_TIM14_Init();
 8000b84:	f000 facc 	bl	8001120 <MX_TIM14_Init>
  MX_TIM7_Init();
 8000b88:	f000 f9cc 	bl	8000f24 <MX_TIM7_Init>
  MX_TIM23_Init();
 8000b8c:	f000 fb7c 	bl	8001288 <MX_TIM23_Init>
  /* USER CODE BEGIN 2 */
  main_function();
 8000b90:	f000 fd86 	bl	80016a0 <main_function>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b94:	e7fe      	b.n	8000b94 <main+0x48>
	...

08000b98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b09c      	sub	sp, #112	; 0x70
 8000b9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba2:	224c      	movs	r2, #76	; 0x4c
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f010 fd16 	bl	80115d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bac:	1d3b      	adds	r3, r7, #4
 8000bae:	2220      	movs	r2, #32
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f010 fd10 	bl	80115d8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000bb8:	2002      	movs	r0, #2
 8000bba:	f009 fd71 	bl	800a6a0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	603b      	str	r3, [r7, #0]
 8000bc2:	4b2c      	ldr	r3, [pc, #176]	; (8000c74 <SystemClock_Config+0xdc>)
 8000bc4:	699b      	ldr	r3, [r3, #24]
 8000bc6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000bca:	4a2a      	ldr	r2, [pc, #168]	; (8000c74 <SystemClock_Config+0xdc>)
 8000bcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bd0:	6193      	str	r3, [r2, #24]
 8000bd2:	4b28      	ldr	r3, [pc, #160]	; (8000c74 <SystemClock_Config+0xdc>)
 8000bd4:	699b      	ldr	r3, [r3, #24]
 8000bd6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bda:	603b      	str	r3, [r7, #0]
 8000bdc:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000bde:	bf00      	nop
 8000be0:	4b24      	ldr	r3, [pc, #144]	; (8000c74 <SystemClock_Config+0xdc>)
 8000be2:	699b      	ldr	r3, [r3, #24]
 8000be4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000be8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000bec:	d1f8      	bne.n	8000be0 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bf2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bf6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c00:	2301      	movs	r3, #1
 8000c02:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 42;
 8000c04:	232a      	movs	r3, #42	; 0x2a
 8000c06:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c10:	2302      	movs	r3, #2
 8000c12:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000c14:	230c      	movs	r3, #12
 8000c16:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c24:	4618      	mov	r0, r3
 8000c26:	f009 fd75 	bl	800a714 <HAL_RCC_OscConfig>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000c30:	f000 fd30 	bl	8001694 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c34:	233f      	movs	r3, #63	; 0x3f
 8000c36:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c38:	2303      	movs	r3, #3
 8000c3a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV2;
 8000c3c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c40:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000c42:	2308      	movs	r3, #8
 8000c44:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000c46:	2340      	movs	r3, #64	; 0x40
 8000c48:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000c4a:	2340      	movs	r3, #64	; 0x40
 8000c4c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000c4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c52:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000c54:	2340      	movs	r3, #64	; 0x40
 8000c56:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c58:	1d3b      	adds	r3, r7, #4
 8000c5a:	2102      	movs	r1, #2
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f00a f907 	bl	800ae70 <HAL_RCC_ClockConfig>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000c68:	f000 fd14 	bl	8001694 <Error_Handler>
  }
}
 8000c6c:	bf00      	nop
 8000c6e:	3770      	adds	r7, #112	; 0x70
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	58024800 	.word	0x58024800

08000c78 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08c      	sub	sp, #48	; 0x30
 8000c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c7e:	f107 030c 	add.w	r3, r7, #12
 8000c82:	2224      	movs	r2, #36	; 0x24
 8000c84:	2100      	movs	r1, #0
 8000c86:	4618      	mov	r0, r3
 8000c88:	f010 fca6 	bl	80115d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c8c:	463b      	mov	r3, r7
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	605a      	str	r2, [r3, #4]
 8000c94:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c96:	4b21      	ldr	r3, [pc, #132]	; (8000d1c <MX_TIM2_Init+0xa4>)
 8000c98:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c9c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000c9e:	4b1f      	ldr	r3, [pc, #124]	; (8000d1c <MX_TIM2_Init+0xa4>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca4:	4b1d      	ldr	r3, [pc, #116]	; (8000d1c <MX_TIM2_Init+0xa4>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000caa:	4b1c      	ldr	r3, [pc, #112]	; (8000d1c <MX_TIM2_Init+0xa4>)
 8000cac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cb0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cb2:	4b1a      	ldr	r3, [pc, #104]	; (8000d1c <MX_TIM2_Init+0xa4>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cb8:	4b18      	ldr	r3, [pc, #96]	; (8000d1c <MX_TIM2_Init+0xa4>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000cbe:	2303      	movs	r3, #3
 8000cc0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000ce2:	f107 030c 	add.w	r3, r7, #12
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	480c      	ldr	r0, [pc, #48]	; (8000d1c <MX_TIM2_Init+0xa4>)
 8000cea:	f00c fb23 	bl	800d334 <HAL_TIM_Encoder_Init>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000cf4:	f000 fcce 	bl	8001694 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d00:	463b      	mov	r3, r7
 8000d02:	4619      	mov	r1, r3
 8000d04:	4805      	ldr	r0, [pc, #20]	; (8000d1c <MX_TIM2_Init+0xa4>)
 8000d06:	f00d fbdd 	bl	800e4c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000d10:	f000 fcc0 	bl	8001694 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d14:	bf00      	nop
 8000d16:	3730      	adds	r7, #48	; 0x30
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	24000280 	.word	0x24000280

08000d20 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b08c      	sub	sp, #48	; 0x30
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000d26:	f107 030c 	add.w	r3, r7, #12
 8000d2a:	2224      	movs	r2, #36	; 0x24
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f010 fc52 	bl	80115d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d34:	463b      	mov	r3, r7
 8000d36:	2200      	movs	r2, #0
 8000d38:	601a      	str	r2, [r3, #0]
 8000d3a:	605a      	str	r2, [r3, #4]
 8000d3c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d3e:	4b21      	ldr	r3, [pc, #132]	; (8000dc4 <MX_TIM3_Init+0xa4>)
 8000d40:	4a21      	ldr	r2, [pc, #132]	; (8000dc8 <MX_TIM3_Init+0xa8>)
 8000d42:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000d44:	4b1f      	ldr	r3, [pc, #124]	; (8000dc4 <MX_TIM3_Init+0xa4>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d4a:	4b1e      	ldr	r3, [pc, #120]	; (8000dc4 <MX_TIM3_Init+0xa4>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000d50:	4b1c      	ldr	r3, [pc, #112]	; (8000dc4 <MX_TIM3_Init+0xa4>)
 8000d52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d56:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d58:	4b1a      	ldr	r3, [pc, #104]	; (8000dc4 <MX_TIM3_Init+0xa4>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d5e:	4b19      	ldr	r3, [pc, #100]	; (8000dc4 <MX_TIM3_Init+0xa4>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000d64:	2303      	movs	r3, #3
 8000d66:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000d70:	2300      	movs	r3, #0
 8000d72:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000d74:	2300      	movs	r3, #0
 8000d76:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d80:	2300      	movs	r3, #0
 8000d82:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000d84:	2300      	movs	r3, #0
 8000d86:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000d88:	f107 030c 	add.w	r3, r7, #12
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	480d      	ldr	r0, [pc, #52]	; (8000dc4 <MX_TIM3_Init+0xa4>)
 8000d90:	f00c fad0 	bl	800d334 <HAL_TIM_Encoder_Init>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000d9a:	f000 fc7b 	bl	8001694 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000da2:	2300      	movs	r3, #0
 8000da4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000da6:	463b      	mov	r3, r7
 8000da8:	4619      	mov	r1, r3
 8000daa:	4806      	ldr	r0, [pc, #24]	; (8000dc4 <MX_TIM3_Init+0xa4>)
 8000dac:	f00d fb8a 	bl	800e4c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000db6:	f000 fc6d 	bl	8001694 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000dba:	bf00      	nop
 8000dbc:	3730      	adds	r7, #48	; 0x30
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	240002cc 	.word	0x240002cc
 8000dc8:	40000400 	.word	0x40000400

08000dcc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b08c      	sub	sp, #48	; 0x30
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000dd2:	f107 030c 	add.w	r3, r7, #12
 8000dd6:	2224      	movs	r2, #36	; 0x24
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f010 fbfc 	bl	80115d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000de0:	463b      	mov	r3, r7
 8000de2:	2200      	movs	r2, #0
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	605a      	str	r2, [r3, #4]
 8000de8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000dea:	4b21      	ldr	r3, [pc, #132]	; (8000e70 <MX_TIM4_Init+0xa4>)
 8000dec:	4a21      	ldr	r2, [pc, #132]	; (8000e74 <MX_TIM4_Init+0xa8>)
 8000dee:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000df0:	4b1f      	ldr	r3, [pc, #124]	; (8000e70 <MX_TIM4_Init+0xa4>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000df6:	4b1e      	ldr	r3, [pc, #120]	; (8000e70 <MX_TIM4_Init+0xa4>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000dfc:	4b1c      	ldr	r3, [pc, #112]	; (8000e70 <MX_TIM4_Init+0xa4>)
 8000dfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e02:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e04:	4b1a      	ldr	r3, [pc, #104]	; (8000e70 <MX_TIM4_Init+0xa4>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e0a:	4b19      	ldr	r3, [pc, #100]	; (8000e70 <MX_TIM4_Init+0xa4>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000e10:	2303      	movs	r3, #3
 8000e12:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000e14:	2300      	movs	r3, #0
 8000e16:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000e20:	2300      	movs	r3, #0
 8000e22:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000e24:	2300      	movs	r3, #0
 8000e26:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000e30:	2300      	movs	r3, #0
 8000e32:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000e34:	f107 030c 	add.w	r3, r7, #12
 8000e38:	4619      	mov	r1, r3
 8000e3a:	480d      	ldr	r0, [pc, #52]	; (8000e70 <MX_TIM4_Init+0xa4>)
 8000e3c:	f00c fa7a 	bl	800d334 <HAL_TIM_Encoder_Init>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000e46:	f000 fc25 	bl	8001694 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e52:	463b      	mov	r3, r7
 8000e54:	4619      	mov	r1, r3
 8000e56:	4806      	ldr	r0, [pc, #24]	; (8000e70 <MX_TIM4_Init+0xa4>)
 8000e58:	f00d fb34 	bl	800e4c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000e62:	f000 fc17 	bl	8001694 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000e66:	bf00      	nop
 8000e68:	3730      	adds	r7, #48	; 0x30
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	24000318 	.word	0x24000318
 8000e74:	40000800 	.word	0x40000800

08000e78 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b08c      	sub	sp, #48	; 0x30
 8000e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000e7e:	f107 030c 	add.w	r3, r7, #12
 8000e82:	2224      	movs	r2, #36	; 0x24
 8000e84:	2100      	movs	r1, #0
 8000e86:	4618      	mov	r0, r3
 8000e88:	f010 fba6 	bl	80115d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e8c:	463b      	mov	r3, r7
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	605a      	str	r2, [r3, #4]
 8000e94:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000e96:	4b21      	ldr	r3, [pc, #132]	; (8000f1c <MX_TIM5_Init+0xa4>)
 8000e98:	4a21      	ldr	r2, [pc, #132]	; (8000f20 <MX_TIM5_Init+0xa8>)
 8000e9a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000e9c:	4b1f      	ldr	r3, [pc, #124]	; (8000f1c <MX_TIM5_Init+0xa4>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ea2:	4b1e      	ldr	r3, [pc, #120]	; (8000f1c <MX_TIM5_Init+0xa4>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8000ea8:	4b1c      	ldr	r3, [pc, #112]	; (8000f1c <MX_TIM5_Init+0xa4>)
 8000eaa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000eae:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eb0:	4b1a      	ldr	r3, [pc, #104]	; (8000f1c <MX_TIM5_Init+0xa4>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eb6:	4b19      	ldr	r3, [pc, #100]	; (8000f1c <MX_TIM5_Init+0xa4>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000edc:	2300      	movs	r3, #0
 8000ede:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000ee0:	f107 030c 	add.w	r3, r7, #12
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	480d      	ldr	r0, [pc, #52]	; (8000f1c <MX_TIM5_Init+0xa4>)
 8000ee8:	f00c fa24 	bl	800d334 <HAL_TIM_Encoder_Init>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8000ef2:	f000 fbcf 	bl	8001694 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000efa:	2300      	movs	r3, #0
 8000efc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000efe:	463b      	mov	r3, r7
 8000f00:	4619      	mov	r1, r3
 8000f02:	4806      	ldr	r0, [pc, #24]	; (8000f1c <MX_TIM5_Init+0xa4>)
 8000f04:	f00d fade 	bl	800e4c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8000f0e:	f000 fbc1 	bl	8001694 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000f12:	bf00      	nop
 8000f14:	3730      	adds	r7, #48	; 0x30
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	24000364 	.word	0x24000364
 8000f20:	40000c00 	.word	0x40000c00

08000f24 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f2a:	1d3b      	adds	r3, r7, #4
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000f34:	4b14      	ldr	r3, [pc, #80]	; (8000f88 <MX_TIM7_Init+0x64>)
 8000f36:	4a15      	ldr	r2, [pc, #84]	; (8000f8c <MX_TIM7_Init+0x68>)
 8000f38:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 63;
 8000f3a:	4b13      	ldr	r3, [pc, #76]	; (8000f88 <MX_TIM7_Init+0x64>)
 8000f3c:	223f      	movs	r2, #63	; 0x3f
 8000f3e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f40:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <MX_TIM7_Init+0x64>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8000f46:	4b10      	ldr	r3, [pc, #64]	; (8000f88 <MX_TIM7_Init+0x64>)
 8000f48:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f4c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f4e:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <MX_TIM7_Init+0x64>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000f54:	480c      	ldr	r0, [pc, #48]	; (8000f88 <MX_TIM7_Init+0x64>)
 8000f56:	f00b fe33 	bl	800cbc0 <HAL_TIM_Base_Init>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000f60:	f000 fb98 	bl	8001694 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f64:	2300      	movs	r3, #0
 8000f66:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000f6c:	1d3b      	adds	r3, r7, #4
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4805      	ldr	r0, [pc, #20]	; (8000f88 <MX_TIM7_Init+0x64>)
 8000f72:	f00d faa7 	bl	800e4c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000f7c:	f000 fb8a 	bl	8001694 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000f80:	bf00      	nop
 8000f82:	3710      	adds	r7, #16
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	240003b0 	.word	0x240003b0
 8000f8c:	40001400 	.word	0x40001400

08000f90 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b088      	sub	sp, #32
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f96:	f107 0310 	add.w	r3, r7, #16
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	605a      	str	r2, [r3, #4]
 8000fa0:	609a      	str	r2, [r3, #8]
 8000fa2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fa4:	1d3b      	adds	r3, r7, #4
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	605a      	str	r2, [r3, #4]
 8000fac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000fae:	4b20      	ldr	r3, [pc, #128]	; (8001030 <MX_TIM8_Init+0xa0>)
 8000fb0:	4a20      	ldr	r2, [pc, #128]	; (8001034 <MX_TIM8_Init+0xa4>)
 8000fb2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 31;
 8000fb4:	4b1e      	ldr	r3, [pc, #120]	; (8001030 <MX_TIM8_Init+0xa0>)
 8000fb6:	221f      	movs	r2, #31
 8000fb8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fba:	4b1d      	ldr	r3, [pc, #116]	; (8001030 <MX_TIM8_Init+0xa0>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 999;
 8000fc0:	4b1b      	ldr	r3, [pc, #108]	; (8001030 <MX_TIM8_Init+0xa0>)
 8000fc2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000fc6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fc8:	4b19      	ldr	r3, [pc, #100]	; (8001030 <MX_TIM8_Init+0xa0>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000fce:	4b18      	ldr	r3, [pc, #96]	; (8001030 <MX_TIM8_Init+0xa0>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fd4:	4b16      	ldr	r3, [pc, #88]	; (8001030 <MX_TIM8_Init+0xa0>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000fda:	4815      	ldr	r0, [pc, #84]	; (8001030 <MX_TIM8_Init+0xa0>)
 8000fdc:	f00b fdf0 	bl	800cbc0 <HAL_TIM_Base_Init>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8000fe6:	f000 fb55 	bl	8001694 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000ff0:	f107 0310 	add.w	r3, r7, #16
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	480e      	ldr	r0, [pc, #56]	; (8001030 <MX_TIM8_Init+0xa0>)
 8000ff8:	f00c fd04 	bl	800da04 <HAL_TIM_ConfigClockSource>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8001002:	f000 fb47 	bl	8001694 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001006:	2300      	movs	r3, #0
 8001008:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800100a:	2300      	movs	r3, #0
 800100c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800100e:	2300      	movs	r3, #0
 8001010:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001012:	1d3b      	adds	r3, r7, #4
 8001014:	4619      	mov	r1, r3
 8001016:	4806      	ldr	r0, [pc, #24]	; (8001030 <MX_TIM8_Init+0xa0>)
 8001018:	f00d fa54 	bl	800e4c4 <HAL_TIMEx_MasterConfigSynchronization>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001022:	f000 fb37 	bl	8001694 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001026:	bf00      	nop
 8001028:	3720      	adds	r7, #32
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	240003fc 	.word	0x240003fc
 8001034:	40010400 	.word	0x40010400

08001038 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b088      	sub	sp, #32
 800103c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800103e:	1d3b      	adds	r3, r7, #4
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
 800104a:	611a      	str	r2, [r3, #16]
 800104c:	615a      	str	r2, [r3, #20]
 800104e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001050:	4b1f      	ldr	r3, [pc, #124]	; (80010d0 <MX_TIM12_Init+0x98>)
 8001052:	4a20      	ldr	r2, [pc, #128]	; (80010d4 <MX_TIM12_Init+0x9c>)
 8001054:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 3;
 8001056:	4b1e      	ldr	r3, [pc, #120]	; (80010d0 <MX_TIM12_Init+0x98>)
 8001058:	2203      	movs	r2, #3
 800105a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800105c:	4b1c      	ldr	r3, [pc, #112]	; (80010d0 <MX_TIM12_Init+0x98>)
 800105e:	2200      	movs	r2, #0
 8001060:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 999;
 8001062:	4b1b      	ldr	r3, [pc, #108]	; (80010d0 <MX_TIM12_Init+0x98>)
 8001064:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001068:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800106a:	4b19      	ldr	r3, [pc, #100]	; (80010d0 <MX_TIM12_Init+0x98>)
 800106c:	2200      	movs	r2, #0
 800106e:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001070:	4b17      	ldr	r3, [pc, #92]	; (80010d0 <MX_TIM12_Init+0x98>)
 8001072:	2200      	movs	r2, #0
 8001074:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001076:	4816      	ldr	r0, [pc, #88]	; (80010d0 <MX_TIM12_Init+0x98>)
 8001078:	f00b fe80 	bl	800cd7c <HAL_TIM_PWM_Init>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8001082:	f000 fb07 	bl	8001694 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001086:	2360      	movs	r3, #96	; 0x60
 8001088:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800108a:	2300      	movs	r3, #0
 800108c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800108e:	2300      	movs	r3, #0
 8001090:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001092:	2300      	movs	r3, #0
 8001094:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001096:	1d3b      	adds	r3, r7, #4
 8001098:	2200      	movs	r2, #0
 800109a:	4619      	mov	r1, r3
 800109c:	480c      	ldr	r0, [pc, #48]	; (80010d0 <MX_TIM12_Init+0x98>)
 800109e:	f00c fb9d 	bl	800d7dc <HAL_TIM_PWM_ConfigChannel>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 80010a8:	f000 faf4 	bl	8001694 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010ac:	1d3b      	adds	r3, r7, #4
 80010ae:	2204      	movs	r2, #4
 80010b0:	4619      	mov	r1, r3
 80010b2:	4807      	ldr	r0, [pc, #28]	; (80010d0 <MX_TIM12_Init+0x98>)
 80010b4:	f00c fb92 	bl	800d7dc <HAL_TIM_PWM_ConfigChannel>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 80010be:	f000 fae9 	bl	8001694 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80010c2:	4803      	ldr	r0, [pc, #12]	; (80010d0 <MX_TIM12_Init+0x98>)
 80010c4:	f005 f8e4 	bl	8006290 <HAL_TIM_MspPostInit>

}
 80010c8:	bf00      	nop
 80010ca:	3720      	adds	r7, #32
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	24000448 	.word	0x24000448
 80010d4:	40001800 	.word	0x40001800

080010d8 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80010dc:	4b0e      	ldr	r3, [pc, #56]	; (8001118 <MX_TIM13_Init+0x40>)
 80010de:	4a0f      	ldr	r2, [pc, #60]	; (800111c <MX_TIM13_Init+0x44>)
 80010e0:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 83;
 80010e2:	4b0d      	ldr	r3, [pc, #52]	; (8001118 <MX_TIM13_Init+0x40>)
 80010e4:	2253      	movs	r2, #83	; 0x53
 80010e6:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010e8:	4b0b      	ldr	r3, [pc, #44]	; (8001118 <MX_TIM13_Init+0x40>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 999;
 80010ee:	4b0a      	ldr	r3, [pc, #40]	; (8001118 <MX_TIM13_Init+0x40>)
 80010f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010f4:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010f6:	4b08      	ldr	r3, [pc, #32]	; (8001118 <MX_TIM13_Init+0x40>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010fc:	4b06      	ldr	r3, [pc, #24]	; (8001118 <MX_TIM13_Init+0x40>)
 80010fe:	2200      	movs	r2, #0
 8001100:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001102:	4805      	ldr	r0, [pc, #20]	; (8001118 <MX_TIM13_Init+0x40>)
 8001104:	f00b fd5c 	bl	800cbc0 <HAL_TIM_Base_Init>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 800110e:	f000 fac1 	bl	8001694 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	24000494 	.word	0x24000494
 800111c:	40001c00 	.word	0x40001c00

08001120 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001124:	4b0d      	ldr	r3, [pc, #52]	; (800115c <MX_TIM14_Init+0x3c>)
 8001126:	4a0e      	ldr	r2, [pc, #56]	; (8001160 <MX_TIM14_Init+0x40>)
 8001128:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 31;
 800112a:	4b0c      	ldr	r3, [pc, #48]	; (800115c <MX_TIM14_Init+0x3c>)
 800112c:	221f      	movs	r2, #31
 800112e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001130:	4b0a      	ldr	r3, [pc, #40]	; (800115c <MX_TIM14_Init+0x3c>)
 8001132:	2200      	movs	r2, #0
 8001134:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 99;
 8001136:	4b09      	ldr	r3, [pc, #36]	; (800115c <MX_TIM14_Init+0x3c>)
 8001138:	2263      	movs	r2, #99	; 0x63
 800113a:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800113c:	4b07      	ldr	r3, [pc, #28]	; (800115c <MX_TIM14_Init+0x3c>)
 800113e:	2200      	movs	r2, #0
 8001140:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001142:	4b06      	ldr	r3, [pc, #24]	; (800115c <MX_TIM14_Init+0x3c>)
 8001144:	2200      	movs	r2, #0
 8001146:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001148:	4804      	ldr	r0, [pc, #16]	; (800115c <MX_TIM14_Init+0x3c>)
 800114a:	f00b fd39 	bl	800cbc0 <HAL_TIM_Base_Init>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8001154:	f000 fa9e 	bl	8001694 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001158:	bf00      	nop
 800115a:	bd80      	pop	{r7, pc}
 800115c:	240004e0 	.word	0x240004e0
 8001160:	40002000 	.word	0x40002000

08001164 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b098      	sub	sp, #96	; 0x60
 8001168:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800116a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001176:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	605a      	str	r2, [r3, #4]
 8001180:	609a      	str	r2, [r3, #8]
 8001182:	60da      	str	r2, [r3, #12]
 8001184:	611a      	str	r2, [r3, #16]
 8001186:	615a      	str	r2, [r3, #20]
 8001188:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800118a:	1d3b      	adds	r3, r7, #4
 800118c:	2234      	movs	r2, #52	; 0x34
 800118e:	2100      	movs	r1, #0
 8001190:	4618      	mov	r0, r3
 8001192:	f010 fa21 	bl	80115d8 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001196:	4b3a      	ldr	r3, [pc, #232]	; (8001280 <MX_TIM15_Init+0x11c>)
 8001198:	4a3a      	ldr	r2, [pc, #232]	; (8001284 <MX_TIM15_Init+0x120>)
 800119a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 3;
 800119c:	4b38      	ldr	r3, [pc, #224]	; (8001280 <MX_TIM15_Init+0x11c>)
 800119e:	2203      	movs	r2, #3
 80011a0:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011a2:	4b37      	ldr	r3, [pc, #220]	; (8001280 <MX_TIM15_Init+0x11c>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 80011a8:	4b35      	ldr	r3, [pc, #212]	; (8001280 <MX_TIM15_Init+0x11c>)
 80011aa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011ae:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011b0:	4b33      	ldr	r3, [pc, #204]	; (8001280 <MX_TIM15_Init+0x11c>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80011b6:	4b32      	ldr	r3, [pc, #200]	; (8001280 <MX_TIM15_Init+0x11c>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011bc:	4b30      	ldr	r3, [pc, #192]	; (8001280 <MX_TIM15_Init+0x11c>)
 80011be:	2200      	movs	r2, #0
 80011c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80011c2:	482f      	ldr	r0, [pc, #188]	; (8001280 <MX_TIM15_Init+0x11c>)
 80011c4:	f00b fdda 	bl	800cd7c <HAL_TIM_PWM_Init>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 80011ce:	f000 fa61 	bl	8001694 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011d2:	2300      	movs	r3, #0
 80011d4:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011d6:	2300      	movs	r3, #0
 80011d8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80011da:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011de:	4619      	mov	r1, r3
 80011e0:	4827      	ldr	r0, [pc, #156]	; (8001280 <MX_TIM15_Init+0x11c>)
 80011e2:	f00d f96f 	bl	800e4c4 <HAL_TIMEx_MasterConfigSynchronization>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 80011ec:	f000 fa52 	bl	8001694 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011f0:	2360      	movs	r3, #96	; 0x60
 80011f2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011f8:	2300      	movs	r3, #0
 80011fa:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011fc:	2300      	movs	r3, #0
 80011fe:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001200:	2300      	movs	r3, #0
 8001202:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001204:	2300      	movs	r3, #0
 8001206:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001208:	2300      	movs	r3, #0
 800120a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800120c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001210:	2200      	movs	r2, #0
 8001212:	4619      	mov	r1, r3
 8001214:	481a      	ldr	r0, [pc, #104]	; (8001280 <MX_TIM15_Init+0x11c>)
 8001216:	f00c fae1 	bl	800d7dc <HAL_TIM_PWM_ConfigChannel>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8001220:	f000 fa38 	bl	8001694 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001224:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001228:	2204      	movs	r2, #4
 800122a:	4619      	mov	r1, r3
 800122c:	4814      	ldr	r0, [pc, #80]	; (8001280 <MX_TIM15_Init+0x11c>)
 800122e:	f00c fad5 	bl	800d7dc <HAL_TIM_PWM_ConfigChannel>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 8001238:	f000 fa2c 	bl	8001694 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800123c:	2300      	movs	r3, #0
 800123e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001240:	2300      	movs	r3, #0
 8001242:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001244:	2300      	movs	r3, #0
 8001246:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001248:	2300      	movs	r3, #0
 800124a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800124c:	2300      	movs	r3, #0
 800124e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001250:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001254:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800125a:	2300      	movs	r3, #0
 800125c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800125e:	1d3b      	adds	r3, r7, #4
 8001260:	4619      	mov	r1, r3
 8001262:	4807      	ldr	r0, [pc, #28]	; (8001280 <MX_TIM15_Init+0x11c>)
 8001264:	f00d f9ca 	bl	800e5fc <HAL_TIMEx_ConfigBreakDeadTime>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 800126e:	f000 fa11 	bl	8001694 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001272:	4803      	ldr	r0, [pc, #12]	; (8001280 <MX_TIM15_Init+0x11c>)
 8001274:	f005 f80c 	bl	8006290 <HAL_TIM_MspPostInit>

}
 8001278:	bf00      	nop
 800127a:	3760      	adds	r7, #96	; 0x60
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	2400052c 	.word	0x2400052c
 8001284:	40014000 	.word	0x40014000

08001288 <MX_TIM23_Init>:
  * @brief TIM23 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM23_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b08a      	sub	sp, #40	; 0x28
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800128e:	f107 031c 	add.w	r3, r7, #28
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	605a      	str	r2, [r3, #4]
 8001298:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800129a:	463b      	mov	r3, r7
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	60da      	str	r2, [r3, #12]
 80012a6:	611a      	str	r2, [r3, #16]
 80012a8:	615a      	str	r2, [r3, #20]
 80012aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 80012ac:	4b21      	ldr	r3, [pc, #132]	; (8001334 <MX_TIM23_Init+0xac>)
 80012ae:	4a22      	ldr	r2, [pc, #136]	; (8001338 <MX_TIM23_Init+0xb0>)
 80012b0:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 63;
 80012b2:	4b20      	ldr	r3, [pc, #128]	; (8001334 <MX_TIM23_Init+0xac>)
 80012b4:	223f      	movs	r2, #63	; 0x3f
 80012b6:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b8:	4b1e      	ldr	r3, [pc, #120]	; (8001334 <MX_TIM23_Init+0xac>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 19999;
 80012be:	4b1d      	ldr	r3, [pc, #116]	; (8001334 <MX_TIM23_Init+0xac>)
 80012c0:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80012c4:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012c6:	4b1b      	ldr	r3, [pc, #108]	; (8001334 <MX_TIM23_Init+0xac>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012cc:	4b19      	ldr	r3, [pc, #100]	; (8001334 <MX_TIM23_Init+0xac>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim23) != HAL_OK)
 80012d2:	4818      	ldr	r0, [pc, #96]	; (8001334 <MX_TIM23_Init+0xac>)
 80012d4:	f00b fd52 	bl	800cd7c <HAL_TIM_PWM_Init>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_TIM23_Init+0x5a>
  {
    Error_Handler();
 80012de:	f000 f9d9 	bl	8001694 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012e2:	2300      	movs	r3, #0
 80012e4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012e6:	2300      	movs	r3, #0
 80012e8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 80012ea:	f107 031c 	add.w	r3, r7, #28
 80012ee:	4619      	mov	r1, r3
 80012f0:	4810      	ldr	r0, [pc, #64]	; (8001334 <MX_TIM23_Init+0xac>)
 80012f2:	f00d f8e7 	bl	800e4c4 <HAL_TIMEx_MasterConfigSynchronization>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_TIM23_Init+0x78>
  {
    Error_Handler();
 80012fc:	f000 f9ca 	bl	8001694 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001300:	2360      	movs	r3, #96	; 0x60
 8001302:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001304:	2300      	movs	r3, #0
 8001306:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001308:	2300      	movs	r3, #0
 800130a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800130c:	2300      	movs	r3, #0
 800130e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim23, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001310:	463b      	mov	r3, r7
 8001312:	2200      	movs	r2, #0
 8001314:	4619      	mov	r1, r3
 8001316:	4807      	ldr	r0, [pc, #28]	; (8001334 <MX_TIM23_Init+0xac>)
 8001318:	f00c fa60 	bl	800d7dc <HAL_TIM_PWM_ConfigChannel>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_TIM23_Init+0x9e>
  {
    Error_Handler();
 8001322:	f000 f9b7 	bl	8001694 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */
  HAL_TIM_MspPostInit(&htim23);
 8001326:	4803      	ldr	r0, [pc, #12]	; (8001334 <MX_TIM23_Init+0xac>)
 8001328:	f004 ffb2 	bl	8006290 <HAL_TIM_MspPostInit>

}
 800132c:	bf00      	nop
 800132e:	3728      	adds	r7, #40	; 0x28
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	24000578 	.word	0x24000578
 8001338:	4000e000 	.word	0x4000e000

0800133c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001340:	4b22      	ldr	r3, [pc, #136]	; (80013cc <MX_USART1_UART_Init+0x90>)
 8001342:	4a23      	ldr	r2, [pc, #140]	; (80013d0 <MX_USART1_UART_Init+0x94>)
 8001344:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001346:	4b21      	ldr	r3, [pc, #132]	; (80013cc <MX_USART1_UART_Init+0x90>)
 8001348:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800134c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800134e:	4b1f      	ldr	r3, [pc, #124]	; (80013cc <MX_USART1_UART_Init+0x90>)
 8001350:	2200      	movs	r2, #0
 8001352:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001354:	4b1d      	ldr	r3, [pc, #116]	; (80013cc <MX_USART1_UART_Init+0x90>)
 8001356:	2200      	movs	r2, #0
 8001358:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800135a:	4b1c      	ldr	r3, [pc, #112]	; (80013cc <MX_USART1_UART_Init+0x90>)
 800135c:	2200      	movs	r2, #0
 800135e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001360:	4b1a      	ldr	r3, [pc, #104]	; (80013cc <MX_USART1_UART_Init+0x90>)
 8001362:	220c      	movs	r2, #12
 8001364:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001366:	4b19      	ldr	r3, [pc, #100]	; (80013cc <MX_USART1_UART_Init+0x90>)
 8001368:	2200      	movs	r2, #0
 800136a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800136c:	4b17      	ldr	r3, [pc, #92]	; (80013cc <MX_USART1_UART_Init+0x90>)
 800136e:	2200      	movs	r2, #0
 8001370:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001372:	4b16      	ldr	r3, [pc, #88]	; (80013cc <MX_USART1_UART_Init+0x90>)
 8001374:	2200      	movs	r2, #0
 8001376:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001378:	4b14      	ldr	r3, [pc, #80]	; (80013cc <MX_USART1_UART_Init+0x90>)
 800137a:	2200      	movs	r2, #0
 800137c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800137e:	4b13      	ldr	r3, [pc, #76]	; (80013cc <MX_USART1_UART_Init+0x90>)
 8001380:	2200      	movs	r2, #0
 8001382:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001384:	4811      	ldr	r0, [pc, #68]	; (80013cc <MX_USART1_UART_Init+0x90>)
 8001386:	f00d f9f7 	bl	800e778 <HAL_UART_Init>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001390:	f000 f980 	bl	8001694 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001394:	2100      	movs	r1, #0
 8001396:	480d      	ldr	r0, [pc, #52]	; (80013cc <MX_USART1_UART_Init+0x90>)
 8001398:	f00f fa7a 	bl	8010890 <HAL_UARTEx_SetTxFifoThreshold>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80013a2:	f000 f977 	bl	8001694 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013a6:	2100      	movs	r1, #0
 80013a8:	4808      	ldr	r0, [pc, #32]	; (80013cc <MX_USART1_UART_Init+0x90>)
 80013aa:	f00f faaf 	bl	801090c <HAL_UARTEx_SetRxFifoThreshold>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80013b4:	f000 f96e 	bl	8001694 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80013b8:	4804      	ldr	r0, [pc, #16]	; (80013cc <MX_USART1_UART_Init+0x90>)
 80013ba:	f00f fa30 	bl	801081e <HAL_UARTEx_DisableFifoMode>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80013c4:	f000 f966 	bl	8001694 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013c8:	bf00      	nop
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	240005c4 	.word	0x240005c4
 80013d0:	40011000 	.word	0x40011000

080013d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013da:	4b11      	ldr	r3, [pc, #68]	; (8001420 <MX_DMA_Init+0x4c>)
 80013dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013e0:	4a0f      	ldr	r2, [pc, #60]	; (8001420 <MX_DMA_Init+0x4c>)
 80013e2:	f043 0301 	orr.w	r3, r3, #1
 80013e6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80013ea:	4b0d      	ldr	r3, [pc, #52]	; (8001420 <MX_DMA_Init+0x4c>)
 80013ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013f0:	f003 0301 	and.w	r3, r3, #1
 80013f4:	607b      	str	r3, [r7, #4]
 80013f6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80013f8:	2200      	movs	r2, #0
 80013fa:	2100      	movs	r1, #0
 80013fc:	200b      	movs	r0, #11
 80013fe:	f005 fe40 	bl	8007082 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001402:	200b      	movs	r0, #11
 8001404:	f005 fe57 	bl	80070b6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001408:	2200      	movs	r2, #0
 800140a:	2100      	movs	r1, #0
 800140c:	200c      	movs	r0, #12
 800140e:	f005 fe38 	bl	8007082 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001412:	200c      	movs	r0, #12
 8001414:	f005 fe4f 	bl	80070b6 <HAL_NVIC_EnableIRQ>

}
 8001418:	bf00      	nop
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	58024400 	.word	0x58024400

08001424 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b08e      	sub	sp, #56	; 0x38
 8001428:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	605a      	str	r2, [r3, #4]
 8001434:	609a      	str	r2, [r3, #8]
 8001436:	60da      	str	r2, [r3, #12]
 8001438:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800143a:	4b8e      	ldr	r3, [pc, #568]	; (8001674 <MX_GPIO_Init+0x250>)
 800143c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001440:	4a8c      	ldr	r2, [pc, #560]	; (8001674 <MX_GPIO_Init+0x250>)
 8001442:	f043 0310 	orr.w	r3, r3, #16
 8001446:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800144a:	4b8a      	ldr	r3, [pc, #552]	; (8001674 <MX_GPIO_Init+0x250>)
 800144c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001450:	f003 0310 	and.w	r3, r3, #16
 8001454:	623b      	str	r3, [r7, #32]
 8001456:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001458:	4b86      	ldr	r3, [pc, #536]	; (8001674 <MX_GPIO_Init+0x250>)
 800145a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800145e:	4a85      	ldr	r2, [pc, #532]	; (8001674 <MX_GPIO_Init+0x250>)
 8001460:	f043 0304 	orr.w	r3, r3, #4
 8001464:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001468:	4b82      	ldr	r3, [pc, #520]	; (8001674 <MX_GPIO_Init+0x250>)
 800146a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800146e:	f003 0304 	and.w	r3, r3, #4
 8001472:	61fb      	str	r3, [r7, #28]
 8001474:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001476:	4b7f      	ldr	r3, [pc, #508]	; (8001674 <MX_GPIO_Init+0x250>)
 8001478:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800147c:	4a7d      	ldr	r2, [pc, #500]	; (8001674 <MX_GPIO_Init+0x250>)
 800147e:	f043 0320 	orr.w	r3, r3, #32
 8001482:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001486:	4b7b      	ldr	r3, [pc, #492]	; (8001674 <MX_GPIO_Init+0x250>)
 8001488:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800148c:	f003 0320 	and.w	r3, r3, #32
 8001490:	61bb      	str	r3, [r7, #24]
 8001492:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001494:	4b77      	ldr	r3, [pc, #476]	; (8001674 <MX_GPIO_Init+0x250>)
 8001496:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800149a:	4a76      	ldr	r2, [pc, #472]	; (8001674 <MX_GPIO_Init+0x250>)
 800149c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014a4:	4b73      	ldr	r3, [pc, #460]	; (8001674 <MX_GPIO_Init+0x250>)
 80014a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ae:	617b      	str	r3, [r7, #20]
 80014b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b2:	4b70      	ldr	r3, [pc, #448]	; (8001674 <MX_GPIO_Init+0x250>)
 80014b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014b8:	4a6e      	ldr	r2, [pc, #440]	; (8001674 <MX_GPIO_Init+0x250>)
 80014ba:	f043 0301 	orr.w	r3, r3, #1
 80014be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014c2:	4b6c      	ldr	r3, [pc, #432]	; (8001674 <MX_GPIO_Init+0x250>)
 80014c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014c8:	f003 0301 	and.w	r3, r3, #1
 80014cc:	613b      	str	r3, [r7, #16]
 80014ce:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d0:	4b68      	ldr	r3, [pc, #416]	; (8001674 <MX_GPIO_Init+0x250>)
 80014d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014d6:	4a67      	ldr	r2, [pc, #412]	; (8001674 <MX_GPIO_Init+0x250>)
 80014d8:	f043 0302 	orr.w	r3, r3, #2
 80014dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014e0:	4b64      	ldr	r3, [pc, #400]	; (8001674 <MX_GPIO_Init+0x250>)
 80014e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ee:	4b61      	ldr	r3, [pc, #388]	; (8001674 <MX_GPIO_Init+0x250>)
 80014f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014f4:	4a5f      	ldr	r2, [pc, #380]	; (8001674 <MX_GPIO_Init+0x250>)
 80014f6:	f043 0308 	orr.w	r3, r3, #8
 80014fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014fe:	4b5d      	ldr	r3, [pc, #372]	; (8001674 <MX_GPIO_Init+0x250>)
 8001500:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001504:	f003 0308 	and.w	r3, r3, #8
 8001508:	60bb      	str	r3, [r7, #8]
 800150a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800150c:	4b59      	ldr	r3, [pc, #356]	; (8001674 <MX_GPIO_Init+0x250>)
 800150e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001512:	4a58      	ldr	r2, [pc, #352]	; (8001674 <MX_GPIO_Init+0x250>)
 8001514:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001518:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800151c:	4b55      	ldr	r3, [pc, #340]	; (8001674 <MX_GPIO_Init+0x250>)
 800151e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001526:	607b      	str	r3, [r7, #4]
 8001528:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8, GPIO_PIN_RESET);
 800152a:	2200      	movs	r2, #0
 800152c:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8001530:	4851      	ldr	r0, [pc, #324]	; (8001678 <MX_GPIO_Init+0x254>)
 8001532:	f009 f89b 	bl	800a66c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001536:	2200      	movs	r2, #0
 8001538:	f242 0130 	movw	r1, #8240	; 0x2030
 800153c:	484f      	ldr	r0, [pc, #316]	; (800167c <MX_GPIO_Init+0x258>)
 800153e:	f009 f895 	bl	800a66c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_15, GPIO_PIN_RESET);
 8001542:	2200      	movs	r2, #0
 8001544:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
 8001548:	484d      	ldr	r0, [pc, #308]	; (8001680 <MX_GPIO_Init+0x25c>)
 800154a:	f009 f88f 	bl	800a66c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800154e:	2200      	movs	r2, #0
 8001550:	21f0      	movs	r1, #240	; 0xf0
 8001552:	484c      	ldr	r0, [pc, #304]	; (8001684 <MX_GPIO_Init+0x260>)
 8001554:	f009 f88a 	bl	800a66c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_6
 8001558:	2200      	movs	r2, #0
 800155a:	f44f 515f 	mov.w	r1, #14272	; 0x37c0
 800155e:	484a      	ldr	r0, [pc, #296]	; (8001688 <MX_GPIO_Init+0x264>)
 8001560:	f009 f884 	bl	800a66c <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_14, GPIO_PIN_RESET);
 8001564:	2200      	movs	r2, #0
 8001566:	f44f 4182 	mov.w	r1, #16640	; 0x4100
 800156a:	4848      	ldr	r0, [pc, #288]	; (800168c <MX_GPIO_Init+0x268>)
 800156c:	f009 f87e 	bl	800a66c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE8 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8;
 8001570:	f44f 738e 	mov.w	r3, #284	; 0x11c
 8001574:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001576:	2301      	movs	r3, #1
 8001578:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157a:	2300      	movs	r3, #0
 800157c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157e:	2300      	movs	r3, #0
 8001580:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001582:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001586:	4619      	mov	r1, r3
 8001588:	483b      	ldr	r0, [pc, #236]	; (8001678 <MX_GPIO_Init+0x254>)
 800158a:	f008 fdad 	bl	800a0e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_5;
 800158e:	f242 0330 	movw	r3, #8240	; 0x2030
 8001592:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001594:	2301      	movs	r3, #1
 8001596:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159c:	2300      	movs	r3, #0
 800159e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015a4:	4619      	mov	r1, r3
 80015a6:	4835      	ldr	r0, [pc, #212]	; (800167c <MX_GPIO_Init+0x258>)
 80015a8:	f008 fd9e 	bl	800a0e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80015ac:	2308      	movs	r3, #8
 80015ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015b0:	2300      	movs	r3, #0
 80015b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015bc:	4619      	mov	r1, r3
 80015be:	4830      	ldr	r0, [pc, #192]	; (8001680 <MX_GPIO_Init+0x25c>)
 80015c0:	f008 fd92 	bl	800a0e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF8 PF9 PF11 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_15;
 80015c4:	f44f 430b 	mov.w	r3, #35584	; 0x8b00
 80015c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ca:	2301      	movs	r3, #1
 80015cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d2:	2300      	movs	r3, #0
 80015d4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015da:	4619      	mov	r1, r3
 80015dc:	4828      	ldr	r0, [pc, #160]	; (8001680 <MX_GPIO_Init+0x25c>)
 80015de:	f008 fd83 	bl	800a0e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80015e2:	2303      	movs	r3, #3
 80015e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015e6:	2300      	movs	r3, #0
 80015e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015f2:	4619      	mov	r1, r3
 80015f4:	4821      	ldr	r0, [pc, #132]	; (800167c <MX_GPIO_Init+0x258>)
 80015f6:	f008 fd77 	bl	800a0e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80015fa:	23f0      	movs	r3, #240	; 0xf0
 80015fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015fe:	2301      	movs	r3, #1
 8001600:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001602:	2300      	movs	r3, #0
 8001604:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001606:	2300      	movs	r3, #0
 8001608:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800160e:	4619      	mov	r1, r3
 8001610:	481c      	ldr	r0, [pc, #112]	; (8001684 <MX_GPIO_Init+0x260>)
 8001612:	f008 fd69 	bl	800a0e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB12 PB13 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_6
 8001616:	f44f 535f 	mov.w	r3, #14272	; 0x37c0
 800161a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800161c:	2301      	movs	r3, #1
 800161e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001624:	2300      	movs	r3, #0
 8001626:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001628:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800162c:	4619      	mov	r1, r3
 800162e:	4816      	ldr	r0, [pc, #88]	; (8001688 <MX_GPIO_Init+0x264>)
 8001630:	f008 fd5a 	bl	800a0e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_14;
 8001634:	f44f 4382 	mov.w	r3, #16640	; 0x4100
 8001638:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800163a:	2301      	movs	r3, #1
 800163c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163e:	2300      	movs	r3, #0
 8001640:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001642:	2300      	movs	r3, #0
 8001644:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001646:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800164a:	4619      	mov	r1, r3
 800164c:	480f      	ldr	r0, [pc, #60]	; (800168c <MX_GPIO_Init+0x268>)
 800164e:	f008 fd4b 	bl	800a0e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG3 PG4 PG5 PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001652:	2378      	movs	r3, #120	; 0x78
 8001654:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001656:	2300      	movs	r3, #0
 8001658:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165a:	2300      	movs	r3, #0
 800165c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800165e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001662:	4619      	mov	r1, r3
 8001664:	480a      	ldr	r0, [pc, #40]	; (8001690 <MX_GPIO_Init+0x26c>)
 8001666:	f008 fd3f 	bl	800a0e8 <HAL_GPIO_Init>

}
 800166a:	bf00      	nop
 800166c:	3738      	adds	r7, #56	; 0x38
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	58024400 	.word	0x58024400
 8001678:	58021000 	.word	0x58021000
 800167c:	58020800 	.word	0x58020800
 8001680:	58021400 	.word	0x58021400
 8001684:	58020000 	.word	0x58020000
 8001688:	58020400 	.word	0x58020400
 800168c:	58020c00 	.word	0x58020c00
 8001690:	58021800 	.word	0x58021800

08001694 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001698:	b672      	cpsid	i
}
 800169a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800169c:	e7fe      	b.n	800169c <Error_Handler+0x8>
	...

080016a0 <main_function>:
#include "debug.h"
#include "ros_main.h"
#include "stm_main.h"


void main_function(){
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
	ROS::setup();
 80016a4:	f002 fba8 	bl	8003df8 <_ZN3ROS5setupEv>
	STM::setup();
 80016a8:	f005 f81a 	bl	80066e0 <_ZN3STM5setupEv>

	while(1){
		if(debug_mode) debug_loop();
 80016ac:	4b04      	ldr	r3, [pc, #16]	; (80016c0 <main_function+0x20>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d002      	beq.n	80016ba <main_function+0x1a>
 80016b4:	f7ff f960 	bl	8000978 <_Z10debug_loopv>
 80016b8:	e7f8      	b.n	80016ac <main_function+0xc>
		else ROS::loop();
 80016ba:	f002 fbcb 	bl	8003e54 <_ZN3ROS4loopEv>
		if(debug_mode) debug_loop();
 80016be:	e7f5      	b.n	80016ac <main_function+0xc>
 80016c0:	24000260 	.word	0x24000260

080016c4 <_ZN8CAR_INFOC1Ev>:

typedef struct{
	double Vx=0;
	double Vy=0;
	double Omega=0;
} CAR_INFO;
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	6879      	ldr	r1, [r7, #4]
 80016ce:	f04f 0200 	mov.w	r2, #0
 80016d2:	f04f 0300 	mov.w	r3, #0
 80016d6:	e9c1 2300 	strd	r2, r3, [r1]
 80016da:	6879      	ldr	r1, [r7, #4]
 80016dc:	f04f 0200 	mov.w	r2, #0
 80016e0:	f04f 0300 	mov.w	r3, #0
 80016e4:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80016e8:	6879      	ldr	r1, [r7, #4]
 80016ea:	f04f 0200 	mov.w	r2, #0
 80016ee:	f04f 0300 	mov.w	r3, #0
 80016f2:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4618      	mov	r0, r3
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	0000      	movs	r0, r0
	...

08001708 <_ZN7MecanumC1Ev>:
#include "mecanum.h"
#include "dc_motor.h"

Mecanum mecanum;

Mecanum::Mecanum(void){
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff ffd6 	bl	80016c4 <_ZN8CAR_INFOC1Ev>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	3318      	adds	r3, #24
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff ffd1 	bl	80016c4 <_ZN8CAR_INFOC1Ev>
 8001722:	6879      	ldr	r1, [r7, #4]
 8001724:	f04f 0200 	mov.w	r2, #0
 8001728:	4b0f      	ldr	r3, [pc, #60]	; (8001768 <_ZN7MecanumC1Ev+0x60>)
 800172a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 800172e:	6879      	ldr	r1, [r7, #4]
 8001730:	a309      	add	r3, pc, #36	; (adr r3, 8001758 <_ZN7MecanumC1Ev+0x50>)
 8001732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001736:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 800173a:	6879      	ldr	r1, [r7, #4]
 800173c:	a308      	add	r3, pc, #32	; (adr r3, 8001760 <_ZN7MecanumC1Ev+0x58>)
 800173e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001742:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	DC_motor_init();
 8001746:	f7fe ff99 	bl	800067c <_Z13DC_motor_initv>
}
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4618      	mov	r0, r3
 800174e:	3708      	adds	r7, #8
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	f3af 8000 	nop.w
 8001758:	cccccccd 	.word	0xcccccccd
 800175c:	4020cccc 	.word	0x4020cccc
 8001760:	39581062 	.word	0x39581062
 8001764:	400d48b4 	.word	0x400d48b4
 8001768:	40270000 	.word	0x40270000

0800176c <_ZN7Mecanum3runEv>:

// calculate wheel (-> PID) -> calculate car -> pub
void Mecanum::run(void){
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
	tf2_wheel_speed();
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f000 f807 	bl	8001788 <_ZN7Mecanum15tf2_wheel_speedEv>
	tf2_car_speed();
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f000 f89a 	bl	80018b4 <_ZN7Mecanum13tf2_car_speedEv>
}
 8001780:	bf00      	nop
 8001782:	3708      	adds	r7, #8
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}

08001788 <_ZN7Mecanum15tf2_wheel_speedEv>:


// alter wheel speed
void Mecanum::tf2_wheel_speed(void){
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
	fl.rps_goal = -(CAR_Goal.Vy + CAR_Goal.Vx - CAR_Goal.Omega*(a+b) )/radius;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	ed93 6b02 	vldr	d6, [r3, #8]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	ed93 7b00 	vldr	d7, [r3]
 800179c:	ee36 6b07 	vadd.f64	d6, d6, d7
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	ed93 5b04 	vldr	d5, [r3, #16]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	ed93 4b0c 	vldr	d4, [r3, #48]	; 0x30
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 80017b2:	ee34 7b07 	vadd.f64	d7, d4, d7
 80017b6:	ee25 7b07 	vmul.f64	d7, d5, d7
 80017ba:	ee36 7b47 	vsub.f64	d7, d6, d7
 80017be:	eeb1 5b47 	vneg.f64	d5, d7
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 80017c8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80017cc:	4b35      	ldr	r3, [pc, #212]	; (80018a4 <_ZN7Mecanum15tf2_wheel_speedEv+0x11c>)
 80017ce:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
	fr.rps_goal = -(CAR_Goal.Vy - CAR_Goal.Vx + CAR_Goal.Omega*(a+b) )/radius;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	ed93 6b02 	vldr	d6, [r3, #8]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	ed93 7b00 	vldr	d7, [r3]
 80017de:	ee36 6b47 	vsub.f64	d6, d6, d7
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	ed93 5b04 	vldr	d5, [r3, #16]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	ed93 4b0c 	vldr	d4, [r3, #48]	; 0x30
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 80017f4:	ee34 7b07 	vadd.f64	d7, d4, d7
 80017f8:	ee25 7b07 	vmul.f64	d7, d5, d7
 80017fc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001800:	eeb1 5b47 	vneg.f64	d5, d7
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 800180a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800180e:	4b26      	ldr	r3, [pc, #152]	; (80018a8 <_ZN7Mecanum15tf2_wheel_speedEv+0x120>)
 8001810:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
	bl.rps_goal = -(CAR_Goal.Vy - CAR_Goal.Vx - CAR_Goal.Omega*(a+b) )/radius;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	ed93 6b02 	vldr	d6, [r3, #8]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	ed93 7b00 	vldr	d7, [r3]
 8001820:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	ed93 5b04 	vldr	d5, [r3, #16]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	ed93 4b0c 	vldr	d4, [r3, #48]	; 0x30
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8001836:	ee34 7b07 	vadd.f64	d7, d4, d7
 800183a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800183e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001842:	eeb1 5b47 	vneg.f64	d5, d7
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 800184c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001850:	4b16      	ldr	r3, [pc, #88]	; (80018ac <_ZN7Mecanum15tf2_wheel_speedEv+0x124>)
 8001852:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
	br.rps_goal = -(CAR_Goal.Vy + CAR_Goal.Vx + CAR_Goal.Omega*(a+b) )/radius;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	ed93 6b02 	vldr	d6, [r3, #8]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	ed93 7b00 	vldr	d7, [r3]
 8001862:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	ed93 5b04 	vldr	d5, [r3, #16]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	ed93 4b0c 	vldr	d4, [r3, #48]	; 0x30
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8001878:	ee34 7b07 	vadd.f64	d7, d4, d7
 800187c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001880:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001884:	eeb1 5b47 	vneg.f64	d5, d7
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 800188e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001892:	4b07      	ldr	r3, [pc, #28]	; (80018b0 <_ZN7Mecanum15tf2_wheel_speedEv+0x128>)
 8001894:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	24000110 	.word	0x24000110
 80018a8:	240000a0 	.word	0x240000a0
 80018ac:	240001f0 	.word	0x240001f0
 80018b0:	24000180 	.word	0x24000180

080018b4 <_ZN7Mecanum13tf2_car_speedEv>:


// give current car speed
void Mecanum::tf2_car_speed(void){
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
	CAR_Now.Vy = -(0.25)*radius*(fl.rps_now + fr.rps_now + bl.rps_now + br.rps_now);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80018c2:	eebd 6b00 	vmov.f64	d6, #208	; 0xbe800000 -0.250
 80018c6:	ee27 6b06 	vmul.f64	d6, d7, d6
 80018ca:	4b33      	ldr	r3, [pc, #204]	; (8001998 <_ZN7Mecanum13tf2_car_speedEv+0xe4>)
 80018cc:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
 80018d0:	4b32      	ldr	r3, [pc, #200]	; (800199c <_ZN7Mecanum13tf2_car_speedEv+0xe8>)
 80018d2:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80018d6:	ee35 5b07 	vadd.f64	d5, d5, d7
 80018da:	4b31      	ldr	r3, [pc, #196]	; (80019a0 <_ZN7Mecanum13tf2_car_speedEv+0xec>)
 80018dc:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80018e0:	ee35 5b07 	vadd.f64	d5, d5, d7
 80018e4:	4b2f      	ldr	r3, [pc, #188]	; (80019a4 <_ZN7Mecanum13tf2_car_speedEv+0xf0>)
 80018e6:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80018ea:	ee35 7b07 	vadd.f64	d7, d5, d7
 80018ee:	ee26 7b07 	vmul.f64	d7, d6, d7
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	ed83 7b08 	vstr	d7, [r3, #32]
	CAR_Now.Vx = -(0.25)*radius*(fl.rps_now - fr.rps_now - bl.rps_now + br.rps_now);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80018fe:	eebd 6b00 	vmov.f64	d6, #208	; 0xbe800000 -0.250
 8001902:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001906:	4b24      	ldr	r3, [pc, #144]	; (8001998 <_ZN7Mecanum13tf2_car_speedEv+0xe4>)
 8001908:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
 800190c:	4b23      	ldr	r3, [pc, #140]	; (800199c <_ZN7Mecanum13tf2_car_speedEv+0xe8>)
 800190e:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001912:	ee35 5b47 	vsub.f64	d5, d5, d7
 8001916:	4b22      	ldr	r3, [pc, #136]	; (80019a0 <_ZN7Mecanum13tf2_car_speedEv+0xec>)
 8001918:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 800191c:	ee35 5b47 	vsub.f64	d5, d5, d7
 8001920:	4b20      	ldr	r3, [pc, #128]	; (80019a4 <_ZN7Mecanum13tf2_car_speedEv+0xf0>)
 8001922:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001926:	ee35 7b07 	vadd.f64	d7, d5, d7
 800192a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	ed83 7b06 	vstr	d7, [r3, #24]
	CAR_Now.Omega = -(0.25)*radius*(1/(a+b))*(-fl.rps_now + fr.rps_now - bl.rps_now + br.rps_now);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 800193a:	eebd 6b00 	vmov.f64	d6, #208	; 0xbe800000 -0.250
 800193e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	ed93 5b0c 	vldr	d5, [r3, #48]	; 0x30
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 800194e:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001952:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8001956:	ee84 7b05 	vdiv.f64	d7, d4, d5
 800195a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800195e:	4b0f      	ldr	r3, [pc, #60]	; (800199c <_ZN7Mecanum13tf2_car_speedEv+0xe8>)
 8001960:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
 8001964:	4b0c      	ldr	r3, [pc, #48]	; (8001998 <_ZN7Mecanum13tf2_car_speedEv+0xe4>)
 8001966:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 800196a:	ee35 5b47 	vsub.f64	d5, d5, d7
 800196e:	4b0c      	ldr	r3, [pc, #48]	; (80019a0 <_ZN7Mecanum13tf2_car_speedEv+0xec>)
 8001970:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001974:	ee35 5b47 	vsub.f64	d5, d5, d7
 8001978:	4b0a      	ldr	r3, [pc, #40]	; (80019a4 <_ZN7Mecanum13tf2_car_speedEv+0xf0>)
 800197a:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 800197e:	ee35 7b07 	vadd.f64	d7, d5, d7
 8001982:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
}
 800198c:	bf00      	nop
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr
 8001998:	24000110 	.word	0x24000110
 800199c:	240000a0 	.word	0x240000a0
 80019a0:	240001f0 	.word	0x240001f0
 80019a4:	24000180 	.word	0x24000180

080019a8 <_Z41__static_initialization_and_destruction_0ii>:
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d107      	bne.n	80019c8 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019be:	4293      	cmp	r3, r2
 80019c0:	d102      	bne.n	80019c8 <_Z41__static_initialization_and_destruction_0ii+0x20>
Mecanum mecanum;
 80019c2:	4803      	ldr	r0, [pc, #12]	; (80019d0 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 80019c4:	f7ff fea0 	bl	8001708 <_ZN7MecanumC1Ev>
}
 80019c8:	bf00      	nop
 80019ca:	3708      	adds	r7, #8
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	24000748 	.word	0x24000748

080019d4 <_GLOBAL__sub_I_mecanum>:
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80019dc:	2001      	movs	r0, #1
 80019de:	f7ff ffe3 	bl	80019a8 <_Z41__static_initialization_and_destruction_0ii>
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <_ZN7MYRESET7receiveEv>:

namespace MYRESET{
	int state=0;
}

void MYRESET::receive(void){
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
	/* first part*/
	if (HAL_GPIO_ReadPin(THIRD_PART_PORT, THIRD_PART_PIN) == 0)MYRESET::state=3;
 80019e8:	2102      	movs	r1, #2
 80019ea:	481a      	ldr	r0, [pc, #104]	; (8001a54 <_ZN7MYRESET7receiveEv+0x70>)
 80019ec:	f008 fe26 	bl	800a63c <HAL_GPIO_ReadPin>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	bf0c      	ite	eq
 80019f6:	2301      	moveq	r3, #1
 80019f8:	2300      	movne	r3, #0
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d003      	beq.n	8001a08 <_ZN7MYRESET7receiveEv+0x24>
 8001a00:	4b15      	ldr	r3, [pc, #84]	; (8001a58 <_ZN7MYRESET7receiveEv+0x74>)
 8001a02:	2203      	movs	r2, #3
 8001a04:	601a      	str	r2, [r3, #0]

	/* third part*/
	else if (HAL_GPIO_ReadPin(FIRST_PART_PORT, FIRST_PART_PIN) == 0) MYRESET::state=1;

	else MYRESET::state=0;
}
 8001a06:	e022      	b.n	8001a4e <_ZN7MYRESET7receiveEv+0x6a>
	else if (HAL_GPIO_ReadPin(SECOND_PART_PORT, SECOND_PART_PIN) == 0) MYRESET::state=2;
 8001a08:	2101      	movs	r1, #1
 8001a0a:	4812      	ldr	r0, [pc, #72]	; (8001a54 <_ZN7MYRESET7receiveEv+0x70>)
 8001a0c:	f008 fe16 	bl	800a63c <HAL_GPIO_ReadPin>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	bf0c      	ite	eq
 8001a16:	2301      	moveq	r3, #1
 8001a18:	2300      	movne	r3, #0
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d003      	beq.n	8001a28 <_ZN7MYRESET7receiveEv+0x44>
 8001a20:	4b0d      	ldr	r3, [pc, #52]	; (8001a58 <_ZN7MYRESET7receiveEv+0x74>)
 8001a22:	2202      	movs	r2, #2
 8001a24:	601a      	str	r2, [r3, #0]
}
 8001a26:	e012      	b.n	8001a4e <_ZN7MYRESET7receiveEv+0x6a>
	else if (HAL_GPIO_ReadPin(FIRST_PART_PORT, FIRST_PART_PIN) == 0) MYRESET::state=1;
 8001a28:	2108      	movs	r1, #8
 8001a2a:	480c      	ldr	r0, [pc, #48]	; (8001a5c <_ZN7MYRESET7receiveEv+0x78>)
 8001a2c:	f008 fe06 	bl	800a63c <HAL_GPIO_ReadPin>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	bf0c      	ite	eq
 8001a36:	2301      	moveq	r3, #1
 8001a38:	2300      	movne	r3, #0
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d003      	beq.n	8001a48 <_ZN7MYRESET7receiveEv+0x64>
 8001a40:	4b05      	ldr	r3, [pc, #20]	; (8001a58 <_ZN7MYRESET7receiveEv+0x74>)
 8001a42:	2201      	movs	r2, #1
 8001a44:	601a      	str	r2, [r3, #0]
}
 8001a46:	e002      	b.n	8001a4e <_ZN7MYRESET7receiveEv+0x6a>
	else MYRESET::state=0;
 8001a48:	4b03      	ldr	r3, [pc, #12]	; (8001a58 <_ZN7MYRESET7receiveEv+0x74>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	601a      	str	r2, [r3, #0]
}
 8001a4e:	bf00      	nop
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	58020800 	.word	0x58020800
 8001a58:	240007a8 	.word	0x240007a8
 8001a5c:	58021400 	.word	0x58021400

08001a60 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2200      	movs	r2, #0
 8001a72:	605a      	str	r2, [r3, #4]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	4618      	mov	r0, r3
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
	...

08001a84 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	4a04      	ldr	r2, [pc, #16]	; (8001aa0 <_ZN3ros3MsgC1Ev+0x1c>)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	601a      	str	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4618      	mov	r0, r3
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	08011c48 	.word	0x08011c48

08001aa4 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
      data()
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff ffe8 	bl	8001a84 <_ZN3ros3MsgC1Ev>
 8001ab4:	4a06      	ldr	r2, [pc, #24]	; (8001ad0 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	601a      	str	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	3304      	adds	r3, #4
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7ff ffce 	bl	8001a60 <_ZN3ros4TimeC1Ev>
    {
    }
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	08011c30 	.word	0x08011c30

08001ad4 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001ad4:	b480      	push	{r7}
 8001ad6:	b085      	sub	sp, #20
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6859      	ldr	r1, [r3, #4]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	683a      	ldr	r2, [r7, #0]
 8001aea:	4413      	add	r3, r2
 8001aec:	b2ca      	uxtb	r2, r1
 8001aee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	0a19      	lsrs	r1, r3, #8
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	3301      	adds	r3, #1
 8001afa:	683a      	ldr	r2, [r7, #0]
 8001afc:	4413      	add	r3, r2
 8001afe:	b2ca      	uxtb	r2, r1
 8001b00:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	0c19      	lsrs	r1, r3, #16
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	3302      	adds	r3, #2
 8001b0c:	683a      	ldr	r2, [r7, #0]
 8001b0e:	4413      	add	r3, r2
 8001b10:	b2ca      	uxtb	r2, r1
 8001b12:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	0e19      	lsrs	r1, r3, #24
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	3303      	adds	r3, #3
 8001b1e:	683a      	ldr	r2, [r7, #0]
 8001b20:	4413      	add	r3, r2
 8001b22:	b2ca      	uxtb	r2, r1
 8001b24:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	3304      	adds	r3, #4
 8001b2a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6899      	ldr	r1, [r3, #8]
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	683a      	ldr	r2, [r7, #0]
 8001b34:	4413      	add	r3, r2
 8001b36:	b2ca      	uxtb	r2, r1
 8001b38:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	0a19      	lsrs	r1, r3, #8
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	3301      	adds	r3, #1
 8001b44:	683a      	ldr	r2, [r7, #0]
 8001b46:	4413      	add	r3, r2
 8001b48:	b2ca      	uxtb	r2, r1
 8001b4a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	0c19      	lsrs	r1, r3, #16
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	3302      	adds	r3, #2
 8001b56:	683a      	ldr	r2, [r7, #0]
 8001b58:	4413      	add	r3, r2
 8001b5a:	b2ca      	uxtb	r2, r1
 8001b5c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	0e19      	lsrs	r1, r3, #24
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	3303      	adds	r3, #3
 8001b68:	683a      	ldr	r2, [r7, #0]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	b2ca      	uxtb	r2, r1
 8001b6e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	3304      	adds	r3, #4
 8001b74:	60fb      	str	r3, [r7, #12]
      return offset;
 8001b76:	68fb      	ldr	r3, [r7, #12]
    }
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3714      	adds	r7, #20
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001b84:	b480      	push	{r7}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	683a      	ldr	r2, [r7, #0]
 8001b96:	4413      	add	r3, r2
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685a      	ldr	r2, [r3, #4]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	6839      	ldr	r1, [r7, #0]
 8001baa:	440b      	add	r3, r1
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	021b      	lsls	r3, r3, #8
 8001bb0:	431a      	orrs	r2, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685a      	ldr	r2, [r3, #4]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	3302      	adds	r3, #2
 8001bbe:	6839      	ldr	r1, [r7, #0]
 8001bc0:	440b      	add	r3, r1
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	041b      	lsls	r3, r3, #16
 8001bc6:	431a      	orrs	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685a      	ldr	r2, [r3, #4]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	3303      	adds	r3, #3
 8001bd4:	6839      	ldr	r1, [r7, #0]
 8001bd6:	440b      	add	r3, r1
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	061b      	lsls	r3, r3, #24
 8001bdc:	431a      	orrs	r2, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	3304      	adds	r3, #4
 8001be6:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	683a      	ldr	r2, [r7, #0]
 8001bec:	4413      	add	r3, r2
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	689a      	ldr	r2, [r3, #8]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	6839      	ldr	r1, [r7, #0]
 8001c00:	440b      	add	r3, r1
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	021b      	lsls	r3, r3, #8
 8001c06:	431a      	orrs	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689a      	ldr	r2, [r3, #8]
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	3302      	adds	r3, #2
 8001c14:	6839      	ldr	r1, [r7, #0]
 8001c16:	440b      	add	r3, r1
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	041b      	lsls	r3, r3, #16
 8001c1c:	431a      	orrs	r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	689a      	ldr	r2, [r3, #8]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	3303      	adds	r3, #3
 8001c2a:	6839      	ldr	r1, [r7, #0]
 8001c2c:	440b      	add	r3, r1
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	061b      	lsls	r3, r3, #24
 8001c32:	431a      	orrs	r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	3304      	adds	r3, #4
 8001c3c:	60fb      	str	r3, [r7, #12]
     return offset;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
    }
 8001c40:	4618      	mov	r0, r3
 8001c42:	3714      	adds	r7, #20
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	4b03      	ldr	r3, [pc, #12]	; (8001c64 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8001c56:	4618      	mov	r0, r3
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	08011908 	.word	0x08011908

08001c68 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	4b03      	ldr	r3, [pc, #12]	; (8001c80 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8001c72:	4618      	mov	r0, r3
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	08011918 	.word	0x08011918

08001c84 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff fef8 	bl	8001a84 <_ZN3ros3MsgC1Ev>
 8001c94:	4a0b      	ldr	r2, [pc, #44]	; (8001cc4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	601a      	str	r2, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	809a      	strh	r2, [r3, #4]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4a09      	ldr	r2, [pc, #36]	; (8001cc8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001ca4:	609a      	str	r2, [r3, #8]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4a07      	ldr	r2, [pc, #28]	; (8001cc8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001caa:	60da      	str	r2, [r3, #12]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	4a06      	ldr	r2, [pc, #24]	; (8001cc8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001cb0:	611a      	str	r2, [r3, #16]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	615a      	str	r2, [r3, #20]
    {
    }
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	08011c18 	.word	0x08011c18
 8001cc8:	0801193c 	.word	0x0801193c

08001ccc <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b088      	sub	sp, #32
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	8899      	ldrh	r1, [r3, #4]
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	683a      	ldr	r2, [r7, #0]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	b2ca      	uxtb	r2, r1
 8001ce6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	889b      	ldrh	r3, [r3, #4]
 8001cec:	0a1b      	lsrs	r3, r3, #8
 8001cee:	b299      	uxth	r1, r3
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	683a      	ldr	r2, [r7, #0]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	b2ca      	uxtb	r2, r1
 8001cfa:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	3302      	adds	r3, #2
 8001d00:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7fe fb02 	bl	8000310 <strlen>
 8001d0c:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	683a      	ldr	r2, [r7, #0]
 8001d12:	4413      	add	r3, r2
 8001d14:	69b9      	ldr	r1, [r7, #24]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f002 f948 	bl	8003fac <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	3304      	adds	r3, #4
 8001d20:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	683a      	ldr	r2, [r7, #0]
 8001d26:	18d0      	adds	r0, r2, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	4619      	mov	r1, r3
 8001d30:	f00f fc44 	bl	80115bc <memcpy>
      offset += length_topic_name;
 8001d34:	69fa      	ldr	r2, [r7, #28]
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	4413      	add	r3, r2
 8001d3a:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7fe fae5 	bl	8000310 <strlen>
 8001d46:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	683a      	ldr	r2, [r7, #0]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	6979      	ldr	r1, [r7, #20]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f002 f92b 	bl	8003fac <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	3304      	adds	r3, #4
 8001d5a:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	683a      	ldr	r2, [r7, #0]
 8001d60:	18d0      	adds	r0, r2, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	697a      	ldr	r2, [r7, #20]
 8001d68:	4619      	mov	r1, r3
 8001d6a:	f00f fc27 	bl	80115bc <memcpy>
      offset += length_message_type;
 8001d6e:	69fa      	ldr	r2, [r7, #28]
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	4413      	add	r3, r2
 8001d74:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	691b      	ldr	r3, [r3, #16]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7fe fac8 	bl	8000310 <strlen>
 8001d80:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	683a      	ldr	r2, [r7, #0]
 8001d86:	4413      	add	r3, r2
 8001d88:	6939      	ldr	r1, [r7, #16]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f002 f90e 	bl	8003fac <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	3304      	adds	r3, #4
 8001d94:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	683a      	ldr	r2, [r7, #0]
 8001d9a:	18d0      	adds	r0, r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	691b      	ldr	r3, [r3, #16]
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	4619      	mov	r1, r3
 8001da4:	f00f fc0a 	bl	80115bc <memcpy>
      offset += length_md5sum;
 8001da8:	69fa      	ldr	r2, [r7, #28]
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	4413      	add	r3, r2
 8001dae:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	695b      	ldr	r3, [r3, #20]
 8001db4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8001db6:	68f9      	ldr	r1, [r7, #12]
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	683a      	ldr	r2, [r7, #0]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	b2ca      	uxtb	r2, r1
 8001dc0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	0a19      	lsrs	r1, r3, #8
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	683a      	ldr	r2, [r7, #0]
 8001dcc:	4413      	add	r3, r2
 8001dce:	b2ca      	uxtb	r2, r1
 8001dd0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	0c19      	lsrs	r1, r3, #16
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	3302      	adds	r3, #2
 8001dda:	683a      	ldr	r2, [r7, #0]
 8001ddc:	4413      	add	r3, r2
 8001dde:	b2ca      	uxtb	r2, r1
 8001de0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	0e19      	lsrs	r1, r3, #24
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	3303      	adds	r3, #3
 8001dea:	683a      	ldr	r2, [r7, #0]
 8001dec:	4413      	add	r3, r2
 8001dee:	b2ca      	uxtb	r2, r1
 8001df0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	3304      	adds	r3, #4
 8001df6:	61fb      	str	r3, [r7, #28]
      return offset;
 8001df8:	69fb      	ldr	r3, [r7, #28]
    }
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3720      	adds	r7, #32
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b08a      	sub	sp, #40	; 0x28
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
 8001e0a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	683a      	ldr	r2, [r7, #0]
 8001e14:	4413      	add	r3, r2
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	b29a      	uxth	r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	889b      	ldrh	r3, [r3, #4]
 8001e22:	b21a      	sxth	r2, r3
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	3301      	adds	r3, #1
 8001e28:	6839      	ldr	r1, [r7, #0]
 8001e2a:	440b      	add	r3, r1
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	021b      	lsls	r3, r3, #8
 8001e30:	b21b      	sxth	r3, r3
 8001e32:	4313      	orrs	r3, r2
 8001e34:	b21b      	sxth	r3, r3
 8001e36:	b29a      	uxth	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	3302      	adds	r3, #2
 8001e40:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	683a      	ldr	r2, [r7, #0]
 8001e46:	441a      	add	r2, r3
 8001e48:	f107 0314 	add.w	r3, r7, #20
 8001e4c:	4611      	mov	r1, r2
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f002 f8ca 	bl	8003fe8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	3304      	adds	r3, #4
 8001e58:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001e5a:	69bb      	ldr	r3, [r7, #24]
 8001e5c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	4413      	add	r3, r2
 8001e64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d20c      	bcs.n	8001e84 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8001e6a:	683a      	ldr	r2, [r7, #0]
 8001e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6e:	441a      	add	r2, r3
 8001e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e72:	3b01      	subs	r3, #1
 8001e74:	6839      	ldr	r1, [r7, #0]
 8001e76:	440b      	add	r3, r1
 8001e78:	7812      	ldrb	r2, [r2, #0]
 8001e7a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7e:	3301      	adds	r3, #1
 8001e80:	627b      	str	r3, [r7, #36]	; 0x24
 8001e82:	e7ec      	b.n	8001e5e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	4413      	add	r3, r2
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	683a      	ldr	r2, [r7, #0]
 8001e8e:	4413      	add	r3, r2
 8001e90:	2200      	movs	r2, #0
 8001e92:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	3b01      	subs	r3, #1
 8001e98:	683a      	ldr	r2, [r7, #0]
 8001e9a:	441a      	add	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	683a      	ldr	r2, [r7, #0]
 8001eac:	441a      	add	r2, r3
 8001eae:	f107 0310 	add.w	r3, r7, #16
 8001eb2:	4611      	mov	r1, r2
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f002 f897 	bl	8003fe8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	3304      	adds	r3, #4
 8001ebe:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	623b      	str	r3, [r7, #32]
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	4413      	add	r3, r2
 8001eca:	6a3a      	ldr	r2, [r7, #32]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d20c      	bcs.n	8001eea <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8001ed0:	683a      	ldr	r2, [r7, #0]
 8001ed2:	6a3b      	ldr	r3, [r7, #32]
 8001ed4:	441a      	add	r2, r3
 8001ed6:	6a3b      	ldr	r3, [r7, #32]
 8001ed8:	3b01      	subs	r3, #1
 8001eda:	6839      	ldr	r1, [r7, #0]
 8001edc:	440b      	add	r3, r1
 8001ede:	7812      	ldrb	r2, [r2, #0]
 8001ee0:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001ee2:	6a3b      	ldr	r3, [r7, #32]
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	623b      	str	r3, [r7, #32]
 8001ee8:	e7ec      	b.n	8001ec4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	4413      	add	r3, r2
 8001ef0:	3b01      	subs	r3, #1
 8001ef2:	683a      	ldr	r2, [r7, #0]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	3b01      	subs	r3, #1
 8001efe:	683a      	ldr	r2, [r7, #0]
 8001f00:	441a      	add	r2, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8001f06:	69ba      	ldr	r2, [r7, #24]
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	683a      	ldr	r2, [r7, #0]
 8001f12:	441a      	add	r2, r3
 8001f14:	f107 030c 	add.w	r3, r7, #12
 8001f18:	4611      	mov	r1, r2
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f002 f864 	bl	8003fe8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	3304      	adds	r3, #4
 8001f24:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	61fb      	str	r3, [r7, #28]
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	4413      	add	r3, r2
 8001f30:	69fa      	ldr	r2, [r7, #28]
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d20c      	bcs.n	8001f50 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8001f36:	683a      	ldr	r2, [r7, #0]
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	441a      	add	r2, r3
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	6839      	ldr	r1, [r7, #0]
 8001f42:	440b      	add	r3, r1
 8001f44:	7812      	ldrb	r2, [r2, #0]
 8001f46:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	61fb      	str	r3, [r7, #28]
 8001f4e:	e7ec      	b.n	8001f2a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	4413      	add	r3, r2
 8001f56:	3b01      	subs	r3, #1
 8001f58:	683a      	ldr	r2, [r7, #0]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	3b01      	subs	r3, #1
 8001f64:	683a      	ldr	r2, [r7, #0]
 8001f66:	441a      	add	r2, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	4413      	add	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8001f74:	2300      	movs	r3, #0
 8001f76:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	6839      	ldr	r1, [r7, #0]
 8001f7e:	440a      	add	r2, r1
 8001f80:	7812      	ldrb	r2, [r2, #0]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001f86:	68ba      	ldr	r2, [r7, #8]
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	6839      	ldr	r1, [r7, #0]
 8001f8e:	440b      	add	r3, r1
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	021b      	lsls	r3, r3, #8
 8001f94:	4313      	orrs	r3, r2
 8001f96:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001f98:	68ba      	ldr	r2, [r7, #8]
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	3302      	adds	r3, #2
 8001f9e:	6839      	ldr	r1, [r7, #0]
 8001fa0:	440b      	add	r3, r1
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	041b      	lsls	r3, r3, #16
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001faa:	68ba      	ldr	r2, [r7, #8]
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	3303      	adds	r3, #3
 8001fb0:	6839      	ldr	r1, [r7, #0]
 8001fb2:	440b      	add	r3, r1
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	061b      	lsls	r3, r3, #24
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8001fbc:	68ba      	ldr	r2, [r7, #8]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	3304      	adds	r3, #4
 8001fc6:	61bb      	str	r3, [r7, #24]
     return offset;
 8001fc8:	69bb      	ldr	r3, [r7, #24]
    }
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3728      	adds	r7, #40	; 0x28
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
	...

08001fd4 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	4b03      	ldr	r3, [pc, #12]	; (8001fec <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8001fde:	4618      	mov	r0, r3
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	08011940 	.word	0x08011940

08001ff0 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	4b03      	ldr	r3, [pc, #12]	; (8002008 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	370c      	adds	r7, #12
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	0801195c 	.word	0x0801195c

0800200c <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4618      	mov	r0, r3
 8002018:	f7ff fd34 	bl	8001a84 <_ZN3ros3MsgC1Ev>
 800201c:	4a06      	ldr	r2, [pc, #24]	; (8002038 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	601a      	str	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	711a      	strb	r2, [r3, #4]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4a04      	ldr	r2, [pc, #16]	; (800203c <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 800202c:	609a      	str	r2, [r3, #8]
    {
    }
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4618      	mov	r0, r3
 8002032:	3708      	adds	r7, #8
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	08011c00 	.word	0x08011c00
 800203c:	0801193c 	.word	0x0801193c

08002040 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800204a:	2300      	movs	r3, #0
 800204c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	683a      	ldr	r2, [r7, #0]
 8002052:	4413      	add	r3, r2
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	7912      	ldrb	r2, [r2, #4]
 8002058:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	3301      	adds	r3, #1
 800205e:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	4618      	mov	r0, r3
 8002066:	f7fe f953 	bl	8000310 <strlen>
 800206a:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	683a      	ldr	r2, [r7, #0]
 8002070:	4413      	add	r3, r2
 8002072:	68b9      	ldr	r1, [r7, #8]
 8002074:	4618      	mov	r0, r3
 8002076:	f001 ff99 	bl	8003fac <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	3304      	adds	r3, #4
 800207e:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	683a      	ldr	r2, [r7, #0]
 8002084:	18d0      	adds	r0, r2, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	68ba      	ldr	r2, [r7, #8]
 800208c:	4619      	mov	r1, r3
 800208e:	f00f fa95 	bl	80115bc <memcpy>
      offset += length_msg;
 8002092:	68fa      	ldr	r2, [r7, #12]
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	4413      	add	r3, r2
 8002098:	60fb      	str	r3, [r7, #12]
      return offset;
 800209a:	68fb      	ldr	r3, [r7, #12]
    }
 800209c:	4618      	mov	r0, r3
 800209e:	3710      	adds	r7, #16
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b086      	sub	sp, #24
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80020ae:	2300      	movs	r3, #0
 80020b0:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	683a      	ldr	r2, [r7, #0]
 80020b6:	4413      	add	r3, r2
 80020b8:	781a      	ldrb	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	3301      	adds	r3, #1
 80020c2:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	683a      	ldr	r2, [r7, #0]
 80020c8:	441a      	add	r2, r3
 80020ca:	f107 030c 	add.w	r3, r7, #12
 80020ce:	4611      	mov	r1, r2
 80020d0:	4618      	mov	r0, r3
 80020d2:	f001 ff89 	bl	8003fe8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	3304      	adds	r3, #4
 80020da:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	617b      	str	r3, [r7, #20]
 80020e0:	693a      	ldr	r2, [r7, #16]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	4413      	add	r3, r2
 80020e6:	697a      	ldr	r2, [r7, #20]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d20c      	bcs.n	8002106 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 80020ec:	683a      	ldr	r2, [r7, #0]
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	441a      	add	r2, r3
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	3b01      	subs	r3, #1
 80020f6:	6839      	ldr	r1, [r7, #0]
 80020f8:	440b      	add	r3, r1
 80020fa:	7812      	ldrb	r2, [r2, #0]
 80020fc:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	3301      	adds	r3, #1
 8002102:	617b      	str	r3, [r7, #20]
 8002104:	e7ec      	b.n	80020e0 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8002106:	693a      	ldr	r2, [r7, #16]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	4413      	add	r3, r2
 800210c:	3b01      	subs	r3, #1
 800210e:	683a      	ldr	r2, [r7, #0]
 8002110:	4413      	add	r3, r2
 8002112:	2200      	movs	r2, #0
 8002114:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	3b01      	subs	r3, #1
 800211a:	683a      	ldr	r2, [r7, #0]
 800211c:	441a      	add	r2, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8002122:	693a      	ldr	r2, [r7, #16]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	4413      	add	r3, r2
 8002128:	613b      	str	r3, [r7, #16]
     return offset;
 800212a:	693b      	ldr	r3, [r7, #16]
    }
 800212c:	4618      	mov	r0, r3
 800212e:	3718      	adds	r7, #24
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	4b03      	ldr	r3, [pc, #12]	; (800214c <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 800213e:	4618      	mov	r0, r3
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	08011980 	.word	0x08011980

08002150 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	4b03      	ldr	r3, [pc, #12]	; (8002168 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 800215a:	4618      	mov	r0, r3
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	08011994 	.word	0x08011994

0800216c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	4618      	mov	r0, r3
 8002178:	f7ff fc84 	bl	8001a84 <_ZN3ros3MsgC1Ev>
 800217c:	4a0c      	ldr	r2, [pc, #48]	; (80021b0 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	601a      	str	r2, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	605a      	str	r2, [r3, #4]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	60da      	str	r2, [r3, #12]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	611a      	str	r2, [r3, #16]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	619a      	str	r2, [r3, #24]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	61da      	str	r2, [r3, #28]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4618      	mov	r0, r3
 80021aa:	3708      	adds	r7, #8
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	08011be8 	.word	0x08011be8

080021b4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b08a      	sub	sp, #40	; 0x28
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80021be:	2300      	movs	r3, #0
 80021c0:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6859      	ldr	r1, [r3, #4]
 80021c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c8:	683a      	ldr	r2, [r7, #0]
 80021ca:	4413      	add	r3, r2
 80021cc:	b2ca      	uxtb	r2, r1
 80021ce:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	0a19      	lsrs	r1, r3, #8
 80021d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d8:	3301      	adds	r3, #1
 80021da:	683a      	ldr	r2, [r7, #0]
 80021dc:	4413      	add	r3, r2
 80021de:	b2ca      	uxtb	r2, r1
 80021e0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	0c19      	lsrs	r1, r3, #16
 80021e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ea:	3302      	adds	r3, #2
 80021ec:	683a      	ldr	r2, [r7, #0]
 80021ee:	4413      	add	r3, r2
 80021f0:	b2ca      	uxtb	r2, r1
 80021f2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	0e19      	lsrs	r1, r3, #24
 80021fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fc:	3303      	adds	r3, #3
 80021fe:	683a      	ldr	r2, [r7, #0]
 8002200:	4413      	add	r3, r2
 8002202:	b2ca      	uxtb	r2, r1
 8002204:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8002206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002208:	3304      	adds	r3, #4
 800220a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 800220c:	2300      	movs	r3, #0
 800220e:	623b      	str	r3, [r7, #32]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	6a3a      	ldr	r2, [r7, #32]
 8002216:	429a      	cmp	r2, r3
 8002218:	d22b      	bcs.n	8002272 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	68da      	ldr	r2, [r3, #12]
 800221e:	6a3b      	ldr	r3, [r7, #32]
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	4413      	add	r3, r2
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8002228:	6939      	ldr	r1, [r7, #16]
 800222a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222c:	683a      	ldr	r2, [r7, #0]
 800222e:	4413      	add	r3, r2
 8002230:	b2ca      	uxtb	r2, r1
 8002232:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	0a19      	lsrs	r1, r3, #8
 8002238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223a:	3301      	adds	r3, #1
 800223c:	683a      	ldr	r2, [r7, #0]
 800223e:	4413      	add	r3, r2
 8002240:	b2ca      	uxtb	r2, r1
 8002242:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	0c19      	lsrs	r1, r3, #16
 8002248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224a:	3302      	adds	r3, #2
 800224c:	683a      	ldr	r2, [r7, #0]
 800224e:	4413      	add	r3, r2
 8002250:	b2ca      	uxtb	r2, r1
 8002252:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	0e19      	lsrs	r1, r3, #24
 8002258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225a:	3303      	adds	r3, #3
 800225c:	683a      	ldr	r2, [r7, #0]
 800225e:	4413      	add	r3, r2
 8002260:	b2ca      	uxtb	r2, r1
 8002262:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8002264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002266:	3304      	adds	r3, #4
 8002268:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 800226a:	6a3b      	ldr	r3, [r7, #32]
 800226c:	3301      	adds	r3, #1
 800226e:	623b      	str	r3, [r7, #32]
 8002270:	e7ce      	b.n	8002210 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6919      	ldr	r1, [r3, #16]
 8002276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002278:	683a      	ldr	r2, [r7, #0]
 800227a:	4413      	add	r3, r2
 800227c:	b2ca      	uxtb	r2, r1
 800227e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	691b      	ldr	r3, [r3, #16]
 8002284:	0a19      	lsrs	r1, r3, #8
 8002286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002288:	3301      	adds	r3, #1
 800228a:	683a      	ldr	r2, [r7, #0]
 800228c:	4413      	add	r3, r2
 800228e:	b2ca      	uxtb	r2, r1
 8002290:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	0c19      	lsrs	r1, r3, #16
 8002298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229a:	3302      	adds	r3, #2
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	4413      	add	r3, r2
 80022a0:	b2ca      	uxtb	r2, r1
 80022a2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	691b      	ldr	r3, [r3, #16]
 80022a8:	0e19      	lsrs	r1, r3, #24
 80022aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ac:	3303      	adds	r3, #3
 80022ae:	683a      	ldr	r2, [r7, #0]
 80022b0:	4413      	add	r3, r2
 80022b2:	b2ca      	uxtb	r2, r1
 80022b4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 80022b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b8:	3304      	adds	r3, #4
 80022ba:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80022bc:	2300      	movs	r3, #0
 80022be:	61fb      	str	r3, [r7, #28]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	691b      	ldr	r3, [r3, #16]
 80022c4:	69fa      	ldr	r2, [r7, #28]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d22b      	bcs.n	8002322 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	699a      	ldr	r2, [r3, #24]
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	4413      	add	r3, r2
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 80022d8:	68f9      	ldr	r1, [r7, #12]
 80022da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022dc:	683a      	ldr	r2, [r7, #0]
 80022de:	4413      	add	r3, r2
 80022e0:	b2ca      	uxtb	r2, r1
 80022e2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	0a19      	lsrs	r1, r3, #8
 80022e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ea:	3301      	adds	r3, #1
 80022ec:	683a      	ldr	r2, [r7, #0]
 80022ee:	4413      	add	r3, r2
 80022f0:	b2ca      	uxtb	r2, r1
 80022f2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	0c19      	lsrs	r1, r3, #16
 80022f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fa:	3302      	adds	r3, #2
 80022fc:	683a      	ldr	r2, [r7, #0]
 80022fe:	4413      	add	r3, r2
 8002300:	b2ca      	uxtb	r2, r1
 8002302:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	0e19      	lsrs	r1, r3, #24
 8002308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230a:	3303      	adds	r3, #3
 800230c:	683a      	ldr	r2, [r7, #0]
 800230e:	4413      	add	r3, r2
 8002310:	b2ca      	uxtb	r2, r1
 8002312:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8002314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002316:	3304      	adds	r3, #4
 8002318:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	3301      	adds	r3, #1
 800231e:	61fb      	str	r3, [r7, #28]
 8002320:	e7ce      	b.n	80022c0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	69d9      	ldr	r1, [r3, #28]
 8002326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002328:	683a      	ldr	r2, [r7, #0]
 800232a:	4413      	add	r3, r2
 800232c:	b2ca      	uxtb	r2, r1
 800232e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	69db      	ldr	r3, [r3, #28]
 8002334:	0a19      	lsrs	r1, r3, #8
 8002336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002338:	3301      	adds	r3, #1
 800233a:	683a      	ldr	r2, [r7, #0]
 800233c:	4413      	add	r3, r2
 800233e:	b2ca      	uxtb	r2, r1
 8002340:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	69db      	ldr	r3, [r3, #28]
 8002346:	0c19      	lsrs	r1, r3, #16
 8002348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234a:	3302      	adds	r3, #2
 800234c:	683a      	ldr	r2, [r7, #0]
 800234e:	4413      	add	r3, r2
 8002350:	b2ca      	uxtb	r2, r1
 8002352:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	69db      	ldr	r3, [r3, #28]
 8002358:	0e19      	lsrs	r1, r3, #24
 800235a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235c:	3303      	adds	r3, #3
 800235e:	683a      	ldr	r2, [r7, #0]
 8002360:	4413      	add	r3, r2
 8002362:	b2ca      	uxtb	r2, r1
 8002364:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8002366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002368:	3304      	adds	r3, #4
 800236a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 800236c:	2300      	movs	r3, #0
 800236e:	61bb      	str	r3, [r7, #24]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	69db      	ldr	r3, [r3, #28]
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	429a      	cmp	r2, r3
 8002378:	d228      	bcs.n	80023cc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	4413      	add	r3, r2
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4618      	mov	r0, r3
 8002388:	f7fd ffc2 	bl	8000310 <strlen>
 800238c:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 800238e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002390:	683a      	ldr	r2, [r7, #0]
 8002392:	4413      	add	r3, r2
 8002394:	6979      	ldr	r1, [r7, #20]
 8002396:	4618      	mov	r0, r3
 8002398:	f001 fe08 	bl	8003fac <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800239c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239e:	3304      	adds	r3, #4
 80023a0:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 80023a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a4:	683a      	ldr	r2, [r7, #0]
 80023a6:	18d0      	adds	r0, r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	4413      	add	r3, r2
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	697a      	ldr	r2, [r7, #20]
 80023b6:	4619      	mov	r1, r3
 80023b8:	f00f f900 	bl	80115bc <memcpy>
      offset += length_stringsi;
 80023bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	4413      	add	r3, r2
 80023c2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	3301      	adds	r3, #1
 80023c8:	61bb      	str	r3, [r7, #24]
 80023ca:	e7d1      	b.n	8002370 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 80023cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80023ce:	4618      	mov	r0, r3
 80023d0:	3728      	adds	r7, #40	; 0x28
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}

080023d6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80023d6:	b580      	push	{r7, lr}
 80023d8:	b08e      	sub	sp, #56	; 0x38
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
 80023de:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80023e0:	2300      	movs	r3, #0
 80023e2:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80023e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023e6:	683a      	ldr	r2, [r7, #0]
 80023e8:	4413      	add	r3, r2
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80023ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023f0:	3301      	adds	r3, #1
 80023f2:	683a      	ldr	r2, [r7, #0]
 80023f4:	4413      	add	r3, r2
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	021b      	lsls	r3, r3, #8
 80023fa:	6a3a      	ldr	r2, [r7, #32]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002402:	3302      	adds	r3, #2
 8002404:	683a      	ldr	r2, [r7, #0]
 8002406:	4413      	add	r3, r2
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	041b      	lsls	r3, r3, #16
 800240c:	6a3a      	ldr	r2, [r7, #32]
 800240e:	4313      	orrs	r3, r2
 8002410:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002414:	3303      	adds	r3, #3
 8002416:	683a      	ldr	r2, [r7, #0]
 8002418:	4413      	add	r3, r2
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	061b      	lsls	r3, r3, #24
 800241e:	6a3a      	ldr	r2, [r7, #32]
 8002420:	4313      	orrs	r3, r2
 8002422:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8002424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002426:	3304      	adds	r3, #4
 8002428:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	6a3a      	ldr	r2, [r7, #32]
 8002430:	429a      	cmp	r2, r3
 8002432:	d90a      	bls.n	800244a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	68da      	ldr	r2, [r3, #12]
 8002438:	6a3b      	ldr	r3, [r7, #32]
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	4619      	mov	r1, r3
 800243e:	4610      	mov	r0, r2
 8002440:	f00f f8d2 	bl	80115e8 <realloc>
 8002444:	4602      	mov	r2, r0
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a3a      	ldr	r2, [r7, #32]
 800244e:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8002450:	2300      	movs	r3, #0
 8002452:	633b      	str	r3, [r7, #48]	; 0x30
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800245a:	429a      	cmp	r2, r3
 800245c:	d236      	bcs.n	80024cc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 800245e:	2300      	movs	r3, #0
 8002460:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002466:	6839      	ldr	r1, [r7, #0]
 8002468:	440a      	add	r2, r1
 800246a:	7812      	ldrb	r2, [r2, #0]
 800246c:	4313      	orrs	r3, r2
 800246e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002470:	697a      	ldr	r2, [r7, #20]
 8002472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002474:	3301      	adds	r3, #1
 8002476:	6839      	ldr	r1, [r7, #0]
 8002478:	440b      	add	r3, r1
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	021b      	lsls	r3, r3, #8
 800247e:	4313      	orrs	r3, r2
 8002480:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002482:	697a      	ldr	r2, [r7, #20]
 8002484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002486:	3302      	adds	r3, #2
 8002488:	6839      	ldr	r1, [r7, #0]
 800248a:	440b      	add	r3, r1
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	041b      	lsls	r3, r3, #16
 8002490:	4313      	orrs	r3, r2
 8002492:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002494:	697a      	ldr	r2, [r7, #20]
 8002496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002498:	3303      	adds	r3, #3
 800249a:	6839      	ldr	r1, [r7, #0]
 800249c:	440b      	add	r3, r1
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	061b      	lsls	r3, r3, #24
 80024a2:	4313      	orrs	r3, r2
 80024a4:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 80024a6:	697a      	ldr	r2, [r7, #20]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 80024ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024ae:	3304      	adds	r3, #4
 80024b0:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	68da      	ldr	r2, [r3, #12]
 80024b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	4413      	add	r3, r2
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	3208      	adds	r2, #8
 80024c0:	6812      	ldr	r2, [r2, #0]
 80024c2:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 80024c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c6:	3301      	adds	r3, #1
 80024c8:	633b      	str	r3, [r7, #48]	; 0x30
 80024ca:	e7c3      	b.n	8002454 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80024cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	4413      	add	r3, r2
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80024d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024d8:	3301      	adds	r3, #1
 80024da:	683a      	ldr	r2, [r7, #0]
 80024dc:	4413      	add	r3, r2
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	021b      	lsls	r3, r3, #8
 80024e2:	69fa      	ldr	r2, [r7, #28]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80024e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024ea:	3302      	adds	r3, #2
 80024ec:	683a      	ldr	r2, [r7, #0]
 80024ee:	4413      	add	r3, r2
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	041b      	lsls	r3, r3, #16
 80024f4:	69fa      	ldr	r2, [r7, #28]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80024fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024fc:	3303      	adds	r3, #3
 80024fe:	683a      	ldr	r2, [r7, #0]
 8002500:	4413      	add	r3, r2
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	061b      	lsls	r3, r3, #24
 8002506:	69fa      	ldr	r2, [r7, #28]
 8002508:	4313      	orrs	r3, r2
 800250a:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 800250c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800250e:	3304      	adds	r3, #4
 8002510:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	69fa      	ldr	r2, [r7, #28]
 8002518:	429a      	cmp	r2, r3
 800251a:	d90a      	bls.n	8002532 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	699a      	ldr	r2, [r3, #24]
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	4619      	mov	r1, r3
 8002526:	4610      	mov	r0, r2
 8002528:	f00f f85e 	bl	80115e8 <realloc>
 800252c:	4602      	mov	r2, r0
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	69fa      	ldr	r2, [r7, #28]
 8002536:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8002538:	2300      	movs	r3, #0
 800253a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	691b      	ldr	r3, [r3, #16]
 8002540:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002542:	429a      	cmp	r2, r3
 8002544:	d236      	bcs.n	80025b4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8002546:	2300      	movs	r3, #0
 8002548:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800254e:	6839      	ldr	r1, [r7, #0]
 8002550:	440a      	add	r2, r1
 8002552:	7812      	ldrb	r2, [r2, #0]
 8002554:	4313      	orrs	r3, r2
 8002556:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002558:	693a      	ldr	r2, [r7, #16]
 800255a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800255c:	3301      	adds	r3, #1
 800255e:	6839      	ldr	r1, [r7, #0]
 8002560:	440b      	add	r3, r1
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	021b      	lsls	r3, r3, #8
 8002566:	4313      	orrs	r3, r2
 8002568:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800256e:	3302      	adds	r3, #2
 8002570:	6839      	ldr	r1, [r7, #0]
 8002572:	440b      	add	r3, r1
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	041b      	lsls	r3, r3, #16
 8002578:	4313      	orrs	r3, r2
 800257a:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800257c:	693a      	ldr	r2, [r7, #16]
 800257e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002580:	3303      	adds	r3, #3
 8002582:	6839      	ldr	r1, [r7, #0]
 8002584:	440b      	add	r3, r1
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	061b      	lsls	r3, r3, #24
 800258a:	4313      	orrs	r3, r2
 800258c:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 800258e:	693a      	ldr	r2, [r7, #16]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8002594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002596:	3304      	adds	r3, #4
 8002598:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	699a      	ldr	r2, [r3, #24]
 800259e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	4413      	add	r3, r2
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	3214      	adds	r2, #20
 80025a8:	6812      	ldr	r2, [r2, #0]
 80025aa:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 80025ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ae:	3301      	adds	r3, #1
 80025b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025b2:	e7c3      	b.n	800253c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80025b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025b6:	683a      	ldr	r2, [r7, #0]
 80025b8:	4413      	add	r3, r2
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80025be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025c0:	3301      	adds	r3, #1
 80025c2:	683a      	ldr	r2, [r7, #0]
 80025c4:	4413      	add	r3, r2
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	021b      	lsls	r3, r3, #8
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80025d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025d2:	3302      	adds	r3, #2
 80025d4:	683a      	ldr	r2, [r7, #0]
 80025d6:	4413      	add	r3, r2
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	041b      	lsls	r3, r3, #16
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	4313      	orrs	r3, r2
 80025e0:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80025e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025e4:	3303      	adds	r3, #3
 80025e6:	683a      	ldr	r2, [r7, #0]
 80025e8:	4413      	add	r3, r2
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	061b      	lsls	r3, r3, #24
 80025ee:	69ba      	ldr	r2, [r7, #24]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 80025f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025f6:	3304      	adds	r3, #4
 80025f8:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	69db      	ldr	r3, [r3, #28]
 80025fe:	69ba      	ldr	r2, [r7, #24]
 8002600:	429a      	cmp	r2, r3
 8002602:	d90a      	bls.n	800261a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	4619      	mov	r1, r3
 800260e:	4610      	mov	r0, r2
 8002610:	f00e ffea 	bl	80115e8 <realloc>
 8002614:	4602      	mov	r2, r0
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8002620:	2300      	movs	r3, #0
 8002622:	62bb      	str	r3, [r7, #40]	; 0x28
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	69db      	ldr	r3, [r3, #28]
 8002628:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800262a:	429a      	cmp	r2, r3
 800262c:	d23f      	bcs.n	80026ae <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 800262e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002630:	683a      	ldr	r2, [r7, #0]
 8002632:	441a      	add	r2, r3
 8002634:	f107 030c 	add.w	r3, r7, #12
 8002638:	4611      	mov	r1, r2
 800263a:	4618      	mov	r0, r3
 800263c:	f001 fcd4 	bl	8003fe8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002642:	3304      	adds	r3, #4
 8002644:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002648:	627b      	str	r3, [r7, #36]	; 0x24
 800264a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	4413      	add	r3, r2
 8002650:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002652:	429a      	cmp	r2, r3
 8002654:	d20c      	bcs.n	8002670 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8002656:	683a      	ldr	r2, [r7, #0]
 8002658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265a:	441a      	add	r2, r3
 800265c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265e:	3b01      	subs	r3, #1
 8002660:	6839      	ldr	r1, [r7, #0]
 8002662:	440b      	add	r3, r1
 8002664:	7812      	ldrb	r2, [r2, #0]
 8002666:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266a:	3301      	adds	r3, #1
 800266c:	627b      	str	r3, [r7, #36]	; 0x24
 800266e:	e7ec      	b.n	800264a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8002670:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	4413      	add	r3, r2
 8002676:	3b01      	subs	r3, #1
 8002678:	683a      	ldr	r2, [r7, #0]
 800267a:	4413      	add	r3, r2
 800267c:	2200      	movs	r2, #0
 800267e:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8002680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002682:	3b01      	subs	r3, #1
 8002684:	683a      	ldr	r2, [r7, #0]
 8002686:	441a      	add	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 800268c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	4413      	add	r3, r2
 8002692:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	4413      	add	r3, r2
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	3220      	adds	r2, #32
 80026a2:	6812      	ldr	r2, [r2, #0]
 80026a4:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 80026a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a8:	3301      	adds	r3, #1
 80026aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80026ac:	e7ba      	b.n	8002624 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 80026ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 80026b0:	4618      	mov	r0, r3
 80026b2:	3738      	adds	r7, #56	; 0x38
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	4b03      	ldr	r3, [pc, #12]	; (80026d0 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 80026c2:	4618      	mov	r0, r3
 80026c4:	370c      	adds	r7, #12
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	08011b24 	.word	0x08011b24

080026d4 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	4b03      	ldr	r3, [pc, #12]	; (80026ec <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 80026de:	4618      	mov	r0, r3
 80026e0:	370c      	adds	r7, #12
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	080119b8 	.word	0x080119b8

080026f0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 80026f0:	b480      	push	{r7}
 80026f2:	b085      	sub	sp, #20
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	60b9      	str	r1, [r7, #8]
 80026fa:	607a      	str	r2, [r7, #4]
 80026fc:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	68ba      	ldr	r2, [r7, #8]
 8002702:	601a      	str	r2, [r3, #0]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	605a      	str	r2, [r3, #4]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	683a      	ldr	r2, [r7, #0]
 800270e:	611a      	str	r2, [r3, #16]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	4618      	mov	r0, r3
 8002714:	3714      	adds	r7, #20
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr

0800271e <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 800271e:	b580      	push	{r7, lr}
 8002720:	b082      	sub	sp, #8
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
 8002726:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	68d8      	ldr	r0, [r3, #12]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	6891      	ldr	r1, [r2, #8]
 8002738:	683a      	ldr	r2, [r7, #0]
 800273a:	4798      	blx	r3
 800273c:	4603      	mov	r3, r0
  };
 800273e:	4618      	mov	r0, r3
 8002740:	3708      	adds	r7, #8
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}

08002746 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8002746:	b480      	push	{r7}
 8002748:	b083      	sub	sp, #12
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	691b      	ldr	r3, [r3, #16]
  }
 8002752:	4618      	mov	r0, r3
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
	...

08002760 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 2048;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a42      	ldr	r2, [pc, #264]	; (800287c <_ZN13STM32Hardware10getRdmaIndEv+0x11c>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d068      	beq.n	8002848 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a40      	ldr	r2, [pc, #256]	; (8002880 <_ZN13STM32Hardware10getRdmaIndEv+0x120>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d061      	beq.n	8002848 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a3d      	ldr	r2, [pc, #244]	; (8002884 <_ZN13STM32Hardware10getRdmaIndEv+0x124>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d05a      	beq.n	8002848 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a3b      	ldr	r2, [pc, #236]	; (8002888 <_ZN13STM32Hardware10getRdmaIndEv+0x128>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d053      	beq.n	8002848 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a38      	ldr	r2, [pc, #224]	; (800288c <_ZN13STM32Hardware10getRdmaIndEv+0x12c>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d04c      	beq.n	8002848 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a36      	ldr	r2, [pc, #216]	; (8002890 <_ZN13STM32Hardware10getRdmaIndEv+0x130>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d045      	beq.n	8002848 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a33      	ldr	r2, [pc, #204]	; (8002894 <_ZN13STM32Hardware10getRdmaIndEv+0x134>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d03e      	beq.n	8002848 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a31      	ldr	r2, [pc, #196]	; (8002898 <_ZN13STM32Hardware10getRdmaIndEv+0x138>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d037      	beq.n	8002848 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a2e      	ldr	r2, [pc, #184]	; (800289c <_ZN13STM32Hardware10getRdmaIndEv+0x13c>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d030      	beq.n	8002848 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a2c      	ldr	r2, [pc, #176]	; (80028a0 <_ZN13STM32Hardware10getRdmaIndEv+0x140>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d029      	beq.n	8002848 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a29      	ldr	r2, [pc, #164]	; (80028a4 <_ZN13STM32Hardware10getRdmaIndEv+0x144>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d022      	beq.n	8002848 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a27      	ldr	r2, [pc, #156]	; (80028a8 <_ZN13STM32Hardware10getRdmaIndEv+0x148>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d01b      	beq.n	8002848 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a24      	ldr	r2, [pc, #144]	; (80028ac <_ZN13STM32Hardware10getRdmaIndEv+0x14c>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d014      	beq.n	8002848 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a22      	ldr	r2, [pc, #136]	; (80028b0 <_ZN13STM32Hardware10getRdmaIndEv+0x150>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d00d      	beq.n	8002848 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a1f      	ldr	r2, [pc, #124]	; (80028b4 <_ZN13STM32Hardware10getRdmaIndEv+0x154>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d006      	beq.n	8002848 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a1d      	ldr	r2, [pc, #116]	; (80028b8 <_ZN13STM32Hardware10getRdmaIndEv+0x158>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d109      	bne.n	800285c <_ZN13STM32Hardware10getRdmaIndEv+0xfc>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002856:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800285a:	e008      	b.n	800286e <_ZN13STM32Hardware10getRdmaIndEv+0x10e>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 800286a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800286e:	4618      	mov	r0, r3
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	40020010 	.word	0x40020010
 8002880:	40020028 	.word	0x40020028
 8002884:	40020040 	.word	0x40020040
 8002888:	40020058 	.word	0x40020058
 800288c:	40020070 	.word	0x40020070
 8002890:	40020088 	.word	0x40020088
 8002894:	400200a0 	.word	0x400200a0
 8002898:	400200b8 	.word	0x400200b8
 800289c:	40020410 	.word	0x40020410
 80028a0:	40020428 	.word	0x40020428
 80028a4:	40020440 	.word	0x40020440
 80028a8:	40020458 	.word	0x40020458
 80028ac:	40020470 	.word	0x40020470
 80028b0:	40020488 	.word	0x40020488
 80028b4:	400204a0 	.word	0x400204a0
 80028b8:	400204b8 	.word	0x400204b8

080028bc <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 2048;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
      huart(&huart1), rind(0), twind(0), tfind(0){
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	4a0c      	ldr	r2, [pc, #48]	; (80028f8 <_ZN13STM32HardwareC1Ev+0x3c>)
 80028c8:	601a      	str	r2, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028d8:	461a      	mov	r2, r3
 80028da:	2300      	movs	r3, #0
 80028dc:	6093      	str	r3, [r2, #8]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028e4:	461a      	mov	r2, r3
 80028e6:	2300      	movs	r3, #0
 80028e8:	60d3      	str	r3, [r2, #12]
    }
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4618      	mov	r0, r3
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr
 80028f8:	240005c4 	.word	0x240005c4

080028fc <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f000 f804 	bl	8002912 <_ZN13STM32Hardware10reset_rbufEv>
    }
 800290a:	bf00      	nop
 800290c:	3708      	adds	r7, #8
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}

08002912 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8002912:	b580      	push	{r7, lr}
 8002914:	b082      	sub	sp, #8
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6818      	ldr	r0, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	3304      	adds	r3, #4
 8002922:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002926:	4619      	mov	r1, r3
 8002928:	f00c f844 	bl	800e9b4 <HAL_UART_Receive_DMA>
    }
 800292c:	bf00      	nop
 800292e:	3708      	adds	r7, #8
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <_ZN13STM32Hardware4readEv>:

    int read(){
 8002934:	b590      	push	{r4, r7, lr}
 8002936:	b085      	sub	sp, #20
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
      int c = -1;
 800293c:	f04f 33ff 	mov.w	r3, #4294967295
 8002940:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f7ff ff09 	bl	8002760 <_ZN13STM32Hardware10getRdmaIndEv>
 800294e:	4603      	mov	r3, r0
 8002950:	429c      	cmp	r4, r3
 8002952:	bf14      	ite	ne
 8002954:	2301      	movne	r3, #1
 8002956:	2300      	moveq	r3, #0
 8002958:	b2db      	uxtb	r3, r3
 800295a:	2b00      	cmp	r3, #0
 800295c:	d012      	beq.n	8002984 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8002964:	1c59      	adds	r1, r3, #1
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	f8c2 1804 	str.w	r1, [r2, #2052]	; 0x804
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	4413      	add	r3, r2
 8002970:	791b      	ldrb	r3, [r3, #4]
 8002972:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 800297a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
      }
      return c;
 8002984:	68fb      	ldr	r3, [r7, #12]
    }
 8002986:	4618      	mov	r0, r3
 8002988:	3714      	adds	r7, #20
 800298a:	46bd      	mov	sp, r7
 800298c:	bd90      	pop	{r4, r7, pc}
	...

08002990 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029a0:	2b20      	cmp	r3, #32
 80029a2:	d108      	bne.n	80029b6 <_ZN13STM32Hardware5flushEv+0x26>
 80029a4:	4b2c      	ldr	r3, [pc, #176]	; (8002a58 <_ZN13STM32Hardware5flushEv+0xc8>)
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	f083 0301 	eor.w	r3, r3, #1
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d001      	beq.n	80029b6 <_ZN13STM32Hardware5flushEv+0x26>
 80029b2:	2301      	movs	r3, #1
 80029b4:	e000      	b.n	80029b8 <_ZN13STM32Hardware5flushEv+0x28>
 80029b6:	2300      	movs	r3, #0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d049      	beq.n	8002a50 <_ZN13STM32Hardware5flushEv+0xc0>
        mutex = true;
 80029bc:	4b26      	ldr	r3, [pc, #152]	; (8002a58 <_ZN13STM32Hardware5flushEv+0xc8>)
 80029be:	2201      	movs	r2, #1
 80029c0:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029c8:	689a      	ldr	r2, [r3, #8]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d039      	beq.n	8002a4a <_ZN13STM32Hardware5flushEv+0xba>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029dc:	68da      	ldr	r2, [r3, #12]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d20c      	bcs.n	8002a04 <_ZN13STM32Hardware5flushEv+0x74>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	b29a      	uxth	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	e007      	b.n	8002a14 <_ZN13STM32Hardware5flushEv+0x84>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6818      	ldr	r0, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	f603 0308 	addw	r3, r3, #2056	; 0x808
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	4413      	add	r3, r2
 8002a2a:	89fa      	ldrh	r2, [r7, #14]
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	f00b ff2f 	bl	800e890 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a38:	68da      	ldr	r2, [r3, #12]
 8002a3a:	89fb      	ldrh	r3, [r7, #14]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002a48:	60d3      	str	r3, [r2, #12]
        }
        mutex = false;
 8002a4a:	4b03      	ldr	r3, [pc, #12]	; (8002a58 <_ZN13STM32Hardware5flushEv+0xc8>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	701a      	strb	r2, [r3, #0]
      }
    }
 8002a50:	bf00      	nop
 8002a52:	3710      	adds	r7, #16
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	240007ac 	.word	0x240007ac

08002a5c <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b086      	sub	sp, #24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	607a      	str	r2, [r7, #4]
      int n = length;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a72:	bfa8      	it	ge
 8002a74:	f44f 6300 	movge.w	r3, #2048	; 0x800
 8002a78:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f5c3 6200 	rsb	r2, r3, #2048	; 0x800
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	bf28      	it	cs
 8002a8c:	4613      	movcs	r3, r2
 8002a8e:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f603 0308 	addw	r3, r3, #2056	; 0x808
 8002a9c:	68fa      	ldr	r2, [r7, #12]
 8002a9e:	4413      	add	r3, r2
 8002aa0:	693a      	ldr	r2, [r7, #16]
 8002aa2:	68b9      	ldr	r1, [r7, #8]
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f00e fd89 	bl	80115bc <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ab0:	689a      	ldr	r2, [r3, #8]
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	4413      	add	r3, r2
 8002ab6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002ac0:	6093      	str	r3, [r2, #8]

      if(n != n_tail){
 8002ac2:	697a      	ldr	r2, [r7, #20]
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d00b      	beq.n	8002ae2 <_ZN13STM32Hardware5writeEPhi+0x86>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f603 0008 	addw	r0, r3, #2056	; 0x808
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	68ba      	ldr	r2, [r7, #8]
 8002ad4:	18d1      	adds	r1, r2, r3
 8002ad6:	697a      	ldr	r2, [r7, #20]
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	461a      	mov	r2, r3
 8002ade:	f00e fd6d 	bl	80115bc <memcpy>
      }

      flush();
 8002ae2:	68f8      	ldr	r0, [r7, #12]
 8002ae4:	f7ff ff54 	bl	8002990 <_ZN13STM32Hardware5flushEv>
    }
 8002ae8:	bf00      	nop
 8002aea:	3718      	adds	r7, #24
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	f004 f9b8 	bl	8006e6c <HAL_GetTick>
 8002afc:	4603      	mov	r3, r0
 8002afe:	4618      	mov	r0, r3
 8002b00:	3708      	adds	r7, #8
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
	...

08002b08 <_ZN13geometry_msgs5PointC1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Point():
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7fe ffb6 	bl	8001a84 <_ZN3ros3MsgC1Ev>
 8002b18:	4a0e      	ldr	r2, [pc, #56]	; (8002b54 <_ZN13geometry_msgs5PointC1Ev+0x4c>)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	601a      	str	r2, [r3, #0]
 8002b1e:	6879      	ldr	r1, [r7, #4]
 8002b20:	f04f 0200 	mov.w	r2, #0
 8002b24:	f04f 0300 	mov.w	r3, #0
 8002b28:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8002b2c:	6879      	ldr	r1, [r7, #4]
 8002b2e:	f04f 0200 	mov.w	r2, #0
 8002b32:	f04f 0300 	mov.w	r3, #0
 8002b36:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8002b3a:	6879      	ldr	r1, [r7, #4]
 8002b3c:	f04f 0200 	mov.w	r2, #0
 8002b40:	f04f 0300 	mov.w	r3, #0
 8002b44:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3708      	adds	r7, #8
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	08011ba4 	.word	0x08011ba4

08002b58 <_ZNK13geometry_msgs5Point9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002b58:	b480      	push	{r7}
 8002b5a:	b08b      	sub	sp, #44	; 0x2c
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002b62:	2300      	movs	r3, #0
 8002b64:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002b6c:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8002b70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b76:	6838      	ldr	r0, [r7, #0]
 8002b78:	4401      	add	r1, r0
 8002b7a:	b2d3      	uxtb	r3, r2
 8002b7c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8002b7e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002b82:	f04f 0200 	mov.w	r2, #0
 8002b86:	f04f 0300 	mov.w	r3, #0
 8002b8a:	0a02      	lsrs	r2, r0, #8
 8002b8c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002b90:	0a0b      	lsrs	r3, r1, #8
 8002b92:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b94:	3101      	adds	r1, #1
 8002b96:	6838      	ldr	r0, [r7, #0]
 8002b98:	4401      	add	r1, r0
 8002b9a:	b2d3      	uxtb	r3, r2
 8002b9c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8002b9e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002ba2:	f04f 0200 	mov.w	r2, #0
 8002ba6:	f04f 0300 	mov.w	r3, #0
 8002baa:	0c02      	lsrs	r2, r0, #16
 8002bac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002bb0:	0c0b      	lsrs	r3, r1, #16
 8002bb2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bb4:	3102      	adds	r1, #2
 8002bb6:	6838      	ldr	r0, [r7, #0]
 8002bb8:	4401      	add	r1, r0
 8002bba:	b2d3      	uxtb	r3, r2
 8002bbc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8002bbe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002bc2:	f04f 0200 	mov.w	r2, #0
 8002bc6:	f04f 0300 	mov.w	r3, #0
 8002bca:	0e02      	lsrs	r2, r0, #24
 8002bcc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002bd0:	0e0b      	lsrs	r3, r1, #24
 8002bd2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bd4:	3103      	adds	r1, #3
 8002bd6:	6838      	ldr	r0, [r7, #0]
 8002bd8:	4401      	add	r1, r0
 8002bda:	b2d3      	uxtb	r3, r2
 8002bdc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8002bde:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002be2:	f04f 0200 	mov.w	r2, #0
 8002be6:	f04f 0300 	mov.w	r3, #0
 8002bea:	000a      	movs	r2, r1
 8002bec:	2300      	movs	r3, #0
 8002bee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bf0:	3104      	adds	r1, #4
 8002bf2:	6838      	ldr	r0, [r7, #0]
 8002bf4:	4401      	add	r1, r0
 8002bf6:	b2d3      	uxtb	r3, r2
 8002bf8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8002bfa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002bfe:	f04f 0200 	mov.w	r2, #0
 8002c02:	f04f 0300 	mov.w	r3, #0
 8002c06:	0a0a      	lsrs	r2, r1, #8
 8002c08:	2300      	movs	r3, #0
 8002c0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c0c:	3105      	adds	r1, #5
 8002c0e:	6838      	ldr	r0, [r7, #0]
 8002c10:	4401      	add	r1, r0
 8002c12:	b2d3      	uxtb	r3, r2
 8002c14:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8002c16:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002c1a:	f04f 0200 	mov.w	r2, #0
 8002c1e:	f04f 0300 	mov.w	r3, #0
 8002c22:	0c0a      	lsrs	r2, r1, #16
 8002c24:	2300      	movs	r3, #0
 8002c26:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c28:	3106      	adds	r1, #6
 8002c2a:	6838      	ldr	r0, [r7, #0]
 8002c2c:	4401      	add	r1, r0
 8002c2e:	b2d3      	uxtb	r3, r2
 8002c30:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8002c32:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002c36:	f04f 0200 	mov.w	r2, #0
 8002c3a:	f04f 0300 	mov.w	r3, #0
 8002c3e:	0e0a      	lsrs	r2, r1, #24
 8002c40:	2300      	movs	r3, #0
 8002c42:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c44:	3107      	adds	r1, #7
 8002c46:	6838      	ldr	r0, [r7, #0]
 8002c48:	4401      	add	r1, r0
 8002c4a:	b2d3      	uxtb	r3, r2
 8002c4c:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 8002c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c50:	3308      	adds	r3, #8
 8002c52:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002c5a:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8002c5e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002c62:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c64:	6838      	ldr	r0, [r7, #0]
 8002c66:	4401      	add	r1, r0
 8002c68:	b2d3      	uxtb	r3, r2
 8002c6a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8002c6c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002c70:	f04f 0200 	mov.w	r2, #0
 8002c74:	f04f 0300 	mov.w	r3, #0
 8002c78:	0a02      	lsrs	r2, r0, #8
 8002c7a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002c7e:	0a0b      	lsrs	r3, r1, #8
 8002c80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c82:	3101      	adds	r1, #1
 8002c84:	6838      	ldr	r0, [r7, #0]
 8002c86:	4401      	add	r1, r0
 8002c88:	b2d3      	uxtb	r3, r2
 8002c8a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8002c8c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002c90:	f04f 0200 	mov.w	r2, #0
 8002c94:	f04f 0300 	mov.w	r3, #0
 8002c98:	0c02      	lsrs	r2, r0, #16
 8002c9a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002c9e:	0c0b      	lsrs	r3, r1, #16
 8002ca0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ca2:	3102      	adds	r1, #2
 8002ca4:	6838      	ldr	r0, [r7, #0]
 8002ca6:	4401      	add	r1, r0
 8002ca8:	b2d3      	uxtb	r3, r2
 8002caa:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8002cac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002cb0:	f04f 0200 	mov.w	r2, #0
 8002cb4:	f04f 0300 	mov.w	r3, #0
 8002cb8:	0e02      	lsrs	r2, r0, #24
 8002cba:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002cbe:	0e0b      	lsrs	r3, r1, #24
 8002cc0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cc2:	3103      	adds	r1, #3
 8002cc4:	6838      	ldr	r0, [r7, #0]
 8002cc6:	4401      	add	r1, r0
 8002cc8:	b2d3      	uxtb	r3, r2
 8002cca:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8002ccc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002cd0:	f04f 0200 	mov.w	r2, #0
 8002cd4:	f04f 0300 	mov.w	r3, #0
 8002cd8:	000a      	movs	r2, r1
 8002cda:	2300      	movs	r3, #0
 8002cdc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cde:	3104      	adds	r1, #4
 8002ce0:	6838      	ldr	r0, [r7, #0]
 8002ce2:	4401      	add	r1, r0
 8002ce4:	b2d3      	uxtb	r3, r2
 8002ce6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8002ce8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002cec:	f04f 0200 	mov.w	r2, #0
 8002cf0:	f04f 0300 	mov.w	r3, #0
 8002cf4:	0a0a      	lsrs	r2, r1, #8
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cfa:	3105      	adds	r1, #5
 8002cfc:	6838      	ldr	r0, [r7, #0]
 8002cfe:	4401      	add	r1, r0
 8002d00:	b2d3      	uxtb	r3, r2
 8002d02:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8002d04:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002d08:	f04f 0200 	mov.w	r2, #0
 8002d0c:	f04f 0300 	mov.w	r3, #0
 8002d10:	0c0a      	lsrs	r2, r1, #16
 8002d12:	2300      	movs	r3, #0
 8002d14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d16:	3106      	adds	r1, #6
 8002d18:	6838      	ldr	r0, [r7, #0]
 8002d1a:	4401      	add	r1, r0
 8002d1c:	b2d3      	uxtb	r3, r2
 8002d1e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8002d20:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002d24:	f04f 0200 	mov.w	r2, #0
 8002d28:	f04f 0300 	mov.w	r3, #0
 8002d2c:	0e0a      	lsrs	r2, r1, #24
 8002d2e:	2300      	movs	r3, #0
 8002d30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d32:	3107      	adds	r1, #7
 8002d34:	6838      	ldr	r0, [r7, #0]
 8002d36:	4401      	add	r1, r0
 8002d38:	b2d3      	uxtb	r3, r2
 8002d3a:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8002d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3e:	3308      	adds	r3, #8
 8002d40:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002d48:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8002d4c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d52:	6838      	ldr	r0, [r7, #0]
 8002d54:	4401      	add	r1, r0
 8002d56:	b2d3      	uxtb	r3, r2
 8002d58:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8002d5a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002d5e:	f04f 0200 	mov.w	r2, #0
 8002d62:	f04f 0300 	mov.w	r3, #0
 8002d66:	0a02      	lsrs	r2, r0, #8
 8002d68:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002d6c:	0a0b      	lsrs	r3, r1, #8
 8002d6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d70:	3101      	adds	r1, #1
 8002d72:	6838      	ldr	r0, [r7, #0]
 8002d74:	4401      	add	r1, r0
 8002d76:	b2d3      	uxtb	r3, r2
 8002d78:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8002d7a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002d7e:	f04f 0200 	mov.w	r2, #0
 8002d82:	f04f 0300 	mov.w	r3, #0
 8002d86:	0c02      	lsrs	r2, r0, #16
 8002d88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002d8c:	0c0b      	lsrs	r3, r1, #16
 8002d8e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d90:	3102      	adds	r1, #2
 8002d92:	6838      	ldr	r0, [r7, #0]
 8002d94:	4401      	add	r1, r0
 8002d96:	b2d3      	uxtb	r3, r2
 8002d98:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8002d9a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002d9e:	f04f 0200 	mov.w	r2, #0
 8002da2:	f04f 0300 	mov.w	r3, #0
 8002da6:	0e02      	lsrs	r2, r0, #24
 8002da8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002dac:	0e0b      	lsrs	r3, r1, #24
 8002dae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002db0:	3103      	adds	r1, #3
 8002db2:	6838      	ldr	r0, [r7, #0]
 8002db4:	4401      	add	r1, r0
 8002db6:	b2d3      	uxtb	r3, r2
 8002db8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8002dba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002dbe:	f04f 0200 	mov.w	r2, #0
 8002dc2:	f04f 0300 	mov.w	r3, #0
 8002dc6:	000a      	movs	r2, r1
 8002dc8:	2300      	movs	r3, #0
 8002dca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002dcc:	3104      	adds	r1, #4
 8002dce:	6838      	ldr	r0, [r7, #0]
 8002dd0:	4401      	add	r1, r0
 8002dd2:	b2d3      	uxtb	r3, r2
 8002dd4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8002dd6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002dda:	f04f 0200 	mov.w	r2, #0
 8002dde:	f04f 0300 	mov.w	r3, #0
 8002de2:	0a0a      	lsrs	r2, r1, #8
 8002de4:	2300      	movs	r3, #0
 8002de6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002de8:	3105      	adds	r1, #5
 8002dea:	6838      	ldr	r0, [r7, #0]
 8002dec:	4401      	add	r1, r0
 8002dee:	b2d3      	uxtb	r3, r2
 8002df0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8002df2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002df6:	f04f 0200 	mov.w	r2, #0
 8002dfa:	f04f 0300 	mov.w	r3, #0
 8002dfe:	0c0a      	lsrs	r2, r1, #16
 8002e00:	2300      	movs	r3, #0
 8002e02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e04:	3106      	adds	r1, #6
 8002e06:	6838      	ldr	r0, [r7, #0]
 8002e08:	4401      	add	r1, r0
 8002e0a:	b2d3      	uxtb	r3, r2
 8002e0c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8002e0e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002e12:	f04f 0200 	mov.w	r2, #0
 8002e16:	f04f 0300 	mov.w	r3, #0
 8002e1a:	0e0a      	lsrs	r2, r1, #24
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e20:	3107      	adds	r1, #7
 8002e22:	6838      	ldr	r0, [r7, #0]
 8002e24:	4401      	add	r1, r0
 8002e26:	b2d3      	uxtb	r3, r2
 8002e28:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 8002e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2c:	3308      	adds	r3, #8
 8002e2e:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 8002e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002e32:	4618      	mov	r0, r3
 8002e34:	372c      	adds	r7, #44	; 0x2c
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr

08002e3e <_ZN13geometry_msgs5Point11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002e3e:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002e42:	b0eb      	sub	sp, #428	; 0x1ac
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 8002e4a:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8002e54:	f04f 0200 	mov.w	r2, #0
 8002e58:	f04f 0300 	mov.w	r3, #0
 8002e5c:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002e60:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002e64:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002e68:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002e6c:	4413      	add	r3, r2
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	2200      	movs	r2, #0
 8002e74:	461c      	mov	r4, r3
 8002e76:	4615      	mov	r5, r2
 8002e78:	ea40 0804 	orr.w	r8, r0, r4
 8002e7c:	ea41 0905 	orr.w	r9, r1, r5
 8002e80:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002e84:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002e88:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002e8c:	1c5a      	adds	r2, r3, #1
 8002e8e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002e92:	4413      	add	r3, r2
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	2200      	movs	r2, #0
 8002e9a:	469a      	mov	sl, r3
 8002e9c:	4693      	mov	fp, r2
 8002e9e:	f04f 0200 	mov.w	r2, #0
 8002ea2:	f04f 0300 	mov.w	r3, #0
 8002ea6:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8002eaa:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8002eae:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8002eb2:	ea40 0402 	orr.w	r4, r0, r2
 8002eb6:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 8002eba:	430b      	orrs	r3, r1
 8002ebc:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002ec0:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8002ec4:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002ec8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002ecc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002ed0:	1c9a      	adds	r2, r3, #2
 8002ed2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002ed6:	4413      	add	r3, r2
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	2200      	movs	r2, #0
 8002ede:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8002ee2:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8002ee6:	f04f 0200 	mov.w	r2, #0
 8002eea:	f04f 0300 	mov.w	r3, #0
 8002eee:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 8002ef2:	464c      	mov	r4, r9
 8002ef4:	0423      	lsls	r3, r4, #16
 8002ef6:	4644      	mov	r4, r8
 8002ef8:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002efc:	4644      	mov	r4, r8
 8002efe:	0422      	lsls	r2, r4, #16
 8002f00:	ea40 0402 	orr.w	r4, r0, r2
 8002f04:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 8002f08:	430b      	orrs	r3, r1
 8002f0a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8002f0e:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 8002f12:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002f16:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002f1a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002f1e:	1cda      	adds	r2, r3, #3
 8002f20:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002f24:	4413      	add	r3, r2
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8002f30:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8002f34:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8002f38:	4623      	mov	r3, r4
 8002f3a:	0a1b      	lsrs	r3, r3, #8
 8002f3c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8002f40:	4623      	mov	r3, r4
 8002f42:	061b      	lsls	r3, r3, #24
 8002f44:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002f48:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 8002f4c:	4623      	mov	r3, r4
 8002f4e:	4303      	orrs	r3, r0
 8002f50:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002f54:	462b      	mov	r3, r5
 8002f56:	430b      	orrs	r3, r1
 8002f58:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002f5c:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 8002f60:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002f64:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002f68:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002f6c:	1d1a      	adds	r2, r3, #4
 8002f6e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002f72:	4413      	add	r3, r2
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8002f7e:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002f82:	f04f 0200 	mov.w	r2, #0
 8002f86:	f04f 0300 	mov.w	r3, #0
 8002f8a:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 8002f8e:	0023      	movs	r3, r4
 8002f90:	2200      	movs	r2, #0
 8002f92:	ea40 0402 	orr.w	r4, r0, r2
 8002f96:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8002f9a:	430b      	orrs	r3, r1
 8002f9c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8002fa0:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8002fa4:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002fa8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002fac:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002fb0:	1d5a      	adds	r2, r3, #5
 8002fb2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002fb6:	4413      	add	r3, r2
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8002fc2:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8002fc6:	f04f 0200 	mov.w	r2, #0
 8002fca:	f04f 0300 	mov.w	r3, #0
 8002fce:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 8002fd2:	0223      	lsls	r3, r4, #8
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	ea40 0402 	orr.w	r4, r0, r2
 8002fda:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 8002fde:	430b      	orrs	r3, r1
 8002fe0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8002fe4:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8002fe8:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002fec:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002ff0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002ff4:	1d9a      	adds	r2, r3, #6
 8002ff6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002ffa:	4413      	add	r3, r2
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	2200      	movs	r2, #0
 8003002:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003006:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 800300a:	f04f 0200 	mov.w	r2, #0
 800300e:	f04f 0300 	mov.w	r3, #0
 8003012:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 8003016:	0423      	lsls	r3, r4, #16
 8003018:	2200      	movs	r2, #0
 800301a:	ea40 0402 	orr.w	r4, r0, r2
 800301e:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 8003022:	430b      	orrs	r3, r1
 8003024:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003028:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 800302c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003030:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003034:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003038:	1dda      	adds	r2, r3, #7
 800303a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800303e:	4413      	add	r3, r2
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	b2db      	uxtb	r3, r3
 8003044:	2200      	movs	r2, #0
 8003046:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800304a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800304e:	f04f 0200 	mov.w	r2, #0
 8003052:	f04f 0300 	mov.w	r3, #0
 8003056:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 800305a:	0623      	lsls	r3, r4, #24
 800305c:	2200      	movs	r2, #0
 800305e:	ea40 0402 	orr.w	r4, r0, r2
 8003062:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 8003066:	430b      	orrs	r3, r1
 8003068:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800306c:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8003070:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 8003074:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003078:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800307c:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8003080:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003084:	3308      	adds	r3, #8
 8003086:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 800308a:	f04f 0200 	mov.w	r2, #0
 800308e:	f04f 0300 	mov.w	r3, #0
 8003092:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003096:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800309a:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 800309e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80030a2:	4413      	add	r3, r2
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	2200      	movs	r2, #0
 80030aa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80030ae:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 80030b2:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 80030b6:	4623      	mov	r3, r4
 80030b8:	4303      	orrs	r3, r0
 80030ba:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80030be:	462b      	mov	r3, r5
 80030c0:	430b      	orrs	r3, r1
 80030c2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80030c6:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 80030ca:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80030ce:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80030d2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80030d6:	1c5a      	adds	r2, r3, #1
 80030d8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80030dc:	4413      	add	r3, r2
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	2200      	movs	r2, #0
 80030e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80030e8:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 80030ec:	f04f 0200 	mov.w	r2, #0
 80030f0:	f04f 0300 	mov.w	r3, #0
 80030f4:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 80030f8:	464c      	mov	r4, r9
 80030fa:	0223      	lsls	r3, r4, #8
 80030fc:	4644      	mov	r4, r8
 80030fe:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003102:	4644      	mov	r4, r8
 8003104:	0222      	lsls	r2, r4, #8
 8003106:	ea40 0402 	orr.w	r4, r0, r2
 800310a:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 800310e:	430b      	orrs	r3, r1
 8003110:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003114:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8003118:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800311c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003120:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003124:	1c9a      	adds	r2, r3, #2
 8003126:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800312a:	4413      	add	r3, r2
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	b2db      	uxtb	r3, r3
 8003130:	2200      	movs	r2, #0
 8003132:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003136:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800313a:	f04f 0200 	mov.w	r2, #0
 800313e:	f04f 0300 	mov.w	r3, #0
 8003142:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8003146:	464c      	mov	r4, r9
 8003148:	0423      	lsls	r3, r4, #16
 800314a:	4644      	mov	r4, r8
 800314c:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003150:	4644      	mov	r4, r8
 8003152:	0422      	lsls	r2, r4, #16
 8003154:	ea40 0402 	orr.w	r4, r0, r2
 8003158:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 800315c:	430b      	orrs	r3, r1
 800315e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003162:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8003166:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800316a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800316e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003172:	1cda      	adds	r2, r3, #3
 8003174:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003178:	4413      	add	r3, r2
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2200      	movs	r2, #0
 8003180:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003184:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003188:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800318c:	4623      	mov	r3, r4
 800318e:	0a1b      	lsrs	r3, r3, #8
 8003190:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003194:	4623      	mov	r3, r4
 8003196:	061b      	lsls	r3, r3, #24
 8003198:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800319c:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80031a0:	4623      	mov	r3, r4
 80031a2:	4303      	orrs	r3, r0
 80031a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80031a8:	462b      	mov	r3, r5
 80031aa:	430b      	orrs	r3, r1
 80031ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80031b0:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 80031b4:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80031b8:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80031bc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80031c0:	1d1a      	adds	r2, r3, #4
 80031c2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80031c6:	4413      	add	r3, r2
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	2200      	movs	r2, #0
 80031ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80031d2:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80031d6:	f04f 0200 	mov.w	r2, #0
 80031da:	f04f 0300 	mov.w	r3, #0
 80031de:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 80031e2:	0023      	movs	r3, r4
 80031e4:	2200      	movs	r2, #0
 80031e6:	ea40 0402 	orr.w	r4, r0, r2
 80031ea:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 80031ee:	430b      	orrs	r3, r1
 80031f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80031f4:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 80031f8:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80031fc:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003200:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003204:	1d5a      	adds	r2, r3, #5
 8003206:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800320a:	4413      	add	r3, r2
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	b2db      	uxtb	r3, r3
 8003210:	2200      	movs	r2, #0
 8003212:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003216:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800321a:	f04f 0200 	mov.w	r2, #0
 800321e:	f04f 0300 	mov.w	r3, #0
 8003222:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8003226:	0223      	lsls	r3, r4, #8
 8003228:	2200      	movs	r2, #0
 800322a:	ea40 0402 	orr.w	r4, r0, r2
 800322e:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8003232:	430b      	orrs	r3, r1
 8003234:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003238:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 800323c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003240:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003244:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003248:	1d9a      	adds	r2, r3, #6
 800324a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800324e:	4413      	add	r3, r2
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	b2db      	uxtb	r3, r3
 8003254:	2200      	movs	r2, #0
 8003256:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800325a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800325e:	f04f 0200 	mov.w	r2, #0
 8003262:	f04f 0300 	mov.w	r3, #0
 8003266:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 800326a:	0423      	lsls	r3, r4, #16
 800326c:	2200      	movs	r2, #0
 800326e:	ea40 0402 	orr.w	r4, r0, r2
 8003272:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8003276:	430b      	orrs	r3, r1
 8003278:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800327c:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8003280:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003284:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003288:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800328c:	1dda      	adds	r2, r3, #7
 800328e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003292:	4413      	add	r3, r2
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	b2db      	uxtb	r3, r3
 8003298:	2200      	movs	r2, #0
 800329a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800329e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80032a2:	f04f 0200 	mov.w	r2, #0
 80032a6:	f04f 0300 	mov.w	r3, #0
 80032aa:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 80032ae:	0623      	lsls	r3, r4, #24
 80032b0:	2200      	movs	r2, #0
 80032b2:	ea40 0402 	orr.w	r4, r0, r2
 80032b6:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 80032ba:	430b      	orrs	r3, r1
 80032bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80032c0:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 80032c4:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 80032c8:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80032cc:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80032d0:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 80032d4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80032d8:	3308      	adds	r3, #8
 80032da:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 80032de:	f04f 0200 	mov.w	r2, #0
 80032e2:	f04f 0300 	mov.w	r3, #0
 80032e6:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80032ea:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80032ee:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80032f2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80032f6:	4413      	add	r3, r2
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	2200      	movs	r2, #0
 80032fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003302:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003306:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800330a:	4623      	mov	r3, r4
 800330c:	4303      	orrs	r3, r0
 800330e:	67bb      	str	r3, [r7, #120]	; 0x78
 8003310:	462b      	mov	r3, r5
 8003312:	430b      	orrs	r3, r1
 8003314:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003316:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800331a:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800331e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003322:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003326:	1c5a      	adds	r2, r3, #1
 8003328:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800332c:	4413      	add	r3, r2
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2200      	movs	r2, #0
 8003334:	673b      	str	r3, [r7, #112]	; 0x70
 8003336:	677a      	str	r2, [r7, #116]	; 0x74
 8003338:	f04f 0200 	mov.w	r2, #0
 800333c:	f04f 0300 	mov.w	r3, #0
 8003340:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003344:	464c      	mov	r4, r9
 8003346:	0223      	lsls	r3, r4, #8
 8003348:	4644      	mov	r4, r8
 800334a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800334e:	4644      	mov	r4, r8
 8003350:	0222      	lsls	r2, r4, #8
 8003352:	ea40 0402 	orr.w	r4, r0, r2
 8003356:	66bc      	str	r4, [r7, #104]	; 0x68
 8003358:	430b      	orrs	r3, r1
 800335a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800335c:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8003360:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003364:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003368:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800336c:	1c9a      	adds	r2, r3, #2
 800336e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003372:	4413      	add	r3, r2
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	b2db      	uxtb	r3, r3
 8003378:	2200      	movs	r2, #0
 800337a:	663b      	str	r3, [r7, #96]	; 0x60
 800337c:	667a      	str	r2, [r7, #100]	; 0x64
 800337e:	f04f 0200 	mov.w	r2, #0
 8003382:	f04f 0300 	mov.w	r3, #0
 8003386:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800338a:	464c      	mov	r4, r9
 800338c:	0423      	lsls	r3, r4, #16
 800338e:	4644      	mov	r4, r8
 8003390:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003394:	4644      	mov	r4, r8
 8003396:	0422      	lsls	r2, r4, #16
 8003398:	ea40 0402 	orr.w	r4, r0, r2
 800339c:	65bc      	str	r4, [r7, #88]	; 0x58
 800339e:	430b      	orrs	r3, r1
 80033a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80033a2:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 80033a6:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80033aa:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80033ae:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80033b2:	1cda      	adds	r2, r3, #3
 80033b4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80033b8:	4413      	add	r3, r2
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	2200      	movs	r2, #0
 80033c0:	653b      	str	r3, [r7, #80]	; 0x50
 80033c2:	657a      	str	r2, [r7, #84]	; 0x54
 80033c4:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80033c8:	4623      	mov	r3, r4
 80033ca:	0a1b      	lsrs	r3, r3, #8
 80033cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033ce:	4623      	mov	r3, r4
 80033d0:	061b      	lsls	r3, r3, #24
 80033d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80033d4:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80033d8:	4623      	mov	r3, r4
 80033da:	4303      	orrs	r3, r0
 80033dc:	643b      	str	r3, [r7, #64]	; 0x40
 80033de:	462b      	mov	r3, r5
 80033e0:	430b      	orrs	r3, r1
 80033e2:	647b      	str	r3, [r7, #68]	; 0x44
 80033e4:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80033e8:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80033ec:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80033f0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80033f4:	1d1a      	adds	r2, r3, #4
 80033f6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80033fa:	4413      	add	r3, r2
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	2200      	movs	r2, #0
 8003402:	63bb      	str	r3, [r7, #56]	; 0x38
 8003404:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003406:	f04f 0200 	mov.w	r2, #0
 800340a:	f04f 0300 	mov.w	r3, #0
 800340e:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8003410:	0023      	movs	r3, r4
 8003412:	2200      	movs	r2, #0
 8003414:	ea40 0402 	orr.w	r4, r0, r2
 8003418:	633c      	str	r4, [r7, #48]	; 0x30
 800341a:	430b      	orrs	r3, r1
 800341c:	637b      	str	r3, [r7, #52]	; 0x34
 800341e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8003422:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003426:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800342a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800342e:	1d5a      	adds	r2, r3, #5
 8003430:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003434:	4413      	add	r3, r2
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	b2db      	uxtb	r3, r3
 800343a:	2200      	movs	r2, #0
 800343c:	62bb      	str	r3, [r7, #40]	; 0x28
 800343e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003440:	f04f 0200 	mov.w	r2, #0
 8003444:	f04f 0300 	mov.w	r3, #0
 8003448:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800344a:	0223      	lsls	r3, r4, #8
 800344c:	2200      	movs	r2, #0
 800344e:	ea40 0402 	orr.w	r4, r0, r2
 8003452:	623c      	str	r4, [r7, #32]
 8003454:	430b      	orrs	r3, r1
 8003456:	627b      	str	r3, [r7, #36]	; 0x24
 8003458:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800345c:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003460:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003464:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003468:	3306      	adds	r3, #6
 800346a:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 800346e:	4413      	add	r3, r2
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	b2db      	uxtb	r3, r3
 8003474:	2200      	movs	r2, #0
 8003476:	61bb      	str	r3, [r7, #24]
 8003478:	61fa      	str	r2, [r7, #28]
 800347a:	f04f 0200 	mov.w	r2, #0
 800347e:	f04f 0300 	mov.w	r3, #0
 8003482:	69bc      	ldr	r4, [r7, #24]
 8003484:	0423      	lsls	r3, r4, #16
 8003486:	2200      	movs	r2, #0
 8003488:	ea40 0402 	orr.w	r4, r0, r2
 800348c:	613c      	str	r4, [r7, #16]
 800348e:	430b      	orrs	r3, r1
 8003490:	617b      	str	r3, [r7, #20]
 8003492:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003496:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800349a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800349e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80034a2:	3307      	adds	r3, #7
 80034a4:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 80034a8:	4413      	add	r3, r2
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	2200      	movs	r2, #0
 80034b0:	60bb      	str	r3, [r7, #8]
 80034b2:	60fa      	str	r2, [r7, #12]
 80034b4:	f04f 0200 	mov.w	r2, #0
 80034b8:	f04f 0300 	mov.w	r3, #0
 80034bc:	68bc      	ldr	r4, [r7, #8]
 80034be:	0623      	lsls	r3, r4, #24
 80034c0:	2200      	movs	r2, #0
 80034c2:	ea40 0402 	orr.w	r4, r0, r2
 80034c6:	603c      	str	r4, [r7, #0]
 80034c8:	430b      	orrs	r3, r1
 80034ca:	607b      	str	r3, [r7, #4]
 80034cc:	e9d7 3400 	ldrd	r3, r4, [r7]
 80034d0:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 80034d4:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 80034d8:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 80034dc:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 80034e0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80034e4:	3308      	adds	r3, #8
 80034e6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 80034ea:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 80034ee:	4618      	mov	r0, r3
 80034f0:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 80034f4:	46bd      	mov	sp, r7
 80034f6:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80034fa:	4770      	bx	lr

080034fc <_ZN13geometry_msgs5Point7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Point"; };
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	4b03      	ldr	r3, [pc, #12]	; (8003514 <_ZN13geometry_msgs5Point7getTypeEv+0x18>)
 8003506:	4618      	mov	r0, r3
 8003508:	370c      	adds	r7, #12
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
 8003512:	bf00      	nop
 8003514:	080119dc 	.word	0x080119dc

08003518 <_ZN13geometry_msgs5Point6getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	4b03      	ldr	r3, [pc, #12]	; (8003530 <_ZN13geometry_msgs5Point6getMD5Ev+0x18>)
 8003522:	4618      	mov	r0, r3
 8003524:	370c      	adds	r7, #12
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	080119f0 	.word	0x080119f0

08003534 <_ZN8std_msgs5Int64C1Ev>:
  {
    public:
      typedef int64_t _data_type;
      _data_type data;

    Int64():
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
      data(0)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4618      	mov	r0, r3
 8003540:	f7fe faa0 	bl	8001a84 <_ZN3ros3MsgC1Ev>
 8003544:	4a07      	ldr	r2, [pc, #28]	; (8003564 <_ZN8std_msgs5Int64C1Ev+0x30>)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	601a      	str	r2, [r3, #0]
 800354a:	6879      	ldr	r1, [r7, #4]
 800354c:	f04f 0200 	mov.w	r2, #0
 8003550:	f04f 0300 	mov.w	r3, #0
 8003554:	e9c1 2302 	strd	r2, r3, [r1, #8]
    {
    }
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4618      	mov	r0, r3
 800355c:	3708      	adds	r7, #8
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	08011b8c 	.word	0x08011b8c

08003568 <_ZNK8std_msgs5Int649serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003568:	b480      	push	{r7}
 800356a:	b087      	sub	sp, #28
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003572:	2300      	movs	r3, #0
 8003574:	617b      	str	r3, [r7, #20]
      union {
        int64_t real;
        uint64_t base;
      } u_data;
      u_data.real = this->data;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800357c:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8003580:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003584:	6979      	ldr	r1, [r7, #20]
 8003586:	6838      	ldr	r0, [r7, #0]
 8003588:	4401      	add	r1, r0
 800358a:	b2d3      	uxtb	r3, r2
 800358c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 800358e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003592:	f04f 0200 	mov.w	r2, #0
 8003596:	f04f 0300 	mov.w	r3, #0
 800359a:	0a02      	lsrs	r2, r0, #8
 800359c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80035a0:	0a0b      	lsrs	r3, r1, #8
 80035a2:	6979      	ldr	r1, [r7, #20]
 80035a4:	3101      	adds	r1, #1
 80035a6:	6838      	ldr	r0, [r7, #0]
 80035a8:	4401      	add	r1, r0
 80035aa:	b2d3      	uxtb	r3, r2
 80035ac:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 80035ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80035b2:	f04f 0200 	mov.w	r2, #0
 80035b6:	f04f 0300 	mov.w	r3, #0
 80035ba:	0c02      	lsrs	r2, r0, #16
 80035bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80035c0:	0c0b      	lsrs	r3, r1, #16
 80035c2:	6979      	ldr	r1, [r7, #20]
 80035c4:	3102      	adds	r1, #2
 80035c6:	6838      	ldr	r0, [r7, #0]
 80035c8:	4401      	add	r1, r0
 80035ca:	b2d3      	uxtb	r3, r2
 80035cc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 80035ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80035d2:	f04f 0200 	mov.w	r2, #0
 80035d6:	f04f 0300 	mov.w	r3, #0
 80035da:	0e02      	lsrs	r2, r0, #24
 80035dc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80035e0:	0e0b      	lsrs	r3, r1, #24
 80035e2:	6979      	ldr	r1, [r7, #20]
 80035e4:	3103      	adds	r1, #3
 80035e6:	6838      	ldr	r0, [r7, #0]
 80035e8:	4401      	add	r1, r0
 80035ea:	b2d3      	uxtb	r3, r2
 80035ec:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_data.base >> (8 * 4)) & 0xFF;
 80035ee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80035f2:	f04f 0200 	mov.w	r2, #0
 80035f6:	f04f 0300 	mov.w	r3, #0
 80035fa:	000a      	movs	r2, r1
 80035fc:	2300      	movs	r3, #0
 80035fe:	6979      	ldr	r1, [r7, #20]
 8003600:	3104      	adds	r1, #4
 8003602:	6838      	ldr	r0, [r7, #0]
 8003604:	4401      	add	r1, r0
 8003606:	b2d3      	uxtb	r3, r2
 8003608:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_data.base >> (8 * 5)) & 0xFF;
 800360a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800360e:	f04f 0200 	mov.w	r2, #0
 8003612:	f04f 0300 	mov.w	r3, #0
 8003616:	0a0a      	lsrs	r2, r1, #8
 8003618:	2300      	movs	r3, #0
 800361a:	6979      	ldr	r1, [r7, #20]
 800361c:	3105      	adds	r1, #5
 800361e:	6838      	ldr	r0, [r7, #0]
 8003620:	4401      	add	r1, r0
 8003622:	b2d3      	uxtb	r3, r2
 8003624:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_data.base >> (8 * 6)) & 0xFF;
 8003626:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800362a:	f04f 0200 	mov.w	r2, #0
 800362e:	f04f 0300 	mov.w	r3, #0
 8003632:	0c0a      	lsrs	r2, r1, #16
 8003634:	2300      	movs	r3, #0
 8003636:	6979      	ldr	r1, [r7, #20]
 8003638:	3106      	adds	r1, #6
 800363a:	6838      	ldr	r0, [r7, #0]
 800363c:	4401      	add	r1, r0
 800363e:	b2d3      	uxtb	r3, r2
 8003640:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_data.base >> (8 * 7)) & 0xFF;
 8003642:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003646:	f04f 0200 	mov.w	r2, #0
 800364a:	f04f 0300 	mov.w	r3, #0
 800364e:	0e0a      	lsrs	r2, r1, #24
 8003650:	2300      	movs	r3, #0
 8003652:	6979      	ldr	r1, [r7, #20]
 8003654:	3107      	adds	r1, #7
 8003656:	6838      	ldr	r0, [r7, #0]
 8003658:	4401      	add	r1, r0
 800365a:	b2d3      	uxtb	r3, r2
 800365c:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->data);
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	3308      	adds	r3, #8
 8003662:	617b      	str	r3, [r7, #20]
      return offset;
 8003664:	697b      	ldr	r3, [r7, #20]
    }
 8003666:	4618      	mov	r0, r3
 8003668:	371c      	adds	r7, #28
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr

08003672 <_ZN8std_msgs5Int6411deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003672:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003676:	b0a3      	sub	sp, #140	; 0x8c
 8003678:	af00      	add	r7, sp, #0
 800367a:	6778      	str	r0, [r7, #116]	; 0x74
 800367c:	6739      	str	r1, [r7, #112]	; 0x70
    {
      int offset = 0;
 800367e:	2300      	movs	r3, #0
 8003680:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      union {
        int64_t real;
        uint64_t base;
      } u_data;
      u_data.base = 0;
 8003684:	f04f 0200 	mov.w	r2, #0
 8003688:	f04f 0300 	mov.w	r3, #0
 800368c:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003690:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003694:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003698:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800369a:	4413      	add	r3, r2
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	2200      	movs	r2, #0
 80036a2:	461c      	mov	r4, r3
 80036a4:	4615      	mov	r5, r2
 80036a6:	ea40 0804 	orr.w	r8, r0, r4
 80036aa:	ea41 0905 	orr.w	r9, r1, r5
 80036ae:	e9c7 891e 	strd	r8, r9, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80036b2:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80036b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80036ba:	1c5a      	adds	r2, r3, #1
 80036bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036be:	4413      	add	r3, r2
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	2200      	movs	r2, #0
 80036c6:	469a      	mov	sl, r3
 80036c8:	4693      	mov	fp, r2
 80036ca:	f04f 0200 	mov.w	r2, #0
 80036ce:	f04f 0300 	mov.w	r3, #0
 80036d2:	ea4f 230b 	mov.w	r3, fp, lsl #8
 80036d6:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 80036da:	ea4f 220a 	mov.w	r2, sl, lsl #8
 80036de:	ea40 0402 	orr.w	r4, r0, r2
 80036e2:	66bc      	str	r4, [r7, #104]	; 0x68
 80036e4:	430b      	orrs	r3, r1
 80036e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80036e8:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 80036ec:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80036f0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80036f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80036f8:	1c9a      	adds	r2, r3, #2
 80036fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036fc:	4413      	add	r3, r2
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2200      	movs	r2, #0
 8003704:	663b      	str	r3, [r7, #96]	; 0x60
 8003706:	667a      	str	r2, [r7, #100]	; 0x64
 8003708:	f04f 0200 	mov.w	r2, #0
 800370c:	f04f 0300 	mov.w	r3, #0
 8003710:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003714:	464c      	mov	r4, r9
 8003716:	0423      	lsls	r3, r4, #16
 8003718:	4644      	mov	r4, r8
 800371a:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 800371e:	4644      	mov	r4, r8
 8003720:	0422      	lsls	r2, r4, #16
 8003722:	ea40 0402 	orr.w	r4, r0, r2
 8003726:	65bc      	str	r4, [r7, #88]	; 0x58
 8003728:	430b      	orrs	r3, r1
 800372a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800372c:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8003730:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003734:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003738:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800373c:	1cda      	adds	r2, r3, #3
 800373e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003740:	4413      	add	r3, r2
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	b2db      	uxtb	r3, r3
 8003746:	2200      	movs	r2, #0
 8003748:	653b      	str	r3, [r7, #80]	; 0x50
 800374a:	657a      	str	r2, [r7, #84]	; 0x54
 800374c:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8003750:	4623      	mov	r3, r4
 8003752:	0a1b      	lsrs	r3, r3, #8
 8003754:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003756:	4623      	mov	r3, r4
 8003758:	061b      	lsls	r3, r3, #24
 800375a:	64bb      	str	r3, [r7, #72]	; 0x48
 800375c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8003760:	4623      	mov	r3, r4
 8003762:	4303      	orrs	r3, r0
 8003764:	643b      	str	r3, [r7, #64]	; 0x40
 8003766:	462b      	mov	r3, r5
 8003768:	430b      	orrs	r3, r1
 800376a:	647b      	str	r3, [r7, #68]	; 0x44
 800376c:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8003770:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003774:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003778:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800377c:	1d1a      	adds	r2, r3, #4
 800377e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003780:	4413      	add	r3, r2
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	b2db      	uxtb	r3, r3
 8003786:	2200      	movs	r2, #0
 8003788:	63bb      	str	r3, [r7, #56]	; 0x38
 800378a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800378c:	f04f 0200 	mov.w	r2, #0
 8003790:	f04f 0300 	mov.w	r3, #0
 8003794:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8003796:	0023      	movs	r3, r4
 8003798:	2200      	movs	r2, #0
 800379a:	ea40 0402 	orr.w	r4, r0, r2
 800379e:	633c      	str	r4, [r7, #48]	; 0x30
 80037a0:	430b      	orrs	r3, r1
 80037a2:	637b      	str	r3, [r7, #52]	; 0x34
 80037a4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80037a8:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80037ac:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80037b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80037b4:	1d5a      	adds	r2, r3, #5
 80037b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037b8:	4413      	add	r3, r2
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	2200      	movs	r2, #0
 80037c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80037c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037c4:	f04f 0200 	mov.w	r2, #0
 80037c8:	f04f 0300 	mov.w	r3, #0
 80037cc:	6abc      	ldr	r4, [r7, #40]	; 0x28
 80037ce:	0223      	lsls	r3, r4, #8
 80037d0:	2200      	movs	r2, #0
 80037d2:	ea40 0402 	orr.w	r4, r0, r2
 80037d6:	623c      	str	r4, [r7, #32]
 80037d8:	430b      	orrs	r3, r1
 80037da:	627b      	str	r3, [r7, #36]	; 0x24
 80037dc:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80037e0:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80037e4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80037e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80037ec:	3306      	adds	r3, #6
 80037ee:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80037f0:	4413      	add	r3, r2
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2200      	movs	r2, #0
 80037f8:	61bb      	str	r3, [r7, #24]
 80037fa:	61fa      	str	r2, [r7, #28]
 80037fc:	f04f 0200 	mov.w	r2, #0
 8003800:	f04f 0300 	mov.w	r3, #0
 8003804:	69bc      	ldr	r4, [r7, #24]
 8003806:	0423      	lsls	r3, r4, #16
 8003808:	2200      	movs	r2, #0
 800380a:	ea40 0402 	orr.w	r4, r0, r2
 800380e:	613c      	str	r4, [r7, #16]
 8003810:	430b      	orrs	r3, r1
 8003812:	617b      	str	r3, [r7, #20]
 8003814:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003818:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800381c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003820:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003824:	3307      	adds	r3, #7
 8003826:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003828:	4413      	add	r3, r2
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	b2db      	uxtb	r3, r3
 800382e:	2200      	movs	r2, #0
 8003830:	60bb      	str	r3, [r7, #8]
 8003832:	60fa      	str	r2, [r7, #12]
 8003834:	f04f 0200 	mov.w	r2, #0
 8003838:	f04f 0300 	mov.w	r3, #0
 800383c:	68bc      	ldr	r4, [r7, #8]
 800383e:	0623      	lsls	r3, r4, #24
 8003840:	2200      	movs	r2, #0
 8003842:	ea40 0402 	orr.w	r4, r0, r2
 8003846:	603c      	str	r4, [r7, #0]
 8003848:	430b      	orrs	r3, r1
 800384a:	607b      	str	r3, [r7, #4]
 800384c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003850:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      this->data = u_data.real;
 8003854:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8003858:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800385a:	e9c1 2302 	strd	r2, r3, [r1, #8]
      offset += sizeof(this->data);
 800385e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003862:	3308      	adds	r3, #8
 8003864:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
     return offset;
 8003868:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    }
 800386c:	4618      	mov	r0, r3
 800386e:	378c      	adds	r7, #140	; 0x8c
 8003870:	46bd      	mov	sp, r7
 8003872:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003876:	4770      	bx	lr

08003878 <_ZN8std_msgs5Int647getTypeEv>:

    const char * getType(){ return "std_msgs/Int64"; };
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	4b03      	ldr	r3, [pc, #12]	; (8003890 <_ZN8std_msgs5Int647getTypeEv+0x18>)
 8003882:	4618      	mov	r0, r3
 8003884:	370c      	adds	r7, #12
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop
 8003890:	08011a14 	.word	0x08011a14

08003894 <_ZN8std_msgs5Int646getMD5Ev>:
    const char * getMD5(){ return "34add168574510e6e17f5d23ecc077ef"; };
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	4b03      	ldr	r3, [pc, #12]	; (80038ac <_ZN8std_msgs5Int646getMD5Ev+0x18>)
 800389e:	4618      	mov	r0, r3
 80038a0:	370c      	adds	r7, #12
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	08011a24 	.word	0x08011a24

080038b0 <_ZN8std_msgs7Float64C1Ev>:
  {
    public:
      typedef double _data_type;
      _data_type data;

    Float64():
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
      data(0)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4618      	mov	r0, r3
 80038bc:	f7fe f8e2 	bl	8001a84 <_ZN3ros3MsgC1Ev>
 80038c0:	4a07      	ldr	r2, [pc, #28]	; (80038e0 <_ZN8std_msgs7Float64C1Ev+0x30>)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	601a      	str	r2, [r3, #0]
 80038c6:	6879      	ldr	r1, [r7, #4]
 80038c8:	f04f 0200 	mov.w	r2, #0
 80038cc:	f04f 0300 	mov.w	r3, #0
 80038d0:	e9c1 2302 	strd	r2, r3, [r1, #8]
    {
    }
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4618      	mov	r0, r3
 80038d8:	3708      	adds	r7, #8
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	08011b74 	.word	0x08011b74

080038e4 <_ZNK8std_msgs7Float649serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80038e4:	b480      	push	{r7}
 80038e6:	b087      	sub	sp, #28
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80038ee:	2300      	movs	r3, #0
 80038f0:	617b      	str	r3, [r7, #20]
      union {
        double real;
        uint64_t base;
      } u_data;
      u_data.real = this->data;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80038f8:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 80038fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003900:	6979      	ldr	r1, [r7, #20]
 8003902:	6838      	ldr	r0, [r7, #0]
 8003904:	4401      	add	r1, r0
 8003906:	b2d3      	uxtb	r3, r2
 8003908:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 800390a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800390e:	f04f 0200 	mov.w	r2, #0
 8003912:	f04f 0300 	mov.w	r3, #0
 8003916:	0a02      	lsrs	r2, r0, #8
 8003918:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800391c:	0a0b      	lsrs	r3, r1, #8
 800391e:	6979      	ldr	r1, [r7, #20]
 8003920:	3101      	adds	r1, #1
 8003922:	6838      	ldr	r0, [r7, #0]
 8003924:	4401      	add	r1, r0
 8003926:	b2d3      	uxtb	r3, r2
 8003928:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 800392a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800392e:	f04f 0200 	mov.w	r2, #0
 8003932:	f04f 0300 	mov.w	r3, #0
 8003936:	0c02      	lsrs	r2, r0, #16
 8003938:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800393c:	0c0b      	lsrs	r3, r1, #16
 800393e:	6979      	ldr	r1, [r7, #20]
 8003940:	3102      	adds	r1, #2
 8003942:	6838      	ldr	r0, [r7, #0]
 8003944:	4401      	add	r1, r0
 8003946:	b2d3      	uxtb	r3, r2
 8003948:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 800394a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800394e:	f04f 0200 	mov.w	r2, #0
 8003952:	f04f 0300 	mov.w	r3, #0
 8003956:	0e02      	lsrs	r2, r0, #24
 8003958:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800395c:	0e0b      	lsrs	r3, r1, #24
 800395e:	6979      	ldr	r1, [r7, #20]
 8003960:	3103      	adds	r1, #3
 8003962:	6838      	ldr	r0, [r7, #0]
 8003964:	4401      	add	r1, r0
 8003966:	b2d3      	uxtb	r3, r2
 8003968:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_data.base >> (8 * 4)) & 0xFF;
 800396a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800396e:	f04f 0200 	mov.w	r2, #0
 8003972:	f04f 0300 	mov.w	r3, #0
 8003976:	000a      	movs	r2, r1
 8003978:	2300      	movs	r3, #0
 800397a:	6979      	ldr	r1, [r7, #20]
 800397c:	3104      	adds	r1, #4
 800397e:	6838      	ldr	r0, [r7, #0]
 8003980:	4401      	add	r1, r0
 8003982:	b2d3      	uxtb	r3, r2
 8003984:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_data.base >> (8 * 5)) & 0xFF;
 8003986:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800398a:	f04f 0200 	mov.w	r2, #0
 800398e:	f04f 0300 	mov.w	r3, #0
 8003992:	0a0a      	lsrs	r2, r1, #8
 8003994:	2300      	movs	r3, #0
 8003996:	6979      	ldr	r1, [r7, #20]
 8003998:	3105      	adds	r1, #5
 800399a:	6838      	ldr	r0, [r7, #0]
 800399c:	4401      	add	r1, r0
 800399e:	b2d3      	uxtb	r3, r2
 80039a0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_data.base >> (8 * 6)) & 0xFF;
 80039a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80039a6:	f04f 0200 	mov.w	r2, #0
 80039aa:	f04f 0300 	mov.w	r3, #0
 80039ae:	0c0a      	lsrs	r2, r1, #16
 80039b0:	2300      	movs	r3, #0
 80039b2:	6979      	ldr	r1, [r7, #20]
 80039b4:	3106      	adds	r1, #6
 80039b6:	6838      	ldr	r0, [r7, #0]
 80039b8:	4401      	add	r1, r0
 80039ba:	b2d3      	uxtb	r3, r2
 80039bc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_data.base >> (8 * 7)) & 0xFF;
 80039be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80039c2:	f04f 0200 	mov.w	r2, #0
 80039c6:	f04f 0300 	mov.w	r3, #0
 80039ca:	0e0a      	lsrs	r2, r1, #24
 80039cc:	2300      	movs	r3, #0
 80039ce:	6979      	ldr	r1, [r7, #20]
 80039d0:	3107      	adds	r1, #7
 80039d2:	6838      	ldr	r0, [r7, #0]
 80039d4:	4401      	add	r1, r0
 80039d6:	b2d3      	uxtb	r3, r2
 80039d8:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->data);
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	3308      	adds	r3, #8
 80039de:	617b      	str	r3, [r7, #20]
      return offset;
 80039e0:	697b      	ldr	r3, [r7, #20]
    }
 80039e2:	4618      	mov	r0, r3
 80039e4:	371c      	adds	r7, #28
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr

080039ee <_ZN8std_msgs7Float6411deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80039ee:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80039f2:	b0a3      	sub	sp, #140	; 0x8c
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6778      	str	r0, [r7, #116]	; 0x74
 80039f8:	6739      	str	r1, [r7, #112]	; 0x70
    {
      int offset = 0;
 80039fa:	2300      	movs	r3, #0
 80039fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      union {
        double real;
        uint64_t base;
      } u_data;
      u_data.base = 0;
 8003a00:	f04f 0200 	mov.w	r2, #0
 8003a04:	f04f 0300 	mov.w	r3, #0
 8003a08:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003a0c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003a10:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003a14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a16:	4413      	add	r3, r2
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	461c      	mov	r4, r3
 8003a20:	4615      	mov	r5, r2
 8003a22:	ea40 0804 	orr.w	r8, r0, r4
 8003a26:	ea41 0905 	orr.w	r9, r1, r5
 8003a2a:	e9c7 891e 	strd	r8, r9, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003a2e:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003a32:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a36:	1c5a      	adds	r2, r3, #1
 8003a38:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a3a:	4413      	add	r3, r2
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	2200      	movs	r2, #0
 8003a42:	469a      	mov	sl, r3
 8003a44:	4693      	mov	fp, r2
 8003a46:	f04f 0200 	mov.w	r2, #0
 8003a4a:	f04f 0300 	mov.w	r3, #0
 8003a4e:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8003a52:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8003a56:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8003a5a:	ea40 0402 	orr.w	r4, r0, r2
 8003a5e:	66bc      	str	r4, [r7, #104]	; 0x68
 8003a60:	430b      	orrs	r3, r1
 8003a62:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a64:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8003a68:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003a6c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003a70:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a74:	1c9a      	adds	r2, r3, #2
 8003a76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a78:	4413      	add	r3, r2
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	2200      	movs	r2, #0
 8003a80:	663b      	str	r3, [r7, #96]	; 0x60
 8003a82:	667a      	str	r2, [r7, #100]	; 0x64
 8003a84:	f04f 0200 	mov.w	r2, #0
 8003a88:	f04f 0300 	mov.w	r3, #0
 8003a8c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003a90:	464c      	mov	r4, r9
 8003a92:	0423      	lsls	r3, r4, #16
 8003a94:	4644      	mov	r4, r8
 8003a96:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003a9a:	4644      	mov	r4, r8
 8003a9c:	0422      	lsls	r2, r4, #16
 8003a9e:	ea40 0402 	orr.w	r4, r0, r2
 8003aa2:	65bc      	str	r4, [r7, #88]	; 0x58
 8003aa4:	430b      	orrs	r3, r1
 8003aa6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003aa8:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8003aac:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003ab0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003ab4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ab8:	1cda      	adds	r2, r3, #3
 8003aba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003abc:	4413      	add	r3, r2
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	653b      	str	r3, [r7, #80]	; 0x50
 8003ac6:	657a      	str	r2, [r7, #84]	; 0x54
 8003ac8:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8003acc:	4623      	mov	r3, r4
 8003ace:	0a1b      	lsrs	r3, r3, #8
 8003ad0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ad2:	4623      	mov	r3, r4
 8003ad4:	061b      	lsls	r3, r3, #24
 8003ad6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ad8:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8003adc:	4623      	mov	r3, r4
 8003ade:	4303      	orrs	r3, r0
 8003ae0:	643b      	str	r3, [r7, #64]	; 0x40
 8003ae2:	462b      	mov	r3, r5
 8003ae4:	430b      	orrs	r3, r1
 8003ae6:	647b      	str	r3, [r7, #68]	; 0x44
 8003ae8:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8003aec:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003af0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003af4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003af8:	1d1a      	adds	r2, r3, #4
 8003afa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003afc:	4413      	add	r3, r2
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	2200      	movs	r2, #0
 8003b04:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b06:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003b08:	f04f 0200 	mov.w	r2, #0
 8003b0c:	f04f 0300 	mov.w	r3, #0
 8003b10:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8003b12:	0023      	movs	r3, r4
 8003b14:	2200      	movs	r2, #0
 8003b16:	ea40 0402 	orr.w	r4, r0, r2
 8003b1a:	633c      	str	r4, [r7, #48]	; 0x30
 8003b1c:	430b      	orrs	r3, r1
 8003b1e:	637b      	str	r3, [r7, #52]	; 0x34
 8003b20:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8003b24:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003b28:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003b2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b30:	1d5a      	adds	r2, r3, #5
 8003b32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b34:	4413      	add	r3, r2
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b3e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b40:	f04f 0200 	mov.w	r2, #0
 8003b44:	f04f 0300 	mov.w	r3, #0
 8003b48:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8003b4a:	0223      	lsls	r3, r4, #8
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	ea40 0402 	orr.w	r4, r0, r2
 8003b52:	623c      	str	r4, [r7, #32]
 8003b54:	430b      	orrs	r3, r1
 8003b56:	627b      	str	r3, [r7, #36]	; 0x24
 8003b58:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003b5c:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003b60:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003b64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b68:	3306      	adds	r3, #6
 8003b6a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003b6c:	4413      	add	r3, r2
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	2200      	movs	r2, #0
 8003b74:	61bb      	str	r3, [r7, #24]
 8003b76:	61fa      	str	r2, [r7, #28]
 8003b78:	f04f 0200 	mov.w	r2, #0
 8003b7c:	f04f 0300 	mov.w	r3, #0
 8003b80:	69bc      	ldr	r4, [r7, #24]
 8003b82:	0423      	lsls	r3, r4, #16
 8003b84:	2200      	movs	r2, #0
 8003b86:	ea40 0402 	orr.w	r4, r0, r2
 8003b8a:	613c      	str	r4, [r7, #16]
 8003b8c:	430b      	orrs	r3, r1
 8003b8e:	617b      	str	r3, [r7, #20]
 8003b90:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003b94:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003b98:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003b9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ba0:	3307      	adds	r3, #7
 8003ba2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003ba4:	4413      	add	r3, r2
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	2200      	movs	r2, #0
 8003bac:	60bb      	str	r3, [r7, #8]
 8003bae:	60fa      	str	r2, [r7, #12]
 8003bb0:	f04f 0200 	mov.w	r2, #0
 8003bb4:	f04f 0300 	mov.w	r3, #0
 8003bb8:	68bc      	ldr	r4, [r7, #8]
 8003bba:	0623      	lsls	r3, r4, #24
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	ea40 0402 	orr.w	r4, r0, r2
 8003bc2:	603c      	str	r4, [r7, #0]
 8003bc4:	430b      	orrs	r3, r1
 8003bc6:	607b      	str	r3, [r7, #4]
 8003bc8:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003bcc:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      this->data = u_data.real;
 8003bd0:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8003bd4:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8003bd6:	e9c1 2302 	strd	r2, r3, [r1, #8]
      offset += sizeof(this->data);
 8003bda:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003bde:	3308      	adds	r3, #8
 8003be0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
     return offset;
 8003be4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    }
 8003be8:	4618      	mov	r0, r3
 8003bea:	378c      	adds	r7, #140	; 0x8c
 8003bec:	46bd      	mov	sp, r7
 8003bee:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003bf2:	4770      	bx	lr

08003bf4 <_ZN8std_msgs7Float647getTypeEv>:

    const char * getType(){ return "std_msgs/Float64"; };
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	4b03      	ldr	r3, [pc, #12]	; (8003c0c <_ZN8std_msgs7Float647getTypeEv+0x18>)
 8003bfe:	4618      	mov	r0, r3
 8003c00:	370c      	adds	r7, #12
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop
 8003c0c:	08011a48 	.word	0x08011a48

08003c10 <_ZN8std_msgs7Float646getMD5Ev>:
    const char * getMD5(){ return "fdb28210bfa9d7c91146260178d9a584"; };
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	4b03      	ldr	r3, [pc, #12]	; (8003c28 <_ZN8std_msgs7Float646getMD5Ev+0x18>)
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	370c      	adds	r7, #12
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr
 8003c26:	bf00      	nop
 8003c28:	08011a5c 	.word	0x08011a5c

08003c2c <_ZN3ROS9pub_resetEv>:
ros::Publisher reset_pub("/reset_fromSTM", &reset);
//ros::Publisher micro_pub("microswitch_fromSTM", &microswitch);
ros::Publisher scara_pub("/scaraflag_fromSTM", &scaraflag);

/** RESET **/
void ROS::pub_reset(void){
 8003c2c:	b5b0      	push	{r4, r5, r7, lr}
 8003c2e:	af00      	add	r7, sp, #0
	MYRESET::receive();
 8003c30:	f7fd fed8 	bl	80019e4 <_ZN7MYRESET7receiveEv>
	reset.data = MYRESET::state;
 8003c34:	4b06      	ldr	r3, [pc, #24]	; (8003c50 <_ZN3ROS9pub_resetEv+0x24>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	17da      	asrs	r2, r3, #31
 8003c3a:	461c      	mov	r4, r3
 8003c3c:	4615      	mov	r5, r2
 8003c3e:	4b05      	ldr	r3, [pc, #20]	; (8003c54 <_ZN3ROS9pub_resetEv+0x28>)
 8003c40:	e9c3 4502 	strd	r4, r5, [r3, #8]
	reset_pub.publish(&reset);
 8003c44:	4903      	ldr	r1, [pc, #12]	; (8003c54 <_ZN3ROS9pub_resetEv+0x28>)
 8003c46:	4804      	ldr	r0, [pc, #16]	; (8003c58 <_ZN3ROS9pub_resetEv+0x2c>)
 8003c48:	f7fe fd69 	bl	800271e <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 8003c4c:	bf00      	nop
 8003c4e:	bdb0      	pop	{r4, r5, r7, pc}
 8003c50:	240007a8 	.word	0x240007a8
 8003c54:	24002130 	.word	0x24002130
 8003c58:	2400220c 	.word	0x2400220c

08003c5c <_ZN3ROS14scara_callbackERKN13geometry_msgs5PointE>:


/** SCARA **/
void ROS::scara_callback(const geometry_msgs::Point &msgs){
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
	static double x_before;
	static double y_before;
	static double z_before;

	if(x_before != msgs.x || y_before != msgs.y || z_before != msgs.z){
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	ed93 6b02 	vldr	d6, [r3, #8]
 8003c6a:	4b24      	ldr	r3, [pc, #144]	; (8003cfc <_ZN3ROS14scara_callbackERKN13geometry_msgs5PointE+0xa0>)
 8003c6c:	ed93 7b00 	vldr	d7, [r3]
 8003c70:	eeb4 6b47 	vcmp.f64	d6, d7
 8003c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c78:	d115      	bne.n	8003ca6 <_ZN3ROS14scara_callbackERKN13geometry_msgs5PointE+0x4a>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	ed93 6b04 	vldr	d6, [r3, #16]
 8003c80:	4b1f      	ldr	r3, [pc, #124]	; (8003d00 <_ZN3ROS14scara_callbackERKN13geometry_msgs5PointE+0xa4>)
 8003c82:	ed93 7b00 	vldr	d7, [r3]
 8003c86:	eeb4 6b47 	vcmp.f64	d6, d7
 8003c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c8e:	d10a      	bne.n	8003ca6 <_ZN3ROS14scara_callbackERKN13geometry_msgs5PointE+0x4a>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	ed93 6b06 	vldr	d6, [r3, #24]
 8003c96:	4b1b      	ldr	r3, [pc, #108]	; (8003d04 <_ZN3ROS14scara_callbackERKN13geometry_msgs5PointE+0xa8>)
 8003c98:	ed93 7b00 	vldr	d7, [r3]
 8003c9c:	eeb4 6b47 	vcmp.f64	d6, d7
 8003ca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ca4:	d014      	beq.n	8003cd0 <_ZN3ROS14scara_callbackERKN13geometry_msgs5PointE+0x74>
		sc.x = msgs.x;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003cac:	4916      	ldr	r1, [pc, #88]	; (8003d08 <_ZN3ROS14scara_callbackERKN13geometry_msgs5PointE+0xac>)
 8003cae:	e9c1 2302 	strd	r2, r3, [r1, #8]
		sc.y = msgs.y;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003cb8:	4913      	ldr	r1, [pc, #76]	; (8003d08 <_ZN3ROS14scara_callbackERKN13geometry_msgs5PointE+0xac>)
 8003cba:	e9c1 2304 	strd	r2, r3, [r1, #16]
		sc.flag = msgs.z;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003cc4:	4910      	ldr	r1, [pc, #64]	; (8003d08 <_ZN3ROS14scara_callbackERKN13geometry_msgs5PointE+0xac>)
 8003cc6:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
		sc.run();
 8003cca:	480f      	ldr	r0, [pc, #60]	; (8003d08 <_ZN3ROS14scara_callbackERKN13geometry_msgs5PointE+0xac>)
 8003ccc:	f001 f980 	bl	8004fd0 <_ZN5SCARA3runEv>
	}

	x_before = msgs.x;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003cd6:	4909      	ldr	r1, [pc, #36]	; (8003cfc <_ZN3ROS14scara_callbackERKN13geometry_msgs5PointE+0xa0>)
 8003cd8:	e9c1 2300 	strd	r2, r3, [r1]
	y_before = msgs.y;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003ce2:	4907      	ldr	r1, [pc, #28]	; (8003d00 <_ZN3ROS14scara_callbackERKN13geometry_msgs5PointE+0xa4>)
 8003ce4:	e9c1 2300 	strd	r2, r3, [r1]
	z_before = msgs.z;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003cee:	4905      	ldr	r1, [pc, #20]	; (8003d04 <_ZN3ROS14scara_callbackERKN13geometry_msgs5PointE+0xa8>)
 8003cf0:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003cf4:	bf00      	nop
 8003cf6:	3708      	adds	r7, #8
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	24002238 	.word	0x24002238
 8003d00:	24002240 	.word	0x24002240
 8003d04:	24002248 	.word	0x24002248
 8003d08:	24002250 	.word	0x24002250

08003d0c <_ZN3ROS13pub_scaraflagEv>:

void ROS::pub_scaraflag(void){
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	af00      	add	r7, sp, #0
	scaraflag.data = sc.flag;
 8003d10:	4b05      	ldr	r3, [pc, #20]	; (8003d28 <_ZN3ROS13pub_scaraflagEv+0x1c>)
 8003d12:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
 8003d16:	4905      	ldr	r1, [pc, #20]	; (8003d2c <_ZN3ROS13pub_scaraflagEv+0x20>)
 8003d18:	e9c1 2302 	strd	r2, r3, [r1, #8]

	scara_pub.publish(&scaraflag);
 8003d1c:	4903      	ldr	r1, [pc, #12]	; (8003d2c <_ZN3ROS13pub_scaraflagEv+0x20>)
 8003d1e:	4804      	ldr	r0, [pc, #16]	; (8003d30 <_ZN3ROS13pub_scaraflagEv+0x24>)
 8003d20:	f7fe fcfd 	bl	800271e <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 8003d24:	bf00      	nop
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	24002250 	.word	0x24002250
 8003d2c:	24002140 	.word	0x24002140
 8003d30:	24002220 	.word	0x24002220

08003d34 <_ZN3ROS15intake_callbackERKN13geometry_msgs5PointE>:

/** INTAKE **/
void ROS::intake_callback(const geometry_msgs::Point &msg){
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
	INTAKE::tilt = msg.x;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003d42:	490a      	ldr	r1, [pc, #40]	; (8003d6c <_ZN3ROS15intake_callbackERKN13geometry_msgs5PointE+0x38>)
 8003d44:	e9c1 2300 	strd	r2, r3, [r1]
	INTAKE::stretch = msg.y;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003d4e:	4908      	ldr	r1, [pc, #32]	; (8003d70 <_ZN3ROS15intake_callbackERKN13geometry_msgs5PointE+0x3c>)
 8003d50:	e9c1 2300 	strd	r2, r3, [r1]
	INTAKE::suck = msg.z;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003d5a:	4906      	ldr	r1, [pc, #24]	; (8003d74 <_ZN3ROS15intake_callbackERKN13geometry_msgs5PointE+0x40>)
 8003d5c:	e9c1 2300 	strd	r2, r3, [r1]
	INTAKE::run();
 8003d60:	f7fc fe2c 	bl	80009bc <_ZN6INTAKE3runEv>
}
 8003d64:	bf00      	nop
 8003d66:	3708      	adds	r7, #8
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	24000268 	.word	0x24000268
 8003d70:	24000270 	.word	0x24000270
 8003d74:	24000278 	.word	0x24000278

08003d78 <_ZN3ROS16mecanum_callbackERKN13geometry_msgs5PointE>:
//}



/** CHASSIS -- mecanum **/
void ROS::mecanum_callback(const geometry_msgs::Point &msgs){
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
	mecanum.CAR_Goal.Vx = msgs.x;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003d86:	490b      	ldr	r1, [pc, #44]	; (8003db4 <_ZN3ROS16mecanum_callbackERKN13geometry_msgs5PointE+0x3c>)
 8003d88:	e9c1 2300 	strd	r2, r3, [r1]
	mecanum.CAR_Goal.Vy = msgs.y;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003d92:	4908      	ldr	r1, [pc, #32]	; (8003db4 <_ZN3ROS16mecanum_callbackERKN13geometry_msgs5PointE+0x3c>)
 8003d94:	e9c1 2302 	strd	r2, r3, [r1, #8]
	mecanum.CAR_Goal.Omega = msgs.z;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003d9e:	4905      	ldr	r1, [pc, #20]	; (8003db4 <_ZN3ROS16mecanum_callbackERKN13geometry_msgs5PointE+0x3c>)
 8003da0:	e9c1 2304 	strd	r2, r3, [r1, #16]
	mecanum.run();
 8003da4:	4803      	ldr	r0, [pc, #12]	; (8003db4 <_ZN3ROS16mecanum_callbackERKN13geometry_msgs5PointE+0x3c>)
 8003da6:	f7fd fce1 	bl	800176c <_ZN7Mecanum3runEv>
}
 8003daa:	bf00      	nop
 8003dac:	3708      	adds	r7, #8
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	24000748 	.word	0x24000748

08003db8 <_ZN3ROS11pub_car_velEv>:

void ROS::pub_car_vel(void){
 8003db8:	b580      	push	{r7, lr}
 8003dba:	af00      	add	r7, sp, #0
	car_speed.x = mecanum.CAR_Now.Vx;
 8003dbc:	4b0b      	ldr	r3, [pc, #44]	; (8003dec <_ZN3ROS11pub_car_velEv+0x34>)
 8003dbe:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003dc2:	490b      	ldr	r1, [pc, #44]	; (8003df0 <_ZN3ROS11pub_car_velEv+0x38>)
 8003dc4:	e9c1 2302 	strd	r2, r3, [r1, #8]
 	car_speed.y = mecanum.CAR_Now.Vy;
 8003dc8:	4b08      	ldr	r3, [pc, #32]	; (8003dec <_ZN3ROS11pub_car_velEv+0x34>)
 8003dca:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003dce:	4908      	ldr	r1, [pc, #32]	; (8003df0 <_ZN3ROS11pub_car_velEv+0x38>)
 8003dd0:	e9c1 2304 	strd	r2, r3, [r1, #16]
 	car_speed.z = mecanum.CAR_Now.Omega;
 8003dd4:	4b05      	ldr	r3, [pc, #20]	; (8003dec <_ZN3ROS11pub_car_velEv+0x34>)
 8003dd6:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003dda:	4905      	ldr	r1, [pc, #20]	; (8003df0 <_ZN3ROS11pub_car_velEv+0x38>)
 8003ddc:	e9c1 2306 	strd	r2, r3, [r1, #24]
 	mecanum_pub.publish(&car_speed);
 8003de0:	4903      	ldr	r1, [pc, #12]	; (8003df0 <_ZN3ROS11pub_car_velEv+0x38>)
 8003de2:	4804      	ldr	r0, [pc, #16]	; (8003df4 <_ZN3ROS11pub_car_velEv+0x3c>)
 8003de4:	f7fe fc9b 	bl	800271e <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 8003de8:	bf00      	nop
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	24000748 	.word	0x24000748
 8003df0:	24002110 	.word	0x24002110
 8003df4:	240021f8 	.word	0x240021f8

08003df8 <_ZN3ROS5setupEv>:


/** ROS setup and loop **/
void ROS::setup(void){
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	af00      	add	r7, sp, #0
	nh.initNode();
 8003dfc:	480e      	ldr	r0, [pc, #56]	; (8003e38 <_ZN3ROS5setupEv+0x40>)
 8003dfe:	f000 f9f7 	bl	80041f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8initNodeEv>

    nh.advertise(mecanum_pub);
 8003e02:	490e      	ldr	r1, [pc, #56]	; (8003e3c <_ZN3ROS5setupEv+0x44>)
 8003e04:	480c      	ldr	r0, [pc, #48]	; (8003e38 <_ZN3ROS5setupEv+0x40>)
 8003e06:	f000 fa1c 	bl	8004242 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE>
    nh.advertise(reset_pub);
 8003e0a:	490d      	ldr	r1, [pc, #52]	; (8003e40 <_ZN3ROS5setupEv+0x48>)
 8003e0c:	480a      	ldr	r0, [pc, #40]	; (8003e38 <_ZN3ROS5setupEv+0x40>)
 8003e0e:	f000 fa18 	bl	8004242 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE>
    nh.advertise(scara_pub);
 8003e12:	490c      	ldr	r1, [pc, #48]	; (8003e44 <_ZN3ROS5setupEv+0x4c>)
 8003e14:	4808      	ldr	r0, [pc, #32]	; (8003e38 <_ZN3ROS5setupEv+0x40>)
 8003e16:	f000 fa14 	bl	8004242 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE>
    nh.subscribe(mecanum_sub);
 8003e1a:	490b      	ldr	r1, [pc, #44]	; (8003e48 <_ZN3ROS5setupEv+0x50>)
 8003e1c:	4806      	ldr	r0, [pc, #24]	; (8003e38 <_ZN3ROS5setupEv+0x40>)
 8003e1e:	f000 fa40 	bl	80042a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_>
    nh.subscribe(intake_sub);
 8003e22:	490a      	ldr	r1, [pc, #40]	; (8003e4c <_ZN3ROS5setupEv+0x54>)
 8003e24:	4804      	ldr	r0, [pc, #16]	; (8003e38 <_ZN3ROS5setupEv+0x40>)
 8003e26:	f000 fa3c 	bl	80042a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_>
    nh.subscribe(scara_sub);
 8003e2a:	4909      	ldr	r1, [pc, #36]	; (8003e50 <_ZN3ROS5setupEv+0x58>)
 8003e2c:	4802      	ldr	r0, [pc, #8]	; (8003e38 <_ZN3ROS5setupEv+0x40>)
 8003e2e:	f000 fa38 	bl	80042a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_>
}
 8003e32:	bf00      	nop
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	240007b0 	.word	0x240007b0
 8003e3c:	240021f8 	.word	0x240021f8
 8003e40:	2400220c 	.word	0x2400220c
 8003e44:	24002220 	.word	0x24002220
 8003e48:	24002150 	.word	0x24002150
 8003e4c:	24002188 	.word	0x24002188
 8003e50:	240021c0 	.word	0x240021c0

08003e54 <_ZN3ROS4loopEv>:

void ROS::loop(void){
 8003e54:	b580      	push	{r7, lr}
 8003e56:	af00      	add	r7, sp, #0
	nh.spinOnce();
 8003e58:	4807      	ldr	r0, [pc, #28]	; (8003e78 <_ZN3ROS4loopEv+0x24>)
 8003e5a:	f000 fa4d 	bl	80042f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv>

	static bool scara_valve_close = true;
	if(scara_valve_close) sc.run();
 8003e5e:	4b07      	ldr	r3, [pc, #28]	; (8003e7c <_ZN3ROS4loopEv+0x28>)
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d002      	beq.n	8003e6c <_ZN3ROS4loopEv+0x18>
 8003e66:	4806      	ldr	r0, [pc, #24]	; (8003e80 <_ZN3ROS4loopEv+0x2c>)
 8003e68:	f001 f8b2 	bl	8004fd0 <_ZN5SCARA3runEv>
	scara_valve_close = false;
 8003e6c:	4b03      	ldr	r3, [pc, #12]	; (8003e7c <_ZN3ROS4loopEv+0x28>)
 8003e6e:	2200      	movs	r2, #0
 8003e70:	701a      	strb	r2, [r3, #0]
}
 8003e72:	bf00      	nop
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	240007b0 	.word	0x240007b0
 8003e7c:	24000001 	.word	0x24000001
 8003e80:	24002250 	.word	0x24002250

08003e84 <_Z13Error_Handlerv>:


/* UART Communication */
void Error_Handler(void)
{
 8003e84:	b480      	push	{r7}
 8003e86:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003e88:	b672      	cpsid	i
}
 8003e8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003e8c:	e7fe      	b.n	8003e8c <_Z13Error_Handlerv+0x8>
	...

08003e90 <_ZL19MX_USART1_UART_Initv>:
  }
  /* USER CODE END Error_Handler_Debug */
}

static void MX_USART1_UART_Init(void)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003e94:	4b2c      	ldr	r3, [pc, #176]	; (8003f48 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003e96:	4a2d      	ldr	r2, [pc, #180]	; (8003f4c <_ZL19MX_USART1_UART_Initv+0xbc>)
 8003e98:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003e9a:	4b2b      	ldr	r3, [pc, #172]	; (8003f48 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003e9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003ea0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003ea2:	4b29      	ldr	r3, [pc, #164]	; (8003f48 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003ea8:	4b27      	ldr	r3, [pc, #156]	; (8003f48 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003eaa:	2200      	movs	r2, #0
 8003eac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003eae:	4b26      	ldr	r3, [pc, #152]	; (8003f48 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003eb4:	4b24      	ldr	r3, [pc, #144]	; (8003f48 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003eb6:	220c      	movs	r2, #12
 8003eb8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003eba:	4b23      	ldr	r3, [pc, #140]	; (8003f48 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ec0:	4b21      	ldr	r3, [pc, #132]	; (8003f48 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003ec6:	4b20      	ldr	r3, [pc, #128]	; (8003f48 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003ec8:	2200      	movs	r2, #0
 8003eca:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003ecc:	4b1e      	ldr	r3, [pc, #120]	; (8003f48 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003ece:	2200      	movs	r2, #0
 8003ed0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003ed2:	4b1d      	ldr	r3, [pc, #116]	; (8003f48 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003ed8:	481b      	ldr	r0, [pc, #108]	; (8003f48 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003eda:	f00a fc4d 	bl	800e778 <HAL_UART_Init>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	bf14      	ite	ne
 8003ee4:	2301      	movne	r3, #1
 8003ee6:	2300      	moveq	r3, #0
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d001      	beq.n	8003ef2 <_ZL19MX_USART1_UART_Initv+0x62>
  {
    Error_Handler();
 8003eee:	f7ff ffc9 	bl	8003e84 <_Z13Error_Handlerv>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003ef2:	2100      	movs	r1, #0
 8003ef4:	4814      	ldr	r0, [pc, #80]	; (8003f48 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003ef6:	f00c fccb 	bl	8010890 <HAL_UARTEx_SetTxFifoThreshold>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	bf14      	ite	ne
 8003f00:	2301      	movne	r3, #1
 8003f02:	2300      	moveq	r3, #0
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d001      	beq.n	8003f0e <_ZL19MX_USART1_UART_Initv+0x7e>
  {
    Error_Handler();
 8003f0a:	f7ff ffbb 	bl	8003e84 <_Z13Error_Handlerv>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003f0e:	2100      	movs	r1, #0
 8003f10:	480d      	ldr	r0, [pc, #52]	; (8003f48 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003f12:	f00c fcfb 	bl	801090c <HAL_UARTEx_SetRxFifoThreshold>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	bf14      	ite	ne
 8003f1c:	2301      	movne	r3, #1
 8003f1e:	2300      	moveq	r3, #0
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d001      	beq.n	8003f2a <_ZL19MX_USART1_UART_Initv+0x9a>
  {
    Error_Handler();
 8003f26:	f7ff ffad 	bl	8003e84 <_Z13Error_Handlerv>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003f2a:	4807      	ldr	r0, [pc, #28]	; (8003f48 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003f2c:	f00c fc77 	bl	801081e <HAL_UARTEx_DisableFifoMode>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	bf14      	ite	ne
 8003f36:	2301      	movne	r3, #1
 8003f38:	2300      	moveq	r3, #0
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d001      	beq.n	8003f44 <_ZL19MX_USART1_UART_Initv+0xb4>
  {
    Error_Handler();
 8003f40:	f7ff ffa0 	bl	8003e84 <_Z13Error_Handlerv>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003f44:	bf00      	nop
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	240005c4 	.word	0x240005c4
 8003f4c:	40011000 	.word	0x40011000

08003f50 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b082      	sub	sp, #8
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
    nh.getHardware()->flush();
 8003f58:	4805      	ldr	r0, [pc, #20]	; (8003f70 <HAL_UART_TxCpltCallback+0x20>)
 8003f5a:	f000 fc45 	bl	80047e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE11getHardwareEv>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7fe fd15 	bl	8002990 <_ZN13STM32Hardware5flushEv>
}
 8003f66:	bf00      	nop
 8003f68:	3708      	adds	r7, #8
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	240007b0 	.word	0x240007b0

08003f74 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart){
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
	if(huart == &huart1){
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4a09      	ldr	r2, [pc, #36]	; (8003fa4 <HAL_UART_ErrorCallback+0x30>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d10b      	bne.n	8003f9c <HAL_UART_ErrorCallback+0x28>
		HAL_UART_DeInit(&huart1);
 8003f84:	4807      	ldr	r0, [pc, #28]	; (8003fa4 <HAL_UART_ErrorCallback+0x30>)
 8003f86:	f00a fc47 	bl	800e818 <HAL_UART_DeInit>
		MX_USART1_UART_Init();
 8003f8a:	f7ff ff81 	bl	8003e90 <_ZL19MX_USART1_UART_Initv>
		nh.getHardware()->init();
 8003f8e:	4806      	ldr	r0, [pc, #24]	; (8003fa8 <HAL_UART_ErrorCallback+0x34>)
 8003f90:	f000 fc2a 	bl	80047e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE11getHardwareEv>
 8003f94:	4603      	mov	r3, r0
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7fe fcb0 	bl	80028fc <_ZN13STM32Hardware4initEv>
	}
}
 8003f9c:	bf00      	nop
 8003f9e:	3708      	adds	r7, #8
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	240005c4 	.word	0x240005c4
 8003fa8:	240007b0 	.word	0x240007b0

08003fac <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8003fac:	b480      	push	{r7}
 8003fae:	b085      	sub	sp, #20
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	60fb      	str	r3, [r7, #12]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2b03      	cmp	r3, #3
 8003fbe:	d80d      	bhi.n	8003fdc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	00db      	lsls	r3, r3, #3
 8003fc4:	683a      	ldr	r2, [r7, #0]
 8003fc6:	fa22 f103 	lsr.w	r1, r2, r3
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	4413      	add	r3, r2
 8003fd0:	b2ca      	uxtb	r2, r1
 8003fd2:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	60fb      	str	r3, [r7, #12]
 8003fda:	e7ee      	b.n	8003fba <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8003fdc:	bf00      	nop
 8003fde:	3714      	adds	r7, #20
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr

08003fe8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8003fe8:	b480      	push	{r7}
 8003fea:	b085      	sub	sp, #20
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	60fb      	str	r3, [r7, #12]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2b03      	cmp	r3, #3
 8004000:	d811      	bhi.n	8004026 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	6839      	ldr	r1, [r7, #0]
 8004008:	68fa      	ldr	r2, [r7, #12]
 800400a:	440a      	add	r2, r1
 800400c:	7812      	ldrb	r2, [r2, #0]
 800400e:	4611      	mov	r1, r2
 8004010:	68fa      	ldr	r2, [r7, #12]
 8004012:	00d2      	lsls	r2, r2, #3
 8004014:	fa01 f202 	lsl.w	r2, r1, r2
 8004018:	431a      	orrs	r2, r3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	3301      	adds	r3, #1
 8004022:	60fb      	str	r3, [r7, #12]
 8004024:	e7ea      	b.n	8003ffc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8004026:	bf00      	nop
 8004028:	3714      	adds	r7, #20
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr
	...

08004034 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	4a04      	ldr	r2, [pc, #16]	; (8004050 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	601a      	str	r2, [r3, #0]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4618      	mov	r0, r3
 8004046:	370c      	adds	r7, #12
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr
 8004050:	08011bd4 	.word	0x08011bd4

08004054 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8004054:	b580      	push	{r7, lr}
 8004056:	b086      	sub	sp, #24
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	4618      	mov	r0, r3
 8004060:	f7ff ffe8 	bl	8004034 <_ZN3ros15NodeHandleBase_C1Ev>
 8004064:	4a47      	ldr	r2, [pc, #284]	; (8004184 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x130>)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	601a      	str	r2, [r3, #0]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	3304      	adds	r3, #4
 800406e:	4618      	mov	r0, r3
 8004070:	f7fe fc24 	bl	80028bc <_ZN13STM32HardwareC1Ev>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800407a:	2200      	movs	r2, #0
 800407c:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	f641 1314 	movw	r3, #6420	; 0x1914
 8004086:	4413      	add	r3, r2
 8004088:	4618      	mov	r0, r3
 800408a:	f7fe f86f 	bl	800216c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 800408e:	2300      	movs	r3, #0
 8004090:	617b      	str	r3, [r7, #20]
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	2b18      	cmp	r3, #24
 8004096:	d80b      	bhi.n	80040b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x5c>
      publishers[i] = 0;
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	f503 63c1 	add.w	r3, r3, #1544	; 0x608
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	4413      	add	r3, r2
 80040a4:	2200      	movs	r2, #0
 80040a6:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	3301      	adds	r3, #1
 80040ac:	617b      	str	r3, [r7, #20]
 80040ae:	e7f0      	b.n	8004092 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x3e>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80040b0:	2300      	movs	r3, #0
 80040b2:	613b      	str	r3, [r7, #16]
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	2b18      	cmp	r3, #24
 80040b8:	d80a      	bhi.n	80040d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x7c>
      subscribers[i] = 0;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	693a      	ldr	r2, [r7, #16]
 80040be:	f202 6222 	addw	r2, r2, #1570	; 0x622
 80040c2:	2100      	movs	r1, #0
 80040c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	3301      	adds	r3, #1
 80040cc:	613b      	str	r3, [r7, #16]
 80040ce:	e7f1      	b.n	80040b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x60>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 80040d0:	2300      	movs	r3, #0
 80040d2:	60fb      	str	r3, [r7, #12]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040da:	d20b      	bcs.n	80040f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0xa0>
      message_in[i] = 0;
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	441a      	add	r2, r3
 80040e2:	f241 0324 	movw	r3, #4132	; 0x1024
 80040e6:	4413      	add	r3, r2
 80040e8:	2200      	movs	r2, #0
 80040ea:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	3301      	adds	r3, #1
 80040f0:	60fb      	str	r3, [r7, #12]
 80040f2:	e7ef      	b.n	80040d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x80>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 80040f4:	2300      	movs	r3, #0
 80040f6:	60bb      	str	r3, [r7, #8]
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040fe:	d20b      	bcs.n	8004118 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0xc4>
      message_out[i] = 0;
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	441a      	add	r2, r3
 8004106:	f241 4324 	movw	r3, #5156	; 0x1424
 800410a:	4413      	add	r3, r2
 800410c:	2200      	movs	r2, #0
 800410e:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	3301      	adds	r3, #1
 8004114:	60bb      	str	r3, [r7, #8]
 8004116:	e7ef      	b.n	80040f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0xa4>

    req_param_resp.ints_length = 0;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800411e:	461a      	mov	r2, r3
 8004120:	2300      	movs	r3, #0
 8004122:	f8c2 3918 	str.w	r3, [r2, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800412c:	461a      	mov	r2, r3
 800412e:	2300      	movs	r3, #0
 8004130:	f8c2 3920 	str.w	r3, [r2, #2336]	; 0x920
    req_param_resp.floats_length = 0;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800413a:	461a      	mov	r2, r3
 800413c:	2300      	movs	r3, #0
 800413e:	f8c2 3924 	str.w	r3, [r2, #2340]	; 0x924
    req_param_resp.floats = NULL;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004148:	461a      	mov	r2, r3
 800414a:	2300      	movs	r3, #0
 800414c:	f8c2 392c 	str.w	r3, [r2, #2348]	; 0x92c
    req_param_resp.ints_length = 0;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004156:	461a      	mov	r2, r3
 8004158:	2300      	movs	r3, #0
 800415a:	f8c2 3918 	str.w	r3, [r2, #2328]	; 0x918
    req_param_resp.ints = NULL;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004164:	461a      	mov	r2, r3
 8004166:	2300      	movs	r3, #0
 8004168:	f8c2 3920 	str.w	r3, [r2, #2336]	; 0x920

    spin_timeout_ = 0;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004172:	461a      	mov	r2, r3
 8004174:	2300      	movs	r3, #0
 8004176:	6213      	str	r3, [r2, #32]
  }
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4618      	mov	r0, r3
 800417c:	3718      	adds	r7, #24
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	08011b60 	.word	0x08011b60

08004188 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	4a04      	ldr	r2, [pc, #16]	; (80041a4 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	601a      	str	r2, [r3, #0]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4618      	mov	r0, r3
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr
 80041a4:	08011bbc 	.word	0x08011bbc

080041a8 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	607a      	str	r2, [r7, #4]
 80041b4:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	4618      	mov	r0, r3
 80041ba:	f7ff ffe5 	bl	8004188 <_ZN3ros11Subscriber_C1Ev>
 80041be:	4a0b      	ldr	r2, [pc, #44]	; (80041ec <_ZN3ros10SubscriberIN13geometry_msgs5PointEvEC1EPKcPFvRKS2_Ei+0x44>)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	601a      	str	r2, [r3, #0]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	3310      	adds	r3, #16
 80041c8:	4618      	mov	r0, r3
 80041ca:	f7fe fc9d 	bl	8002b08 <_ZN13geometry_msgs5PointC1Ev>
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	631a      	str	r2, [r3, #48]	; 0x30
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	683a      	ldr	r2, [r7, #0]
 80041d8:	635a      	str	r2, [r3, #52]	; 0x34
  {
    topic_ = topic_name;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	68ba      	ldr	r2, [r7, #8]
 80041de:	609a      	str	r2, [r3, #8]
  };
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	4618      	mov	r0, r3
 80041e4:	3710      	adds	r7, #16
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	08011b48 	.word	0x08011b48

080041f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b082      	sub	sp, #8
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	3304      	adds	r3, #4
 80041fc:	4618      	mov	r0, r3
 80041fe:	f7fe fb7d 	bl	80028fc <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004208:	461a      	mov	r2, r3
 800420a:	2300      	movs	r3, #0
 800420c:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
    bytes_ = 0;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004216:	461a      	mov	r2, r3
 8004218:	2300      	movs	r3, #0
 800421a:	f8c2 38f0 	str.w	r3, [r2, #2288]	; 0x8f0
    index_ = 0;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004224:	461a      	mov	r2, r3
 8004226:	2300      	movs	r3, #0
 8004228:	f8c2 38f8 	str.w	r3, [r2, #2296]	; 0x8f8
    topic_ = 0;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004232:	461a      	mov	r2, r3
 8004234:	2300      	movs	r3, #0
 8004236:	f8c2 38f4 	str.w	r3, [r2, #2292]	; 0x8f4
  };
 800423a:	bf00      	nop
 800423c:	3708      	adds	r7, #8
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}

08004242 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 8004242:	b480      	push	{r7}
 8004244:	b085      	sub	sp, #20
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
 800424a:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800424c:	2300      	movs	r3, #0
 800424e:	60fb      	str	r3, [r7, #12]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2b18      	cmp	r3, #24
 8004254:	dc1e      	bgt.n	8004294 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x52>
    {
      if (publishers[i] == 0) // empty slot
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f503 63c1 	add.w	r3, r3, #1544	; 0x608
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	4413      	add	r3, r2
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d111      	bne.n	800428c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x4a>
      {
        publishers[i] = &p;
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	f503 63c1 	add.w	r3, r3, #1544	; 0x608
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	4413      	add	r3, r2
 8004274:	683a      	ldr	r2, [r7, #0]
 8004276:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	60da      	str	r2, [r3, #12]
        return true;
 8004288:	2301      	movs	r3, #1
 800428a:	e004      	b.n	8004296 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	3301      	adds	r3, #1
 8004290:	60fb      	str	r3, [r7, #12]
 8004292:	e7dd      	b.n	8004250 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0xe>
      }
    }
    return false;
 8004294:	2300      	movs	r3, #0
  }
 8004296:	4618      	mov	r0, r3
 8004298:	3714      	adds	r7, #20
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr

080042a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_>:

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 80042a2:	b480      	push	{r7}
 80042a4:	b085      	sub	sp, #20
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
 80042aa:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80042ac:	2300      	movs	r3, #0
 80042ae:	60fb      	str	r3, [r7, #12]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2b18      	cmp	r3, #24
 80042b4:	dc19      	bgt.n	80042ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	68fa      	ldr	r2, [r7, #12]
 80042ba:	f202 6222 	addw	r2, r2, #1570	; 0x622
 80042be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d10d      	bne.n	80042e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_+0x40>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 80042c6:	6839      	ldr	r1, [r7, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	68fa      	ldr	r2, [r7, #12]
 80042cc:	f202 6222 	addw	r2, r2, #1570	; 0x622
 80042d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	605a      	str	r2, [r3, #4]
        return true;
 80042de:	2301      	movs	r3, #1
 80042e0:	e004      	b.n	80042ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	3301      	adds	r3, #1
 80042e6:	60fb      	str	r3, [r7, #12]
 80042e8:	e7e2      	b.n	80042b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_+0xe>
      }
    }
    return false;
 80042ea:	2300      	movs	r3, #0
  }
 80042ec:	4618      	mov	r0, r3
 80042ee:	3714      	adds	r7, #20
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv>:
  virtual int spinOnce()
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	3304      	adds	r3, #4
 8004304:	4618      	mov	r0, r3
 8004306:	f7fe fbf3 	bl	8002af0 <_ZN13STM32Hardware4timeEv>
 800430a:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004312:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 8004316:	68fa      	ldr	r2, [r7, #12]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	f642 22f8 	movw	r2, #11000	; 0x2af8
 800431e:	4293      	cmp	r3, r2
 8004320:	d905      	bls.n	800432e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x36>
      configured_ = false;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004328:	2200      	movs	r2, #0
 800432a:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004334:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004338:	2b00      	cmp	r3, #0
 800433a:	d00e      	beq.n	800435a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      if (c_time > last_msg_timeout_time)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004342:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 8004346:	68fa      	ldr	r2, [r7, #12]
 8004348:	429a      	cmp	r2, r3
 800434a:	d906      	bls.n	800435a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004352:	461a      	mov	r2, r3
 8004354:	2300      	movs	r3, #0
 8004356:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004360:	6a1b      	ldr	r3, [r3, #32]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d015      	beq.n	8004392 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x9a>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	3304      	adds	r3, #4
 800436a:	4618      	mov	r0, r3
 800436c:	f7fe fbc0 	bl	8002af0 <_ZN13STM32Hardware4timeEv>
 8004370:	4602      	mov	r2, r0
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	1ad2      	subs	r2, r2, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800437c:	6a1b      	ldr	r3, [r3, #32]
 800437e:	429a      	cmp	r2, r3
 8004380:	bf8c      	ite	hi
 8004382:	2301      	movhi	r3, #1
 8004384:	2300      	movls	r3, #0
 8004386:	b2db      	uxtb	r3, r3
 8004388:	2b00      	cmp	r3, #0
 800438a:	d002      	beq.n	8004392 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x9a>
          return SPIN_TIMEOUT;
 800438c:	f06f 0301 	mvn.w	r3, #1
 8004390:	e226      	b.n	80047e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4e8>
      int data = hardware_.read();
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	3304      	adds	r3, #4
 8004396:	4618      	mov	r0, r3
 8004398:	f7fe facc 	bl	8002934 <_ZN13STM32Hardware4readEv>
 800439c:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	f2c0 81ff 	blt.w	80047a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4ac>
      checksum_ += data;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043ac:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	4413      	add	r3, r2
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80043ba:	f8c2 38fc 	str.w	r3, [r2, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043c4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80043c8:	2b07      	cmp	r3, #7
 80043ca:	d12d      	bne.n	8004428 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x130>
        message_in[index_++] = data;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043d2:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 80043d6:	1c5a      	adds	r2, r3, #1
 80043d8:	6879      	ldr	r1, [r7, #4]
 80043da:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 80043de:	f8c1 28f8 	str.w	r2, [r1, #2296]	; 0x8f8
 80043e2:	68ba      	ldr	r2, [r7, #8]
 80043e4:	b2d1      	uxtb	r1, r2
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	441a      	add	r2, r3
 80043ea:	f241 0324 	movw	r3, #4132	; 0x1024
 80043ee:	4413      	add	r3, r2
 80043f0:	460a      	mov	r2, r1
 80043f2:	701a      	strb	r2, [r3, #0]
        bytes_--;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043fa:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80043fe:	3b01      	subs	r3, #1
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004406:	f8c2 38f0 	str.w	r3, [r2, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004410:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8004414:	2b00      	cmp	r3, #0
 8004416:	d1a0      	bne.n	800435a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800441e:	461a      	mov	r2, r3
 8004420:	2308      	movs	r3, #8
 8004422:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
 8004426:	e798      	b.n	800435a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_FIRST_FF)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800442e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004432:	2b00      	cmp	r3, #0
 8004434:	d130      	bne.n	8004498 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x1a0>
        if (data == 0xff)
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	2bff      	cmp	r3, #255	; 0xff
 800443a:	d112      	bne.n	8004462 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x16a>
          mode_++;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004442:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004446:	3301      	adds	r3, #1
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800444e:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	3314      	adds	r3, #20
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800445c:	f8c2 390c 	str.w	r3, [r2, #2316]	; 0x90c
 8004460:	e77b      	b.n	800435a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	3304      	adds	r3, #4
 8004466:	4618      	mov	r0, r3
 8004468:	f7fe fb42 	bl	8002af0 <_ZN13STM32Hardware4timeEv>
 800446c:	4602      	mov	r2, r0
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	f241 3288 	movw	r2, #5000	; 0x1388
 8004476:	4293      	cmp	r3, r2
 8004478:	bf8c      	ite	hi
 800447a:	2301      	movhi	r3, #1
 800447c:	2300      	movls	r3, #0
 800447e:	b2db      	uxtb	r3, r3
 8004480:	2b00      	cmp	r3, #0
 8004482:	f43f af6a 	beq.w	800435a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          configured_ = false;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800448c:	2200      	movs	r2, #0
 800448e:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 8004492:	f06f 0301 	mvn.w	r3, #1
 8004496:	e1a3      	b.n	80047e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4e8>
      else if (mode_ == MODE_PROTOCOL_VER)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800449e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d121      	bne.n	80044ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x1f2>
        if (data == PROTOCOL_VER)
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	2bfe      	cmp	r3, #254	; 0xfe
 80044aa:	d10b      	bne.n	80044c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x1cc>
          mode_++;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044b2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80044b6:	3301      	adds	r3, #1
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80044be:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
 80044c2:	e74a      	b.n	800435a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044ca:	461a      	mov	r2, r3
 80044cc:	2300      	movs	r3, #0
 80044ce:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
          if (configured_ == false)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044d8:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80044dc:	2b00      	cmp	r3, #0
 80044de:	f47f af3c 	bne.w	800435a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
            requestSyncTime();  /* send a msg back showing our protocol version */
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 f98c 	bl	8004800 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
 80044e8:	e737      	b.n	800435a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044f0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	d120      	bne.n	800453a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x242>
        bytes_ = data;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044fe:	461a      	mov	r2, r3
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	f8c2 38f0 	str.w	r3, [r2, #2288]	; 0x8f0
        index_ = 0;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800450c:	461a      	mov	r2, r3
 800450e:	2300      	movs	r3, #0
 8004510:	f8c2 38f8 	str.w	r3, [r2, #2296]	; 0x8f8
        mode_++;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800451a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800451e:	3301      	adds	r3, #1
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004526:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004530:	461a      	mov	r2, r3
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	f8c2 38fc 	str.w	r3, [r2, #2300]	; 0x8fc
 8004538:	e70f      	b.n	800435a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004540:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004544:	2b03      	cmp	r3, #3
 8004546:	d118      	bne.n	800457a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x282>
        bytes_ += data << 8;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800454e:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	021b      	lsls	r3, r3, #8
 8004556:	4413      	add	r3, r2
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800455e:	f8c2 38f0 	str.w	r3, [r2, #2288]	; 0x8f0
        mode_++;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004568:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800456c:	3301      	adds	r3, #1
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004574:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
 8004578:	e6ef      	b.n	800435a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004580:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004584:	2b04      	cmp	r3, #4
 8004586:	d11f      	bne.n	80045c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x2d0>
        if ((checksum_ % 256) == 255)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800458e:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8004592:	425a      	negs	r2, r3
 8004594:	b2db      	uxtb	r3, r3
 8004596:	b2d2      	uxtb	r2, r2
 8004598:	bf58      	it	pl
 800459a:	4253      	negpl	r3, r2
 800459c:	2bff      	cmp	r3, #255	; 0xff
 800459e:	d10b      	bne.n	80045b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x2c0>
          mode_++;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045a6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80045aa:	3301      	adds	r3, #1
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80045b2:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
 80045b6:	e6d0      	b.n	800435a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045be:	461a      	mov	r2, r3
 80045c0:	2300      	movs	r3, #0
 80045c2:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
 80045c6:	e6c8      	b.n	800435a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045ce:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80045d2:	2b05      	cmp	r3, #5
 80045d4:	d119      	bne.n	800460a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x312>
        topic_ = data;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045dc:	461a      	mov	r2, r3
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	f8c2 38f4 	str.w	r3, [r2, #2292]	; 0x8f4
        mode_++;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045ea:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80045ee:	3301      	adds	r3, #1
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80045f6:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004600:	461a      	mov	r2, r3
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	f8c2 38fc 	str.w	r3, [r2, #2300]	; 0x8fc
 8004608:	e6a7      	b.n	800435a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004610:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004614:	2b06      	cmp	r3, #6
 8004616:	d123      	bne.n	8004660 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x368>
        topic_ += data << 8;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800461e:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	021b      	lsls	r3, r3, #8
 8004626:	4413      	add	r3, r2
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800462e:	f8c2 38f4 	str.w	r3, [r2, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004638:	461a      	mov	r2, r3
 800463a:	2307      	movs	r3, #7
 800463c:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
        if (bytes_ == 0)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004646:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 800464a:	2b00      	cmp	r3, #0
 800464c:	f47f ae85 	bne.w	800435a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004656:	461a      	mov	r2, r3
 8004658:	2308      	movs	r3, #8
 800465a:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
 800465e:	e67c      	b.n	800435a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004666:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800466a:	2b08      	cmp	r3, #8
 800466c:	f47f ae75 	bne.w	800435a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004676:	461a      	mov	r2, r3
 8004678:	2300      	movs	r3, #0
 800467a:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004684:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8004688:	425a      	negs	r2, r3
 800468a:	b2db      	uxtb	r3, r3
 800468c:	b2d2      	uxtb	r2, r2
 800468e:	bf58      	it	pl
 8004690:	4253      	negpl	r3, r2
 8004692:	2bff      	cmp	r3, #255	; 0xff
 8004694:	f47f ae61 	bne.w	800435a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800469e:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d116      	bne.n	80046d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x3dc>
            requestSyncTime();
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f000 f8aa 	bl	8004800 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
            negotiateTopics();
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f000 f8c6 	bl	800483e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046b8:	461a      	mov	r2, r3
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f8c2 3904 	str.w	r3, [r2, #2308]	; 0x904
            last_sync_receive_time = c_time;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046c6:	461a      	mov	r2, r3
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f8c2 3908 	str.w	r3, [r2, #2312]	; 0x908
            return SPIN_ERR;
 80046ce:	f04f 33ff 	mov.w	r3, #4294967295
 80046d2:	e085      	b.n	80047e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4e8>
          else if (topic_ == TopicInfo::ID_TIME)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046da:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80046de:	2b0a      	cmp	r3, #10
 80046e0:	d108      	bne.n	80046f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x3fc>
            syncTime(message_in);
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	f241 0324 	movw	r3, #4132	; 0x1024
 80046e8:	4413      	add	r3, r2
 80046ea:	4619      	mov	r1, r3
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f000 f987 	bl	8004a00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh>
 80046f2:	e632      	b.n	800435a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046fa:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80046fe:	2b06      	cmp	r3, #6
 8004700:	d112      	bne.n	8004728 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x430>
            req_param_resp.deserialize(message_in);
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	f641 1314 	movw	r3, #6420	; 0x1914
 8004708:	4413      	add	r3, r2
 800470a:	6879      	ldr	r1, [r7, #4]
 800470c:	f241 0224 	movw	r2, #4132	; 0x1024
 8004710:	440a      	add	r2, r1
 8004712:	4611      	mov	r1, r2
 8004714:	4618      	mov	r0, r3
 8004716:	f7fd fe5e 	bl	80023d6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004720:	2201      	movs	r2, #1
 8004722:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8004726:	e618      	b.n	800435a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800472e:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8004732:	2b0b      	cmp	r3, #11
 8004734:	d106      	bne.n	8004744 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x44c>
            configured_ = false;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800473c:	2200      	movs	r2, #0
 800473e:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8004742:	e60a      	b.n	800435a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
            if (subscribers[topic_ - 100])
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800474a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800474e:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f202 6222 	addw	r2, r2, #1570	; 0x622
 8004758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800475c:	2b00      	cmp	r3, #0
 800475e:	f43f adfc 	beq.w	800435a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
              subscribers[topic_ - 100]->callback(message_in);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004768:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800476c:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f202 6222 	addw	r2, r2, #1570	; 0x622
 8004776:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004780:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8004784:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f202 6222 	addw	r2, r2, #1570	; 0x622
 800478e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	6879      	ldr	r1, [r7, #4]
 8004798:	f241 0324 	movw	r3, #4132	; 0x1024
 800479c:	440b      	add	r3, r1
 800479e:	4619      	mov	r1, r3
 80047a0:	4790      	blx	r2
    while (true)
 80047a2:	e5da      	b.n	800435a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        break;
 80047a4:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047ac:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d014      	beq.n	80047de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4e6>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047ba:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 80047be:	68fa      	ldr	r2, [r7, #12]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d909      	bls.n	80047de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4e6>
      requestSyncTime();
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f000 f818 	bl	8004800 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047d6:	461a      	mov	r2, r3
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f8c2 3904 	str.w	r3, [r2, #2308]	; 0x904
    return SPIN_OK;
 80047de:	2300      	movs	r3, #0
  }
 80047e0:	4618      	mov	r0, r3
 80047e2:	3710      	adds	r7, #16
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE11getHardwareEv>:
  Hardware* getHardware()
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
    return &hardware_;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	3304      	adds	r3, #4
  }
 80047f4:	4618      	mov	r0, r3
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>:
  void requestSyncTime()
 8004800:	b580      	push	{r7, lr}
 8004802:	b086      	sub	sp, #24
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8004808:	f107 030c 	add.w	r3, r7, #12
 800480c:	4618      	mov	r0, r3
 800480e:	f7fd f949 	bl	8001aa4 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f107 020c 	add.w	r2, r7, #12
 800481c:	210a      	movs	r1, #10
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	4798      	blx	r3
    rt_time = hardware_.time();
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	3304      	adds	r3, #4
 8004826:	4618      	mov	r0, r3
 8004828:	f7fe f962 	bl	8002af0 <_ZN13STM32Hardware4timeEv>
 800482c:	4602      	mov	r2, r0
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004834:	615a      	str	r2, [r3, #20]
  }
 8004836:	bf00      	nop
 8004838:	3718      	adds	r7, #24
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}

0800483e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 800483e:	b590      	push	{r4, r7, lr}
 8004840:	b08b      	sub	sp, #44	; 0x2c
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8004846:	f107 030c 	add.w	r3, r7, #12
 800484a:	4618      	mov	r0, r3
 800484c:	f7fd fa1a 	bl	8001c84 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8004850:	2300      	movs	r3, #0
 8004852:	627b      	str	r3, [r7, #36]	; 0x24
 8004854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004856:	2b18      	cmp	r3, #24
 8004858:	dc63      	bgt.n	8004922 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485e:	f503 63c1 	add.w	r3, r3, #1544	; 0x608
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	4413      	add	r3, r2
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d056      	beq.n	800491a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004870:	f503 63c1 	add.w	r3, r3, #1544	; 0x608
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	4413      	add	r3, r2
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	b29b      	uxth	r3, r3
 800487e:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004884:	f503 63c1 	add.w	r3, r3, #1544	; 0x608
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	4413      	add	r3, r2
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004896:	f503 63c1 	add.w	r3, r3, #1544	; 0x608
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	4413      	add	r3, r2
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	6859      	ldr	r1, [r3, #4]
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a6:	f503 63c1 	add.w	r3, r3, #1544	; 0x608
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	4413      	add	r3, r2
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	3308      	adds	r3, #8
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4608      	mov	r0, r1
 80048ba:	4798      	blx	r3
 80048bc:	4603      	mov	r3, r0
 80048be:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c4:	f503 63c1 	add.w	r3, r3, #1544	; 0x608
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	4413      	add	r3, r2
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	6859      	ldr	r1, [r3, #4]
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d4:	f503 63c1 	add.w	r3, r3, #1544	; 0x608
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	4413      	add	r3, r2
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	330c      	adds	r3, #12
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4608      	mov	r0, r1
 80048e8:	4798      	blx	r3
 80048ea:	4603      	mov	r3, r0
 80048ec:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 80048ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048f2:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681c      	ldr	r4, [r3, #0]
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fe:	f503 63c1 	add.w	r3, r3, #1544	; 0x608
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	4413      	add	r3, r2
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	4618      	mov	r0, r3
 800490a:	f7fd ff1c 	bl	8002746 <_ZN3ros9Publisher15getEndpointTypeEv>
 800490e:	4601      	mov	r1, r0
 8004910:	f107 030c 	add.w	r3, r7, #12
 8004914:	461a      	mov	r2, r3
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800491a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491c:	3301      	adds	r3, #1
 800491e:	627b      	str	r3, [r7, #36]	; 0x24
 8004920:	e798      	b.n	8004854 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004922:	2300      	movs	r3, #0
 8004924:	627b      	str	r3, [r7, #36]	; 0x24
 8004926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004928:	2b18      	cmp	r3, #24
 800492a:	dc5f      	bgt.n	80049ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004930:	f202 6222 	addw	r2, r2, #1570	; 0x622
 8004934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d053      	beq.n	80049e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004940:	f202 6222 	addw	r2, r2, #1570	; 0x622
 8004944:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	b29b      	uxth	r3, r3
 800494c:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004952:	f202 6222 	addw	r2, r2, #1570	; 0x622
 8004956:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004962:	f202 6222 	addw	r2, r2, #1570	; 0x622
 8004966:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800496e:	f202 6222 	addw	r2, r2, #1570	; 0x622
 8004972:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	3308      	adds	r3, #8
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4608      	mov	r0, r1
 800497e:	4798      	blx	r3
 8004980:	4603      	mov	r3, r0
 8004982:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004988:	f202 6222 	addw	r2, r2, #1570	; 0x622
 800498c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004994:	f202 6222 	addw	r2, r2, #1570	; 0x622
 8004998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	330c      	adds	r3, #12
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4608      	mov	r0, r1
 80049a4:	4798      	blx	r3
 80049a6:	4603      	mov	r3, r0
 80049a8:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 80049aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049ae:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681c      	ldr	r4, [r3, #0]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049ba:	f202 6222 	addw	r2, r2, #1570	; 0x622
 80049be:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049c6:	f202 6222 	addw	r2, r2, #1570	; 0x622
 80049ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	3304      	adds	r3, #4
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4608      	mov	r0, r1
 80049d6:	4798      	blx	r3
 80049d8:	4601      	mov	r1, r0
 80049da:	f107 030c 	add.w	r3, r7, #12
 80049de:	461a      	mov	r2, r3
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80049e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e6:	3301      	adds	r3, #1
 80049e8:	627b      	str	r3, [r7, #36]	; 0x24
 80049ea:	e79c      	b.n	8004926 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 80049f8:	bf00      	nop
 80049fa:	372c      	adds	r7, #44	; 0x2c
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd90      	pop	{r4, r7, pc}

08004a00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b086      	sub	sp, #24
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8004a0a:	f107 0308 	add.w	r3, r7, #8
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f7fd f848 	bl	8001aa4 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	3304      	adds	r3, #4
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f7fe f869 	bl	8002af0 <_ZN13STM32Hardware4timeEv>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a26:	695b      	ldr	r3, [r3, #20]
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8004a2c:	f107 0308 	add.w	r3, r7, #8
 8004a30:	6839      	ldr	r1, [r7, #0]
 8004a32:	4618      	mov	r0, r3
 8004a34:	f7fd f8a6 	bl	8001b84 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8004a38:	68fa      	ldr	r2, [r7, #12]
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	4915      	ldr	r1, [pc, #84]	; (8004a94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x94>)
 8004a3e:	fba1 1303 	umull	r1, r3, r1, r3
 8004a42:	099b      	lsrs	r3, r3, #6
 8004a44:	4413      	add	r3, r2
 8004a46:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8004a48:	6939      	ldr	r1, [r7, #16]
 8004a4a:	697a      	ldr	r2, [r7, #20]
 8004a4c:	4b11      	ldr	r3, [pc, #68]	; (8004a94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x94>)
 8004a4e:	fba3 0302 	umull	r0, r3, r3, r2
 8004a52:	099b      	lsrs	r3, r3, #6
 8004a54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004a58:	fb00 f303 	mul.w	r3, r0, r3
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	4a0e      	ldr	r2, [pc, #56]	; (8004a98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x98>)
 8004a60:	fb02 f303 	mul.w	r3, r2, r3
 8004a64:	440b      	add	r3, r1
 8004a66:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8004a68:	f107 0308 	add.w	r3, r7, #8
 8004a6c:	3304      	adds	r3, #4
 8004a6e:	4619      	mov	r1, r3
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f000 f8bf 	bl	8004bf4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	3304      	adds	r3, #4
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f7fe f838 	bl	8002af0 <_ZN13STM32Hardware4timeEv>
 8004a80:	4602      	mov	r2, r0
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a88:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 8004a8c:	bf00      	nop
 8004a8e:	3718      	adds	r7, #24
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	10624dd3 	.word	0x10624dd3
 8004a98:	000f4240 	.word	0x000f4240

08004a9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b088      	sub	sp, #32
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	60f8      	str	r0, [r7, #12]
 8004aa4:	60b9      	str	r1, [r7, #8]
 8004aa6:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	2b63      	cmp	r3, #99	; 0x63
 8004aac:	dd0b      	ble.n	8004ac6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x2a>
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ab4:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8004ab8:	f083 0301 	eor.w	r3, r3, #1
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d001      	beq.n	8004ac6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	e090      	b.n	8004be8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x14c>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	68f9      	ldr	r1, [r7, #12]
 8004ace:	f241 4324 	movw	r3, #5156	; 0x1424
 8004ad2:	440b      	add	r3, r1
 8004ad4:	3307      	adds	r3, #7
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	4790      	blx	r2
 8004adc:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ae4:	22ff      	movs	r2, #255	; 0xff
 8004ae6:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
    message_out[1] = PROTOCOL_VER;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004af0:	22fe      	movs	r2, #254	; 0xfe
 8004af2:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	b2da      	uxtb	r2, r3
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b00:	f883 2426 	strb.w	r2, [r3, #1062]	; 0x426
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	0a1b      	lsrs	r3, r3, #8
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	b2da      	uxtb	r2, r3
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b14:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b1e:	f893 2426 	ldrb.w	r2, [r3, #1062]	; 0x426
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b28:	f893 3427 	ldrb.w	r3, [r3, #1063]	; 0x427
 8004b2c:	4413      	add	r3, r2
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	43db      	mvns	r3, r3
 8004b32:	b2da      	uxtb	r2, r3
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b3a:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	b2da      	uxtb	r2, r3
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b48:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	b21b      	sxth	r3, r3
 8004b50:	121b      	asrs	r3, r3, #8
 8004b52:	b21b      	sxth	r3, r3
 8004b54:	b2da      	uxtb	r2, r3
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b5c:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a

    /* calculate checksum */
    int chk = 0;
 8004b60:	2300      	movs	r3, #0
 8004b62:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004b64:	2305      	movs	r3, #5
 8004b66:	61bb      	str	r3, [r7, #24]
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	3306      	adds	r3, #6
 8004b6c:	69ba      	ldr	r2, [r7, #24]
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	dc0e      	bgt.n	8004b90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xf4>
      chk += message_out[i];
 8004b72:	68fa      	ldr	r2, [r7, #12]
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	441a      	add	r2, r3
 8004b78:	f241 4324 	movw	r3, #5156	; 0x1424
 8004b7c:	4413      	add	r3, r2
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	461a      	mov	r2, r3
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	4413      	add	r3, r2
 8004b86:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	3301      	adds	r3, #1
 8004b8c:	61bb      	str	r3, [r7, #24]
 8004b8e:	e7eb      	b.n	8004b68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xcc>
    l += 7;
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	3307      	adds	r3, #7
 8004b94:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	425a      	negs	r2, r3
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	b2d2      	uxtb	r2, r2
 8004b9e:	bf58      	it	pl
 8004ba0:	4253      	negpl	r3, r2
 8004ba2:	b2da      	uxtb	r2, r3
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	1c59      	adds	r1, r3, #1
 8004ba8:	6179      	str	r1, [r7, #20]
 8004baa:	43d2      	mvns	r2, r2
 8004bac:	b2d1      	uxtb	r1, r2
 8004bae:	68fa      	ldr	r2, [r7, #12]
 8004bb0:	441a      	add	r2, r3
 8004bb2:	f241 4324 	movw	r3, #5156	; 0x1424
 8004bb6:	4413      	add	r3, r2
 8004bb8:	460a      	mov	r2, r1
 8004bba:	701a      	strb	r2, [r3, #0]

    if (l <= OUTPUT_SIZE)
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bc2:	dc0b      	bgt.n	8004bdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x140>
    {
      hardware_.write(message_out, l);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	1d18      	adds	r0, r3, #4
 8004bc8:	68fa      	ldr	r2, [r7, #12]
 8004bca:	f241 4324 	movw	r3, #5156	; 0x1424
 8004bce:	4413      	add	r3, r2
 8004bd0:	697a      	ldr	r2, [r7, #20]
 8004bd2:	4619      	mov	r1, r3
 8004bd4:	f7fd ff42 	bl	8002a5c <_ZN13STM32Hardware5writeEPhi>
      return l;
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	e005      	b.n	8004be8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x14c>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8004bdc:	4904      	ldr	r1, [pc, #16]	; (8004bf0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x154>)
 8004bde:	68f8      	ldr	r0, [r7, #12]
 8004be0:	f000 f84c 	bl	8004c7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8logerrorEPKc>
      return -1;
 8004be4:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8004be8:	4618      	mov	r0, r3
 8004bea:	3720      	adds	r7, #32
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}
 8004bf0:	08011a80 	.word	0x08011a80

08004bf4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	3304      	adds	r3, #4
 8004c02:	4618      	mov	r0, r3
 8004c04:	f7fd ff74 	bl	8002af0 <_ZN13STM32Hardware4timeEv>
 8004c08:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	4917      	ldr	r1, [pc, #92]	; (8004c70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x7c>)
 8004c12:	fba1 1303 	umull	r1, r3, r1, r3
 8004c16:	099b      	lsrs	r3, r3, #6
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	3b01      	subs	r3, #1
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004c22:	6193      	str	r3, [r2, #24]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	6859      	ldr	r1, [r3, #4]
 8004c28:	68fa      	ldr	r2, [r7, #12]
 8004c2a:	4b11      	ldr	r3, [pc, #68]	; (8004c70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x7c>)
 8004c2c:	fba3 0302 	umull	r0, r3, r3, r2
 8004c30:	099b      	lsrs	r3, r3, #6
 8004c32:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004c36:	fb00 f303 	mul.w	r3, r0, r3
 8004c3a:	1ad3      	subs	r3, r2, r3
 8004c3c:	4a0d      	ldr	r2, [pc, #52]	; (8004c74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x80>)
 8004c3e:	fb02 f303 	mul.w	r3, r2, r3
 8004c42:	1aca      	subs	r2, r1, r3
 8004c44:	4b0c      	ldr	r3, [pc, #48]	; (8004c78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x84>)
 8004c46:	4413      	add	r3, r2
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004c4e:	61d3      	str	r3, [r2, #28]
    normalizeSecNSec(sec_offset, nsec_offset);
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	f241 0318 	movw	r3, #4120	; 0x1018
 8004c56:	4413      	add	r3, r2
 8004c58:	6879      	ldr	r1, [r7, #4]
 8004c5a:	f241 021c 	movw	r2, #4124	; 0x101c
 8004c5e:	440a      	add	r2, r1
 8004c60:	4611      	mov	r1, r2
 8004c62:	4618      	mov	r0, r3
 8004c64:	f7fb fcde 	bl	8000624 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8004c68:	bf00      	nop
 8004c6a:	3710      	adds	r7, #16
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}
 8004c70:	10624dd3 	.word	0x10624dd3
 8004c74:	000f4240 	.word	0x000f4240
 8004c78:	3b9aca00 	.word	0x3b9aca00

08004c7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b082      	sub	sp, #8
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8004c86:	683a      	ldr	r2, [r7, #0]
 8004c88:	2103      	movs	r1, #3
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f000 f804 	bl	8004c98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE3logEcPKc>
  }
 8004c90:	bf00      	nop
 8004c92:	3708      	adds	r7, #8
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}

08004c98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE3logEcPKc>:
  void log(char byte, const char * msg)
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b088      	sub	sp, #32
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	460b      	mov	r3, r1
 8004ca2:	607a      	str	r2, [r7, #4]
 8004ca4:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8004ca6:	f107 0314 	add.w	r3, r7, #20
 8004caa:	4618      	mov	r0, r3
 8004cac:	f7fd f9ae 	bl	800200c <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8004cb0:	7afb      	ldrb	r3, [r7, #11]
 8004cb2:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f107 0214 	add.w	r2, r7, #20
 8004cc2:	2107      	movs	r1, #7
 8004cc4:	68f8      	ldr	r0, [r7, #12]
 8004cc6:	4798      	blx	r3
  }
 8004cc8:	bf00      	nop
 8004cca:	3720      	adds	r7, #32
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}

08004cd0 <_Z41__static_initialization_and_destruction_0ii>:
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b082      	sub	sp, #8
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d137      	bne.n	8004d50 <_Z41__static_initialization_and_destruction_0ii+0x80>
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d132      	bne.n	8004d50 <_Z41__static_initialization_and_destruction_0ii+0x80>
ros::NodeHandle nh;
 8004cea:	481b      	ldr	r0, [pc, #108]	; (8004d58 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8004cec:	f7ff f9b2 	bl	8004054 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev>
geometry_msgs::Point microswitch;
 8004cf0:	481a      	ldr	r0, [pc, #104]	; (8004d5c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8004cf2:	f7fd ff09 	bl	8002b08 <_ZN13geometry_msgs5PointC1Ev>
geometry_msgs::Point car_speed;
 8004cf6:	481a      	ldr	r0, [pc, #104]	; (8004d60 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8004cf8:	f7fd ff06 	bl	8002b08 <_ZN13geometry_msgs5PointC1Ev>
std_msgs::Int64 reset;
 8004cfc:	4819      	ldr	r0, [pc, #100]	; (8004d64 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8004cfe:	f7fe fc19 	bl	8003534 <_ZN8std_msgs5Int64C1Ev>
std_msgs::Float64 scaraflag;
 8004d02:	4819      	ldr	r0, [pc, #100]	; (8004d68 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8004d04:	f7fe fdd4 	bl	80038b0 <_ZN8std_msgs7Float64C1Ev>
ros::Subscriber<geometry_msgs::Point> mecanum_sub("/mecanum_toSTM", ROS::mecanum_callback);
 8004d08:	2301      	movs	r3, #1
 8004d0a:	4a18      	ldr	r2, [pc, #96]	; (8004d6c <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8004d0c:	4918      	ldr	r1, [pc, #96]	; (8004d70 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8004d0e:	4819      	ldr	r0, [pc, #100]	; (8004d74 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8004d10:	f7ff fa4a 	bl	80041a8 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<geometry_msgs::Point> intake_sub("/intake_toSTM", ROS::intake_callback);
 8004d14:	2301      	movs	r3, #1
 8004d16:	4a18      	ldr	r2, [pc, #96]	; (8004d78 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8004d18:	4918      	ldr	r1, [pc, #96]	; (8004d7c <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8004d1a:	4819      	ldr	r0, [pc, #100]	; (8004d80 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8004d1c:	f7ff fa44 	bl	80041a8 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<geometry_msgs::Point> scara_sub("/scara_toSTM", ROS::scara_callback);
 8004d20:	2301      	movs	r3, #1
 8004d22:	4a18      	ldr	r2, [pc, #96]	; (8004d84 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8004d24:	4918      	ldr	r1, [pc, #96]	; (8004d88 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8004d26:	4819      	ldr	r0, [pc, #100]	; (8004d8c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8004d28:	f7ff fa3e 	bl	80041a8 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvEC1EPKcPFvRKS2_Ei>
ros::Publisher mecanum_pub("/mecanum_fromSTM", &car_speed);
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	4a0c      	ldr	r2, [pc, #48]	; (8004d60 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8004d30:	4917      	ldr	r1, [pc, #92]	; (8004d90 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8004d32:	4818      	ldr	r0, [pc, #96]	; (8004d94 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8004d34:	f7fd fcdc 	bl	80026f0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher reset_pub("/reset_fromSTM", &reset);
 8004d38:	2300      	movs	r3, #0
 8004d3a:	4a0a      	ldr	r2, [pc, #40]	; (8004d64 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8004d3c:	4916      	ldr	r1, [pc, #88]	; (8004d98 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8004d3e:	4817      	ldr	r0, [pc, #92]	; (8004d9c <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8004d40:	f7fd fcd6 	bl	80026f0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher scara_pub("/scaraflag_fromSTM", &scaraflag);
 8004d44:	2300      	movs	r3, #0
 8004d46:	4a08      	ldr	r2, [pc, #32]	; (8004d68 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8004d48:	4915      	ldr	r1, [pc, #84]	; (8004da0 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8004d4a:	4816      	ldr	r0, [pc, #88]	; (8004da4 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8004d4c:	f7fd fcd0 	bl	80026f0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 8004d50:	bf00      	nop
 8004d52:	3708      	adds	r7, #8
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	240007b0 	.word	0x240007b0
 8004d5c:	240020f0 	.word	0x240020f0
 8004d60:	24002110 	.word	0x24002110
 8004d64:	24002130 	.word	0x24002130
 8004d68:	24002140 	.word	0x24002140
 8004d6c:	08003d79 	.word	0x08003d79
 8004d70:	08011abc 	.word	0x08011abc
 8004d74:	24002150 	.word	0x24002150
 8004d78:	08003d35 	.word	0x08003d35
 8004d7c:	08011acc 	.word	0x08011acc
 8004d80:	24002188 	.word	0x24002188
 8004d84:	08003c5d 	.word	0x08003c5d
 8004d88:	08011adc 	.word	0x08011adc
 8004d8c:	240021c0 	.word	0x240021c0
 8004d90:	08011aec 	.word	0x08011aec
 8004d94:	240021f8 	.word	0x240021f8
 8004d98:	08011b00 	.word	0x08011b00
 8004d9c:	2400220c 	.word	0x2400220c
 8004da0:	08011b10 	.word	0x08011b10
 8004da4:	24002220 	.word	0x24002220

08004da8 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b082      	sub	sp, #8
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	3310      	adds	r3, #16
 8004db6:	6839      	ldr	r1, [r7, #0]
 8004db8:	4618      	mov	r0, r3
 8004dba:	f7fe f840 	bl	8002e3e <_ZN13geometry_msgs5Point11deserializeEPh>
    this->cb_(msg);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	3210      	adds	r2, #16
 8004dc6:	4610      	mov	r0, r2
 8004dc8:	4798      	blx	r3
  }
 8004dca:	bf00      	nop
 8004dcc:	3708      	adds	r7, #8
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}

08004dd2 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8004dd2:	b480      	push	{r7}
 8004dd4:	b083      	sub	sp, #12
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  }
 8004dde:	4618      	mov	r0, r3
 8004de0:	370c      	adds	r7, #12
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr

08004dea <_ZN3ros10SubscriberIN13geometry_msgs5PointEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8004dea:	b580      	push	{r7, lr}
 8004dec:	b082      	sub	sp, #8
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	3310      	adds	r3, #16
 8004df6:	4618      	mov	r0, r3
 8004df8:	f7fe fb80 	bl	80034fc <_ZN13geometry_msgs5Point7getTypeEv>
 8004dfc:	4603      	mov	r3, r0
  }
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3708      	adds	r7, #8
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}

08004e06 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8004e06:	b580      	push	{r7, lr}
 8004e08:	b082      	sub	sp, #8
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	3310      	adds	r3, #16
 8004e12:	4618      	mov	r0, r3
 8004e14:	f7fe fb80 	bl	8003518 <_ZN13geometry_msgs5Point6getMD5Ev>
 8004e18:	4603      	mov	r3, r0
  }
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3708      	adds	r7, #8
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}

08004e22 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9connectedEv>:
  virtual bool connected()
 8004e22:	b480      	push	{r7}
 8004e24:	b083      	sub	sp, #12
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
    return configured_;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e30:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 8004e34:	4618      	mov	r0, r3
 8004e36:	370c      	adds	r7, #12
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr

08004e40 <_GLOBAL__sub_I_nh>:
 8004e40:	b580      	push	{r7, lr}
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004e48:	2001      	movs	r0, #1
 8004e4a:	f7ff ff41 	bl	8004cd0 <_Z41__static_initialization_and_destruction_0ii>
 8004e4e:	bd80      	pop	{r7, pc}

08004e50 <_ZN5SCARAC1Ev>:
#define AIR_PORT GPIOA
#define AIR_PIN GPIO_PIN_5

extern TIM_HandleTypeDef htim23;

struct SCARA{
 8004e50:	b480      	push	{r7}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	701a      	strb	r2, [r3, #0]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	605a      	str	r2, [r3, #4]
 8004e64:	6879      	ldr	r1, [r7, #4]
 8004e66:	f04f 0200 	mov.w	r2, #0
 8004e6a:	f04f 0300 	mov.w	r3, #0
 8004e6e:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8004e72:	6879      	ldr	r1, [r7, #4]
 8004e74:	f04f 0200 	mov.w	r2, #0
 8004e78:	4b51      	ldr	r3, [pc, #324]	; (8004fc0 <_ZN5SCARAC1Ev+0x170>)
 8004e7a:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8004e7e:	6879      	ldr	r1, [r7, #4]
 8004e80:	a349      	add	r3, pc, #292	; (adr r3, 8004fa8 <_ZN5SCARAC1Ev+0x158>)
 8004e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e86:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 8004e8a:	6879      	ldr	r1, [r7, #4]
 8004e8c:	f04f 0200 	mov.w	r2, #0
 8004e90:	f04f 0300 	mov.w	r3, #0
 8004e94:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 8004e98:	6879      	ldr	r1, [r7, #4]
 8004e9a:	a343      	add	r3, pc, #268	; (adr r3, 8004fa8 <_ZN5SCARAC1Ev+0x158>)
 8004e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea0:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	641a      	str	r2, [r3, #64]	; 0x40
 8004eaa:	6879      	ldr	r1, [r7, #4]
 8004eac:	f04f 0200 	mov.w	r2, #0
 8004eb0:	4b44      	ldr	r3, [pc, #272]	; (8004fc4 <_ZN5SCARAC1Ev+0x174>)
 8004eb2:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
 8004eb6:	6879      	ldr	r1, [r7, #4]
 8004eb8:	f04f 0200 	mov.w	r2, #0
 8004ebc:	f04f 0300 	mov.w	r3, #0
 8004ec0:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8004ec4:	6879      	ldr	r1, [r7, #4]
 8004ec6:	f04f 0200 	mov.w	r2, #0
 8004eca:	4b3e      	ldr	r3, [pc, #248]	; (8004fc4 <_ZN5SCARAC1Ev+0x174>)
 8004ecc:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	661a      	str	r2, [r3, #96]	; 0x60
 8004ed6:	6879      	ldr	r1, [r7, #4]
 8004ed8:	f04f 0200 	mov.w	r2, #0
 8004edc:	f04f 0300 	mov.w	r3, #0
 8004ee0:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8004ee4:	6879      	ldr	r1, [r7, #4]
 8004ee6:	f04f 0200 	mov.w	r2, #0
 8004eea:	f04f 0300 	mov.w	r3, #0
 8004eee:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
 8004ef2:	6879      	ldr	r1, [r7, #4]
 8004ef4:	f04f 0200 	mov.w	r2, #0
 8004ef8:	f04f 0300 	mov.w	r3, #0
 8004efc:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8004f10:	6879      	ldr	r1, [r7, #4]
 8004f12:	a327      	add	r3, pc, #156	; (adr r3, 8004fb0 <_ZN5SCARAC1Ev+0x160>)
 8004f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f18:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
 8004f1c:	6879      	ldr	r1, [r7, #4]
 8004f1e:	a326      	add	r3, pc, #152	; (adr r3, 8004fb8 <_ZN5SCARAC1Ev+0x168>)
 8004f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f24:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
 8004f28:	6879      	ldr	r1, [r7, #4]
 8004f2a:	a323      	add	r3, pc, #140	; (adr r3, 8004fb8 <_ZN5SCARAC1Ev+0x168>)
 8004f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f30:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
 8004f34:	6879      	ldr	r1, [r7, #4]
 8004f36:	f04f 0200 	mov.w	r2, #0
 8004f3a:	f04f 0300 	mov.w	r3, #0
 8004f3e:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
 8004f42:	6879      	ldr	r1, [r7, #4]
 8004f44:	f04f 0200 	mov.w	r2, #0
 8004f48:	4b1f      	ldr	r3, [pc, #124]	; (8004fc8 <_ZN5SCARAC1Ev+0x178>)
 8004f4a:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8004f66:	6879      	ldr	r1, [r7, #4]
 8004f68:	f04f 0200 	mov.w	r2, #0
 8004f6c:	f04f 0300 	mov.w	r3, #0
 8004f70:	e9c1 2330 	strd	r2, r3, [r1, #192]	; 0xc0
 8004f74:	6879      	ldr	r1, [r7, #4]
 8004f76:	f04f 0200 	mov.w	r2, #0
 8004f7a:	4b11      	ldr	r3, [pc, #68]	; (8004fc0 <_ZN5SCARAC1Ev+0x170>)
 8004f7c:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	370c      	adds	r7, #12
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr
 8004fa6:	bf00      	nop
 8004fa8:	00000000 	.word	0x00000000
 8004fac:	4070e000 	.word	0x4070e000
 8004fb0:	00000000 	.word	0x00000000
 8004fb4:	40622000 	.word	0x40622000
 8004fb8:	00000000 	.word	0x00000000
 8004fbc:	40a00400 	.word	0x40a00400
 8004fc0:	c0490000 	.word	0xc0490000
 8004fc4:	c0668000 	.word	0xc0668000
 8004fc8:	3ff00000 	.word	0x3ff00000
 8004fcc:	00000000 	.word	0x00000000

08004fd0 <_ZN5SCARA3runEv>:
#include "scara.h"

SCARA sc;

void SCARA::run(){
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b082      	sub	sp, #8
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
	//'update' is used by ST
	if (update == 1){
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d119      	bne.n	8005016 <_ZN5SCARA3runEv+0x46>
		x = ST_test_x;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	; 0xc0
 8004fe8:	6879      	ldr	r1, [r7, #4]
 8004fea:	e9c1 2302 	strd	r2, r3, [r1, #8]
		y = ST_test_y;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 8004ff4:	6879      	ldr	r1, [r7, #4]
 8004ff6:	e9c1 2304 	strd	r2, r3, [r1, #16]
		flag = ST_test_flag;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8005000:	ee07 3a90 	vmov	s15, r3
 8005004:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	ed83 7b2a 	vstr	d7, [r3, #168]	; 0xa8
		update = 0;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	}
	while(flag != 0 || step_3 != 0){
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	ed93 7b2a 	vldr	d7, [r3, #168]	; 0xa8
 800501c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005024:	d108      	bne.n	8005038 <_ZN5SCARA3runEv+0x68>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 800502c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005034:	f000 8508 	beq.w	8005a48 <_ZN5SCARA3runEv+0xa78>
		phi = count_phi(x,y);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	ed93 7b02 	vldr	d7, [r3, #8]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	ed93 6b04 	vldr	d6, [r3, #16]
 8005044:	eeb0 1b46 	vmov.f64	d1, d6
 8005048:	eeb0 0b47 	vmov.f64	d0, d7
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f000 fe63 	bl	8005d18 <_ZN5SCARA9count_phiEdd>
 8005052:	eeb0 7b40 	vmov.f64	d7, d0
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	ed83 7b06 	vstr	d7, [r3, #24]
		at = count_atan2(x,y);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	ed93 7b02 	vldr	d7, [r3, #8]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	ed93 6b04 	vldr	d6, [r3, #16]
 8005068:	eeb0 1b46 	vmov.f64	d1, d6
 800506c:	eeb0 0b47 	vmov.f64	d0, d7
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f000 fd15 	bl	8005aa0 <_ZN5SCARA11count_atan2Edd>
 8005076:	eeb0 7b40 	vmov.f64	d7, d0
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	ed83 7b08 	vstr	d7, [r3, #32]
		if (count_atan2(x,y) < 0)at += 360;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	ed93 7b02 	vldr	d7, [r3, #8]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	ed93 6b04 	vldr	d6, [r3, #16]
 800508c:	eeb0 1b46 	vmov.f64	d1, d6
 8005090:	eeb0 0b47 	vmov.f64	d0, d7
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f000 fd03 	bl	8005aa0 <_ZN5SCARA11count_atan2Edd>
 800509a:	eeb0 7b40 	vmov.f64	d7, d0
 800509e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80050a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050a6:	bf4c      	ite	mi
 80050a8:	2301      	movmi	r3, #1
 80050aa:	2300      	movpl	r3, #0
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d009      	beq.n	80050c6 <_ZN5SCARA3runEv+0xf6>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	ed93 7b08 	vldr	d7, [r3, #32]
 80050b8:	ed9f 6b9f 	vldr	d6, [pc, #636]	; 8005338 <_ZN5SCARA3runEv+0x368>
 80050bc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	ed83 7b08 	vstr	d7, [r3, #32]
		if (at + phi <= 230){
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	ed93 6b08 	vldr	d6, [r3, #32]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	ed93 7b06 	vldr	d7, [r3, #24]
 80050d2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80050d6:	ed9f 6b9a 	vldr	d6, [pc, #616]	; 8005340 <_ZN5SCARA3runEv+0x370>
 80050da:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80050de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050e2:	d81f      	bhi.n	8005124 <_ZN5SCARA3runEv+0x154>
			angle_goal_1 = at + phi;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	ed93 6b08 	vldr	d6, [r3, #32]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	ed93 7b06 	vldr	d7, [r3, #24]
 80050f0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
			angle_goal_2 = -count_theta2(x,y);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	ed93 7b02 	vldr	d7, [r3, #8]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	ed93 6b04 	vldr	d6, [r3, #16]
 8005106:	eeb0 1b46 	vmov.f64	d1, d6
 800510a:	eeb0 0b47 	vmov.f64	d0, d7
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f000 fda6 	bl	8005c60 <_ZN5SCARA12count_theta2Edd>
 8005114:	eeb0 7b40 	vmov.f64	d7, d0
 8005118:	eeb1 7b47 	vneg.f64	d7, d7
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
 8005122:	e02b      	b.n	800517c <_ZN5SCARA3runEv+0x1ac>
		}
		else if(at + phi > 230){
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	ed93 6b08 	vldr	d6, [r3, #32]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	ed93 7b06 	vldr	d7, [r3, #24]
 8005130:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005134:	ed9f 6b82 	vldr	d6, [pc, #520]	; 8005340 <_ZN5SCARA3runEv+0x370>
 8005138:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800513c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005140:	dd1c      	ble.n	800517c <_ZN5SCARA3runEv+0x1ac>
			angle_goal_1 = at - phi;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	ed93 6b08 	vldr	d6, [r3, #32]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	ed93 7b06 	vldr	d7, [r3, #24]
 800514e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
			angle_goal_2 = count_theta2(x,y);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	ed93 7b02 	vldr	d7, [r3, #8]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	ed93 6b04 	vldr	d6, [r3, #16]
 8005164:	eeb0 1b46 	vmov.f64	d1, d6
 8005168:	eeb0 0b47 	vmov.f64	d0, d7
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f000 fd77 	bl	8005c60 <_ZN5SCARA12count_theta2Edd>
 8005172:	eeb0 7b40 	vmov.f64	d7, d0
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
		}

		if (air_pressure == 1)HAL_GPIO_WritePin(AIR_PORT, AIR_PIN, GPIO_PIN_RESET);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005182:	2b01      	cmp	r3, #1
 8005184:	d105      	bne.n	8005192 <_ZN5SCARA3runEv+0x1c2>
 8005186:	2200      	movs	r2, #0
 8005188:	2120      	movs	r1, #32
 800518a:	4875      	ldr	r0, [pc, #468]	; (8005360 <_ZN5SCARA3runEv+0x390>)
 800518c:	f005 fa6e 	bl	800a66c <HAL_GPIO_WritePin>
 8005190:	e009      	b.n	80051a6 <_ZN5SCARA3runEv+0x1d6>
		else if (air_pressure == 0)HAL_GPIO_WritePin(AIR_PORT, AIR_PIN, GPIO_PIN_SET);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005198:	2b00      	cmp	r3, #0
 800519a:	d104      	bne.n	80051a6 <_ZN5SCARA3runEv+0x1d6>
 800519c:	2201      	movs	r2, #1
 800519e:	2120      	movs	r1, #32
 80051a0:	486f      	ldr	r0, [pc, #444]	; (8005360 <_ZN5SCARA3runEv+0x390>)
 80051a2:	f005 fa63 	bl	800a66c <HAL_GPIO_WritePin>

		if (valve_switch == 1)HAL_GPIO_WritePin(VALVE_PORT, VALVE_PIN, GPIO_PIN_RESET);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d105      	bne.n	80051bc <_ZN5SCARA3runEv+0x1ec>
 80051b0:	2200      	movs	r2, #0
 80051b2:	2110      	movs	r1, #16
 80051b4:	486a      	ldr	r0, [pc, #424]	; (8005360 <_ZN5SCARA3runEv+0x390>)
 80051b6:	f005 fa59 	bl	800a66c <HAL_GPIO_WritePin>
 80051ba:	e009      	b.n	80051d0 <_ZN5SCARA3runEv+0x200>
		else if (valve_switch == 0)HAL_GPIO_WritePin(VALVE_PORT, VALVE_PIN, GPIO_PIN_SET);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d104      	bne.n	80051d0 <_ZN5SCARA3runEv+0x200>
 80051c6:	2201      	movs	r2, #1
 80051c8:	2110      	movs	r1, #16
 80051ca:	4865      	ldr	r0, [pc, #404]	; (8005360 <_ZN5SCARA3runEv+0x390>)
 80051cc:	f005 fa4e 	bl	800a66c <HAL_GPIO_WritePin>

		pulse_goal = 600 + 10 * servo_angle;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	ed93 7b22 	vldr	d7, [r3, #136]	; 0x88
 80051d6:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80051da:	ee27 7b06 	vmul.f64	d7, d7, d6
 80051de:	ed9f 6b5a 	vldr	d6, [pc, #360]	; 8005348 <_ZN5SCARA3runEv+0x378>
 80051e2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
		if (servo_angle == 145)__HAL_TIM_SET_COMPARE(&htim23, TIM_CHANNEL_1, pulse_now);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	ed93 7b22 	vldr	d7, [r3, #136]	; 0x88
 80051f2:	ed9f 6b57 	vldr	d6, [pc, #348]	; 8005350 <_ZN5SCARA3runEv+0x380>
 80051f6:	eeb4 7b46 	vcmp.f64	d7, d6
 80051fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051fe:	d109      	bne.n	8005214 <_ZN5SCARA3runEv+0x244>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	ed93 7b24 	vldr	d7, [r3, #144]	; 0x90
 8005206:	4b57      	ldr	r3, [pc, #348]	; (8005364 <_ZN5SCARA3runEv+0x394>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800520e:	ee17 2a90 	vmov	r2, s15
 8005212:	635a      	str	r2, [r3, #52]	; 0x34
		if (pulse_now != pulse_goal){
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	ed93 6b24 	vldr	d6, [r3, #144]	; 0x90
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	ed93 7b26 	vldr	d7, [r3, #152]	; 0x98
 8005220:	eeb4 6b47 	vcmp.f64	d6, d7
 8005224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005228:	d052      	beq.n	80052d0 <_ZN5SCARA3runEv+0x300>
			while (pulse_now < pulse_goal){
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	ed93 6b24 	vldr	d6, [r3, #144]	; 0x90
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	ed93 7b26 	vldr	d7, [r3, #152]	; 0x98
 8005236:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800523a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800523e:	d400      	bmi.n	8005242 <_ZN5SCARA3runEv+0x272>
 8005240:	e018      	b.n	8005274 <_ZN5SCARA3runEv+0x2a4>
				pulse_now ++;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	ed93 7b24 	vldr	d7, [r3, #144]	; 0x90
 8005248:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800524c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
				timer_delay(0.3);
 8005256:	2100      	movs	r1, #0
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f000 fc01 	bl	8005a60 <_ZN5SCARA11timer_delayEi>
				__HAL_TIM_SET_COMPARE(&htim23, TIM_CHANNEL_1, pulse_now);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	ed93 7b24 	vldr	d7, [r3, #144]	; 0x90
 8005264:	4b3f      	ldr	r3, [pc, #252]	; (8005364 <_ZN5SCARA3runEv+0x394>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800526c:	ee17 2a90 	vmov	r2, s15
 8005270:	635a      	str	r2, [r3, #52]	; 0x34
			while (pulse_now < pulse_goal){
 8005272:	e7da      	b.n	800522a <_ZN5SCARA3runEv+0x25a>
			}
			while (pulse_now > pulse_goal){
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	ed93 6b24 	vldr	d6, [r3, #144]	; 0x90
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	ed93 7b26 	vldr	d7, [r3, #152]	; 0x98
 8005280:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005288:	dd18      	ble.n	80052bc <_ZN5SCARA3runEv+0x2ec>
				pulse_now --;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	ed93 7b24 	vldr	d7, [r3, #144]	; 0x90
 8005290:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005294:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
				timer_delay(0.3);
 800529e:	2100      	movs	r1, #0
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f000 fbdd 	bl	8005a60 <_ZN5SCARA11timer_delayEi>
				__HAL_TIM_SET_COMPARE(&htim23, TIM_CHANNEL_1, pulse_now);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	ed93 7b24 	vldr	d7, [r3, #144]	; 0x90
 80052ac:	4b2d      	ldr	r3, [pc, #180]	; (8005364 <_ZN5SCARA3runEv+0x394>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80052b4:	ee17 2a90 	vmov	r2, s15
 80052b8:	635a      	str	r2, [r3, #52]	; 0x34
			while (pulse_now > pulse_goal){
 80052ba:	e7db      	b.n	8005274 <_ZN5SCARA3runEv+0x2a4>
			}
			input_check = 1;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
			pulse_now = pulse_goal;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 80052ca:	6879      	ldr	r1, [r7, #4]
 80052cc:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
		}

		if (angle_goal_1 != angle_now_1) {
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 80052dc:	eeb4 6b47 	vcmp.f64	d6, d7
 80052e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052e4:	f000 8089 	beq.w	80053fa <_ZN5SCARA3runEv+0x42a>
			step_1 = (double)(angle_goal_1 - angle_now_1)*4 *8 / 0.9;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 80052f4:	ee36 7b47 	vsub.f64	d7, d6, d7
 80052f8:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 80052fc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005300:	eeb2 6b00 	vmov.f64	d6, #32	; 0x41000000  8.0
 8005304:	ee27 6b06 	vmul.f64	d6, d7, d6
 8005308:	ed9f 5b13 	vldr	d5, [pc, #76]	; 8005358 <_ZN5SCARA3runEv+0x388>
 800530c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30

			if (step_1 >= 0) {
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800531c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005324:	db22      	blt.n	800536c <_ZN5SCARA3runEv+0x39c>
				HAL_GPIO_WritePin(DIR_PORT_1, DIR_PIN_1, GPIO_PIN_SET);
 8005326:	2201      	movs	r2, #1
 8005328:	2120      	movs	r1, #32
 800532a:	480f      	ldr	r0, [pc, #60]	; (8005368 <_ZN5SCARA3runEv+0x398>)
 800532c:	f005 f99e 	bl	800a66c <HAL_GPIO_WritePin>
 8005330:	e031      	b.n	8005396 <_ZN5SCARA3runEv+0x3c6>
 8005332:	bf00      	nop
 8005334:	f3af 8000 	nop.w
 8005338:	00000000 	.word	0x00000000
 800533c:	40768000 	.word	0x40768000
 8005340:	00000000 	.word	0x00000000
 8005344:	406cc000 	.word	0x406cc000
 8005348:	00000000 	.word	0x00000000
 800534c:	4082c000 	.word	0x4082c000
 8005350:	00000000 	.word	0x00000000
 8005354:	40622000 	.word	0x40622000
 8005358:	cccccccd 	.word	0xcccccccd
 800535c:	3feccccc 	.word	0x3feccccc
 8005360:	58020000 	.word	0x58020000
 8005364:	24000578 	.word	0x24000578
 8005368:	58020800 	.word	0x58020800
			}else if (step_1 < 0) {
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8005372:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800537a:	d50c      	bpl.n	8005396 <_ZN5SCARA3runEv+0x3c6>
				step_1 = -step_1;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8005382:	eeb1 7b47 	vneg.f64	d7, d7
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
				HAL_GPIO_WritePin(DIR_PORT_1, DIR_PIN_1, GPIO_PIN_RESET);
 800538c:	2200      	movs	r2, #0
 800538e:	2120      	movs	r1, #32
 8005390:	489d      	ldr	r0, [pc, #628]	; (8005608 <_ZN5SCARA3runEv+0x638>)
 8005392:	f005 f96b 	bl	800a66c <HAL_GPIO_WritePin>
			}

			if (state == 1)step_1 *= 1.1; //undetermined
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	ed93 7b28 	vldr	d7, [r3, #160]	; 0xa0
 800539c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80053a0:	eeb4 7b46 	vcmp.f64	d7, d6
 80053a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053a8:	d109      	bne.n	80053be <_ZN5SCARA3runEv+0x3ee>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80053b0:	ed9f 6b89 	vldr	d6, [pc, #548]	; 80055d8 <_ZN5SCARA3runEv+0x608>
 80053b4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
			if (state == 2)step_1 *= 1.1; //undetermined
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	ed93 7b28 	vldr	d7, [r3, #160]	; 0xa0
 80053c4:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 80053c8:	eeb4 7b46 	vcmp.f64	d7, d6
 80053cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053d0:	d109      	bne.n	80053e6 <_ZN5SCARA3runEv+0x416>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80053d8:	ed9f 6b7f 	vldr	d6, [pc, #508]	; 80055d8 <_ZN5SCARA3runEv+0x608>
 80053dc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
			input_check = 1;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2201      	movs	r2, #1
 80053ea:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
			angle_now_1 = angle_goal_1;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80053f4:	6879      	ldr	r1, [r7, #4]
 80053f6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		}

		if (angle_goal_2 != angle_now_2) {
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 8005406:	eeb4 6b47 	vcmp.f64	d6, d7
 800540a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800540e:	f000 80a7 	beq.w	8005560 <_ZN5SCARA3runEv+0x590>
			step_2 = (angle_goal_2 - angle_now_2)*8 / 0.9;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 800541e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005422:	eeb2 6b00 	vmov.f64	d6, #32	; 0x41000000  8.0
 8005426:	ee27 6b06 	vmul.f64	d6, d7, d6
 800542a:	ed9f 5b6d 	vldr	d5, [pc, #436]	; 80055e0 <_ZN5SCARA3runEv+0x610>
 800542e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50

			if (angle_now_2 >= 180 && angle_goal_2 < 180){
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 800543e:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 80055e8 <_ZN5SCARA3runEv+0x618>
 8005442:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800544a:	db14      	blt.n	8005476 <_ZN5SCARA3runEv+0x4a6>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8005452:	ed9f 6b65 	vldr	d6, [pc, #404]	; 80055e8 <_ZN5SCARA3runEv+0x618>
 8005456:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800545a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800545e:	d50a      	bpl.n	8005476 <_ZN5SCARA3runEv+0x4a6>
				step_2 += 3200;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 8005466:	ed9f 6b62 	vldr	d6, [pc, #392]	; 80055f0 <_ZN5SCARA3runEv+0x620>
 800546a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
 8005474:	e01d      	b.n	80054b2 <_ZN5SCARA3runEv+0x4e2>
			} else if (angle_now_2 < 180 && angle_goal_2 >= 180){
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 800547c:	ed9f 6b5a 	vldr	d6, [pc, #360]	; 80055e8 <_ZN5SCARA3runEv+0x618>
 8005480:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005488:	d513      	bpl.n	80054b2 <_ZN5SCARA3runEv+0x4e2>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8005490:	ed9f 6b55 	vldr	d6, [pc, #340]	; 80055e8 <_ZN5SCARA3runEv+0x618>
 8005494:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800549c:	db09      	blt.n	80054b2 <_ZN5SCARA3runEv+0x4e2>
			   step_2 -= 3200;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 80054a4:	ed9f 6b52 	vldr	d6, [pc, #328]	; 80055f0 <_ZN5SCARA3runEv+0x620>
 80054a8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
			}

			if (step_2 >= 0) {
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 80054b8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80054bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054c0:	db06      	blt.n	80054d0 <_ZN5SCARA3runEv+0x500>
				HAL_GPIO_WritePin(DIR_PORT_2, DIR_PIN_2, GPIO_PIN_SET);
 80054c2:	2201      	movs	r2, #1
 80054c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80054c8:	4850      	ldr	r0, [pc, #320]	; (800560c <_ZN5SCARA3runEv+0x63c>)
 80054ca:	f005 f8cf 	bl	800a66c <HAL_GPIO_WritePin>
 80054ce:	e015      	b.n	80054fc <_ZN5SCARA3runEv+0x52c>
			} else if (step_2 < 0) {
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 80054d6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80054da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054de:	d50d      	bpl.n	80054fc <_ZN5SCARA3runEv+0x52c>
				step_2 = -step_2;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 80054e6:	eeb1 7b47 	vneg.f64	d7, d7
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
				HAL_GPIO_WritePin(DIR_PORT_2, DIR_PIN_2, GPIO_PIN_RESET);
 80054f0:	2200      	movs	r2, #0
 80054f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80054f6:	4845      	ldr	r0, [pc, #276]	; (800560c <_ZN5SCARA3runEv+0x63c>)
 80054f8:	f005 f8b8 	bl	800a66c <HAL_GPIO_WritePin>
			}

			if (state == 1)step_2 *= 1.05; //undetermined
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	ed93 7b28 	vldr	d7, [r3, #160]	; 0xa0
 8005502:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005506:	eeb4 7b46 	vcmp.f64	d7, d6
 800550a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800550e:	d109      	bne.n	8005524 <_ZN5SCARA3runEv+0x554>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 8005516:	ed9f 6b38 	vldr	d6, [pc, #224]	; 80055f8 <_ZN5SCARA3runEv+0x628>
 800551a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
			if (state == 2)step_2 *= 1.1; //undetermined
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	ed93 7b28 	vldr	d7, [r3, #160]	; 0xa0
 800552a:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 800552e:	eeb4 7b46 	vcmp.f64	d7, d6
 8005532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005536:	d109      	bne.n	800554c <_ZN5SCARA3runEv+0x57c>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 800553e:	ed9f 6b26 	vldr	d6, [pc, #152]	; 80055d8 <_ZN5SCARA3runEv+0x608>
 8005542:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
			input_check = 1;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
			angle_now_2 = angle_goal_2;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800555a:	6879      	ldr	r1, [r7, #4]
 800555c:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		}


		if (high_goal != high_now) {
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	ed93 6b1a 	vldr	d6, [r3, #104]	; 0x68
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	ed93 7b1e 	vldr	d7, [r3, #120]	; 0x78
 800556c:	eeb4 6b47 	vcmp.f64	d6, d7
 8005570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005574:	d070      	beq.n	8005658 <_ZN5SCARA3runEv+0x688>
			step_3 = (high_goal - high_now)*200 *8 / 6;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	ed93 6b1a 	vldr	d6, [r3, #104]	; 0x68
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	ed93 7b1e 	vldr	d7, [r3, #120]	; 0x78
 8005582:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005586:	ed9f 6b1e 	vldr	d6, [pc, #120]	; 8005600 <_ZN5SCARA3runEv+0x630>
 800558a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800558e:	eeb2 6b00 	vmov.f64	d6, #32	; 0x41000000  8.0
 8005592:	ee27 6b06 	vmul.f64	d6, d7, d6
 8005596:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 800559a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	ed83 7b1c 	vstr	d7, [r3, #112]	; 0x70
			a = 0;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
			if (step_3 >= 0) {
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 80055b2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80055b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055ba:	db29      	blt.n	8005610 <_ZN5SCARA3runEv+0x640>
				HAL_GPIO_WritePin(DIR_PORT_3, DIR_PIN_3, GPIO_PIN_SET); a=999;
 80055bc:	2201      	movs	r2, #1
 80055be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80055c2:	4812      	ldr	r0, [pc, #72]	; (800560c <_ZN5SCARA3runEv+0x63c>)
 80055c4:	f005 f852 	bl	800a66c <HAL_GPIO_WritePin>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f240 32e7 	movw	r2, #999	; 0x3e7
 80055ce:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 80055d2:	e037      	b.n	8005644 <_ZN5SCARA3runEv+0x674>
 80055d4:	f3af 8000 	nop.w
 80055d8:	9999999a 	.word	0x9999999a
 80055dc:	3ff19999 	.word	0x3ff19999
 80055e0:	cccccccd 	.word	0xcccccccd
 80055e4:	3feccccc 	.word	0x3feccccc
 80055e8:	00000000 	.word	0x00000000
 80055ec:	40668000 	.word	0x40668000
 80055f0:	00000000 	.word	0x00000000
 80055f4:	40a90000 	.word	0x40a90000
 80055f8:	cccccccd 	.word	0xcccccccd
 80055fc:	3ff0cccc 	.word	0x3ff0cccc
 8005600:	00000000 	.word	0x00000000
 8005604:	40690000 	.word	0x40690000
 8005608:	58020800 	.word	0x58020800
 800560c:	58021400 	.word	0x58021400
			} else if (step_3 < 0) {
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 8005616:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800561a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800561e:	d511      	bpl.n	8005644 <_ZN5SCARA3runEv+0x674>
				step_3 = -step_3;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 8005626:	eeb1 7b47 	vneg.f64	d7, d7
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	ed83 7b1c 	vstr	d7, [r3, #112]	; 0x70
				HAL_GPIO_WritePin(DIR_PORT_3, DIR_PIN_3, GPIO_PIN_RESET); a=222;
 8005630:	2200      	movs	r2, #0
 8005632:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005636:	48ae      	ldr	r0, [pc, #696]	; (80058f0 <_ZN5SCARA3runEv+0x920>)
 8005638:	f005 f818 	bl	800a66c <HAL_GPIO_WritePin>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	22de      	movs	r2, #222	; 0xde
 8005640:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
			}
			input_check = 1;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2201      	movs	r2, #1
 8005648:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
			high_now = high_goal;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8005652:	6879      	ldr	r1, [r7, #4]
 8005654:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
		}

		if (step_1 < 1 && step_1 > 0)step_1 = 1;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800565e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005662:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800566a:	d50d      	bpl.n	8005688 <_ZN5SCARA3runEv+0x6b8>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8005672:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800567a:	dd05      	ble.n	8005688 <_ZN5SCARA3runEv+0x6b8>
 800567c:	6879      	ldr	r1, [r7, #4]
 800567e:	f04f 0200 	mov.w	r2, #0
 8005682:	4b9c      	ldr	r3, [pc, #624]	; (80058f4 <_ZN5SCARA3runEv+0x924>)
 8005684:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		if (step_2 < 1 && step_2 > 0)step_2 = 1;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 800568e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005692:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800569a:	d50d      	bpl.n	80056b8 <_ZN5SCARA3runEv+0x6e8>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 80056a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80056a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056aa:	dd05      	ble.n	80056b8 <_ZN5SCARA3runEv+0x6e8>
 80056ac:	6879      	ldr	r1, [r7, #4]
 80056ae:	f04f 0200 	mov.w	r2, #0
 80056b2:	4b90      	ldr	r3, [pc, #576]	; (80058f4 <_ZN5SCARA3runEv+0x924>)
 80056b4:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		if (step_3 < 1 && step_3 > 0)step_3 = 1;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 80056be:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80056c2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80056c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056ca:	d50d      	bpl.n	80056e8 <_ZN5SCARA3runEv+0x718>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 80056d2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80056d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056da:	dd05      	ble.n	80056e8 <_ZN5SCARA3runEv+0x718>
 80056dc:	6879      	ldr	r1, [r7, #4]
 80056de:	f04f 0200 	mov.w	r2, #0
 80056e2:	4b84      	ldr	r3, [pc, #528]	; (80058f4 <_ZN5SCARA3runEv+0x924>)
 80056e4:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70

		if (valve_switch == 1){
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d107      	bne.n	8005702 <_ZN5SCARA3runEv+0x732>
			timer_delay(2);
 80056f2:	2102      	movs	r1, #2
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f000 f9b3 	bl	8005a60 <_ZN5SCARA11timer_delayEi>
			valve_switch = 0;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2200      	movs	r2, #0
 80056fe:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		}

		if (step_1 == 0 && step_2 == 0 && step_3 == 0 ){
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8005708:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800570c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005710:	f47f ac81 	bne.w	8005016 <_ZN5SCARA3runEv+0x46>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 800571a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800571e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005722:	f47f ac78 	bne.w	8005016 <_ZN5SCARA3runEv+0x46>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 800572c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005734:	f47f ac6f 	bne.w	8005016 <_ZN5SCARA3runEv+0x46>
			if (flag == 1){
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	ed93 7b2a 	vldr	d7, [r3, #168]	; 0xa8
 800573e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005742:	eeb4 7b46 	vcmp.f64	d7, d6
 8005746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800574a:	d129      	bne.n	80057a0 <_ZN5SCARA3runEv+0x7d0>
				step_1 = 60;
 800574c:	6879      	ldr	r1, [r7, #4]
 800574e:	f04f 0200 	mov.w	r2, #0
 8005752:	4b69      	ldr	r3, [pc, #420]	; (80058f8 <_ZN5SCARA3runEv+0x928>)
 8005754:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
				HAL_GPIO_WritePin(DIR_PORT_1, DIR_PIN_1, GPIO_PIN_SET);
 8005758:	2201      	movs	r2, #1
 800575a:	2120      	movs	r1, #32
 800575c:	4867      	ldr	r0, [pc, #412]	; (80058fc <_ZN5SCARA3runEv+0x92c>)
 800575e:	f004 ff85 	bl	800a66c <HAL_GPIO_WritePin>
				step_2 = 30;
 8005762:	6879      	ldr	r1, [r7, #4]
 8005764:	f04f 0200 	mov.w	r2, #0
 8005768:	4b65      	ldr	r3, [pc, #404]	; (8005900 <_ZN5SCARA3runEv+0x930>)
 800576a:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
				HAL_GPIO_WritePin(DIR_PORT_2, DIR_PIN_2, GPIO_PIN_RESET);
 800576e:	2200      	movs	r2, #0
 8005770:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005774:	485e      	ldr	r0, [pc, #376]	; (80058f0 <_ZN5SCARA3runEv+0x920>)
 8005776:	f004 ff79 	bl	800a66c <HAL_GPIO_WritePin>
				step_3 = 2000;
 800577a:	6879      	ldr	r1, [r7, #4]
 800577c:	f04f 0200 	mov.w	r2, #0
 8005780:	4b60      	ldr	r3, [pc, #384]	; (8005904 <_ZN5SCARA3runEv+0x934>)
 8005782:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
				HAL_GPIO_WritePin(DIR_PORT_3, DIR_PIN_3, GPIO_PIN_SET);
 8005786:	2201      	movs	r2, #1
 8005788:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800578c:	4858      	ldr	r0, [pc, #352]	; (80058f0 <_ZN5SCARA3runEv+0x920>)
 800578e:	f004 ff6d 	bl	800a66c <HAL_GPIO_WritePin>
				flag = 6;
 8005792:	6879      	ldr	r1, [r7, #4]
 8005794:	f04f 0200 	mov.w	r2, #0
 8005798:	4b5b      	ldr	r3, [pc, #364]	; (8005908 <_ZN5SCARA3runEv+0x938>)
 800579a:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
 800579e:	e43a      	b.n	8005016 <_ZN5SCARA3runEv+0x46>
			}
			else if (flag == 2){
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	ed93 7b2a 	vldr	d7, [r3, #168]	; 0xa8
 80057a6:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 80057aa:	eeb4 7b46 	vcmp.f64	d7, d6
 80057ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057b2:	d106      	bne.n	80057c2 <_ZN5SCARA3runEv+0x7f2>
				flag = 6;
 80057b4:	6879      	ldr	r1, [r7, #4]
 80057b6:	f04f 0200 	mov.w	r2, #0
 80057ba:	4b53      	ldr	r3, [pc, #332]	; (8005908 <_ZN5SCARA3runEv+0x938>)
 80057bc:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
 80057c0:	e429      	b.n	8005016 <_ZN5SCARA3runEv+0x46>
			}
			else if (flag == 3){
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	ed93 7b2a 	vldr	d7, [r3, #168]	; 0xa8
 80057c8:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 80057cc:	eeb4 7b46 	vcmp.f64	d7, d6
 80057d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057d4:	f040 80b3 	bne.w	800593e <_ZN5SCARA3runEv+0x96e>
				air_pressure = 1, valve_switch = 0;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2201      	movs	r2, #1
 80057dc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2200      	movs	r2, #0
 80057e4:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
//				}
//				else if (high_state == 3 && pulse_now == pulse_goal){
//					high_state = 0;
//					flag = 6;
//				}
				switch(high_state){
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057ee:	2b03      	cmp	r3, #3
 80057f0:	f63f ac11 	bhi.w	8005016 <_ZN5SCARA3runEv+0x46>
 80057f4:	a201      	add	r2, pc, #4	; (adr r2, 80057fc <_ZN5SCARA3runEv+0x82c>)
 80057f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057fa:	bf00      	nop
 80057fc:	0800580d 	.word	0x0800580d
 8005800:	0800589f 	.word	0x0800589f
 8005804:	080058b5 	.word	0x080058b5
 8005808:	08005911 	.word	0x08005911
					case 0:
						if (state == 0)servo_angle = 20,state++;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	ed93 7b28 	vldr	d7, [r3, #160]	; 0xa0
 8005812:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800581a:	d110      	bne.n	800583e <_ZN5SCARA3runEv+0x86e>
 800581c:	6879      	ldr	r1, [r7, #4]
 800581e:	f04f 0200 	mov.w	r2, #0
 8005822:	4b3a      	ldr	r3, [pc, #232]	; (800590c <_ZN5SCARA3runEv+0x93c>)
 8005824:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	ed93 7b28 	vldr	d7, [r3, #160]	; 0xa0
 800582e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005832:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	ed83 7b28 	vstr	d7, [r3, #160]	; 0xa0
 800583c:	e02a      	b.n	8005894 <_ZN5SCARA3runEv+0x8c4>
						else if (state == 1)servo_angle = 270, state++;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	ed93 7b28 	vldr	d7, [r3, #160]	; 0xa0
 8005844:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005848:	eeb4 7b46 	vcmp.f64	d7, d6
 800584c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005850:	d110      	bne.n	8005874 <_ZN5SCARA3runEv+0x8a4>
 8005852:	6879      	ldr	r1, [r7, #4]
 8005854:	a320      	add	r3, pc, #128	; (adr r3, 80058d8 <_ZN5SCARA3runEv+0x908>)
 8005856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800585a:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	ed93 7b28 	vldr	d7, [r3, #160]	; 0xa0
 8005864:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005868:	ee37 7b06 	vadd.f64	d7, d7, d6
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	ed83 7b28 	vstr	d7, [r3, #160]	; 0xa0
 8005872:	e00f      	b.n	8005894 <_ZN5SCARA3runEv+0x8c4>
						else if (state == 2)servo_angle = 145;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	ed93 7b28 	vldr	d7, [r3, #160]	; 0xa0
 800587a:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 800587e:	eeb4 7b46 	vcmp.f64	d7, d6
 8005882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005886:	d105      	bne.n	8005894 <_ZN5SCARA3runEv+0x8c4>
 8005888:	6879      	ldr	r1, [r7, #4]
 800588a:	a315      	add	r3, pc, #84	; (adr r3, 80058e0 <_ZN5SCARA3runEv+0x910>)
 800588c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005890:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
						high_state = 1;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
						break;
 800589c:	e0d2      	b.n	8005a44 <_ZN5SCARA3runEv+0xa74>

					case 1:
						high_goal = -93;
 800589e:	6879      	ldr	r1, [r7, #4]
 80058a0:	a311      	add	r3, pc, #68	; (adr r3, 80058e8 <_ZN5SCARA3runEv+0x918>)
 80058a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058a6:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
						high_state = 2;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2202      	movs	r2, #2
 80058ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
						break;
 80058b2:	e0c7      	b.n	8005a44 <_ZN5SCARA3runEv+0xa74>

					case 2:
						timer_delay(1);
 80058b4:	2101      	movs	r1, #1
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f000 f8d2 	bl	8005a60 <_ZN5SCARA11timer_delayEi>
						high_goal = 0;
 80058bc:	6879      	ldr	r1, [r7, #4]
 80058be:	f04f 0200 	mov.w	r2, #0
 80058c2:	f04f 0300 	mov.w	r3, #0
 80058c6:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
						high_state = 3;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2203      	movs	r2, #3
 80058ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
						break;
 80058d2:	e0b7      	b.n	8005a44 <_ZN5SCARA3runEv+0xa74>
 80058d4:	f3af 8000 	nop.w
 80058d8:	00000000 	.word	0x00000000
 80058dc:	4070e000 	.word	0x4070e000
 80058e0:	00000000 	.word	0x00000000
 80058e4:	40622000 	.word	0x40622000
 80058e8:	00000000 	.word	0x00000000
 80058ec:	c0574000 	.word	0xc0574000
 80058f0:	58021400 	.word	0x58021400
 80058f4:	3ff00000 	.word	0x3ff00000
 80058f8:	404e0000 	.word	0x404e0000
 80058fc:	58020800 	.word	0x58020800
 8005900:	403e0000 	.word	0x403e0000
 8005904:	409f4000 	.word	0x409f4000
 8005908:	40180000 	.word	0x40180000
 800590c:	40340000 	.word	0x40340000

					case 3:
						if(pulse_now == pulse_goal){
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	ed93 6b24 	vldr	d6, [r3, #144]	; 0x90
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	ed93 7b26 	vldr	d7, [r3, #152]	; 0x98
 800591c:	eeb4 6b47 	vcmp.f64	d6, d7
 8005920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005924:	f040 808d 	bne.w	8005a42 <_ZN5SCARA3runEv+0xa72>
							high_state = 0;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
							flag = 6;
 8005930:	6879      	ldr	r1, [r7, #4]
 8005932:	f04f 0200 	mov.w	r2, #0
 8005936:	4b48      	ldr	r3, [pc, #288]	; (8005a58 <_ZN5SCARA3runEv+0xa88>)
 8005938:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
						}
						break;
 800593c:	e081      	b.n	8005a42 <_ZN5SCARA3runEv+0xa72>
				}
			}else if (step_1 == 0 && step_2 == 0 && flag == 4){
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8005944:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800594c:	d12d      	bne.n	80059aa <_ZN5SCARA3runEv+0x9da>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 8005954:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800595c:	d125      	bne.n	80059aa <_ZN5SCARA3runEv+0x9da>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	ed93 7b2a 	vldr	d7, [r3, #168]	; 0xa8
 8005964:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8005968:	eeb4 7b46 	vcmp.f64	d7, d6
 800596c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005970:	d11b      	bne.n	80059aa <_ZN5SCARA3runEv+0x9da>
				servo_angle = 145;
 8005972:	6879      	ldr	r1, [r7, #4]
 8005974:	a336      	add	r3, pc, #216	; (adr r3, 8005a50 <_ZN5SCARA3runEv+0xa80>)
 8005976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800597a:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
				air_pressure = 0;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				valve_switch = 1;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2201      	movs	r2, #1
 800598a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
				state = 0;
 800598e:	6879      	ldr	r1, [r7, #4]
 8005990:	f04f 0200 	mov.w	r2, #0
 8005994:	f04f 0300 	mov.w	r3, #0
 8005998:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
				flag = 6;
 800599c:	6879      	ldr	r1, [r7, #4]
 800599e:	f04f 0200 	mov.w	r2, #0
 80059a2:	4b2d      	ldr	r3, [pc, #180]	; (8005a58 <_ZN5SCARA3runEv+0xa88>)
 80059a4:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
 80059a8:	e04c      	b.n	8005a44 <_ZN5SCARA3runEv+0xa74>
			}else if (step_1 == 0 && step_2 == 0 && step_3 ==0 && flag == 5){
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80059b0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80059b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059b8:	d126      	bne.n	8005a08 <_ZN5SCARA3runEv+0xa38>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 80059c0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80059c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059c8:	d11e      	bne.n	8005a08 <_ZN5SCARA3runEv+0xa38>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 80059d0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80059d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059d8:	d116      	bne.n	8005a08 <_ZN5SCARA3runEv+0xa38>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	ed93 7b2a 	vldr	d7, [r3, #168]	; 0xa8
 80059e0:	eeb1 6b04 	vmov.f64	d6, #20	; 0x40a00000  5.0
 80059e4:	eeb4 7b46 	vcmp.f64	d7, d6
 80059e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059ec:	d10c      	bne.n	8005a08 <_ZN5SCARA3runEv+0xa38>
				high_goal = -10;
 80059ee:	6879      	ldr	r1, [r7, #4]
 80059f0:	f04f 0200 	mov.w	r2, #0
 80059f4:	4b19      	ldr	r3, [pc, #100]	; (8005a5c <_ZN5SCARA3runEv+0xa8c>)
 80059f6:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
				flag = 6;
 80059fa:	6879      	ldr	r1, [r7, #4]
 80059fc:	f04f 0200 	mov.w	r2, #0
 8005a00:	4b15      	ldr	r3, [pc, #84]	; (8005a58 <_ZN5SCARA3runEv+0xa88>)
 8005a02:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
 8005a06:	e01d      	b.n	8005a44 <_ZN5SCARA3runEv+0xa74>
			}else if (step_3 == 0 && flag == 6){
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 8005a0e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005a12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a16:	f47f aafe 	bne.w	8005016 <_ZN5SCARA3runEv+0x46>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	ed93 7b2a 	vldr	d7, [r3, #168]	; 0xa8
 8005a20:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 8005a24:	eeb4 7b46 	vcmp.f64	d7, d6
 8005a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a2c:	f47f aaf3 	bne.w	8005016 <_ZN5SCARA3runEv+0x46>
				flag =0 ;
 8005a30:	6879      	ldr	r1, [r7, #4]
 8005a32:	f04f 0200 	mov.w	r2, #0
 8005a36:	f04f 0300 	mov.w	r3, #0
 8005a3a:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
 8005a3e:	f7ff baea 	b.w	8005016 <_ZN5SCARA3runEv+0x46>
						break;
 8005a42:	bf00      	nop
	while(flag != 0 || step_3 != 0){
 8005a44:	f7ff bae7 	b.w	8005016 <_ZN5SCARA3runEv+0x46>
			}
		}
	}
}
 8005a48:	bf00      	nop
 8005a4a:	3708      	adds	r7, #8
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}
 8005a50:	00000000 	.word	0x00000000
 8005a54:	40622000 	.word	0x40622000
 8005a58:	40180000 	.word	0x40180000
 8005a5c:	c0240000 	.word	0xc0240000

08005a60 <_ZN5SCARA11timer_delayEi>:

void SCARA::timer_delay(int sec){
 8005a60:	b480      	push	{r7}
 8005a62:	b083      	sub	sp, #12
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	6039      	str	r1, [r7, #0]
	SCARA::timer_flag = true;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	701a      	strb	r2, [r3, #0]
	while(SCARA::timer_count <= sec*1000);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	685a      	ldr	r2, [r3, #4]
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005a7a:	fb01 f303 	mul.w	r3, r1, r3
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	dc00      	bgt.n	8005a84 <_ZN5SCARA11timer_delayEi+0x24>
 8005a82:	e7f5      	b.n	8005a70 <_ZN5SCARA11timer_delayEi+0x10>
	SCARA::timer_count =0;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2200      	movs	r2, #0
 8005a88:	605a      	str	r2, [r3, #4]
	SCARA::timer_flag = false;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	701a      	strb	r2, [r3, #0]
}
 8005a90:	bf00      	nop
 8005a92:	370c      	adds	r7, #12
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr
 8005a9c:	0000      	movs	r0, r0
	...

08005aa0 <_ZN5SCARA11count_atan2Edd>:

double SCARA::count_atan2(double x, double y)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b08a      	sub	sp, #40	; 0x28
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6178      	str	r0, [r7, #20]
 8005aa8:	ed87 0b02 	vstr	d0, [r7, #8]
 8005aac:	ed87 1b00 	vstr	d1, [r7]
 double atan2;
 double temp = y/x;
 8005ab0:	ed97 5b00 	vldr	d5, [r7]
 8005ab4:	ed97 6b02 	vldr	d6, [r7, #8]
 8005ab8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005abc:	ed87 7b06 	vstr	d7, [r7, #24]
 if(x > 0){
 8005ac0:	ed97 7b02 	vldr	d7, [r7, #8]
 8005ac4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005ac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005acc:	dd10      	ble.n	8005af0 <_ZN5SCARA11count_atan2Edd+0x50>
   atan2 = (atan(temp)*180)/PI;
 8005ace:	ed97 0b06 	vldr	d0, [r7, #24]
 8005ad2:	f00b fa45 	bl	8010f60 <atan>
 8005ad6:	eeb0 7b40 	vmov.f64	d7, d0
 8005ada:	ed9f 6b41 	vldr	d6, [pc, #260]	; 8005be0 <_ZN5SCARA11count_atan2Edd+0x140>
 8005ade:	ee27 6b06 	vmul.f64	d6, d7, d6
 8005ae2:	ed9f 5b41 	vldr	d5, [pc, #260]	; 8005be8 <_ZN5SCARA11count_atan2Edd+0x148>
 8005ae6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8005aea:	ed87 7b08 	vstr	d7, [r7, #32]
 8005aee:	e06c      	b.n	8005bca <_ZN5SCARA11count_atan2Edd+0x12a>
 }
    else if(y >= 0 && x < 0){
 8005af0:	ed97 7b00 	vldr	d7, [r7]
 8005af4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005afc:	db1b      	blt.n	8005b36 <_ZN5SCARA11count_atan2Edd+0x96>
 8005afe:	ed97 7b02 	vldr	d7, [r7, #8]
 8005b02:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005b06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b0a:	d514      	bpl.n	8005b36 <_ZN5SCARA11count_atan2Edd+0x96>
        atan2 = (atan(temp)*180)/PI + 180;
 8005b0c:	ed97 0b06 	vldr	d0, [r7, #24]
 8005b10:	f00b fa26 	bl	8010f60 <atan>
 8005b14:	eeb0 7b40 	vmov.f64	d7, d0
 8005b18:	ed9f 6b31 	vldr	d6, [pc, #196]	; 8005be0 <_ZN5SCARA11count_atan2Edd+0x140>
 8005b1c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8005b20:	ed9f 5b31 	vldr	d5, [pc, #196]	; 8005be8 <_ZN5SCARA11count_atan2Edd+0x148>
 8005b24:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8005b28:	ed9f 6b2d 	vldr	d6, [pc, #180]	; 8005be0 <_ZN5SCARA11count_atan2Edd+0x140>
 8005b2c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005b30:	ed87 7b08 	vstr	d7, [r7, #32]
 8005b34:	e049      	b.n	8005bca <_ZN5SCARA11count_atan2Edd+0x12a>
    }
    else if(y < 0 && x < 0){
 8005b36:	ed97 7b00 	vldr	d7, [r7]
 8005b3a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b42:	d51b      	bpl.n	8005b7c <_ZN5SCARA11count_atan2Edd+0xdc>
 8005b44:	ed97 7b02 	vldr	d7, [r7, #8]
 8005b48:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b50:	d514      	bpl.n	8005b7c <_ZN5SCARA11count_atan2Edd+0xdc>
        atan2 = (atan(temp)*180/PI - 180);
 8005b52:	ed97 0b06 	vldr	d0, [r7, #24]
 8005b56:	f00b fa03 	bl	8010f60 <atan>
 8005b5a:	eeb0 7b40 	vmov.f64	d7, d0
 8005b5e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8005be0 <_ZN5SCARA11count_atan2Edd+0x140>
 8005b62:	ee27 6b06 	vmul.f64	d6, d7, d6
 8005b66:	ed9f 5b20 	vldr	d5, [pc, #128]	; 8005be8 <_ZN5SCARA11count_atan2Edd+0x148>
 8005b6a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8005b6e:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 8005be0 <_ZN5SCARA11count_atan2Edd+0x140>
 8005b72:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005b76:	ed87 7b08 	vstr	d7, [r7, #32]
 8005b7a:	e026      	b.n	8005bca <_ZN5SCARA11count_atan2Edd+0x12a>
    }
    else if(y > 0 && x == 0){
 8005b7c:	ed97 7b00 	vldr	d7, [r7]
 8005b80:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005b84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b88:	dd0c      	ble.n	8005ba4 <_ZN5SCARA11count_atan2Edd+0x104>
 8005b8a:	ed97 7b02 	vldr	d7, [r7, #8]
 8005b8e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b96:	d105      	bne.n	8005ba4 <_ZN5SCARA11count_atan2Edd+0x104>
        atan2 = 180/2;
 8005b98:	f04f 0200 	mov.w	r2, #0
 8005b9c:	4b14      	ldr	r3, [pc, #80]	; (8005bf0 <_ZN5SCARA11count_atan2Edd+0x150>)
 8005b9e:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8005ba2:	e012      	b.n	8005bca <_ZN5SCARA11count_atan2Edd+0x12a>
    }
    else if(y < 0 && x == 0){
 8005ba4:	ed97 7b00 	vldr	d7, [r7]
 8005ba8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bb0:	d50b      	bpl.n	8005bca <_ZN5SCARA11count_atan2Edd+0x12a>
 8005bb2:	ed97 7b02 	vldr	d7, [r7, #8]
 8005bb6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bbe:	d104      	bne.n	8005bca <_ZN5SCARA11count_atan2Edd+0x12a>
        atan2 = -180/2;
 8005bc0:	f04f 0200 	mov.w	r2, #0
 8005bc4:	4b0b      	ldr	r3, [pc, #44]	; (8005bf4 <_ZN5SCARA11count_atan2Edd+0x154>)
 8005bc6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    }
 return atan2;
 8005bca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005bce:	ec43 2b17 	vmov	d7, r2, r3
}
 8005bd2:	eeb0 0b47 	vmov.f64	d0, d7
 8005bd6:	3728      	adds	r7, #40	; 0x28
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}
 8005bdc:	f3af 8000 	nop.w
 8005be0:	00000000 	.word	0x00000000
 8005be4:	40668000 	.word	0x40668000
 8005be8:	54442d18 	.word	0x54442d18
 8005bec:	400921fb 	.word	0x400921fb
 8005bf0:	40568000 	.word	0x40568000
 8005bf4:	c0568000 	.word	0xc0568000

08005bf8 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b084      	sub	sp, #16
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	ed87 0b02 	vstr	d0, [r7, #8]
 8005c02:	6078      	str	r0, [r7, #4]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	ee07 3a90 	vmov	s15, r3
 8005c0a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8005c0e:	eeb0 1b47 	vmov.f64	d1, d7
 8005c12:	ed97 0b02 	vldr	d0, [r7, #8]
 8005c16:	f00a ff4f 	bl	8010ab8 <pow>
 8005c1a:	eeb0 7b40 	vmov.f64	d7, d0
    }
 8005c1e:	eeb0 0b47 	vmov.f64	d0, d7
 8005c22:	3710      	adds	r7, #16
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}

08005c28 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b082      	sub	sp, #8
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	6039      	str	r1, [r7, #0]
      return pow(__type(__x), __type(__y));
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	ee07 3a90 	vmov	s15, r3
 8005c38:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	ee06 3a90 	vmov	s13, r3
 8005c42:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8005c46:	eeb0 1b46 	vmov.f64	d1, d6
 8005c4a:	eeb0 0b47 	vmov.f64	d0, d7
 8005c4e:	f00a ff33 	bl	8010ab8 <pow>
 8005c52:	eeb0 7b40 	vmov.f64	d7, d0
    }
 8005c56:	eeb0 0b47 	vmov.f64	d0, d7
 8005c5a:	3708      	adds	r7, #8
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}

08005c60 <_ZN5SCARA12count_theta2Edd>:

double SCARA::count_theta2(double x, double y)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	ed2d 8b02 	vpush	{d8}
 8005c66:	b08a      	sub	sp, #40	; 0x28
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6178      	str	r0, [r7, #20]
 8005c6c:	ed87 0b02 	vstr	d0, [r7, #8]
 8005c70:	ed87 1b00 	vstr	d1, [r7]
 double theta2;
 double temp;
 temp = (double)(pow(x,2) + pow(y,2) - pow(length1,2) - pow(length2,2));
 8005c74:	2002      	movs	r0, #2
 8005c76:	ed97 0b02 	vldr	d0, [r7, #8]
 8005c7a:	f7ff ffbd 	bl	8005bf8 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8005c7e:	eeb0 8b40 	vmov.f64	d8, d0
 8005c82:	2002      	movs	r0, #2
 8005c84:	ed97 0b00 	vldr	d0, [r7]
 8005c88:	f7ff ffb6 	bl	8005bf8 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8005c8c:	eeb0 7b40 	vmov.f64	d7, d0
 8005c90:	ee38 8b07 	vadd.f64	d8, d8, d7
 8005c94:	2102      	movs	r1, #2
 8005c96:	20be      	movs	r0, #190	; 0xbe
 8005c98:	f7ff ffc6 	bl	8005c28 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8005c9c:	eeb0 7b40 	vmov.f64	d7, d0
 8005ca0:	ee38 8b47 	vsub.f64	d8, d8, d7
 8005ca4:	2102      	movs	r1, #2
 8005ca6:	208c      	movs	r0, #140	; 0x8c
 8005ca8:	f7ff ffbe 	bl	8005c28 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8005cac:	eeb0 7b40 	vmov.f64	d7, d0
 8005cb0:	ee38 7b47 	vsub.f64	d7, d8, d7
 8005cb4:	ed87 7b08 	vstr	d7, [r7, #32]
 temp /= (double)(2*length1*length2);
 8005cb8:	ed97 6b08 	vldr	d6, [r7, #32]
 8005cbc:	ed9f 5b10 	vldr	d5, [pc, #64]	; 8005d00 <_ZN5SCARA12count_theta2Edd+0xa0>
 8005cc0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8005cc4:	ed87 7b08 	vstr	d7, [r7, #32]
 theta2 = (acos(temp)*180)/PI;
 8005cc8:	ed97 0b08 	vldr	d0, [r7, #32]
 8005ccc:	f00b fa4c 	bl	8011168 <acos>
 8005cd0:	eeb0 7b40 	vmov.f64	d7, d0
 8005cd4:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 8005d08 <_ZN5SCARA12count_theta2Edd+0xa8>
 8005cd8:	ee27 6b06 	vmul.f64	d6, d7, d6
 8005cdc:	ed9f 5b0c 	vldr	d5, [pc, #48]	; 8005d10 <_ZN5SCARA12count_theta2Edd+0xb0>
 8005ce0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8005ce4:	ed87 7b06 	vstr	d7, [r7, #24]
 return theta2;
 8005ce8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005cec:	ec43 2b17 	vmov	d7, r2, r3
}
 8005cf0:	eeb0 0b47 	vmov.f64	d0, d7
 8005cf4:	3728      	adds	r7, #40	; 0x28
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	ecbd 8b02 	vpop	{d8}
 8005cfc:	bd80      	pop	{r7, pc}
 8005cfe:	bf00      	nop
 8005d00:	00000000 	.word	0x00000000
 8005d04:	40e9fa00 	.word	0x40e9fa00
 8005d08:	00000000 	.word	0x00000000
 8005d0c:	40668000 	.word	0x40668000
 8005d10:	54442d18 	.word	0x54442d18
 8005d14:	400921fb 	.word	0x400921fb

08005d18 <_ZN5SCARA9count_phiEdd>:

double SCARA::count_phi(double x, double y)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	ed2d 8b02 	vpush	{d8}
 8005d1e:	b08a      	sub	sp, #40	; 0x28
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6178      	str	r0, [r7, #20]
 8005d24:	ed87 0b02 	vstr	d0, [r7, #8]
 8005d28:	ed87 1b00 	vstr	d1, [r7]
 double phi;
 double temp = pow(length2,2) - pow(length1,2) - pow(x,2) - pow(y,2);
 8005d2c:	2102      	movs	r1, #2
 8005d2e:	208c      	movs	r0, #140	; 0x8c
 8005d30:	f7ff ff7a 	bl	8005c28 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8005d34:	eeb0 8b40 	vmov.f64	d8, d0
 8005d38:	2102      	movs	r1, #2
 8005d3a:	20be      	movs	r0, #190	; 0xbe
 8005d3c:	f7ff ff74 	bl	8005c28 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8005d40:	eeb0 7b40 	vmov.f64	d7, d0
 8005d44:	ee38 8b47 	vsub.f64	d8, d8, d7
 8005d48:	2002      	movs	r0, #2
 8005d4a:	ed97 0b02 	vldr	d0, [r7, #8]
 8005d4e:	f7ff ff53 	bl	8005bf8 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8005d52:	eeb0 7b40 	vmov.f64	d7, d0
 8005d56:	ee38 8b47 	vsub.f64	d8, d8, d7
 8005d5a:	2002      	movs	r0, #2
 8005d5c:	ed97 0b00 	vldr	d0, [r7]
 8005d60:	f7ff ff4a 	bl	8005bf8 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8005d64:	eeb0 7b40 	vmov.f64	d7, d0
 8005d68:	ee38 7b47 	vsub.f64	d7, d8, d7
 8005d6c:	ed87 7b08 	vstr	d7, [r7, #32]
 temp /= (double)(-2*length1*sqrt(pow(x,2)+pow(y,2)));
 8005d70:	2002      	movs	r0, #2
 8005d72:	ed97 0b02 	vldr	d0, [r7, #8]
 8005d76:	f7ff ff3f 	bl	8005bf8 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8005d7a:	eeb0 8b40 	vmov.f64	d8, d0
 8005d7e:	2002      	movs	r0, #2
 8005d80:	ed97 0b00 	vldr	d0, [r7]
 8005d84:	f7ff ff38 	bl	8005bf8 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8005d88:	eeb0 7b40 	vmov.f64	d7, d0
 8005d8c:	ee38 7b07 	vadd.f64	d7, d8, d7
 8005d90:	eeb0 0b47 	vmov.f64	d0, d7
 8005d94:	f00b fa14 	bl	80111c0 <sqrt>
 8005d98:	eeb0 7b40 	vmov.f64	d7, d0
 8005d9c:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8005de8 <_ZN5SCARA9count_phiEdd+0xd0>
 8005da0:	ee27 6b06 	vmul.f64	d6, d7, d6
 8005da4:	ed97 5b08 	vldr	d5, [r7, #32]
 8005da8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005dac:	ed87 7b08 	vstr	d7, [r7, #32]
 phi = (acos(temp)*180)/PI;
 8005db0:	ed97 0b08 	vldr	d0, [r7, #32]
 8005db4:	f00b f9d8 	bl	8011168 <acos>
 8005db8:	eeb0 7b40 	vmov.f64	d7, d0
 8005dbc:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 8005df0 <_ZN5SCARA9count_phiEdd+0xd8>
 8005dc0:	ee27 6b06 	vmul.f64	d6, d7, d6
 8005dc4:	ed9f 5b0c 	vldr	d5, [pc, #48]	; 8005df8 <_ZN5SCARA9count_phiEdd+0xe0>
 8005dc8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8005dcc:	ed87 7b06 	vstr	d7, [r7, #24]
 return phi;
 8005dd0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005dd4:	ec43 2b17 	vmov	d7, r2, r3
}
 8005dd8:	eeb0 0b47 	vmov.f64	d0, d7
 8005ddc:	3728      	adds	r7, #40	; 0x28
 8005dde:	46bd      	mov	sp, r7
 8005de0:	ecbd 8b02 	vpop	{d8}
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop
 8005de8:	00000000 	.word	0x00000000
 8005dec:	c077c000 	.word	0xc077c000
 8005df0:	00000000 	.word	0x00000000
 8005df4:	40668000 	.word	0x40668000
 8005df8:	54442d18 	.word	0x54442d18
 8005dfc:	400921fb 	.word	0x400921fb

08005e00 <_Z41__static_initialization_and_destruction_0ii>:
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b082      	sub	sp, #8
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	6039      	str	r1, [r7, #0]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d107      	bne.n	8005e20 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d102      	bne.n	8005e20 <_Z41__static_initialization_and_destruction_0ii+0x20>
SCARA sc;
 8005e1a:	4803      	ldr	r0, [pc, #12]	; (8005e28 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8005e1c:	f7ff f818 	bl	8004e50 <_ZN5SCARAC1Ev>
}
 8005e20:	bf00      	nop
 8005e22:	3708      	adds	r7, #8
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}
 8005e28:	24002250 	.word	0x24002250

08005e2c <_GLOBAL__sub_I_sc>:
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005e34:	2001      	movs	r0, #1
 8005e36:	f7ff ffe3 	bl	8005e00 <_Z41__static_initialization_and_destruction_0ii>
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b082      	sub	sp, #8
 8005e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e42:	4b0d      	ldr	r3, [pc, #52]	; (8005e78 <HAL_MspInit+0x3c>)
 8005e44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005e48:	4a0b      	ldr	r2, [pc, #44]	; (8005e78 <HAL_MspInit+0x3c>)
 8005e4a:	f043 0302 	orr.w	r3, r3, #2
 8005e4e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005e52:	4b09      	ldr	r3, [pc, #36]	; (8005e78 <HAL_MspInit+0x3c>)
 8005e54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005e58:	f003 0302 	and.w	r3, r3, #2
 8005e5c:	607b      	str	r3, [r7, #4]
 8005e5e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8005e60:	2200      	movs	r2, #0
 8005e62:	2100      	movs	r1, #0
 8005e64:	2005      	movs	r0, #5
 8005e66:	f001 f90c 	bl	8007082 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8005e6a:	2005      	movs	r0, #5
 8005e6c:	f001 f923 	bl	80070b6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005e70:	bf00      	nop
 8005e72:	3708      	adds	r7, #8
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}
 8005e78:	58024400 	.word	0x58024400

08005e7c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b090      	sub	sp, #64	; 0x40
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005e88:	2200      	movs	r2, #0
 8005e8a:	601a      	str	r2, [r3, #0]
 8005e8c:	605a      	str	r2, [r3, #4]
 8005e8e:	609a      	str	r2, [r3, #8]
 8005e90:	60da      	str	r2, [r3, #12]
 8005e92:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e9c:	d14e      	bne.n	8005f3c <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005e9e:	4b77      	ldr	r3, [pc, #476]	; (800607c <HAL_TIM_Encoder_MspInit+0x200>)
 8005ea0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005ea4:	4a75      	ldr	r2, [pc, #468]	; (800607c <HAL_TIM_Encoder_MspInit+0x200>)
 8005ea6:	f043 0301 	orr.w	r3, r3, #1
 8005eaa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005eae:	4b73      	ldr	r3, [pc, #460]	; (800607c <HAL_TIM_Encoder_MspInit+0x200>)
 8005eb0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005eb4:	f003 0301 	and.w	r3, r3, #1
 8005eb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005eba:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ebc:	4b6f      	ldr	r3, [pc, #444]	; (800607c <HAL_TIM_Encoder_MspInit+0x200>)
 8005ebe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005ec2:	4a6e      	ldr	r2, [pc, #440]	; (800607c <HAL_TIM_Encoder_MspInit+0x200>)
 8005ec4:	f043 0301 	orr.w	r3, r3, #1
 8005ec8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005ecc:	4b6b      	ldr	r3, [pc, #428]	; (800607c <HAL_TIM_Encoder_MspInit+0x200>)
 8005ece:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005ed2:	f003 0301 	and.w	r3, r3, #1
 8005ed6:	627b      	str	r3, [r7, #36]	; 0x24
 8005ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005eda:	4b68      	ldr	r3, [pc, #416]	; (800607c <HAL_TIM_Encoder_MspInit+0x200>)
 8005edc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005ee0:	4a66      	ldr	r2, [pc, #408]	; (800607c <HAL_TIM_Encoder_MspInit+0x200>)
 8005ee2:	f043 0302 	orr.w	r3, r3, #2
 8005ee6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005eea:	4b64      	ldr	r3, [pc, #400]	; (800607c <HAL_TIM_Encoder_MspInit+0x200>)
 8005eec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005ef0:	f003 0302 	and.w	r3, r3, #2
 8005ef4:	623b      	str	r3, [r7, #32]
 8005ef6:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15(JTDI)     ------> TIM2_CH1
    PB3(JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005ef8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005efc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005efe:	2302      	movs	r3, #2
 8005f00:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f02:	2300      	movs	r3, #0
 8005f04:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f06:	2300      	movs	r3, #0
 8005f08:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005f12:	4619      	mov	r1, r3
 8005f14:	485a      	ldr	r0, [pc, #360]	; (8006080 <HAL_TIM_Encoder_MspInit+0x204>)
 8005f16:	f004 f8e7 	bl	800a0e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005f1a:	2308      	movs	r3, #8
 8005f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f1e:	2302      	movs	r3, #2
 8005f20:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f22:	2300      	movs	r3, #0
 8005f24:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f26:	2300      	movs	r3, #0
 8005f28:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005f32:	4619      	mov	r1, r3
 8005f34:	4853      	ldr	r0, [pc, #332]	; (8006084 <HAL_TIM_Encoder_MspInit+0x208>)
 8005f36:	f004 f8d7 	bl	800a0e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8005f3a:	e09b      	b.n	8006074 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM3)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a51      	ldr	r2, [pc, #324]	; (8006088 <HAL_TIM_Encoder_MspInit+0x20c>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d12e      	bne.n	8005fa4 <HAL_TIM_Encoder_MspInit+0x128>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005f46:	4b4d      	ldr	r3, [pc, #308]	; (800607c <HAL_TIM_Encoder_MspInit+0x200>)
 8005f48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005f4c:	4a4b      	ldr	r2, [pc, #300]	; (800607c <HAL_TIM_Encoder_MspInit+0x200>)
 8005f4e:	f043 0302 	orr.w	r3, r3, #2
 8005f52:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005f56:	4b49      	ldr	r3, [pc, #292]	; (800607c <HAL_TIM_Encoder_MspInit+0x200>)
 8005f58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005f5c:	f003 0302 	and.w	r3, r3, #2
 8005f60:	61fb      	str	r3, [r7, #28]
 8005f62:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f64:	4b45      	ldr	r3, [pc, #276]	; (800607c <HAL_TIM_Encoder_MspInit+0x200>)
 8005f66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005f6a:	4a44      	ldr	r2, [pc, #272]	; (800607c <HAL_TIM_Encoder_MspInit+0x200>)
 8005f6c:	f043 0302 	orr.w	r3, r3, #2
 8005f70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005f74:	4b41      	ldr	r3, [pc, #260]	; (800607c <HAL_TIM_Encoder_MspInit+0x200>)
 8005f76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005f7a:	f003 0302 	and.w	r3, r3, #2
 8005f7e:	61bb      	str	r3, [r7, #24]
 8005f80:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005f82:	2330      	movs	r3, #48	; 0x30
 8005f84:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f86:	2302      	movs	r3, #2
 8005f88:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005f92:	2302      	movs	r3, #2
 8005f94:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005f9a:	4619      	mov	r1, r3
 8005f9c:	4839      	ldr	r0, [pc, #228]	; (8006084 <HAL_TIM_Encoder_MspInit+0x208>)
 8005f9e:	f004 f8a3 	bl	800a0e8 <HAL_GPIO_Init>
}
 8005fa2:	e067      	b.n	8006074 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM4)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a38      	ldr	r2, [pc, #224]	; (800608c <HAL_TIM_Encoder_MspInit+0x210>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d12f      	bne.n	800600e <HAL_TIM_Encoder_MspInit+0x192>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005fae:	4b33      	ldr	r3, [pc, #204]	; (800607c <HAL_TIM_Encoder_MspInit+0x200>)
 8005fb0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005fb4:	4a31      	ldr	r2, [pc, #196]	; (800607c <HAL_TIM_Encoder_MspInit+0x200>)
 8005fb6:	f043 0304 	orr.w	r3, r3, #4
 8005fba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005fbe:	4b2f      	ldr	r3, [pc, #188]	; (800607c <HAL_TIM_Encoder_MspInit+0x200>)
 8005fc0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005fc4:	f003 0304 	and.w	r3, r3, #4
 8005fc8:	617b      	str	r3, [r7, #20]
 8005fca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005fcc:	4b2b      	ldr	r3, [pc, #172]	; (800607c <HAL_TIM_Encoder_MspInit+0x200>)
 8005fce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005fd2:	4a2a      	ldr	r2, [pc, #168]	; (800607c <HAL_TIM_Encoder_MspInit+0x200>)
 8005fd4:	f043 0308 	orr.w	r3, r3, #8
 8005fd8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005fdc:	4b27      	ldr	r3, [pc, #156]	; (800607c <HAL_TIM_Encoder_MspInit+0x200>)
 8005fde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005fe2:	f003 0308 	and.w	r3, r3, #8
 8005fe6:	613b      	str	r3, [r7, #16]
 8005fe8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8005fea:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005fee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ff0:	2302      	movs	r3, #2
 8005ff2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005ffc:	2302      	movs	r3, #2
 8005ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006000:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006004:	4619      	mov	r1, r3
 8006006:	4822      	ldr	r0, [pc, #136]	; (8006090 <HAL_TIM_Encoder_MspInit+0x214>)
 8006008:	f004 f86e 	bl	800a0e8 <HAL_GPIO_Init>
}
 800600c:	e032      	b.n	8006074 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM5)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a20      	ldr	r2, [pc, #128]	; (8006094 <HAL_TIM_Encoder_MspInit+0x218>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d12d      	bne.n	8006074 <HAL_TIM_Encoder_MspInit+0x1f8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8006018:	4b18      	ldr	r3, [pc, #96]	; (800607c <HAL_TIM_Encoder_MspInit+0x200>)
 800601a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800601e:	4a17      	ldr	r2, [pc, #92]	; (800607c <HAL_TIM_Encoder_MspInit+0x200>)
 8006020:	f043 0308 	orr.w	r3, r3, #8
 8006024:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006028:	4b14      	ldr	r3, [pc, #80]	; (800607c <HAL_TIM_Encoder_MspInit+0x200>)
 800602a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800602e:	f003 0308 	and.w	r3, r3, #8
 8006032:	60fb      	str	r3, [r7, #12]
 8006034:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006036:	4b11      	ldr	r3, [pc, #68]	; (800607c <HAL_TIM_Encoder_MspInit+0x200>)
 8006038:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800603c:	4a0f      	ldr	r2, [pc, #60]	; (800607c <HAL_TIM_Encoder_MspInit+0x200>)
 800603e:	f043 0301 	orr.w	r3, r3, #1
 8006042:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006046:	4b0d      	ldr	r3, [pc, #52]	; (800607c <HAL_TIM_Encoder_MspInit+0x200>)
 8006048:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800604c:	f003 0301 	and.w	r3, r3, #1
 8006050:	60bb      	str	r3, [r7, #8]
 8006052:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006054:	2303      	movs	r3, #3
 8006056:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006058:	2302      	movs	r3, #2
 800605a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800605c:	2300      	movs	r3, #0
 800605e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006060:	2300      	movs	r3, #0
 8006062:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8006064:	2302      	movs	r3, #2
 8006066:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006068:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800606c:	4619      	mov	r1, r3
 800606e:	4804      	ldr	r0, [pc, #16]	; (8006080 <HAL_TIM_Encoder_MspInit+0x204>)
 8006070:	f004 f83a 	bl	800a0e8 <HAL_GPIO_Init>
}
 8006074:	bf00      	nop
 8006076:	3740      	adds	r7, #64	; 0x40
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}
 800607c:	58024400 	.word	0x58024400
 8006080:	58020000 	.word	0x58020000
 8006084:	58020400 	.word	0x58020400
 8006088:	40000400 	.word	0x40000400
 800608c:	40000800 	.word	0x40000800
 8006090:	58020c00 	.word	0x58020c00
 8006094:	40000c00 	.word	0x40000c00

08006098 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b086      	sub	sp, #24
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a42      	ldr	r2, [pc, #264]	; (80061b0 <HAL_TIM_Base_MspInit+0x118>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d117      	bne.n	80060da <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80060aa:	4b42      	ldr	r3, [pc, #264]	; (80061b4 <HAL_TIM_Base_MspInit+0x11c>)
 80060ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80060b0:	4a40      	ldr	r2, [pc, #256]	; (80061b4 <HAL_TIM_Base_MspInit+0x11c>)
 80060b2:	f043 0320 	orr.w	r3, r3, #32
 80060b6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80060ba:	4b3e      	ldr	r3, [pc, #248]	; (80061b4 <HAL_TIM_Base_MspInit+0x11c>)
 80060bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80060c0:	f003 0320 	and.w	r3, r3, #32
 80060c4:	617b      	str	r3, [r7, #20]
 80060c6:	697b      	ldr	r3, [r7, #20]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80060c8:	2200      	movs	r2, #0
 80060ca:	2100      	movs	r1, #0
 80060cc:	2037      	movs	r0, #55	; 0x37
 80060ce:	f000 ffd8 	bl	8007082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80060d2:	2037      	movs	r0, #55	; 0x37
 80060d4:	f000 ffef 	bl	80070b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80060d8:	e065      	b.n	80061a6 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM8)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a36      	ldr	r2, [pc, #216]	; (80061b8 <HAL_TIM_Base_MspInit+0x120>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d127      	bne.n	8006134 <HAL_TIM_Base_MspInit+0x9c>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80060e4:	4b33      	ldr	r3, [pc, #204]	; (80061b4 <HAL_TIM_Base_MspInit+0x11c>)
 80060e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80060ea:	4a32      	ldr	r2, [pc, #200]	; (80061b4 <HAL_TIM_Base_MspInit+0x11c>)
 80060ec:	f043 0302 	orr.w	r3, r3, #2
 80060f0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80060f4:	4b2f      	ldr	r3, [pc, #188]	; (80061b4 <HAL_TIM_Base_MspInit+0x11c>)
 80060f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80060fa:	f003 0302 	and.w	r3, r3, #2
 80060fe:	613b      	str	r3, [r7, #16]
 8006100:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8006102:	2200      	movs	r2, #0
 8006104:	2100      	movs	r1, #0
 8006106:	202b      	movs	r0, #43	; 0x2b
 8006108:	f000 ffbb 	bl	8007082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 800610c:	202b      	movs	r0, #43	; 0x2b
 800610e:	f000 ffd2 	bl	80070b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8006112:	2200      	movs	r2, #0
 8006114:	2100      	movs	r1, #0
 8006116:	202c      	movs	r0, #44	; 0x2c
 8006118:	f000 ffb3 	bl	8007082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800611c:	202c      	movs	r0, #44	; 0x2c
 800611e:	f000 ffca 	bl	80070b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8006122:	2200      	movs	r2, #0
 8006124:	2100      	movs	r1, #0
 8006126:	202d      	movs	r0, #45	; 0x2d
 8006128:	f000 ffab 	bl	8007082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800612c:	202d      	movs	r0, #45	; 0x2d
 800612e:	f000 ffc2 	bl	80070b6 <HAL_NVIC_EnableIRQ>
}
 8006132:	e038      	b.n	80061a6 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM13)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a20      	ldr	r2, [pc, #128]	; (80061bc <HAL_TIM_Base_MspInit+0x124>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d117      	bne.n	800616e <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800613e:	4b1d      	ldr	r3, [pc, #116]	; (80061b4 <HAL_TIM_Base_MspInit+0x11c>)
 8006140:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006144:	4a1b      	ldr	r2, [pc, #108]	; (80061b4 <HAL_TIM_Base_MspInit+0x11c>)
 8006146:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800614a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800614e:	4b19      	ldr	r3, [pc, #100]	; (80061b4 <HAL_TIM_Base_MspInit+0x11c>)
 8006150:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006154:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006158:	60fb      	str	r3, [r7, #12]
 800615a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800615c:	2200      	movs	r2, #0
 800615e:	2100      	movs	r1, #0
 8006160:	202c      	movs	r0, #44	; 0x2c
 8006162:	f000 ff8e 	bl	8007082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8006166:	202c      	movs	r0, #44	; 0x2c
 8006168:	f000 ffa5 	bl	80070b6 <HAL_NVIC_EnableIRQ>
}
 800616c:	e01b      	b.n	80061a6 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM14)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a13      	ldr	r2, [pc, #76]	; (80061c0 <HAL_TIM_Base_MspInit+0x128>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d116      	bne.n	80061a6 <HAL_TIM_Base_MspInit+0x10e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8006178:	4b0e      	ldr	r3, [pc, #56]	; (80061b4 <HAL_TIM_Base_MspInit+0x11c>)
 800617a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800617e:	4a0d      	ldr	r2, [pc, #52]	; (80061b4 <HAL_TIM_Base_MspInit+0x11c>)
 8006180:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006184:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006188:	4b0a      	ldr	r3, [pc, #40]	; (80061b4 <HAL_TIM_Base_MspInit+0x11c>)
 800618a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800618e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006192:	60bb      	str	r3, [r7, #8]
 8006194:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8006196:	2200      	movs	r2, #0
 8006198:	2100      	movs	r1, #0
 800619a:	202d      	movs	r0, #45	; 0x2d
 800619c:	f000 ff71 	bl	8007082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80061a0:	202d      	movs	r0, #45	; 0x2d
 80061a2:	f000 ff88 	bl	80070b6 <HAL_NVIC_EnableIRQ>
}
 80061a6:	bf00      	nop
 80061a8:	3718      	adds	r7, #24
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}
 80061ae:	bf00      	nop
 80061b0:	40001400 	.word	0x40001400
 80061b4:	58024400 	.word	0x58024400
 80061b8:	40010400 	.word	0x40010400
 80061bc:	40001c00 	.word	0x40001c00
 80061c0:	40002000 	.word	0x40002000

080061c4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b086      	sub	sp, #24
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a2b      	ldr	r2, [pc, #172]	; (8006280 <HAL_TIM_PWM_MspInit+0xbc>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d117      	bne.n	8006206 <HAL_TIM_PWM_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 80061d6:	4b2b      	ldr	r3, [pc, #172]	; (8006284 <HAL_TIM_PWM_MspInit+0xc0>)
 80061d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80061dc:	4a29      	ldr	r2, [pc, #164]	; (8006284 <HAL_TIM_PWM_MspInit+0xc0>)
 80061de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061e2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80061e6:	4b27      	ldr	r3, [pc, #156]	; (8006284 <HAL_TIM_PWM_MspInit+0xc0>)
 80061e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80061ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061f0:	617b      	str	r3, [r7, #20]
 80061f2:	697b      	ldr	r3, [r7, #20]
    /* TIM12 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 80061f4:	2200      	movs	r2, #0
 80061f6:	2100      	movs	r1, #0
 80061f8:	202b      	movs	r0, #43	; 0x2b
 80061fa:	f000 ff42 	bl	8007082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80061fe:	202b      	movs	r0, #43	; 0x2b
 8006200:	f000 ff59 	bl	80070b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM23_MspInit 1 */

  /* USER CODE END TIM23_MspInit 1 */
  }

}
 8006204:	e038      	b.n	8006278 <HAL_TIM_PWM_MspInit+0xb4>
  else if(htim_pwm->Instance==TIM15)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a1f      	ldr	r2, [pc, #124]	; (8006288 <HAL_TIM_PWM_MspInit+0xc4>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d117      	bne.n	8006240 <HAL_TIM_PWM_MspInit+0x7c>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8006210:	4b1c      	ldr	r3, [pc, #112]	; (8006284 <HAL_TIM_PWM_MspInit+0xc0>)
 8006212:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006216:	4a1b      	ldr	r2, [pc, #108]	; (8006284 <HAL_TIM_PWM_MspInit+0xc0>)
 8006218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800621c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006220:	4b18      	ldr	r3, [pc, #96]	; (8006284 <HAL_TIM_PWM_MspInit+0xc0>)
 8006222:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006226:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800622a:	613b      	str	r3, [r7, #16]
 800622c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 800622e:	2200      	movs	r2, #0
 8006230:	2100      	movs	r1, #0
 8006232:	2074      	movs	r0, #116	; 0x74
 8006234:	f000 ff25 	bl	8007082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8006238:	2074      	movs	r0, #116	; 0x74
 800623a:	f000 ff3c 	bl	80070b6 <HAL_NVIC_EnableIRQ>
}
 800623e:	e01b      	b.n	8006278 <HAL_TIM_PWM_MspInit+0xb4>
  else if(htim_pwm->Instance==TIM23)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a11      	ldr	r2, [pc, #68]	; (800628c <HAL_TIM_PWM_MspInit+0xc8>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d116      	bne.n	8006278 <HAL_TIM_PWM_MspInit+0xb4>
    __HAL_RCC_TIM23_CLK_ENABLE();
 800624a:	4b0e      	ldr	r3, [pc, #56]	; (8006284 <HAL_TIM_PWM_MspInit+0xc0>)
 800624c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8006250:	4a0c      	ldr	r2, [pc, #48]	; (8006284 <HAL_TIM_PWM_MspInit+0xc0>)
 8006252:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006256:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800625a:	4b0a      	ldr	r3, [pc, #40]	; (8006284 <HAL_TIM_PWM_MspInit+0xc0>)
 800625c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8006260:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006264:	60fb      	str	r3, [r7, #12]
 8006266:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM23_IRQn, 0, 0);
 8006268:	2200      	movs	r2, #0
 800626a:	2100      	movs	r1, #0
 800626c:	20a1      	movs	r0, #161	; 0xa1
 800626e:	f000 ff08 	bl	8007082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM23_IRQn);
 8006272:	20a1      	movs	r0, #161	; 0xa1
 8006274:	f000 ff1f 	bl	80070b6 <HAL_NVIC_EnableIRQ>
}
 8006278:	bf00      	nop
 800627a:	3718      	adds	r7, #24
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}
 8006280:	40001800 	.word	0x40001800
 8006284:	58024400 	.word	0x58024400
 8006288:	40014000 	.word	0x40014000
 800628c:	4000e000 	.word	0x4000e000

08006290 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b08a      	sub	sp, #40	; 0x28
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006298:	f107 0314 	add.w	r3, r7, #20
 800629c:	2200      	movs	r2, #0
 800629e:	601a      	str	r2, [r3, #0]
 80062a0:	605a      	str	r2, [r3, #4]
 80062a2:	609a      	str	r2, [r3, #8]
 80062a4:	60da      	str	r2, [r3, #12]
 80062a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM12)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a38      	ldr	r2, [pc, #224]	; (8006390 <HAL_TIM_MspPostInit+0x100>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d120      	bne.n	80062f4 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80062b2:	4b38      	ldr	r3, [pc, #224]	; (8006394 <HAL_TIM_MspPostInit+0x104>)
 80062b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80062b8:	4a36      	ldr	r2, [pc, #216]	; (8006394 <HAL_TIM_MspPostInit+0x104>)
 80062ba:	f043 0302 	orr.w	r3, r3, #2
 80062be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80062c2:	4b34      	ldr	r3, [pc, #208]	; (8006394 <HAL_TIM_MspPostInit+0x104>)
 80062c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80062c8:	f003 0302 	and.w	r3, r3, #2
 80062cc:	613b      	str	r3, [r7, #16]
 80062ce:	693b      	ldr	r3, [r7, #16]
    /**TIM12 GPIO Configuration
    PB14     ------> TIM12_CH1
    PB15     ------> TIM12_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80062d0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80062d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062d6:	2302      	movs	r3, #2
 80062d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062da:	2300      	movs	r3, #0
 80062dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80062de:	2300      	movs	r3, #0
 80062e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 80062e2:	2302      	movs	r3, #2
 80062e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80062e6:	f107 0314 	add.w	r3, r7, #20
 80062ea:	4619      	mov	r1, r3
 80062ec:	482a      	ldr	r0, [pc, #168]	; (8006398 <HAL_TIM_MspPostInit+0x108>)
 80062ee:	f003 fefb 	bl	800a0e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM23_MspPostInit 1 */

  /* USER CODE END TIM23_MspPostInit 1 */
  }

}
 80062f2:	e048      	b.n	8006386 <HAL_TIM_MspPostInit+0xf6>
  else if(htim->Instance==TIM15)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a28      	ldr	r2, [pc, #160]	; (800639c <HAL_TIM_MspPostInit+0x10c>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d11f      	bne.n	800633e <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80062fe:	4b25      	ldr	r3, [pc, #148]	; (8006394 <HAL_TIM_MspPostInit+0x104>)
 8006300:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006304:	4a23      	ldr	r2, [pc, #140]	; (8006394 <HAL_TIM_MspPostInit+0x104>)
 8006306:	f043 0310 	orr.w	r3, r3, #16
 800630a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800630e:	4b21      	ldr	r3, [pc, #132]	; (8006394 <HAL_TIM_MspPostInit+0x104>)
 8006310:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006314:	f003 0310 	and.w	r3, r3, #16
 8006318:	60fb      	str	r3, [r7, #12]
 800631a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800631c:	2360      	movs	r3, #96	; 0x60
 800631e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006320:	2302      	movs	r3, #2
 8006322:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006324:	2300      	movs	r3, #0
 8006326:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006328:	2300      	movs	r3, #0
 800632a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 800632c:	2304      	movs	r3, #4
 800632e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006330:	f107 0314 	add.w	r3, r7, #20
 8006334:	4619      	mov	r1, r3
 8006336:	481a      	ldr	r0, [pc, #104]	; (80063a0 <HAL_TIM_MspPostInit+0x110>)
 8006338:	f003 fed6 	bl	800a0e8 <HAL_GPIO_Init>
}
 800633c:	e023      	b.n	8006386 <HAL_TIM_MspPostInit+0xf6>
  else if(htim->Instance==TIM23)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a18      	ldr	r2, [pc, #96]	; (80063a4 <HAL_TIM_MspPostInit+0x114>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d11e      	bne.n	8006386 <HAL_TIM_MspPostInit+0xf6>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006348:	4b12      	ldr	r3, [pc, #72]	; (8006394 <HAL_TIM_MspPostInit+0x104>)
 800634a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800634e:	4a11      	ldr	r2, [pc, #68]	; (8006394 <HAL_TIM_MspPostInit+0x104>)
 8006350:	f043 0320 	orr.w	r3, r3, #32
 8006354:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006358:	4b0e      	ldr	r3, [pc, #56]	; (8006394 <HAL_TIM_MspPostInit+0x104>)
 800635a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800635e:	f003 0320 	and.w	r3, r3, #32
 8006362:	60bb      	str	r3, [r7, #8]
 8006364:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8006366:	2301      	movs	r3, #1
 8006368:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800636a:	2302      	movs	r3, #2
 800636c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800636e:	2300      	movs	r3, #0
 8006370:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006372:	2300      	movs	r3, #0
 8006374:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_TIM23;
 8006376:	230d      	movs	r3, #13
 8006378:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800637a:	f107 0314 	add.w	r3, r7, #20
 800637e:	4619      	mov	r1, r3
 8006380:	4809      	ldr	r0, [pc, #36]	; (80063a8 <HAL_TIM_MspPostInit+0x118>)
 8006382:	f003 feb1 	bl	800a0e8 <HAL_GPIO_Init>
}
 8006386:	bf00      	nop
 8006388:	3728      	adds	r7, #40	; 0x28
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}
 800638e:	bf00      	nop
 8006390:	40001800 	.word	0x40001800
 8006394:	58024400 	.word	0x58024400
 8006398:	58020400 	.word	0x58020400
 800639c:	40014000 	.word	0x40014000
 80063a0:	58021000 	.word	0x58021000
 80063a4:	4000e000 	.word	0x4000e000
 80063a8:	58021400 	.word	0x58021400

080063ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b0b6      	sub	sp, #216	; 0xd8
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80063b4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80063b8:	2200      	movs	r2, #0
 80063ba:	601a      	str	r2, [r3, #0]
 80063bc:	605a      	str	r2, [r3, #4]
 80063be:	609a      	str	r2, [r3, #8]
 80063c0:	60da      	str	r2, [r3, #12]
 80063c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80063c4:	f107 0310 	add.w	r3, r7, #16
 80063c8:	22b4      	movs	r2, #180	; 0xb4
 80063ca:	2100      	movs	r1, #0
 80063cc:	4618      	mov	r0, r3
 80063ce:	f00b f903 	bl	80115d8 <memset>
  if(huart->Instance==USART1)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a58      	ldr	r2, [pc, #352]	; (8006538 <HAL_UART_MspInit+0x18c>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	f040 80a8 	bne.w	800652e <HAL_UART_MspInit+0x182>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80063de:	2301      	movs	r3, #1
 80063e0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80063e2:	2300      	movs	r3, #0
 80063e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80063e8:	f107 0310 	add.w	r3, r7, #16
 80063ec:	4618      	mov	r0, r3
 80063ee:	f005 f8cb 	bl	800b588 <HAL_RCCEx_PeriphCLKConfig>
 80063f2:	4603      	mov	r3, r0
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d001      	beq.n	80063fc <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80063f8:	f7fb f94c 	bl	8001694 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80063fc:	4b4f      	ldr	r3, [pc, #316]	; (800653c <HAL_UART_MspInit+0x190>)
 80063fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006402:	4a4e      	ldr	r2, [pc, #312]	; (800653c <HAL_UART_MspInit+0x190>)
 8006404:	f043 0310 	orr.w	r3, r3, #16
 8006408:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800640c:	4b4b      	ldr	r3, [pc, #300]	; (800653c <HAL_UART_MspInit+0x190>)
 800640e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006412:	f003 0310 	and.w	r3, r3, #16
 8006416:	60fb      	str	r3, [r7, #12]
 8006418:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800641a:	4b48      	ldr	r3, [pc, #288]	; (800653c <HAL_UART_MspInit+0x190>)
 800641c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006420:	4a46      	ldr	r2, [pc, #280]	; (800653c <HAL_UART_MspInit+0x190>)
 8006422:	f043 0301 	orr.w	r3, r3, #1
 8006426:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800642a:	4b44      	ldr	r3, [pc, #272]	; (800653c <HAL_UART_MspInit+0x190>)
 800642c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006430:	f003 0301 	and.w	r3, r3, #1
 8006434:	60bb      	str	r3, [r7, #8]
 8006436:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8006438:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800643c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006440:	2302      	movs	r3, #2
 8006442:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006446:	2300      	movs	r3, #0
 8006448:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800644c:	2300      	movs	r3, #0
 800644e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006452:	2307      	movs	r3, #7
 8006454:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006458:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800645c:	4619      	mov	r1, r3
 800645e:	4838      	ldr	r0, [pc, #224]	; (8006540 <HAL_UART_MspInit+0x194>)
 8006460:	f003 fe42 	bl	800a0e8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream0;
 8006464:	4b37      	ldr	r3, [pc, #220]	; (8006544 <HAL_UART_MspInit+0x198>)
 8006466:	4a38      	ldr	r2, [pc, #224]	; (8006548 <HAL_UART_MspInit+0x19c>)
 8006468:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800646a:	4b36      	ldr	r3, [pc, #216]	; (8006544 <HAL_UART_MspInit+0x198>)
 800646c:	2229      	movs	r2, #41	; 0x29
 800646e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006470:	4b34      	ldr	r3, [pc, #208]	; (8006544 <HAL_UART_MspInit+0x198>)
 8006472:	2200      	movs	r2, #0
 8006474:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006476:	4b33      	ldr	r3, [pc, #204]	; (8006544 <HAL_UART_MspInit+0x198>)
 8006478:	2200      	movs	r2, #0
 800647a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800647c:	4b31      	ldr	r3, [pc, #196]	; (8006544 <HAL_UART_MspInit+0x198>)
 800647e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006482:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006484:	4b2f      	ldr	r3, [pc, #188]	; (8006544 <HAL_UART_MspInit+0x198>)
 8006486:	2200      	movs	r2, #0
 8006488:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800648a:	4b2e      	ldr	r3, [pc, #184]	; (8006544 <HAL_UART_MspInit+0x198>)
 800648c:	2200      	movs	r2, #0
 800648e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8006490:	4b2c      	ldr	r3, [pc, #176]	; (8006544 <HAL_UART_MspInit+0x198>)
 8006492:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006496:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8006498:	4b2a      	ldr	r3, [pc, #168]	; (8006544 <HAL_UART_MspInit+0x198>)
 800649a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800649e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80064a0:	4b28      	ldr	r3, [pc, #160]	; (8006544 <HAL_UART_MspInit+0x198>)
 80064a2:	2200      	movs	r2, #0
 80064a4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80064a6:	4827      	ldr	r0, [pc, #156]	; (8006544 <HAL_UART_MspInit+0x198>)
 80064a8:	f000 fe2e 	bl	8007108 <HAL_DMA_Init>
 80064ac:	4603      	mov	r3, r0
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d001      	beq.n	80064b6 <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 80064b2:	f7fb f8ef 	bl	8001694 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	4a22      	ldr	r2, [pc, #136]	; (8006544 <HAL_UART_MspInit+0x198>)
 80064ba:	67da      	str	r2, [r3, #124]	; 0x7c
 80064bc:	4a21      	ldr	r2, [pc, #132]	; (8006544 <HAL_UART_MspInit+0x198>)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream1;
 80064c2:	4b22      	ldr	r3, [pc, #136]	; (800654c <HAL_UART_MspInit+0x1a0>)
 80064c4:	4a22      	ldr	r2, [pc, #136]	; (8006550 <HAL_UART_MspInit+0x1a4>)
 80064c6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80064c8:	4b20      	ldr	r3, [pc, #128]	; (800654c <HAL_UART_MspInit+0x1a0>)
 80064ca:	222a      	movs	r2, #42	; 0x2a
 80064cc:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80064ce:	4b1f      	ldr	r3, [pc, #124]	; (800654c <HAL_UART_MspInit+0x1a0>)
 80064d0:	2240      	movs	r2, #64	; 0x40
 80064d2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80064d4:	4b1d      	ldr	r3, [pc, #116]	; (800654c <HAL_UART_MspInit+0x1a0>)
 80064d6:	2200      	movs	r2, #0
 80064d8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80064da:	4b1c      	ldr	r3, [pc, #112]	; (800654c <HAL_UART_MspInit+0x1a0>)
 80064dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80064e0:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80064e2:	4b1a      	ldr	r3, [pc, #104]	; (800654c <HAL_UART_MspInit+0x1a0>)
 80064e4:	2200      	movs	r2, #0
 80064e6:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80064e8:	4b18      	ldr	r3, [pc, #96]	; (800654c <HAL_UART_MspInit+0x1a0>)
 80064ea:	2200      	movs	r2, #0
 80064ec:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80064ee:	4b17      	ldr	r3, [pc, #92]	; (800654c <HAL_UART_MspInit+0x1a0>)
 80064f0:	2200      	movs	r2, #0
 80064f2:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80064f4:	4b15      	ldr	r3, [pc, #84]	; (800654c <HAL_UART_MspInit+0x1a0>)
 80064f6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80064fa:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80064fc:	4b13      	ldr	r3, [pc, #76]	; (800654c <HAL_UART_MspInit+0x1a0>)
 80064fe:	2200      	movs	r2, #0
 8006500:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8006502:	4812      	ldr	r0, [pc, #72]	; (800654c <HAL_UART_MspInit+0x1a0>)
 8006504:	f000 fe00 	bl	8007108 <HAL_DMA_Init>
 8006508:	4603      	mov	r3, r0
 800650a:	2b00      	cmp	r3, #0
 800650c:	d001      	beq.n	8006512 <HAL_UART_MspInit+0x166>
    {
      Error_Handler();
 800650e:	f7fb f8c1 	bl	8001694 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	4a0d      	ldr	r2, [pc, #52]	; (800654c <HAL_UART_MspInit+0x1a0>)
 8006516:	679a      	str	r2, [r3, #120]	; 0x78
 8006518:	4a0c      	ldr	r2, [pc, #48]	; (800654c <HAL_UART_MspInit+0x1a0>)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800651e:	2200      	movs	r2, #0
 8006520:	2100      	movs	r1, #0
 8006522:	2025      	movs	r0, #37	; 0x25
 8006524:	f000 fdad 	bl	8007082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006528:	2025      	movs	r0, #37	; 0x25
 800652a:	f000 fdc4 	bl	80070b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800652e:	bf00      	nop
 8006530:	37d8      	adds	r7, #216	; 0xd8
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}
 8006536:	bf00      	nop
 8006538:	40011000 	.word	0x40011000
 800653c:	58024400 	.word	0x58024400
 8006540:	58020000 	.word	0x58020000
 8006544:	24000654 	.word	0x24000654
 8006548:	40020010 	.word	0x40020010
 800654c:	240006cc 	.word	0x240006cc
 8006550:	40020028 	.word	0x40020028

08006554 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b082      	sub	sp, #8
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a10      	ldr	r2, [pc, #64]	; (80065a4 <HAL_UART_MspDeInit+0x50>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d119      	bne.n	800659a <HAL_UART_MspDeInit+0x46>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8006566:	4b10      	ldr	r3, [pc, #64]	; (80065a8 <HAL_UART_MspDeInit+0x54>)
 8006568:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800656c:	4a0e      	ldr	r2, [pc, #56]	; (80065a8 <HAL_UART_MspDeInit+0x54>)
 800656e:	f023 0310 	bic.w	r3, r3, #16
 8006572:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8006576:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800657a:	480c      	ldr	r0, [pc, #48]	; (80065ac <HAL_UART_MspDeInit+0x58>)
 800657c:	f003 ff5c 	bl	800a438 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006584:	4618      	mov	r0, r3
 8006586:	f001 f919 	bl	80077bc <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800658e:	4618      	mov	r0, r3
 8006590:	f001 f914 	bl	80077bc <HAL_DMA_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8006594:	2025      	movs	r0, #37	; 0x25
 8006596:	f000 fd9c 	bl	80070d2 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 800659a:	bf00      	nop
 800659c:	3708      	adds	r7, #8
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}
 80065a2:	bf00      	nop
 80065a4:	40011000 	.word	0x40011000
 80065a8:	58024400 	.word	0x58024400
 80065ac:	58020000 	.word	0x58020000

080065b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80065b0:	b480      	push	{r7}
 80065b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80065b4:	e7fe      	b.n	80065b4 <NMI_Handler+0x4>

080065b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80065b6:	b480      	push	{r7}
 80065b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80065ba:	e7fe      	b.n	80065ba <HardFault_Handler+0x4>

080065bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80065bc:	b480      	push	{r7}
 80065be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80065c0:	e7fe      	b.n	80065c0 <MemManage_Handler+0x4>

080065c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80065c2:	b480      	push	{r7}
 80065c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80065c6:	e7fe      	b.n	80065c6 <BusFault_Handler+0x4>

080065c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80065c8:	b480      	push	{r7}
 80065ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80065cc:	e7fe      	b.n	80065cc <UsageFault_Handler+0x4>

080065ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80065ce:	b480      	push	{r7}
 80065d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80065d2:	bf00      	nop
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr

080065dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80065dc:	b480      	push	{r7}
 80065de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80065e0:	bf00      	nop
 80065e2:	46bd      	mov	sp, r7
 80065e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e8:	4770      	bx	lr

080065ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80065ea:	b480      	push	{r7}
 80065ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80065ee:	bf00      	nop
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr

080065f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80065fc:	f000 fc22 	bl	8006e44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006600:	bf00      	nop
 8006602:	bd80      	pop	{r7, pc}

08006604 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8006604:	b480      	push	{r7}
 8006606:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8006608:	bf00      	nop
 800660a:	46bd      	mov	sp, r7
 800660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006610:	4770      	bx	lr
	...

08006614 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8006618:	4802      	ldr	r0, [pc, #8]	; (8006624 <DMA1_Stream0_IRQHandler+0x10>)
 800661a:	f002 fa53 	bl	8008ac4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800661e:	bf00      	nop
 8006620:	bd80      	pop	{r7, pc}
 8006622:	bf00      	nop
 8006624:	24000654 	.word	0x24000654

08006628 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800662c:	4802      	ldr	r0, [pc, #8]	; (8006638 <DMA1_Stream1_IRQHandler+0x10>)
 800662e:	f002 fa49 	bl	8008ac4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8006632:	bf00      	nop
 8006634:	bd80      	pop	{r7, pc}
 8006636:	bf00      	nop
 8006638:	240006cc 	.word	0x240006cc

0800663c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006640:	4802      	ldr	r0, [pc, #8]	; (800664c <USART1_IRQHandler+0x10>)
 8006642:	f008 fa0d 	bl	800ea60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8006646:	bf00      	nop
 8006648:	bd80      	pop	{r7, pc}
 800664a:	bf00      	nop
 800664c:	240005c4 	.word	0x240005c4

08006650 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8006654:	4803      	ldr	r0, [pc, #12]	; (8006664 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 8006656:	f006 ffa1 	bl	800d59c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 800665a:	4803      	ldr	r0, [pc, #12]	; (8006668 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 800665c:	f006 ff9e 	bl	800d59c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8006660:	bf00      	nop
 8006662:	bd80      	pop	{r7, pc}
 8006664:	240003fc 	.word	0x240003fc
 8006668:	24000448 	.word	0x24000448

0800666c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8006670:	4803      	ldr	r0, [pc, #12]	; (8006680 <TIM8_UP_TIM13_IRQHandler+0x14>)
 8006672:	f006 ff93 	bl	800d59c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 8006676:	4803      	ldr	r0, [pc, #12]	; (8006684 <TIM8_UP_TIM13_IRQHandler+0x18>)
 8006678:	f006 ff90 	bl	800d59c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800667c:	bf00      	nop
 800667e:	bd80      	pop	{r7, pc}
 8006680:	240003fc 	.word	0x240003fc
 8006684:	24000494 	.word	0x24000494

08006688 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800668c:	4803      	ldr	r0, [pc, #12]	; (800669c <TIM8_TRG_COM_TIM14_IRQHandler+0x14>)
 800668e:	f006 ff85 	bl	800d59c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim14);
 8006692:	4803      	ldr	r0, [pc, #12]	; (80066a0 <TIM8_TRG_COM_TIM14_IRQHandler+0x18>)
 8006694:	f006 ff82 	bl	800d59c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8006698:	bf00      	nop
 800669a:	bd80      	pop	{r7, pc}
 800669c:	240003fc 	.word	0x240003fc
 80066a0:	240004e0 	.word	0x240004e0

080066a4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80066a8:	4802      	ldr	r0, [pc, #8]	; (80066b4 <TIM7_IRQHandler+0x10>)
 80066aa:	f006 ff77 	bl	800d59c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80066ae:	bf00      	nop
 80066b0:	bd80      	pop	{r7, pc}
 80066b2:	bf00      	nop
 80066b4:	240003b0 	.word	0x240003b0

080066b8 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 80066bc:	4802      	ldr	r0, [pc, #8]	; (80066c8 <TIM15_IRQHandler+0x10>)
 80066be:	f006 ff6d 	bl	800d59c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 80066c2:	bf00      	nop
 80066c4:	bd80      	pop	{r7, pc}
 80066c6:	bf00      	nop
 80066c8:	2400052c 	.word	0x2400052c

080066cc <TIM23_IRQHandler>:

/**
  * @brief This function handles TIM23 global interrupt.
  */
void TIM23_IRQHandler(void)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM23_IRQn 0 */

  /* USER CODE END TIM23_IRQn 0 */
  HAL_TIM_IRQHandler(&htim23);
 80066d0:	4802      	ldr	r0, [pc, #8]	; (80066dc <TIM23_IRQHandler+0x10>)
 80066d2:	f006 ff63 	bl	800d59c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM23_IRQn 1 */

  /* USER CODE END TIM23_IRQn 1 */
}
 80066d6:	bf00      	nop
 80066d8:	bd80      	pop	{r7, pc}
 80066da:	bf00      	nop
 80066dc:	24000578 	.word	0x24000578

080066e0 <_ZN3STM5setupEv>:
#include "stm_main.h"
#include "dc_motor.h"
#include "mecanum.h"

void STM::setup(void){
 80066e0:	b580      	push	{r7, lr}
 80066e2:	af00      	add	r7, sp, #0
	DC_motor_init();
 80066e4:	f7f9 ffca 	bl	800067c <_Z13DC_motor_initv>
}
 80066e8:	bf00      	nop
 80066ea:	bd80      	pop	{r7, pc}

080066ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80066ec:	b480      	push	{r7}
 80066ee:	af00      	add	r7, sp, #0
	return 1;
 80066f0:	2301      	movs	r3, #1
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr

080066fc <_kill>:

int _kill(int pid, int sig)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b082      	sub	sp, #8
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
 8006704:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8006706:	f00a ff2f 	bl	8011568 <__errno>
 800670a:	4603      	mov	r3, r0
 800670c:	2216      	movs	r2, #22
 800670e:	601a      	str	r2, [r3, #0]
	return -1;
 8006710:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006714:	4618      	mov	r0, r3
 8006716:	3708      	adds	r7, #8
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}

0800671c <_exit>:

void _exit (int status)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b082      	sub	sp, #8
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8006724:	f04f 31ff 	mov.w	r1, #4294967295
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f7ff ffe7 	bl	80066fc <_kill>
	while (1) {}		/* Make sure we hang here */
 800672e:	e7fe      	b.n	800672e <_exit+0x12>

08006730 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b086      	sub	sp, #24
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006738:	4a14      	ldr	r2, [pc, #80]	; (800678c <_sbrk+0x5c>)
 800673a:	4b15      	ldr	r3, [pc, #84]	; (8006790 <_sbrk+0x60>)
 800673c:	1ad3      	subs	r3, r2, r3
 800673e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006744:	4b13      	ldr	r3, [pc, #76]	; (8006794 <_sbrk+0x64>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d102      	bne.n	8006752 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800674c:	4b11      	ldr	r3, [pc, #68]	; (8006794 <_sbrk+0x64>)
 800674e:	4a12      	ldr	r2, [pc, #72]	; (8006798 <_sbrk+0x68>)
 8006750:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006752:	4b10      	ldr	r3, [pc, #64]	; (8006794 <_sbrk+0x64>)
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	4413      	add	r3, r2
 800675a:	693a      	ldr	r2, [r7, #16]
 800675c:	429a      	cmp	r2, r3
 800675e:	d207      	bcs.n	8006770 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006760:	f00a ff02 	bl	8011568 <__errno>
 8006764:	4603      	mov	r3, r0
 8006766:	220c      	movs	r2, #12
 8006768:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800676a:	f04f 33ff 	mov.w	r3, #4294967295
 800676e:	e009      	b.n	8006784 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006770:	4b08      	ldr	r3, [pc, #32]	; (8006794 <_sbrk+0x64>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006776:	4b07      	ldr	r3, [pc, #28]	; (8006794 <_sbrk+0x64>)
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4413      	add	r3, r2
 800677e:	4a05      	ldr	r2, [pc, #20]	; (8006794 <_sbrk+0x64>)
 8006780:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006782:	68fb      	ldr	r3, [r7, #12]
}
 8006784:	4618      	mov	r0, r3
 8006786:	3718      	adds	r7, #24
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}
 800678c:	24050000 	.word	0x24050000
 8006790:	00000400 	.word	0x00000400
 8006794:	24002338 	.word	0x24002338
 8006798:	24002358 	.word	0x24002358

0800679c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800679c:	b480      	push	{r7}
 800679e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80067a0:	4b32      	ldr	r3, [pc, #200]	; (800686c <SystemInit+0xd0>)
 80067a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067a6:	4a31      	ldr	r2, [pc, #196]	; (800686c <SystemInit+0xd0>)
 80067a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80067ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80067b0:	4b2f      	ldr	r3, [pc, #188]	; (8006870 <SystemInit+0xd4>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f003 030f 	and.w	r3, r3, #15
 80067b8:	2b06      	cmp	r3, #6
 80067ba:	d807      	bhi.n	80067cc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80067bc:	4b2c      	ldr	r3, [pc, #176]	; (8006870 <SystemInit+0xd4>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f023 030f 	bic.w	r3, r3, #15
 80067c4:	4a2a      	ldr	r2, [pc, #168]	; (8006870 <SystemInit+0xd4>)
 80067c6:	f043 0307 	orr.w	r3, r3, #7
 80067ca:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80067cc:	4b29      	ldr	r3, [pc, #164]	; (8006874 <SystemInit+0xd8>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a28      	ldr	r2, [pc, #160]	; (8006874 <SystemInit+0xd8>)
 80067d2:	f043 0301 	orr.w	r3, r3, #1
 80067d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80067d8:	4b26      	ldr	r3, [pc, #152]	; (8006874 <SystemInit+0xd8>)
 80067da:	2200      	movs	r2, #0
 80067dc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80067de:	4b25      	ldr	r3, [pc, #148]	; (8006874 <SystemInit+0xd8>)
 80067e0:	681a      	ldr	r2, [r3, #0]
 80067e2:	4924      	ldr	r1, [pc, #144]	; (8006874 <SystemInit+0xd8>)
 80067e4:	4b24      	ldr	r3, [pc, #144]	; (8006878 <SystemInit+0xdc>)
 80067e6:	4013      	ands	r3, r2
 80067e8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80067ea:	4b21      	ldr	r3, [pc, #132]	; (8006870 <SystemInit+0xd4>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f003 0308 	and.w	r3, r3, #8
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d007      	beq.n	8006806 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80067f6:	4b1e      	ldr	r3, [pc, #120]	; (8006870 <SystemInit+0xd4>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f023 030f 	bic.w	r3, r3, #15
 80067fe:	4a1c      	ldr	r2, [pc, #112]	; (8006870 <SystemInit+0xd4>)
 8006800:	f043 0307 	orr.w	r3, r3, #7
 8006804:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8006806:	4b1b      	ldr	r3, [pc, #108]	; (8006874 <SystemInit+0xd8>)
 8006808:	2200      	movs	r2, #0
 800680a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800680c:	4b19      	ldr	r3, [pc, #100]	; (8006874 <SystemInit+0xd8>)
 800680e:	2200      	movs	r2, #0
 8006810:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8006812:	4b18      	ldr	r3, [pc, #96]	; (8006874 <SystemInit+0xd8>)
 8006814:	2200      	movs	r2, #0
 8006816:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8006818:	4b16      	ldr	r3, [pc, #88]	; (8006874 <SystemInit+0xd8>)
 800681a:	4a18      	ldr	r2, [pc, #96]	; (800687c <SystemInit+0xe0>)
 800681c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800681e:	4b15      	ldr	r3, [pc, #84]	; (8006874 <SystemInit+0xd8>)
 8006820:	4a17      	ldr	r2, [pc, #92]	; (8006880 <SystemInit+0xe4>)
 8006822:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8006824:	4b13      	ldr	r3, [pc, #76]	; (8006874 <SystemInit+0xd8>)
 8006826:	4a17      	ldr	r2, [pc, #92]	; (8006884 <SystemInit+0xe8>)
 8006828:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800682a:	4b12      	ldr	r3, [pc, #72]	; (8006874 <SystemInit+0xd8>)
 800682c:	2200      	movs	r2, #0
 800682e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8006830:	4b10      	ldr	r3, [pc, #64]	; (8006874 <SystemInit+0xd8>)
 8006832:	4a14      	ldr	r2, [pc, #80]	; (8006884 <SystemInit+0xe8>)
 8006834:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8006836:	4b0f      	ldr	r3, [pc, #60]	; (8006874 <SystemInit+0xd8>)
 8006838:	2200      	movs	r2, #0
 800683a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800683c:	4b0d      	ldr	r3, [pc, #52]	; (8006874 <SystemInit+0xd8>)
 800683e:	4a11      	ldr	r2, [pc, #68]	; (8006884 <SystemInit+0xe8>)
 8006840:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8006842:	4b0c      	ldr	r3, [pc, #48]	; (8006874 <SystemInit+0xd8>)
 8006844:	2200      	movs	r2, #0
 8006846:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006848:	4b0a      	ldr	r3, [pc, #40]	; (8006874 <SystemInit+0xd8>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a09      	ldr	r2, [pc, #36]	; (8006874 <SystemInit+0xd8>)
 800684e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006852:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8006854:	4b07      	ldr	r3, [pc, #28]	; (8006874 <SystemInit+0xd8>)
 8006856:	2200      	movs	r2, #0
 8006858:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800685a:	4b0b      	ldr	r3, [pc, #44]	; (8006888 <SystemInit+0xec>)
 800685c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8006860:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8006862:	bf00      	nop
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr
 800686c:	e000ed00 	.word	0xe000ed00
 8006870:	52002000 	.word	0x52002000
 8006874:	58024400 	.word	0x58024400
 8006878:	eaf6ed7f 	.word	0xeaf6ed7f
 800687c:	02020200 	.word	0x02020200
 8006880:	01ff0000 	.word	0x01ff0000
 8006884:	01010280 	.word	0x01010280
 8006888:	52004000 	.word	0x52004000

0800688c <HAL_TIM_PeriodElapsedCallback>:
#include "reset.h"
#include "scara.h"
#include "microswitch.h"


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800688c:	b580      	push	{r7, lr}
 800688e:	b082      	sub	sp, #8
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
	/** SCARA **/
	if (htim->Instance == TIM7) {
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a8a      	ldr	r2, [pc, #552]	; (8006ac4 <HAL_TIM_PeriodElapsedCallback+0x238>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d12a      	bne.n	80068f4 <HAL_TIM_PeriodElapsedCallback+0x68>
		/*stepper 2*/
		if (sc.temp_2 == 1) {
 800689e:	4b8a      	ldr	r3, [pc, #552]	; (8006ac8 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80068a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d109      	bne.n	80068ba <HAL_TIM_PeriodElapsedCallback+0x2e>
			HAL_GPIO_WritePin(STEP_PORT_2, STEP_PIN_2, GPIO_PIN_SET);
 80068a6:	2201      	movs	r2, #1
 80068a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80068ac:	4887      	ldr	r0, [pc, #540]	; (8006acc <HAL_TIM_PeriodElapsedCallback+0x240>)
 80068ae:	f003 fedd 	bl	800a66c <HAL_GPIO_WritePin>
			sc.temp_2 = 0;
 80068b2:	4b85      	ldr	r3, [pc, #532]	; (8006ac8 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80068b4:	2200      	movs	r2, #0
 80068b6:	661a      	str	r2, [r3, #96]	; 0x60
 80068b8:	e01c      	b.n	80068f4 <HAL_TIM_PeriodElapsedCallback+0x68>
		}
		else if (sc.step_2 >= 1) {
 80068ba:	4b83      	ldr	r3, [pc, #524]	; (8006ac8 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80068bc:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 80068c0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80068c4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80068c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068cc:	db12      	blt.n	80068f4 <HAL_TIM_PeriodElapsedCallback+0x68>
			HAL_GPIO_WritePin(STEP_PORT_2, STEP_PIN_2, GPIO_PIN_RESET);
 80068ce:	2200      	movs	r2, #0
 80068d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80068d4:	487d      	ldr	r0, [pc, #500]	; (8006acc <HAL_TIM_PeriodElapsedCallback+0x240>)
 80068d6:	f003 fec9 	bl	800a66c <HAL_GPIO_WritePin>
			sc.temp_2 = 1;
 80068da:	4b7b      	ldr	r3, [pc, #492]	; (8006ac8 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80068dc:	2201      	movs	r2, #1
 80068de:	661a      	str	r2, [r3, #96]	; 0x60
			sc.step_2 = sc.step_2 - 1;
 80068e0:	4b79      	ldr	r3, [pc, #484]	; (8006ac8 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80068e2:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 80068e6:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80068ea:	ee37 7b46 	vsub.f64	d7, d7, d6
 80068ee:	4b76      	ldr	r3, [pc, #472]	; (8006ac8 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80068f0:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
		}
	}

	if (htim->Instance == TIM8) {
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a75      	ldr	r2, [pc, #468]	; (8006ad0 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d12a      	bne.n	8006954 <HAL_TIM_PeriodElapsedCallback+0xc8>
	  /*stepper 1*/
		if (sc.temp_1 == 1) {
 80068fe:	4b72      	ldr	r3, [pc, #456]	; (8006ac8 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8006900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006902:	2b01      	cmp	r3, #1
 8006904:	d109      	bne.n	800691a <HAL_TIM_PeriodElapsedCallback+0x8e>
			HAL_GPIO_WritePin(STEP_PORT_1, STEP_PIN_1, GPIO_PIN_SET);
 8006906:	2201      	movs	r2, #1
 8006908:	f44f 7100 	mov.w	r1, #512	; 0x200
 800690c:	486f      	ldr	r0, [pc, #444]	; (8006acc <HAL_TIM_PeriodElapsedCallback+0x240>)
 800690e:	f003 fead 	bl	800a66c <HAL_GPIO_WritePin>
			sc.temp_1 = 0;
 8006912:	4b6d      	ldr	r3, [pc, #436]	; (8006ac8 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8006914:	2200      	movs	r2, #0
 8006916:	641a      	str	r2, [r3, #64]	; 0x40
 8006918:	e01c      	b.n	8006954 <HAL_TIM_PeriodElapsedCallback+0xc8>
		}
		else if (sc.step_1 >= 1) {
 800691a:	4b6b      	ldr	r3, [pc, #428]	; (8006ac8 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800691c:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8006920:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006924:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800692c:	db12      	blt.n	8006954 <HAL_TIM_PeriodElapsedCallback+0xc8>
			HAL_GPIO_WritePin(STEP_PORT_1, STEP_PIN_1, GPIO_PIN_RESET);
 800692e:	2200      	movs	r2, #0
 8006930:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006934:	4865      	ldr	r0, [pc, #404]	; (8006acc <HAL_TIM_PeriodElapsedCallback+0x240>)
 8006936:	f003 fe99 	bl	800a66c <HAL_GPIO_WritePin>
			sc.temp_1 = 1;
 800693a:	4b63      	ldr	r3, [pc, #396]	; (8006ac8 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800693c:	2201      	movs	r2, #1
 800693e:	641a      	str	r2, [r3, #64]	; 0x40
			sc.step_1 = sc.step_1 - 1;
 8006940:	4b61      	ldr	r3, [pc, #388]	; (8006ac8 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8006942:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8006946:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800694a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800694e:	4b5e      	ldr	r3, [pc, #376]	; (8006ac8 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8006950:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
		}
	}

	if (htim->Instance == TIM14) {
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a5e      	ldr	r2, [pc, #376]	; (8006ad4 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d12d      	bne.n	80069ba <HAL_TIM_PeriodElapsedCallback+0x12e>
		/*stepper 3*/
		if (sc.temp_3 == 1) {
 800695e:	4b5a      	ldr	r3, [pc, #360]	; (8006ac8 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8006960:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006964:	2b01      	cmp	r3, #1
 8006966:	d10a      	bne.n	800697e <HAL_TIM_PeriodElapsedCallback+0xf2>
			HAL_GPIO_WritePin(STEP_PORT_3, STEP_PIN_3, GPIO_PIN_SET);
 8006968:	2201      	movs	r2, #1
 800696a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800696e:	485a      	ldr	r0, [pc, #360]	; (8006ad8 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8006970:	f003 fe7c 	bl	800a66c <HAL_GPIO_WritePin>
			sc.temp_3 = 0;
 8006974:	4b54      	ldr	r3, [pc, #336]	; (8006ac8 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8006976:	2200      	movs	r2, #0
 8006978:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800697c:	e01d      	b.n	80069ba <HAL_TIM_PeriodElapsedCallback+0x12e>
		}
		else if (sc.step_3 >= 1) {
 800697e:	4b52      	ldr	r3, [pc, #328]	; (8006ac8 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8006980:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 8006984:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006988:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800698c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006990:	db13      	blt.n	80069ba <HAL_TIM_PeriodElapsedCallback+0x12e>
			HAL_GPIO_WritePin(STEP_PORT_3, STEP_PIN_3, GPIO_PIN_RESET);
 8006992:	2200      	movs	r2, #0
 8006994:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006998:	484f      	ldr	r0, [pc, #316]	; (8006ad8 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800699a:	f003 fe67 	bl	800a66c <HAL_GPIO_WritePin>
			sc.temp_3 = 1;
 800699e:	4b4a      	ldr	r3, [pc, #296]	; (8006ac8 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80069a0:	2201      	movs	r2, #1
 80069a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			sc.step_3 = sc.step_3 - 1;
 80069a6:	4b48      	ldr	r3, [pc, #288]	; (8006ac8 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80069a8:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 80069ac:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80069b0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80069b4:	4b44      	ldr	r3, [pc, #272]	; (8006ac8 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80069b6:	ed83 7b1c 	vstr	d7, [r3, #112]	; 0x70
		}
	}
	/**  **/


	if (htim->Instance == TIM13) {
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a47      	ldr	r2, [pc, #284]	; (8006adc <HAL_TIM_PeriodElapsedCallback+0x250>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d127      	bne.n	8006a14 <HAL_TIM_PeriodElapsedCallback+0x188>
	/* ROS publish */
		static int ms=0;
		if(ms%20==0){
 80069c4:	4b46      	ldr	r3, [pc, #280]	; (8006ae0 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80069c6:	6819      	ldr	r1, [r3, #0]
 80069c8:	4b46      	ldr	r3, [pc, #280]	; (8006ae4 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80069ca:	fb83 2301 	smull	r2, r3, r3, r1
 80069ce:	10da      	asrs	r2, r3, #3
 80069d0:	17cb      	asrs	r3, r1, #31
 80069d2:	1ad2      	subs	r2, r2, r3
 80069d4:	4613      	mov	r3, r2
 80069d6:	009b      	lsls	r3, r3, #2
 80069d8:	4413      	add	r3, r2
 80069da:	009b      	lsls	r3, r3, #2
 80069dc:	1aca      	subs	r2, r1, r3
 80069de:	2a00      	cmp	r2, #0
 80069e0:	d108      	bne.n	80069f4 <HAL_TIM_PeriodElapsedCallback+0x168>
			ROS::pub_car_vel();
 80069e2:	f7fd f9e9 	bl	8003db8 <_ZN3ROS11pub_car_velEv>
			ROS::pub_reset();
 80069e6:	f7fd f921 	bl	8003c2c <_ZN3ROS9pub_resetEv>
			ROS::pub_scaraflag();
 80069ea:	f7fd f98f 	bl	8003d0c <_ZN3ROS13pub_scaraflagEv>
			ms=0;
 80069ee:	4b3c      	ldr	r3, [pc, #240]	; (8006ae0 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80069f0:	2200      	movs	r2, #0
 80069f2:	601a      	str	r2, [r3, #0]
		}
		ms++;
 80069f4:	4b3a      	ldr	r3, [pc, #232]	; (8006ae0 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	3301      	adds	r3, #1
 80069fa:	4a39      	ldr	r2, [pc, #228]	; (8006ae0 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80069fc:	6013      	str	r3, [r2, #0]

		if(sc.timer_flag) sc.timer_count++;
 80069fe:	4b32      	ldr	r3, [pc, #200]	; (8006ac8 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8006a00:	781b      	ldrb	r3, [r3, #0]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d004      	beq.n	8006a10 <HAL_TIM_PeriodElapsedCallback+0x184>
 8006a06:	4b30      	ldr	r3, [pc, #192]	; (8006ac8 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	3301      	adds	r3, #1
 8006a0c:	4a2e      	ldr	r2, [pc, #184]	; (8006ac8 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8006a0e:	6053      	str	r3, [r2, #4]

	/* PID Control */
		motor_standard();
 8006a10:	f000 f876 	bl	8006b00 <_Z14motor_standardv>
	}


	/** Intake **/
	if (htim->Instance == TIM24){
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a33      	ldr	r2, [pc, #204]	; (8006ae8 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d14d      	bne.n	8006aba <HAL_TIM_PeriodElapsedCallback+0x22e>
		/* microswitch */
		if (HAL_GPIO_ReadPin(TOUCH_A_PORT, TOUCH_A_PIN) == 0) {
 8006a1e:	2140      	movs	r1, #64	; 0x40
 8006a20:	4832      	ldr	r0, [pc, #200]	; (8006aec <HAL_TIM_PeriodElapsedCallback+0x260>)
 8006a22:	f003 fe0b 	bl	800a63c <HAL_GPIO_ReadPin>
 8006a26:	4603      	mov	r3, r0
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	bf0c      	ite	eq
 8006a2c:	2301      	moveq	r3, #1
 8006a2e:	2300      	movne	r3, #0
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d006      	beq.n	8006a44 <HAL_TIM_PeriodElapsedCallback+0x1b8>
			MICROSWITCH::touch_a = 1;
 8006a36:	492e      	ldr	r1, [pc, #184]	; (8006af0 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8006a38:	f04f 0200 	mov.w	r2, #0
 8006a3c:	4b2d      	ldr	r3, [pc, #180]	; (8006af4 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8006a3e:	e9c1 2300 	strd	r2, r3, [r1]
 8006a42:	e006      	b.n	8006a52 <HAL_TIM_PeriodElapsedCallback+0x1c6>
		} else MICROSWITCH::touch_a = 0;
 8006a44:	492a      	ldr	r1, [pc, #168]	; (8006af0 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8006a46:	f04f 0200 	mov.w	r2, #0
 8006a4a:	f04f 0300 	mov.w	r3, #0
 8006a4e:	e9c1 2300 	strd	r2, r3, [r1]

		if (HAL_GPIO_ReadPin(TOUCH_B_PORT, TOUCH_B_PIN) == 0) {
 8006a52:	2120      	movs	r1, #32
 8006a54:	4825      	ldr	r0, [pc, #148]	; (8006aec <HAL_TIM_PeriodElapsedCallback+0x260>)
 8006a56:	f003 fdf1 	bl	800a63c <HAL_GPIO_ReadPin>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	bf0c      	ite	eq
 8006a60:	2301      	moveq	r3, #1
 8006a62:	2300      	movne	r3, #0
 8006a64:	b2db      	uxtb	r3, r3
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d006      	beq.n	8006a78 <HAL_TIM_PeriodElapsedCallback+0x1ec>
			MICROSWITCH::touch_b = 1;
 8006a6a:	4923      	ldr	r1, [pc, #140]	; (8006af8 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8006a6c:	f04f 0200 	mov.w	r2, #0
 8006a70:	4b20      	ldr	r3, [pc, #128]	; (8006af4 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8006a72:	e9c1 2300 	strd	r2, r3, [r1]
 8006a76:	e006      	b.n	8006a86 <HAL_TIM_PeriodElapsedCallback+0x1fa>
		} else MICROSWITCH::touch_b = 0;
 8006a78:	491f      	ldr	r1, [pc, #124]	; (8006af8 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8006a7a:	f04f 0200 	mov.w	r2, #0
 8006a7e:	f04f 0300 	mov.w	r3, #0
 8006a82:	e9c1 2300 	strd	r2, r3, [r1]

		if (HAL_GPIO_ReadPin(TOUCH_C_PORT, TOUCH_C_PIN) == 0) {
 8006a86:	2110      	movs	r1, #16
 8006a88:	4818      	ldr	r0, [pc, #96]	; (8006aec <HAL_TIM_PeriodElapsedCallback+0x260>)
 8006a8a:	f003 fdd7 	bl	800a63c <HAL_GPIO_ReadPin>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	bf0c      	ite	eq
 8006a94:	2301      	moveq	r3, #1
 8006a96:	2300      	movne	r3, #0
 8006a98:	b2db      	uxtb	r3, r3
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d006      	beq.n	8006aac <HAL_TIM_PeriodElapsedCallback+0x220>
			MICROSWITCH::touch_c = 1;
 8006a9e:	4917      	ldr	r1, [pc, #92]	; (8006afc <HAL_TIM_PeriodElapsedCallback+0x270>)
 8006aa0:	f04f 0200 	mov.w	r2, #0
 8006aa4:	4b13      	ldr	r3, [pc, #76]	; (8006af4 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8006aa6:	e9c1 2300 	strd	r2, r3, [r1]
		} else MICROSWITCH::touch_c = 0;
	}
}
 8006aaa:	e006      	b.n	8006aba <HAL_TIM_PeriodElapsedCallback+0x22e>
		} else MICROSWITCH::touch_c = 0;
 8006aac:	4913      	ldr	r1, [pc, #76]	; (8006afc <HAL_TIM_PeriodElapsedCallback+0x270>)
 8006aae:	f04f 0200 	mov.w	r2, #0
 8006ab2:	f04f 0300 	mov.w	r3, #0
 8006ab6:	e9c1 2300 	strd	r2, r3, [r1]
}
 8006aba:	bf00      	nop
 8006abc:	3708      	adds	r7, #8
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}
 8006ac2:	bf00      	nop
 8006ac4:	40001400 	.word	0x40001400
 8006ac8:	24002250 	.word	0x24002250
 8006acc:	58021400 	.word	0x58021400
 8006ad0:	40010400 	.word	0x40010400
 8006ad4:	40002000 	.word	0x40002000
 8006ad8:	58020400 	.word	0x58020400
 8006adc:	40001c00 	.word	0x40001c00
 8006ae0:	2400233c 	.word	0x2400233c
 8006ae4:	66666667 	.word	0x66666667
 8006ae8:	4000e400 	.word	0x4000e400
 8006aec:	58021800 	.word	0x58021800
 8006af0:	24000790 	.word	0x24000790
 8006af4:	3ff00000 	.word	0x3ff00000
 8006af8:	24000798 	.word	0x24000798
 8006afc:	240007a0 	.word	0x240007a0

08006b00 <_Z14motor_standardv>:

void motor_standard(void){
 8006b00:	b580      	push	{r7, lr}
 8006b02:	af00      	add	r7, sp, #0
	/*enc 1*/
		fr.CountNow = __HAL_TIM_GetCounter(&htim2);
 8006b04:	4b73      	ldr	r3, [pc, #460]	; (8006cd4 <_Z14motor_standardv+0x1d4>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b0a:	b21a      	sxth	r2, r3
 8006b0c:	4b72      	ldr	r3, [pc, #456]	; (8006cd8 <_Z14motor_standardv+0x1d8>)
 8006b0e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		fr.PIDControl();
 8006b12:	4871      	ldr	r0, [pc, #452]	; (8006cd8 <_Z14motor_standardv+0x1d8>)
 8006b14:	f7f9 fe45 	bl	80007a2 <_ZN8DC_motor10PIDControlEv>
		__HAL_TIM_SetCounter(&htim2,0);
 8006b18:	4b6e      	ldr	r3, [pc, #440]	; (8006cd4 <_Z14motor_standardv+0x1d4>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	625a      	str	r2, [r3, #36]	; 0x24

		if (fr.PWM < 0) {
 8006b20:	4b6d      	ldr	r3, [pc, #436]	; (8006cd8 <_Z14motor_standardv+0x1d8>)
 8006b22:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8006b26:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8006b2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b2e:	d50c      	bpl.n	8006b4a <_Z14motor_standardv+0x4a>
			HAL_GPIO_WritePin(MOTORPLUS_PORT_fr, MOTORPLUS_PIN_fr, GPIO_PIN_SET);
 8006b30:	2201      	movs	r2, #1
 8006b32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006b36:	4869      	ldr	r0, [pc, #420]	; (8006cdc <_Z14motor_standardv+0x1dc>)
 8006b38:	f003 fd98 	bl	800a66c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_fr, MOTORMINUS_PIN_fr, GPIO_PIN_RESET);
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006b42:	4866      	ldr	r0, [pc, #408]	; (8006cdc <_Z14motor_standardv+0x1dc>)
 8006b44:	f003 fd92 	bl	800a66c <HAL_GPIO_WritePin>
 8006b48:	e00b      	b.n	8006b62 <_Z14motor_standardv+0x62>
		}
		else{
			HAL_GPIO_WritePin(MOTORPLUS_PORT_fr, MOTORPLUS_PIN_fr, GPIO_PIN_RESET);
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006b50:	4862      	ldr	r0, [pc, #392]	; (8006cdc <_Z14motor_standardv+0x1dc>)
 8006b52:	f003 fd8b 	bl	800a66c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_fr, MOTORMINUS_PIN_fr, GPIO_PIN_SET);
 8006b56:	2201      	movs	r2, #1
 8006b58:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006b5c:	485f      	ldr	r0, [pc, #380]	; (8006cdc <_Z14motor_standardv+0x1dc>)
 8006b5e:	f003 fd85 	bl	800a66c <HAL_GPIO_WritePin>
		}

		__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, fabs(fr.PWM));
 8006b62:	4b5d      	ldr	r3, [pc, #372]	; (8006cd8 <_Z14motor_standardv+0x1d8>)
 8006b64:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8006b68:	eeb0 7bc7 	vabs.f64	d7, d7
 8006b6c:	4b5c      	ldr	r3, [pc, #368]	; (8006ce0 <_Z14motor_standardv+0x1e0>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006b74:	ee17 2a90 	vmov	r2, s15
 8006b78:	639a      	str	r2, [r3, #56]	; 0x38

	/*enc 2*/
		fl.CountNow = __HAL_TIM_GetCounter(&htim5);
 8006b7a:	4b5a      	ldr	r3, [pc, #360]	; (8006ce4 <_Z14motor_standardv+0x1e4>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b80:	b21a      	sxth	r2, r3
 8006b82:	4b59      	ldr	r3, [pc, #356]	; (8006ce8 <_Z14motor_standardv+0x1e8>)
 8006b84:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		fl.PIDControl();
 8006b88:	4857      	ldr	r0, [pc, #348]	; (8006ce8 <_Z14motor_standardv+0x1e8>)
 8006b8a:	f7f9 fe0a 	bl	80007a2 <_ZN8DC_motor10PIDControlEv>
		__HAL_TIM_SetCounter(&htim5,0);
 8006b8e:	4b55      	ldr	r3, [pc, #340]	; (8006ce4 <_Z14motor_standardv+0x1e4>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	2200      	movs	r2, #0
 8006b94:	625a      	str	r2, [r3, #36]	; 0x24

		if (fl.PWM > 0) {
 8006b96:	4b54      	ldr	r3, [pc, #336]	; (8006ce8 <_Z14motor_standardv+0x1e8>)
 8006b98:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8006b9c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8006ba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ba4:	dd0c      	ble.n	8006bc0 <_Z14motor_standardv+0xc0>
			HAL_GPIO_WritePin(MOTORPLUS_PORT_fl, MOTORPLUS_PIN_fl, GPIO_PIN_SET);
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006bac:	484f      	ldr	r0, [pc, #316]	; (8006cec <_Z14motor_standardv+0x1ec>)
 8006bae:	f003 fd5d 	bl	800a66c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_fl, MOTORMINUS_PIN_fl, GPIO_PIN_RESET);
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006bb8:	484c      	ldr	r0, [pc, #304]	; (8006cec <_Z14motor_standardv+0x1ec>)
 8006bba:	f003 fd57 	bl	800a66c <HAL_GPIO_WritePin>
 8006bbe:	e00b      	b.n	8006bd8 <_Z14motor_standardv+0xd8>
		}
		else{
			HAL_GPIO_WritePin(MOTORPLUS_PORT_fl, MOTORPLUS_PIN_fl, GPIO_PIN_RESET);
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006bc6:	4849      	ldr	r0, [pc, #292]	; (8006cec <_Z14motor_standardv+0x1ec>)
 8006bc8:	f003 fd50 	bl	800a66c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_fl, MOTORMINUS_PIN_fl, GPIO_PIN_SET);
 8006bcc:	2201      	movs	r2, #1
 8006bce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006bd2:	4846      	ldr	r0, [pc, #280]	; (8006cec <_Z14motor_standardv+0x1ec>)
 8006bd4:	f003 fd4a 	bl	800a66c <HAL_GPIO_WritePin>
		}

		__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, fabs(fl.PWM));
 8006bd8:	4b43      	ldr	r3, [pc, #268]	; (8006ce8 <_Z14motor_standardv+0x1e8>)
 8006bda:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8006bde:	eeb0 7bc7 	vabs.f64	d7, d7
 8006be2:	4b3f      	ldr	r3, [pc, #252]	; (8006ce0 <_Z14motor_standardv+0x1e0>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006bea:	ee17 2a90 	vmov	r2, s15
 8006bee:	635a      	str	r2, [r3, #52]	; 0x34

	/*enc 3*/
		br.CountNow = __HAL_TIM_GetCounter(&htim3);
 8006bf0:	4b3f      	ldr	r3, [pc, #252]	; (8006cf0 <_Z14motor_standardv+0x1f0>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf6:	b21a      	sxth	r2, r3
 8006bf8:	4b3e      	ldr	r3, [pc, #248]	; (8006cf4 <_Z14motor_standardv+0x1f4>)
 8006bfa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		br.PIDControl();
 8006bfe:	483d      	ldr	r0, [pc, #244]	; (8006cf4 <_Z14motor_standardv+0x1f4>)
 8006c00:	f7f9 fdcf 	bl	80007a2 <_ZN8DC_motor10PIDControlEv>
		__HAL_TIM_SetCounter(&htim3,0);
 8006c04:	4b3a      	ldr	r3, [pc, #232]	; (8006cf0 <_Z14motor_standardv+0x1f0>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	625a      	str	r2, [r3, #36]	; 0x24

		if (br.PWM > 0) {
 8006c0c:	4b39      	ldr	r3, [pc, #228]	; (8006cf4 <_Z14motor_standardv+0x1f4>)
 8006c0e:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8006c12:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8006c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c1a:	dd0a      	ble.n	8006c32 <_Z14motor_standardv+0x132>
			HAL_GPIO_WritePin(MOTORPLUS_PORT_br, MOTORPLUS_PIN_br, GPIO_PIN_SET);
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	2104      	movs	r1, #4
 8006c20:	4835      	ldr	r0, [pc, #212]	; (8006cf8 <_Z14motor_standardv+0x1f8>)
 8006c22:	f003 fd23 	bl	800a66c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_br, MOTORMINUS_PIN_br, GPIO_PIN_RESET);
 8006c26:	2200      	movs	r2, #0
 8006c28:	2108      	movs	r1, #8
 8006c2a:	4833      	ldr	r0, [pc, #204]	; (8006cf8 <_Z14motor_standardv+0x1f8>)
 8006c2c:	f003 fd1e 	bl	800a66c <HAL_GPIO_WritePin>
 8006c30:	e009      	b.n	8006c46 <_Z14motor_standardv+0x146>
		}
		else{
			HAL_GPIO_WritePin(MOTORPLUS_PORT_br, MOTORPLUS_PIN_br, GPIO_PIN_RESET);
 8006c32:	2200      	movs	r2, #0
 8006c34:	2104      	movs	r1, #4
 8006c36:	4830      	ldr	r0, [pc, #192]	; (8006cf8 <_Z14motor_standardv+0x1f8>)
 8006c38:	f003 fd18 	bl	800a66c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_br, MOTORMINUS_PIN_br, GPIO_PIN_SET);
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	2108      	movs	r1, #8
 8006c40:	482d      	ldr	r0, [pc, #180]	; (8006cf8 <_Z14motor_standardv+0x1f8>)
 8006c42:	f003 fd13 	bl	800a66c <HAL_GPIO_WritePin>
		}
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, fabs(br.PWM));
 8006c46:	4b2b      	ldr	r3, [pc, #172]	; (8006cf4 <_Z14motor_standardv+0x1f4>)
 8006c48:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8006c4c:	eeb0 7bc7 	vabs.f64	d7, d7
 8006c50:	4b2a      	ldr	r3, [pc, #168]	; (8006cfc <_Z14motor_standardv+0x1fc>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006c58:	ee17 2a90 	vmov	r2, s15
 8006c5c:	635a      	str	r2, [r3, #52]	; 0x34

	/*enc 4*/
		bl.CountNow = __HAL_TIM_GetCounter(&htim4);
 8006c5e:	4b28      	ldr	r3, [pc, #160]	; (8006d00 <_Z14motor_standardv+0x200>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c64:	b21a      	sxth	r2, r3
 8006c66:	4b27      	ldr	r3, [pc, #156]	; (8006d04 <_Z14motor_standardv+0x204>)
 8006c68:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		bl.PIDControl();
 8006c6c:	4825      	ldr	r0, [pc, #148]	; (8006d04 <_Z14motor_standardv+0x204>)
 8006c6e:	f7f9 fd98 	bl	80007a2 <_ZN8DC_motor10PIDControlEv>
		__HAL_TIM_SetCounter(&htim4,0);
 8006c72:	4b23      	ldr	r3, [pc, #140]	; (8006d00 <_Z14motor_standardv+0x200>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	2200      	movs	r2, #0
 8006c78:	625a      	str	r2, [r3, #36]	; 0x24

		if (bl.PWM < 0) {
 8006c7a:	4b22      	ldr	r3, [pc, #136]	; (8006d04 <_Z14motor_standardv+0x204>)
 8006c7c:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8006c80:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8006c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c88:	d50b      	bpl.n	8006ca2 <_Z14motor_standardv+0x1a2>
			HAL_GPIO_WritePin(MOTORPLUS_PORT_bl, MOTORPLUS_PIN_bl, GPIO_PIN_SET);
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	2110      	movs	r1, #16
 8006c8e:	481a      	ldr	r0, [pc, #104]	; (8006cf8 <_Z14motor_standardv+0x1f8>)
 8006c90:	f003 fcec 	bl	800a66c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_bl, MOTORMINUS_PIN_bl, GPIO_PIN_RESET);
 8006c94:	2200      	movs	r2, #0
 8006c96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006c9a:	481b      	ldr	r0, [pc, #108]	; (8006d08 <_Z14motor_standardv+0x208>)
 8006c9c:	f003 fce6 	bl	800a66c <HAL_GPIO_WritePin>
 8006ca0:	e00a      	b.n	8006cb8 <_Z14motor_standardv+0x1b8>
		}
		else{
			HAL_GPIO_WritePin(MOTORPLUS_PORT_bl, MOTORPLUS_PIN_bl, GPIO_PIN_RESET);
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	2110      	movs	r1, #16
 8006ca6:	4814      	ldr	r0, [pc, #80]	; (8006cf8 <_Z14motor_standardv+0x1f8>)
 8006ca8:	f003 fce0 	bl	800a66c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_bl, MOTORMINUS_PIN_bl, GPIO_PIN_SET);
 8006cac:	2201      	movs	r2, #1
 8006cae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006cb2:	4815      	ldr	r0, [pc, #84]	; (8006d08 <_Z14motor_standardv+0x208>)
 8006cb4:	f003 fcda 	bl	800a66c <HAL_GPIO_WritePin>
		}
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_2, fabs(bl.PWM));
 8006cb8:	4b12      	ldr	r3, [pc, #72]	; (8006d04 <_Z14motor_standardv+0x204>)
 8006cba:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8006cbe:	eeb0 7bc7 	vabs.f64	d7, d7
 8006cc2:	4b0e      	ldr	r3, [pc, #56]	; (8006cfc <_Z14motor_standardv+0x1fc>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006cca:	ee17 2a90 	vmov	r2, s15
 8006cce:	639a      	str	r2, [r3, #56]	; 0x38

}
 8006cd0:	bf00      	nop
 8006cd2:	bd80      	pop	{r7, pc}
 8006cd4:	24000280 	.word	0x24000280
 8006cd8:	240000a0 	.word	0x240000a0
 8006cdc:	58020c00 	.word	0x58020c00
 8006ce0:	24000448 	.word	0x24000448
 8006ce4:	24000364 	.word	0x24000364
 8006ce8:	24000110 	.word	0x24000110
 8006cec:	58020400 	.word	0x58020400
 8006cf0:	240002cc 	.word	0x240002cc
 8006cf4:	24000180 	.word	0x24000180
 8006cf8:	58021000 	.word	0x58021000
 8006cfc:	2400052c 	.word	0x2400052c
 8006d00:	24000318 	.word	0x24000318
 8006d04:	240001f0 	.word	0x240001f0
 8006d08:	58020800 	.word	0x58020800

08006d0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8006d0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006d44 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8006d10:	f7ff fd44 	bl	800679c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006d14:	480c      	ldr	r0, [pc, #48]	; (8006d48 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006d16:	490d      	ldr	r1, [pc, #52]	; (8006d4c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006d18:	4a0d      	ldr	r2, [pc, #52]	; (8006d50 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006d1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006d1c:	e002      	b.n	8006d24 <LoopCopyDataInit>

08006d1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006d1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006d20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006d22:	3304      	adds	r3, #4

08006d24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006d24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006d26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006d28:	d3f9      	bcc.n	8006d1e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006d2a:	4a0a      	ldr	r2, [pc, #40]	; (8006d54 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006d2c:	4c0a      	ldr	r4, [pc, #40]	; (8006d58 <LoopFillZerobss+0x22>)
  movs r3, #0
 8006d2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006d30:	e001      	b.n	8006d36 <LoopFillZerobss>

08006d32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006d32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006d34:	3204      	adds	r2, #4

08006d36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006d36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006d38:	d3fb      	bcc.n	8006d32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006d3a:	f00a fc1b 	bl	8011574 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006d3e:	f7f9 ff05 	bl	8000b4c <main>
  bx  lr
 8006d42:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006d44:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8006d48:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8006d4c:	2400007c 	.word	0x2400007c
  ldr r2, =_sidata
 8006d50:	080135b8 	.word	0x080135b8
  ldr r2, =_sbss
 8006d54:	24000080 	.word	0x24000080
  ldr r4, =_ebss
 8006d58:	24002354 	.word	0x24002354

08006d5c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006d5c:	e7fe      	b.n	8006d5c <ADC3_IRQHandler>
	...

08006d60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b082      	sub	sp, #8
 8006d64:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006d66:	2003      	movs	r0, #3
 8006d68:	f000 f980 	bl	800706c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006d6c:	f004 fa36 	bl	800b1dc <HAL_RCC_GetSysClockFreq>
 8006d70:	4602      	mov	r2, r0
 8006d72:	4b15      	ldr	r3, [pc, #84]	; (8006dc8 <HAL_Init+0x68>)
 8006d74:	699b      	ldr	r3, [r3, #24]
 8006d76:	0a1b      	lsrs	r3, r3, #8
 8006d78:	f003 030f 	and.w	r3, r3, #15
 8006d7c:	4913      	ldr	r1, [pc, #76]	; (8006dcc <HAL_Init+0x6c>)
 8006d7e:	5ccb      	ldrb	r3, [r1, r3]
 8006d80:	f003 031f 	and.w	r3, r3, #31
 8006d84:	fa22 f303 	lsr.w	r3, r2, r3
 8006d88:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006d8a:	4b0f      	ldr	r3, [pc, #60]	; (8006dc8 <HAL_Init+0x68>)
 8006d8c:	699b      	ldr	r3, [r3, #24]
 8006d8e:	f003 030f 	and.w	r3, r3, #15
 8006d92:	4a0e      	ldr	r2, [pc, #56]	; (8006dcc <HAL_Init+0x6c>)
 8006d94:	5cd3      	ldrb	r3, [r2, r3]
 8006d96:	f003 031f 	and.w	r3, r3, #31
 8006d9a:	687a      	ldr	r2, [r7, #4]
 8006d9c:	fa22 f303 	lsr.w	r3, r2, r3
 8006da0:	4a0b      	ldr	r2, [pc, #44]	; (8006dd0 <HAL_Init+0x70>)
 8006da2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006da4:	4a0b      	ldr	r2, [pc, #44]	; (8006dd4 <HAL_Init+0x74>)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006daa:	200f      	movs	r0, #15
 8006dac:	f000 f814 	bl	8006dd8 <HAL_InitTick>
 8006db0:	4603      	mov	r3, r0
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d001      	beq.n	8006dba <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8006db6:	2301      	movs	r3, #1
 8006db8:	e002      	b.n	8006dc0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8006dba:	f7ff f83f 	bl	8005e3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006dbe:	2300      	movs	r3, #0
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3708      	adds	r7, #8
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}
 8006dc8:	58024400 	.word	0x58024400
 8006dcc:	08011c58 	.word	0x08011c58
 8006dd0:	24000008 	.word	0x24000008
 8006dd4:	24000004 	.word	0x24000004

08006dd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b082      	sub	sp, #8
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8006de0:	4b15      	ldr	r3, [pc, #84]	; (8006e38 <HAL_InitTick+0x60>)
 8006de2:	781b      	ldrb	r3, [r3, #0]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d101      	bne.n	8006dec <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8006de8:	2301      	movs	r3, #1
 8006dea:	e021      	b.n	8006e30 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8006dec:	4b13      	ldr	r3, [pc, #76]	; (8006e3c <HAL_InitTick+0x64>)
 8006dee:	681a      	ldr	r2, [r3, #0]
 8006df0:	4b11      	ldr	r3, [pc, #68]	; (8006e38 <HAL_InitTick+0x60>)
 8006df2:	781b      	ldrb	r3, [r3, #0]
 8006df4:	4619      	mov	r1, r3
 8006df6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006dfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8006dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e02:	4618      	mov	r0, r3
 8006e04:	f000 f973 	bl	80070ee <HAL_SYSTICK_Config>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d001      	beq.n	8006e12 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e00e      	b.n	8006e30 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2b0f      	cmp	r3, #15
 8006e16:	d80a      	bhi.n	8006e2e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006e18:	2200      	movs	r2, #0
 8006e1a:	6879      	ldr	r1, [r7, #4]
 8006e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8006e20:	f000 f92f 	bl	8007082 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006e24:	4a06      	ldr	r2, [pc, #24]	; (8006e40 <HAL_InitTick+0x68>)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	e000      	b.n	8006e30 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8006e2e:	2301      	movs	r3, #1
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3708      	adds	r7, #8
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}
 8006e38:	24000010 	.word	0x24000010
 8006e3c:	24000004 	.word	0x24000004
 8006e40:	2400000c 	.word	0x2400000c

08006e44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006e44:	b480      	push	{r7}
 8006e46:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006e48:	4b06      	ldr	r3, [pc, #24]	; (8006e64 <HAL_IncTick+0x20>)
 8006e4a:	781b      	ldrb	r3, [r3, #0]
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	4b06      	ldr	r3, [pc, #24]	; (8006e68 <HAL_IncTick+0x24>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4413      	add	r3, r2
 8006e54:	4a04      	ldr	r2, [pc, #16]	; (8006e68 <HAL_IncTick+0x24>)
 8006e56:	6013      	str	r3, [r2, #0]
}
 8006e58:	bf00      	nop
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e60:	4770      	bx	lr
 8006e62:	bf00      	nop
 8006e64:	24000010 	.word	0x24000010
 8006e68:	24002340 	.word	0x24002340

08006e6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	af00      	add	r7, sp, #0
  return uwTick;
 8006e70:	4b03      	ldr	r3, [pc, #12]	; (8006e80 <HAL_GetTick+0x14>)
 8006e72:	681b      	ldr	r3, [r3, #0]
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	46bd      	mov	sp, r7
 8006e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7c:	4770      	bx	lr
 8006e7e:	bf00      	nop
 8006e80:	24002340 	.word	0x24002340

08006e84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b085      	sub	sp, #20
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f003 0307 	and.w	r3, r3, #7
 8006e92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006e94:	4b0b      	ldr	r3, [pc, #44]	; (8006ec4 <__NVIC_SetPriorityGrouping+0x40>)
 8006e96:	68db      	ldr	r3, [r3, #12]
 8006e98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006e9a:	68ba      	ldr	r2, [r7, #8]
 8006e9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006ea0:	4013      	ands	r3, r2
 8006ea2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006eac:	4b06      	ldr	r3, [pc, #24]	; (8006ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006eb2:	4a04      	ldr	r2, [pc, #16]	; (8006ec4 <__NVIC_SetPriorityGrouping+0x40>)
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	60d3      	str	r3, [r2, #12]
}
 8006eb8:	bf00      	nop
 8006eba:	3714      	adds	r7, #20
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr
 8006ec4:	e000ed00 	.word	0xe000ed00
 8006ec8:	05fa0000 	.word	0x05fa0000

08006ecc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006ed0:	4b04      	ldr	r3, [pc, #16]	; (8006ee4 <__NVIC_GetPriorityGrouping+0x18>)
 8006ed2:	68db      	ldr	r3, [r3, #12]
 8006ed4:	0a1b      	lsrs	r3, r3, #8
 8006ed6:	f003 0307 	and.w	r3, r3, #7
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr
 8006ee4:	e000ed00 	.word	0xe000ed00

08006ee8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b083      	sub	sp, #12
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	4603      	mov	r3, r0
 8006ef0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006ef2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	db0b      	blt.n	8006f12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006efa:	88fb      	ldrh	r3, [r7, #6]
 8006efc:	f003 021f 	and.w	r2, r3, #31
 8006f00:	4907      	ldr	r1, [pc, #28]	; (8006f20 <__NVIC_EnableIRQ+0x38>)
 8006f02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006f06:	095b      	lsrs	r3, r3, #5
 8006f08:	2001      	movs	r0, #1
 8006f0a:	fa00 f202 	lsl.w	r2, r0, r2
 8006f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006f12:	bf00      	nop
 8006f14:	370c      	adds	r7, #12
 8006f16:	46bd      	mov	sp, r7
 8006f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1c:	4770      	bx	lr
 8006f1e:	bf00      	nop
 8006f20:	e000e100 	.word	0xe000e100

08006f24 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b083      	sub	sp, #12
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006f2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	db12      	blt.n	8006f5c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006f36:	88fb      	ldrh	r3, [r7, #6]
 8006f38:	f003 021f 	and.w	r2, r3, #31
 8006f3c:	490a      	ldr	r1, [pc, #40]	; (8006f68 <__NVIC_DisableIRQ+0x44>)
 8006f3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006f42:	095b      	lsrs	r3, r3, #5
 8006f44:	2001      	movs	r0, #1
 8006f46:	fa00 f202 	lsl.w	r2, r0, r2
 8006f4a:	3320      	adds	r3, #32
 8006f4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006f50:	f3bf 8f4f 	dsb	sy
}
 8006f54:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006f56:	f3bf 8f6f 	isb	sy
}
 8006f5a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8006f5c:	bf00      	nop
 8006f5e:	370c      	adds	r7, #12
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr
 8006f68:	e000e100 	.word	0xe000e100

08006f6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b083      	sub	sp, #12
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	4603      	mov	r3, r0
 8006f74:	6039      	str	r1, [r7, #0]
 8006f76:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006f78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	db0a      	blt.n	8006f96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	b2da      	uxtb	r2, r3
 8006f84:	490c      	ldr	r1, [pc, #48]	; (8006fb8 <__NVIC_SetPriority+0x4c>)
 8006f86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006f8a:	0112      	lsls	r2, r2, #4
 8006f8c:	b2d2      	uxtb	r2, r2
 8006f8e:	440b      	add	r3, r1
 8006f90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006f94:	e00a      	b.n	8006fac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	b2da      	uxtb	r2, r3
 8006f9a:	4908      	ldr	r1, [pc, #32]	; (8006fbc <__NVIC_SetPriority+0x50>)
 8006f9c:	88fb      	ldrh	r3, [r7, #6]
 8006f9e:	f003 030f 	and.w	r3, r3, #15
 8006fa2:	3b04      	subs	r3, #4
 8006fa4:	0112      	lsls	r2, r2, #4
 8006fa6:	b2d2      	uxtb	r2, r2
 8006fa8:	440b      	add	r3, r1
 8006faa:	761a      	strb	r2, [r3, #24]
}
 8006fac:	bf00      	nop
 8006fae:	370c      	adds	r7, #12
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr
 8006fb8:	e000e100 	.word	0xe000e100
 8006fbc:	e000ed00 	.word	0xe000ed00

08006fc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b089      	sub	sp, #36	; 0x24
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	60f8      	str	r0, [r7, #12]
 8006fc8:	60b9      	str	r1, [r7, #8]
 8006fca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f003 0307 	and.w	r3, r3, #7
 8006fd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006fd4:	69fb      	ldr	r3, [r7, #28]
 8006fd6:	f1c3 0307 	rsb	r3, r3, #7
 8006fda:	2b04      	cmp	r3, #4
 8006fdc:	bf28      	it	cs
 8006fde:	2304      	movcs	r3, #4
 8006fe0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006fe2:	69fb      	ldr	r3, [r7, #28]
 8006fe4:	3304      	adds	r3, #4
 8006fe6:	2b06      	cmp	r3, #6
 8006fe8:	d902      	bls.n	8006ff0 <NVIC_EncodePriority+0x30>
 8006fea:	69fb      	ldr	r3, [r7, #28]
 8006fec:	3b03      	subs	r3, #3
 8006fee:	e000      	b.n	8006ff2 <NVIC_EncodePriority+0x32>
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8006ff8:	69bb      	ldr	r3, [r7, #24]
 8006ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8006ffe:	43da      	mvns	r2, r3
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	401a      	ands	r2, r3
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007008:	f04f 31ff 	mov.w	r1, #4294967295
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	fa01 f303 	lsl.w	r3, r1, r3
 8007012:	43d9      	mvns	r1, r3
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007018:	4313      	orrs	r3, r2
         );
}
 800701a:	4618      	mov	r0, r3
 800701c:	3724      	adds	r7, #36	; 0x24
 800701e:	46bd      	mov	sp, r7
 8007020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007024:	4770      	bx	lr
	...

08007028 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b082      	sub	sp, #8
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	3b01      	subs	r3, #1
 8007034:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007038:	d301      	bcc.n	800703e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800703a:	2301      	movs	r3, #1
 800703c:	e00f      	b.n	800705e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800703e:	4a0a      	ldr	r2, [pc, #40]	; (8007068 <SysTick_Config+0x40>)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	3b01      	subs	r3, #1
 8007044:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007046:	210f      	movs	r1, #15
 8007048:	f04f 30ff 	mov.w	r0, #4294967295
 800704c:	f7ff ff8e 	bl	8006f6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007050:	4b05      	ldr	r3, [pc, #20]	; (8007068 <SysTick_Config+0x40>)
 8007052:	2200      	movs	r2, #0
 8007054:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007056:	4b04      	ldr	r3, [pc, #16]	; (8007068 <SysTick_Config+0x40>)
 8007058:	2207      	movs	r2, #7
 800705a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800705c:	2300      	movs	r3, #0
}
 800705e:	4618      	mov	r0, r3
 8007060:	3708      	adds	r7, #8
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}
 8007066:	bf00      	nop
 8007068:	e000e010 	.word	0xe000e010

0800706c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b082      	sub	sp, #8
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f7ff ff05 	bl	8006e84 <__NVIC_SetPriorityGrouping>
}
 800707a:	bf00      	nop
 800707c:	3708      	adds	r7, #8
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}

08007082 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007082:	b580      	push	{r7, lr}
 8007084:	b086      	sub	sp, #24
 8007086:	af00      	add	r7, sp, #0
 8007088:	4603      	mov	r3, r0
 800708a:	60b9      	str	r1, [r7, #8]
 800708c:	607a      	str	r2, [r7, #4]
 800708e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007090:	f7ff ff1c 	bl	8006ecc <__NVIC_GetPriorityGrouping>
 8007094:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007096:	687a      	ldr	r2, [r7, #4]
 8007098:	68b9      	ldr	r1, [r7, #8]
 800709a:	6978      	ldr	r0, [r7, #20]
 800709c:	f7ff ff90 	bl	8006fc0 <NVIC_EncodePriority>
 80070a0:	4602      	mov	r2, r0
 80070a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80070a6:	4611      	mov	r1, r2
 80070a8:	4618      	mov	r0, r3
 80070aa:	f7ff ff5f 	bl	8006f6c <__NVIC_SetPriority>
}
 80070ae:	bf00      	nop
 80070b0:	3718      	adds	r7, #24
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}

080070b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80070b6:	b580      	push	{r7, lr}
 80070b8:	b082      	sub	sp, #8
 80070ba:	af00      	add	r7, sp, #0
 80070bc:	4603      	mov	r3, r0
 80070be:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80070c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80070c4:	4618      	mov	r0, r3
 80070c6:	f7ff ff0f 	bl	8006ee8 <__NVIC_EnableIRQ>
}
 80070ca:	bf00      	nop
 80070cc:	3708      	adds	r7, #8
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}

080070d2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80070d2:	b580      	push	{r7, lr}
 80070d4:	b082      	sub	sp, #8
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	4603      	mov	r3, r0
 80070da:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80070dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80070e0:	4618      	mov	r0, r3
 80070e2:	f7ff ff1f 	bl	8006f24 <__NVIC_DisableIRQ>
}
 80070e6:	bf00      	nop
 80070e8:	3708      	adds	r7, #8
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}

080070ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80070ee:	b580      	push	{r7, lr}
 80070f0:	b082      	sub	sp, #8
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f7ff ff96 	bl	8007028 <SysTick_Config>
 80070fc:	4603      	mov	r3, r0
}
 80070fe:	4618      	mov	r0, r3
 8007100:	3708      	adds	r7, #8
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}
	...

08007108 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b086      	sub	sp, #24
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8007110:	f7ff feac 	bl	8006e6c <HAL_GetTick>
 8007114:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d101      	bne.n	8007120 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800711c:	2301      	movs	r3, #1
 800711e:	e314      	b.n	800774a <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a66      	ldr	r2, [pc, #408]	; (80072c0 <HAL_DMA_Init+0x1b8>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d04a      	beq.n	80071c0 <HAL_DMA_Init+0xb8>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a65      	ldr	r2, [pc, #404]	; (80072c4 <HAL_DMA_Init+0x1bc>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d045      	beq.n	80071c0 <HAL_DMA_Init+0xb8>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a63      	ldr	r2, [pc, #396]	; (80072c8 <HAL_DMA_Init+0x1c0>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d040      	beq.n	80071c0 <HAL_DMA_Init+0xb8>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a62      	ldr	r2, [pc, #392]	; (80072cc <HAL_DMA_Init+0x1c4>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d03b      	beq.n	80071c0 <HAL_DMA_Init+0xb8>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a60      	ldr	r2, [pc, #384]	; (80072d0 <HAL_DMA_Init+0x1c8>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d036      	beq.n	80071c0 <HAL_DMA_Init+0xb8>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a5f      	ldr	r2, [pc, #380]	; (80072d4 <HAL_DMA_Init+0x1cc>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d031      	beq.n	80071c0 <HAL_DMA_Init+0xb8>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a5d      	ldr	r2, [pc, #372]	; (80072d8 <HAL_DMA_Init+0x1d0>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d02c      	beq.n	80071c0 <HAL_DMA_Init+0xb8>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a5c      	ldr	r2, [pc, #368]	; (80072dc <HAL_DMA_Init+0x1d4>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d027      	beq.n	80071c0 <HAL_DMA_Init+0xb8>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a5a      	ldr	r2, [pc, #360]	; (80072e0 <HAL_DMA_Init+0x1d8>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d022      	beq.n	80071c0 <HAL_DMA_Init+0xb8>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a59      	ldr	r2, [pc, #356]	; (80072e4 <HAL_DMA_Init+0x1dc>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d01d      	beq.n	80071c0 <HAL_DMA_Init+0xb8>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a57      	ldr	r2, [pc, #348]	; (80072e8 <HAL_DMA_Init+0x1e0>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d018      	beq.n	80071c0 <HAL_DMA_Init+0xb8>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a56      	ldr	r2, [pc, #344]	; (80072ec <HAL_DMA_Init+0x1e4>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d013      	beq.n	80071c0 <HAL_DMA_Init+0xb8>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a54      	ldr	r2, [pc, #336]	; (80072f0 <HAL_DMA_Init+0x1e8>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d00e      	beq.n	80071c0 <HAL_DMA_Init+0xb8>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a53      	ldr	r2, [pc, #332]	; (80072f4 <HAL_DMA_Init+0x1ec>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d009      	beq.n	80071c0 <HAL_DMA_Init+0xb8>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a51      	ldr	r2, [pc, #324]	; (80072f8 <HAL_DMA_Init+0x1f0>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d004      	beq.n	80071c0 <HAL_DMA_Init+0xb8>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a50      	ldr	r2, [pc, #320]	; (80072fc <HAL_DMA_Init+0x1f4>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d101      	bne.n	80071c4 <HAL_DMA_Init+0xbc>
 80071c0:	2301      	movs	r3, #1
 80071c2:	e000      	b.n	80071c6 <HAL_DMA_Init+0xbe>
 80071c4:	2300      	movs	r3, #0
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	f000 813c 	beq.w	8007444 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2202      	movs	r2, #2
 80071d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2200      	movs	r2, #0
 80071d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a37      	ldr	r2, [pc, #220]	; (80072c0 <HAL_DMA_Init+0x1b8>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d04a      	beq.n	800727c <HAL_DMA_Init+0x174>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a36      	ldr	r2, [pc, #216]	; (80072c4 <HAL_DMA_Init+0x1bc>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d045      	beq.n	800727c <HAL_DMA_Init+0x174>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a34      	ldr	r2, [pc, #208]	; (80072c8 <HAL_DMA_Init+0x1c0>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d040      	beq.n	800727c <HAL_DMA_Init+0x174>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a33      	ldr	r2, [pc, #204]	; (80072cc <HAL_DMA_Init+0x1c4>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d03b      	beq.n	800727c <HAL_DMA_Init+0x174>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a31      	ldr	r2, [pc, #196]	; (80072d0 <HAL_DMA_Init+0x1c8>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d036      	beq.n	800727c <HAL_DMA_Init+0x174>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a30      	ldr	r2, [pc, #192]	; (80072d4 <HAL_DMA_Init+0x1cc>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d031      	beq.n	800727c <HAL_DMA_Init+0x174>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a2e      	ldr	r2, [pc, #184]	; (80072d8 <HAL_DMA_Init+0x1d0>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d02c      	beq.n	800727c <HAL_DMA_Init+0x174>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a2d      	ldr	r2, [pc, #180]	; (80072dc <HAL_DMA_Init+0x1d4>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d027      	beq.n	800727c <HAL_DMA_Init+0x174>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a2b      	ldr	r2, [pc, #172]	; (80072e0 <HAL_DMA_Init+0x1d8>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d022      	beq.n	800727c <HAL_DMA_Init+0x174>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a2a      	ldr	r2, [pc, #168]	; (80072e4 <HAL_DMA_Init+0x1dc>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d01d      	beq.n	800727c <HAL_DMA_Init+0x174>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a28      	ldr	r2, [pc, #160]	; (80072e8 <HAL_DMA_Init+0x1e0>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d018      	beq.n	800727c <HAL_DMA_Init+0x174>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a27      	ldr	r2, [pc, #156]	; (80072ec <HAL_DMA_Init+0x1e4>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d013      	beq.n	800727c <HAL_DMA_Init+0x174>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a25      	ldr	r2, [pc, #148]	; (80072f0 <HAL_DMA_Init+0x1e8>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d00e      	beq.n	800727c <HAL_DMA_Init+0x174>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a24      	ldr	r2, [pc, #144]	; (80072f4 <HAL_DMA_Init+0x1ec>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d009      	beq.n	800727c <HAL_DMA_Init+0x174>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a22      	ldr	r2, [pc, #136]	; (80072f8 <HAL_DMA_Init+0x1f0>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d004      	beq.n	800727c <HAL_DMA_Init+0x174>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a21      	ldr	r2, [pc, #132]	; (80072fc <HAL_DMA_Init+0x1f4>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d108      	bne.n	800728e <HAL_DMA_Init+0x186>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	681a      	ldr	r2, [r3, #0]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f022 0201 	bic.w	r2, r2, #1
 800728a:	601a      	str	r2, [r3, #0]
 800728c:	e007      	b.n	800729e <HAL_DMA_Init+0x196>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	681a      	ldr	r2, [r3, #0]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f022 0201 	bic.w	r2, r2, #1
 800729c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800729e:	e02f      	b.n	8007300 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80072a0:	f7ff fde4 	bl	8006e6c <HAL_GetTick>
 80072a4:	4602      	mov	r2, r0
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	1ad3      	subs	r3, r2, r3
 80072aa:	2b05      	cmp	r3, #5
 80072ac:	d928      	bls.n	8007300 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2220      	movs	r2, #32
 80072b2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2203      	movs	r2, #3
 80072b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80072bc:	2301      	movs	r3, #1
 80072be:	e244      	b.n	800774a <HAL_DMA_Init+0x642>
 80072c0:	40020010 	.word	0x40020010
 80072c4:	40020028 	.word	0x40020028
 80072c8:	40020040 	.word	0x40020040
 80072cc:	40020058 	.word	0x40020058
 80072d0:	40020070 	.word	0x40020070
 80072d4:	40020088 	.word	0x40020088
 80072d8:	400200a0 	.word	0x400200a0
 80072dc:	400200b8 	.word	0x400200b8
 80072e0:	40020410 	.word	0x40020410
 80072e4:	40020428 	.word	0x40020428
 80072e8:	40020440 	.word	0x40020440
 80072ec:	40020458 	.word	0x40020458
 80072f0:	40020470 	.word	0x40020470
 80072f4:	40020488 	.word	0x40020488
 80072f8:	400204a0 	.word	0x400204a0
 80072fc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f003 0301 	and.w	r3, r3, #1
 800730a:	2b00      	cmp	r3, #0
 800730c:	d1c8      	bne.n	80072a0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007316:	697a      	ldr	r2, [r7, #20]
 8007318:	4b84      	ldr	r3, [pc, #528]	; (800752c <HAL_DMA_Init+0x424>)
 800731a:	4013      	ands	r3, r2
 800731c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8007326:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	691b      	ldr	r3, [r3, #16]
 800732c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007332:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	699b      	ldr	r3, [r3, #24]
 8007338:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800733e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6a1b      	ldr	r3, [r3, #32]
 8007344:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8007346:	697a      	ldr	r2, [r7, #20]
 8007348:	4313      	orrs	r3, r2
 800734a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007350:	2b04      	cmp	r3, #4
 8007352:	d107      	bne.n	8007364 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800735c:	4313      	orrs	r3, r2
 800735e:	697a      	ldr	r2, [r7, #20]
 8007360:	4313      	orrs	r3, r2
 8007362:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	2b28      	cmp	r3, #40	; 0x28
 800736a:	d903      	bls.n	8007374 <HAL_DMA_Init+0x26c>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	2b2e      	cmp	r3, #46	; 0x2e
 8007372:	d91f      	bls.n	80073b4 <HAL_DMA_Init+0x2ac>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	2b3e      	cmp	r3, #62	; 0x3e
 800737a:	d903      	bls.n	8007384 <HAL_DMA_Init+0x27c>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	2b42      	cmp	r3, #66	; 0x42
 8007382:	d917      	bls.n	80073b4 <HAL_DMA_Init+0x2ac>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	2b46      	cmp	r3, #70	; 0x46
 800738a:	d903      	bls.n	8007394 <HAL_DMA_Init+0x28c>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	2b48      	cmp	r3, #72	; 0x48
 8007392:	d90f      	bls.n	80073b4 <HAL_DMA_Init+0x2ac>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	2b4e      	cmp	r3, #78	; 0x4e
 800739a:	d903      	bls.n	80073a4 <HAL_DMA_Init+0x29c>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	2b52      	cmp	r3, #82	; 0x52
 80073a2:	d907      	bls.n	80073b4 <HAL_DMA_Init+0x2ac>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	2b73      	cmp	r3, #115	; 0x73
 80073aa:	d905      	bls.n	80073b8 <HAL_DMA_Init+0x2b0>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	685b      	ldr	r3, [r3, #4]
 80073b0:	2b77      	cmp	r3, #119	; 0x77
 80073b2:	d801      	bhi.n	80073b8 <HAL_DMA_Init+0x2b0>
 80073b4:	2301      	movs	r3, #1
 80073b6:	e000      	b.n	80073ba <HAL_DMA_Init+0x2b2>
 80073b8:	2300      	movs	r3, #0
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d003      	beq.n	80073c6 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80073c4:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	697a      	ldr	r2, [r7, #20]
 80073cc:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	695b      	ldr	r3, [r3, #20]
 80073d4:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	f023 0307 	bic.w	r3, r3, #7
 80073dc:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e2:	697a      	ldr	r2, [r7, #20]
 80073e4:	4313      	orrs	r3, r2
 80073e6:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ec:	2b04      	cmp	r3, #4
 80073ee:	d117      	bne.n	8007420 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073f4:	697a      	ldr	r2, [r7, #20]
 80073f6:	4313      	orrs	r3, r2
 80073f8:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d00e      	beq.n	8007420 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f002 fce6 	bl	8009dd4 <DMA_CheckFifoParam>
 8007408:	4603      	mov	r3, r0
 800740a:	2b00      	cmp	r3, #0
 800740c:	d008      	beq.n	8007420 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2240      	movs	r2, #64	; 0x40
 8007412:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2201      	movs	r2, #1
 8007418:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800741c:	2301      	movs	r3, #1
 800741e:	e194      	b.n	800774a <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	697a      	ldr	r2, [r7, #20]
 8007426:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f002 fc21 	bl	8009c70 <DMA_CalcBaseAndBitshift>
 800742e:	4603      	mov	r3, r0
 8007430:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007436:	f003 031f 	and.w	r3, r3, #31
 800743a:	223f      	movs	r2, #63	; 0x3f
 800743c:	409a      	lsls	r2, r3
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	609a      	str	r2, [r3, #8]
 8007442:	e0ca      	b.n	80075da <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a39      	ldr	r2, [pc, #228]	; (8007530 <HAL_DMA_Init+0x428>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d022      	beq.n	8007494 <HAL_DMA_Init+0x38c>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a38      	ldr	r2, [pc, #224]	; (8007534 <HAL_DMA_Init+0x42c>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d01d      	beq.n	8007494 <HAL_DMA_Init+0x38c>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a36      	ldr	r2, [pc, #216]	; (8007538 <HAL_DMA_Init+0x430>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d018      	beq.n	8007494 <HAL_DMA_Init+0x38c>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a35      	ldr	r2, [pc, #212]	; (800753c <HAL_DMA_Init+0x434>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d013      	beq.n	8007494 <HAL_DMA_Init+0x38c>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a33      	ldr	r2, [pc, #204]	; (8007540 <HAL_DMA_Init+0x438>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d00e      	beq.n	8007494 <HAL_DMA_Init+0x38c>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a32      	ldr	r2, [pc, #200]	; (8007544 <HAL_DMA_Init+0x43c>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d009      	beq.n	8007494 <HAL_DMA_Init+0x38c>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a30      	ldr	r2, [pc, #192]	; (8007548 <HAL_DMA_Init+0x440>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d004      	beq.n	8007494 <HAL_DMA_Init+0x38c>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a2f      	ldr	r2, [pc, #188]	; (800754c <HAL_DMA_Init+0x444>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d101      	bne.n	8007498 <HAL_DMA_Init+0x390>
 8007494:	2301      	movs	r3, #1
 8007496:	e000      	b.n	800749a <HAL_DMA_Init+0x392>
 8007498:	2300      	movs	r3, #0
 800749a:	2b00      	cmp	r3, #0
 800749c:	f000 8094 	beq.w	80075c8 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a22      	ldr	r2, [pc, #136]	; (8007530 <HAL_DMA_Init+0x428>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d021      	beq.n	80074ee <HAL_DMA_Init+0x3e6>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a21      	ldr	r2, [pc, #132]	; (8007534 <HAL_DMA_Init+0x42c>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d01c      	beq.n	80074ee <HAL_DMA_Init+0x3e6>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a1f      	ldr	r2, [pc, #124]	; (8007538 <HAL_DMA_Init+0x430>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d017      	beq.n	80074ee <HAL_DMA_Init+0x3e6>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a1e      	ldr	r2, [pc, #120]	; (800753c <HAL_DMA_Init+0x434>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d012      	beq.n	80074ee <HAL_DMA_Init+0x3e6>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a1c      	ldr	r2, [pc, #112]	; (8007540 <HAL_DMA_Init+0x438>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d00d      	beq.n	80074ee <HAL_DMA_Init+0x3e6>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a1b      	ldr	r2, [pc, #108]	; (8007544 <HAL_DMA_Init+0x43c>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d008      	beq.n	80074ee <HAL_DMA_Init+0x3e6>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a19      	ldr	r2, [pc, #100]	; (8007548 <HAL_DMA_Init+0x440>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d003      	beq.n	80074ee <HAL_DMA_Init+0x3e6>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a18      	ldr	r2, [pc, #96]	; (800754c <HAL_DMA_Init+0x444>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2202      	movs	r2, #2
 80074f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2200      	movs	r2, #0
 80074fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8007508:	697a      	ldr	r2, [r7, #20]
 800750a:	4b11      	ldr	r3, [pc, #68]	; (8007550 <HAL_DMA_Init+0x448>)
 800750c:	4013      	ands	r3, r2
 800750e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	689b      	ldr	r3, [r3, #8]
 8007514:	2b40      	cmp	r3, #64	; 0x40
 8007516:	d01d      	beq.n	8007554 <HAL_DMA_Init+0x44c>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	689b      	ldr	r3, [r3, #8]
 800751c:	2b80      	cmp	r3, #128	; 0x80
 800751e:	d102      	bne.n	8007526 <HAL_DMA_Init+0x41e>
 8007520:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007524:	e017      	b.n	8007556 <HAL_DMA_Init+0x44e>
 8007526:	2300      	movs	r3, #0
 8007528:	e015      	b.n	8007556 <HAL_DMA_Init+0x44e>
 800752a:	bf00      	nop
 800752c:	fe10803f 	.word	0xfe10803f
 8007530:	58025408 	.word	0x58025408
 8007534:	5802541c 	.word	0x5802541c
 8007538:	58025430 	.word	0x58025430
 800753c:	58025444 	.word	0x58025444
 8007540:	58025458 	.word	0x58025458
 8007544:	5802546c 	.word	0x5802546c
 8007548:	58025480 	.word	0x58025480
 800754c:	58025494 	.word	0x58025494
 8007550:	fffe000f 	.word	0xfffe000f
 8007554:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007556:	687a      	ldr	r2, [r7, #4]
 8007558:	68d2      	ldr	r2, [r2, #12]
 800755a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800755c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	691b      	ldr	r3, [r3, #16]
 8007562:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007564:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	695b      	ldr	r3, [r3, #20]
 800756a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800756c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	699b      	ldr	r3, [r3, #24]
 8007572:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007574:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	69db      	ldr	r3, [r3, #28]
 800757a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800757c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6a1b      	ldr	r3, [r3, #32]
 8007582:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007584:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007586:	697a      	ldr	r2, [r7, #20]
 8007588:	4313      	orrs	r3, r2
 800758a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	697a      	ldr	r2, [r7, #20]
 8007592:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	461a      	mov	r2, r3
 800759a:	4b6e      	ldr	r3, [pc, #440]	; (8007754 <HAL_DMA_Init+0x64c>)
 800759c:	4413      	add	r3, r2
 800759e:	4a6e      	ldr	r2, [pc, #440]	; (8007758 <HAL_DMA_Init+0x650>)
 80075a0:	fba2 2303 	umull	r2, r3, r2, r3
 80075a4:	091b      	lsrs	r3, r3, #4
 80075a6:	009a      	lsls	r2, r3, #2
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f002 fb5f 	bl	8009c70 <DMA_CalcBaseAndBitshift>
 80075b2:	4603      	mov	r3, r0
 80075b4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075ba:	f003 031f 	and.w	r3, r3, #31
 80075be:	2201      	movs	r2, #1
 80075c0:	409a      	lsls	r2, r3
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	605a      	str	r2, [r3, #4]
 80075c6:	e008      	b.n	80075da <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2240      	movs	r2, #64	; 0x40
 80075cc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2203      	movs	r2, #3
 80075d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80075d6:	2301      	movs	r3, #1
 80075d8:	e0b7      	b.n	800774a <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a5f      	ldr	r2, [pc, #380]	; (800775c <HAL_DMA_Init+0x654>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d072      	beq.n	80076ca <HAL_DMA_Init+0x5c2>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a5d      	ldr	r2, [pc, #372]	; (8007760 <HAL_DMA_Init+0x658>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d06d      	beq.n	80076ca <HAL_DMA_Init+0x5c2>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a5c      	ldr	r2, [pc, #368]	; (8007764 <HAL_DMA_Init+0x65c>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d068      	beq.n	80076ca <HAL_DMA_Init+0x5c2>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a5a      	ldr	r2, [pc, #360]	; (8007768 <HAL_DMA_Init+0x660>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d063      	beq.n	80076ca <HAL_DMA_Init+0x5c2>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a59      	ldr	r2, [pc, #356]	; (800776c <HAL_DMA_Init+0x664>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d05e      	beq.n	80076ca <HAL_DMA_Init+0x5c2>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a57      	ldr	r2, [pc, #348]	; (8007770 <HAL_DMA_Init+0x668>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d059      	beq.n	80076ca <HAL_DMA_Init+0x5c2>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a56      	ldr	r2, [pc, #344]	; (8007774 <HAL_DMA_Init+0x66c>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d054      	beq.n	80076ca <HAL_DMA_Init+0x5c2>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a54      	ldr	r2, [pc, #336]	; (8007778 <HAL_DMA_Init+0x670>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d04f      	beq.n	80076ca <HAL_DMA_Init+0x5c2>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a53      	ldr	r2, [pc, #332]	; (800777c <HAL_DMA_Init+0x674>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d04a      	beq.n	80076ca <HAL_DMA_Init+0x5c2>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a51      	ldr	r2, [pc, #324]	; (8007780 <HAL_DMA_Init+0x678>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d045      	beq.n	80076ca <HAL_DMA_Init+0x5c2>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a50      	ldr	r2, [pc, #320]	; (8007784 <HAL_DMA_Init+0x67c>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d040      	beq.n	80076ca <HAL_DMA_Init+0x5c2>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a4e      	ldr	r2, [pc, #312]	; (8007788 <HAL_DMA_Init+0x680>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d03b      	beq.n	80076ca <HAL_DMA_Init+0x5c2>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4a4d      	ldr	r2, [pc, #308]	; (800778c <HAL_DMA_Init+0x684>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d036      	beq.n	80076ca <HAL_DMA_Init+0x5c2>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a4b      	ldr	r2, [pc, #300]	; (8007790 <HAL_DMA_Init+0x688>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d031      	beq.n	80076ca <HAL_DMA_Init+0x5c2>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a4a      	ldr	r2, [pc, #296]	; (8007794 <HAL_DMA_Init+0x68c>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d02c      	beq.n	80076ca <HAL_DMA_Init+0x5c2>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a48      	ldr	r2, [pc, #288]	; (8007798 <HAL_DMA_Init+0x690>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d027      	beq.n	80076ca <HAL_DMA_Init+0x5c2>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4a47      	ldr	r2, [pc, #284]	; (800779c <HAL_DMA_Init+0x694>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d022      	beq.n	80076ca <HAL_DMA_Init+0x5c2>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a45      	ldr	r2, [pc, #276]	; (80077a0 <HAL_DMA_Init+0x698>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d01d      	beq.n	80076ca <HAL_DMA_Init+0x5c2>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4a44      	ldr	r2, [pc, #272]	; (80077a4 <HAL_DMA_Init+0x69c>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d018      	beq.n	80076ca <HAL_DMA_Init+0x5c2>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a42      	ldr	r2, [pc, #264]	; (80077a8 <HAL_DMA_Init+0x6a0>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d013      	beq.n	80076ca <HAL_DMA_Init+0x5c2>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a41      	ldr	r2, [pc, #260]	; (80077ac <HAL_DMA_Init+0x6a4>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d00e      	beq.n	80076ca <HAL_DMA_Init+0x5c2>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a3f      	ldr	r2, [pc, #252]	; (80077b0 <HAL_DMA_Init+0x6a8>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d009      	beq.n	80076ca <HAL_DMA_Init+0x5c2>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4a3e      	ldr	r2, [pc, #248]	; (80077b4 <HAL_DMA_Init+0x6ac>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d004      	beq.n	80076ca <HAL_DMA_Init+0x5c2>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a3c      	ldr	r2, [pc, #240]	; (80077b8 <HAL_DMA_Init+0x6b0>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d101      	bne.n	80076ce <HAL_DMA_Init+0x5c6>
 80076ca:	2301      	movs	r3, #1
 80076cc:	e000      	b.n	80076d0 <HAL_DMA_Init+0x5c8>
 80076ce:	2300      	movs	r3, #0
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d032      	beq.n	800773a <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f002 fbf9 	bl	8009ecc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	689b      	ldr	r3, [r3, #8]
 80076de:	2b80      	cmp	r3, #128	; 0x80
 80076e0:	d102      	bne.n	80076e8 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2200      	movs	r2, #0
 80076e6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	685a      	ldr	r2, [r3, #4]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076f0:	b2d2      	uxtb	r2, r2
 80076f2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076f8:	687a      	ldr	r2, [r7, #4]
 80076fa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80076fc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	685b      	ldr	r3, [r3, #4]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d010      	beq.n	8007728 <HAL_DMA_Init+0x620>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	2b08      	cmp	r3, #8
 800770c:	d80c      	bhi.n	8007728 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f002 fc76 	bl	800a000 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007718:	2200      	movs	r2, #0
 800771a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007720:	687a      	ldr	r2, [r7, #4]
 8007722:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007724:	605a      	str	r2, [r3, #4]
 8007726:	e008      	b.n	800773a <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2200      	movs	r2, #0
 800772c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2200      	movs	r2, #0
 8007732:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2200      	movs	r2, #0
 8007738:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2200      	movs	r2, #0
 800773e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2201      	movs	r2, #1
 8007744:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007748:	2300      	movs	r3, #0
}
 800774a:	4618      	mov	r0, r3
 800774c:	3718      	adds	r7, #24
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}
 8007752:	bf00      	nop
 8007754:	a7fdabf8 	.word	0xa7fdabf8
 8007758:	cccccccd 	.word	0xcccccccd
 800775c:	40020010 	.word	0x40020010
 8007760:	40020028 	.word	0x40020028
 8007764:	40020040 	.word	0x40020040
 8007768:	40020058 	.word	0x40020058
 800776c:	40020070 	.word	0x40020070
 8007770:	40020088 	.word	0x40020088
 8007774:	400200a0 	.word	0x400200a0
 8007778:	400200b8 	.word	0x400200b8
 800777c:	40020410 	.word	0x40020410
 8007780:	40020428 	.word	0x40020428
 8007784:	40020440 	.word	0x40020440
 8007788:	40020458 	.word	0x40020458
 800778c:	40020470 	.word	0x40020470
 8007790:	40020488 	.word	0x40020488
 8007794:	400204a0 	.word	0x400204a0
 8007798:	400204b8 	.word	0x400204b8
 800779c:	58025408 	.word	0x58025408
 80077a0:	5802541c 	.word	0x5802541c
 80077a4:	58025430 	.word	0x58025430
 80077a8:	58025444 	.word	0x58025444
 80077ac:	58025458 	.word	0x58025458
 80077b0:	5802546c 	.word	0x5802546c
 80077b4:	58025480 	.word	0x58025480
 80077b8:	58025494 	.word	0x58025494

080077bc <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b084      	sub	sp, #16
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d101      	bne.n	80077ce <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80077ca:	2301      	movs	r3, #1
 80077cc:	e1a8      	b.n	8007b20 <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a82      	ldr	r2, [pc, #520]	; (80079dc <HAL_DMA_DeInit+0x220>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d04a      	beq.n	800786e <HAL_DMA_DeInit+0xb2>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a80      	ldr	r2, [pc, #512]	; (80079e0 <HAL_DMA_DeInit+0x224>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d045      	beq.n	800786e <HAL_DMA_DeInit+0xb2>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a7f      	ldr	r2, [pc, #508]	; (80079e4 <HAL_DMA_DeInit+0x228>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d040      	beq.n	800786e <HAL_DMA_DeInit+0xb2>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a7d      	ldr	r2, [pc, #500]	; (80079e8 <HAL_DMA_DeInit+0x22c>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d03b      	beq.n	800786e <HAL_DMA_DeInit+0xb2>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a7c      	ldr	r2, [pc, #496]	; (80079ec <HAL_DMA_DeInit+0x230>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d036      	beq.n	800786e <HAL_DMA_DeInit+0xb2>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a7a      	ldr	r2, [pc, #488]	; (80079f0 <HAL_DMA_DeInit+0x234>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d031      	beq.n	800786e <HAL_DMA_DeInit+0xb2>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a79      	ldr	r2, [pc, #484]	; (80079f4 <HAL_DMA_DeInit+0x238>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d02c      	beq.n	800786e <HAL_DMA_DeInit+0xb2>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a77      	ldr	r2, [pc, #476]	; (80079f8 <HAL_DMA_DeInit+0x23c>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d027      	beq.n	800786e <HAL_DMA_DeInit+0xb2>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a76      	ldr	r2, [pc, #472]	; (80079fc <HAL_DMA_DeInit+0x240>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d022      	beq.n	800786e <HAL_DMA_DeInit+0xb2>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a74      	ldr	r2, [pc, #464]	; (8007a00 <HAL_DMA_DeInit+0x244>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d01d      	beq.n	800786e <HAL_DMA_DeInit+0xb2>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a73      	ldr	r2, [pc, #460]	; (8007a04 <HAL_DMA_DeInit+0x248>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d018      	beq.n	800786e <HAL_DMA_DeInit+0xb2>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a71      	ldr	r2, [pc, #452]	; (8007a08 <HAL_DMA_DeInit+0x24c>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d013      	beq.n	800786e <HAL_DMA_DeInit+0xb2>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a70      	ldr	r2, [pc, #448]	; (8007a0c <HAL_DMA_DeInit+0x250>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d00e      	beq.n	800786e <HAL_DMA_DeInit+0xb2>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a6e      	ldr	r2, [pc, #440]	; (8007a10 <HAL_DMA_DeInit+0x254>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d009      	beq.n	800786e <HAL_DMA_DeInit+0xb2>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a6d      	ldr	r2, [pc, #436]	; (8007a14 <HAL_DMA_DeInit+0x258>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d004      	beq.n	800786e <HAL_DMA_DeInit+0xb2>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a6b      	ldr	r2, [pc, #428]	; (8007a18 <HAL_DMA_DeInit+0x25c>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d108      	bne.n	8007880 <HAL_DMA_DeInit+0xc4>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	681a      	ldr	r2, [r3, #0]
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f022 0201 	bic.w	r2, r2, #1
 800787c:	601a      	str	r2, [r3, #0]
 800787e:	e007      	b.n	8007890 <HAL_DMA_DeInit+0xd4>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	681a      	ldr	r2, [r3, #0]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f022 0201 	bic.w	r2, r2, #1
 800788e:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a51      	ldr	r2, [pc, #324]	; (80079dc <HAL_DMA_DeInit+0x220>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d04a      	beq.n	8007930 <HAL_DMA_DeInit+0x174>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4a50      	ldr	r2, [pc, #320]	; (80079e0 <HAL_DMA_DeInit+0x224>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d045      	beq.n	8007930 <HAL_DMA_DeInit+0x174>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a4e      	ldr	r2, [pc, #312]	; (80079e4 <HAL_DMA_DeInit+0x228>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d040      	beq.n	8007930 <HAL_DMA_DeInit+0x174>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4a4d      	ldr	r2, [pc, #308]	; (80079e8 <HAL_DMA_DeInit+0x22c>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d03b      	beq.n	8007930 <HAL_DMA_DeInit+0x174>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a4b      	ldr	r2, [pc, #300]	; (80079ec <HAL_DMA_DeInit+0x230>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d036      	beq.n	8007930 <HAL_DMA_DeInit+0x174>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4a4a      	ldr	r2, [pc, #296]	; (80079f0 <HAL_DMA_DeInit+0x234>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d031      	beq.n	8007930 <HAL_DMA_DeInit+0x174>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a48      	ldr	r2, [pc, #288]	; (80079f4 <HAL_DMA_DeInit+0x238>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d02c      	beq.n	8007930 <HAL_DMA_DeInit+0x174>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a47      	ldr	r2, [pc, #284]	; (80079f8 <HAL_DMA_DeInit+0x23c>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d027      	beq.n	8007930 <HAL_DMA_DeInit+0x174>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4a45      	ldr	r2, [pc, #276]	; (80079fc <HAL_DMA_DeInit+0x240>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d022      	beq.n	8007930 <HAL_DMA_DeInit+0x174>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4a44      	ldr	r2, [pc, #272]	; (8007a00 <HAL_DMA_DeInit+0x244>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d01d      	beq.n	8007930 <HAL_DMA_DeInit+0x174>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4a42      	ldr	r2, [pc, #264]	; (8007a04 <HAL_DMA_DeInit+0x248>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d018      	beq.n	8007930 <HAL_DMA_DeInit+0x174>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4a41      	ldr	r2, [pc, #260]	; (8007a08 <HAL_DMA_DeInit+0x24c>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d013      	beq.n	8007930 <HAL_DMA_DeInit+0x174>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4a3f      	ldr	r2, [pc, #252]	; (8007a0c <HAL_DMA_DeInit+0x250>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d00e      	beq.n	8007930 <HAL_DMA_DeInit+0x174>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4a3e      	ldr	r2, [pc, #248]	; (8007a10 <HAL_DMA_DeInit+0x254>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d009      	beq.n	8007930 <HAL_DMA_DeInit+0x174>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4a3c      	ldr	r2, [pc, #240]	; (8007a14 <HAL_DMA_DeInit+0x258>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d004      	beq.n	8007930 <HAL_DMA_DeInit+0x174>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4a3b      	ldr	r2, [pc, #236]	; (8007a18 <HAL_DMA_DeInit+0x25c>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d101      	bne.n	8007934 <HAL_DMA_DeInit+0x178>
 8007930:	2301      	movs	r3, #1
 8007932:	e000      	b.n	8007936 <HAL_DMA_DeInit+0x17a>
 8007934:	2300      	movs	r3, #0
 8007936:	2b00      	cmp	r3, #0
 8007938:	d025      	beq.n	8007986 <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	2200      	movs	r2, #0
 8007940:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	2200      	movs	r2, #0
 8007948:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	2200      	movs	r2, #0
 8007950:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	2200      	movs	r2, #0
 8007958:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	2200      	movs	r2, #0
 8007960:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	2221      	movs	r2, #33	; 0x21
 8007968:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f002 f980 	bl	8009c70 <DMA_CalcBaseAndBitshift>
 8007970:	4603      	mov	r3, r0
 8007972:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007978:	f003 031f 	and.w	r3, r3, #31
 800797c:	223f      	movs	r2, #63	; 0x3f
 800797e:	409a      	lsls	r2, r3
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	609a      	str	r2, [r3, #8]
 8007984:	e081      	b.n	8007a8a <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a24      	ldr	r2, [pc, #144]	; (8007a1c <HAL_DMA_DeInit+0x260>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d022      	beq.n	80079d6 <HAL_DMA_DeInit+0x21a>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a22      	ldr	r2, [pc, #136]	; (8007a20 <HAL_DMA_DeInit+0x264>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d01d      	beq.n	80079d6 <HAL_DMA_DeInit+0x21a>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a21      	ldr	r2, [pc, #132]	; (8007a24 <HAL_DMA_DeInit+0x268>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d018      	beq.n	80079d6 <HAL_DMA_DeInit+0x21a>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a1f      	ldr	r2, [pc, #124]	; (8007a28 <HAL_DMA_DeInit+0x26c>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d013      	beq.n	80079d6 <HAL_DMA_DeInit+0x21a>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4a1e      	ldr	r2, [pc, #120]	; (8007a2c <HAL_DMA_DeInit+0x270>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d00e      	beq.n	80079d6 <HAL_DMA_DeInit+0x21a>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a1c      	ldr	r2, [pc, #112]	; (8007a30 <HAL_DMA_DeInit+0x274>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d009      	beq.n	80079d6 <HAL_DMA_DeInit+0x21a>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a1b      	ldr	r2, [pc, #108]	; (8007a34 <HAL_DMA_DeInit+0x278>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d004      	beq.n	80079d6 <HAL_DMA_DeInit+0x21a>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a19      	ldr	r2, [pc, #100]	; (8007a38 <HAL_DMA_DeInit+0x27c>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d132      	bne.n	8007a3c <HAL_DMA_DeInit+0x280>
 80079d6:	2301      	movs	r3, #1
 80079d8:	e031      	b.n	8007a3e <HAL_DMA_DeInit+0x282>
 80079da:	bf00      	nop
 80079dc:	40020010 	.word	0x40020010
 80079e0:	40020028 	.word	0x40020028
 80079e4:	40020040 	.word	0x40020040
 80079e8:	40020058 	.word	0x40020058
 80079ec:	40020070 	.word	0x40020070
 80079f0:	40020088 	.word	0x40020088
 80079f4:	400200a0 	.word	0x400200a0
 80079f8:	400200b8 	.word	0x400200b8
 80079fc:	40020410 	.word	0x40020410
 8007a00:	40020428 	.word	0x40020428
 8007a04:	40020440 	.word	0x40020440
 8007a08:	40020458 	.word	0x40020458
 8007a0c:	40020470 	.word	0x40020470
 8007a10:	40020488 	.word	0x40020488
 8007a14:	400204a0 	.word	0x400204a0
 8007a18:	400204b8 	.word	0x400204b8
 8007a1c:	58025408 	.word	0x58025408
 8007a20:	5802541c 	.word	0x5802541c
 8007a24:	58025430 	.word	0x58025430
 8007a28:	58025444 	.word	0x58025444
 8007a2c:	58025458 	.word	0x58025458
 8007a30:	5802546c 	.word	0x5802546c
 8007a34:	58025480 	.word	0x58025480
 8007a38:	58025494 	.word	0x58025494
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d021      	beq.n	8007a86 <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	2200      	movs	r2, #0
 8007a48:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	2200      	movs	r2, #0
 8007a58:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	2200      	movs	r2, #0
 8007a68:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f002 f900 	bl	8009c70 <DMA_CalcBaseAndBitshift>
 8007a70:	4603      	mov	r3, r0
 8007a72:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a78:	f003 031f 	and.w	r3, r3, #31
 8007a7c:	2201      	movs	r2, #1
 8007a7e:	409a      	lsls	r2, r3
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	605a      	str	r2, [r3, #4]
 8007a84:	e001      	b.n	8007a8a <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 8007a86:	2301      	movs	r3, #1
 8007a88:	e04a      	b.n	8007b20 <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f002 fa1e 	bl	8009ecc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d008      	beq.n	8007aaa <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007aa4:	687a      	ldr	r2, [r7, #4]
 8007aa6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007aa8:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d00f      	beq.n	8007ad2 <HAL_DMA_DeInit+0x316>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	685b      	ldr	r3, [r3, #4]
 8007ab6:	2b08      	cmp	r3, #8
 8007ab8:	d80b      	bhi.n	8007ad2 <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f002 faa0 	bl	800a000 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007acc:	687a      	ldr	r2, [r7, #4]
 8007ace:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007ad0:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	66da      	str	r2, [r3, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2200      	movs	r2, #0
 8007adc:	671a      	str	r2, [r3, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	675a      	str	r2, [r3, #116]	; 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2200      	movs	r2, #0
 8007aee:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback     = NULL;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2200      	movs	r2, #0
 8007af4:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2200      	movs	r2, #0
 8007afa:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback      = NULL;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2200      	movs	r2, #0
 8007b00:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback      = NULL;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2200      	movs	r2, #0
 8007b06:	651a      	str	r2, [r3, #80]	; 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2200      	movs	r2, #0
 8007b12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007b1e:	2300      	movs	r3, #0
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3710      	adds	r7, #16
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}

08007b28 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b086      	sub	sp, #24
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	60f8      	str	r0, [r7, #12]
 8007b30:	60b9      	str	r1, [r7, #8]
 8007b32:	607a      	str	r2, [r7, #4]
 8007b34:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007b36:	2300      	movs	r3, #0
 8007b38:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d101      	bne.n	8007b44 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8007b40:	2301      	movs	r3, #1
 8007b42:	e226      	b.n	8007f92 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007b4a:	2b01      	cmp	r3, #1
 8007b4c:	d101      	bne.n	8007b52 <HAL_DMA_Start_IT+0x2a>
 8007b4e:	2302      	movs	r3, #2
 8007b50:	e21f      	b.n	8007f92 <HAL_DMA_Start_IT+0x46a>
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	2201      	movs	r2, #1
 8007b56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007b60:	b2db      	uxtb	r3, r3
 8007b62:	2b01      	cmp	r3, #1
 8007b64:	f040 820a 	bne.w	8007f7c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	2202      	movs	r2, #2
 8007b6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	2200      	movs	r2, #0
 8007b74:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4a68      	ldr	r2, [pc, #416]	; (8007d1c <HAL_DMA_Start_IT+0x1f4>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d04a      	beq.n	8007c16 <HAL_DMA_Start_IT+0xee>
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4a66      	ldr	r2, [pc, #408]	; (8007d20 <HAL_DMA_Start_IT+0x1f8>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d045      	beq.n	8007c16 <HAL_DMA_Start_IT+0xee>
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4a65      	ldr	r2, [pc, #404]	; (8007d24 <HAL_DMA_Start_IT+0x1fc>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d040      	beq.n	8007c16 <HAL_DMA_Start_IT+0xee>
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4a63      	ldr	r2, [pc, #396]	; (8007d28 <HAL_DMA_Start_IT+0x200>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d03b      	beq.n	8007c16 <HAL_DMA_Start_IT+0xee>
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a62      	ldr	r2, [pc, #392]	; (8007d2c <HAL_DMA_Start_IT+0x204>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d036      	beq.n	8007c16 <HAL_DMA_Start_IT+0xee>
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a60      	ldr	r2, [pc, #384]	; (8007d30 <HAL_DMA_Start_IT+0x208>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d031      	beq.n	8007c16 <HAL_DMA_Start_IT+0xee>
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4a5f      	ldr	r2, [pc, #380]	; (8007d34 <HAL_DMA_Start_IT+0x20c>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d02c      	beq.n	8007c16 <HAL_DMA_Start_IT+0xee>
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4a5d      	ldr	r2, [pc, #372]	; (8007d38 <HAL_DMA_Start_IT+0x210>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d027      	beq.n	8007c16 <HAL_DMA_Start_IT+0xee>
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4a5c      	ldr	r2, [pc, #368]	; (8007d3c <HAL_DMA_Start_IT+0x214>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d022      	beq.n	8007c16 <HAL_DMA_Start_IT+0xee>
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a5a      	ldr	r2, [pc, #360]	; (8007d40 <HAL_DMA_Start_IT+0x218>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d01d      	beq.n	8007c16 <HAL_DMA_Start_IT+0xee>
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4a59      	ldr	r2, [pc, #356]	; (8007d44 <HAL_DMA_Start_IT+0x21c>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d018      	beq.n	8007c16 <HAL_DMA_Start_IT+0xee>
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4a57      	ldr	r2, [pc, #348]	; (8007d48 <HAL_DMA_Start_IT+0x220>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d013      	beq.n	8007c16 <HAL_DMA_Start_IT+0xee>
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4a56      	ldr	r2, [pc, #344]	; (8007d4c <HAL_DMA_Start_IT+0x224>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d00e      	beq.n	8007c16 <HAL_DMA_Start_IT+0xee>
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a54      	ldr	r2, [pc, #336]	; (8007d50 <HAL_DMA_Start_IT+0x228>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d009      	beq.n	8007c16 <HAL_DMA_Start_IT+0xee>
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4a53      	ldr	r2, [pc, #332]	; (8007d54 <HAL_DMA_Start_IT+0x22c>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d004      	beq.n	8007c16 <HAL_DMA_Start_IT+0xee>
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4a51      	ldr	r2, [pc, #324]	; (8007d58 <HAL_DMA_Start_IT+0x230>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d108      	bne.n	8007c28 <HAL_DMA_Start_IT+0x100>
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	681a      	ldr	r2, [r3, #0]
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f022 0201 	bic.w	r2, r2, #1
 8007c24:	601a      	str	r2, [r3, #0]
 8007c26:	e007      	b.n	8007c38 <HAL_DMA_Start_IT+0x110>
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	681a      	ldr	r2, [r3, #0]
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f022 0201 	bic.w	r2, r2, #1
 8007c36:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	687a      	ldr	r2, [r7, #4]
 8007c3c:	68b9      	ldr	r1, [r7, #8]
 8007c3e:	68f8      	ldr	r0, [r7, #12]
 8007c40:	f001 fe6a 	bl	8009918 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	4a34      	ldr	r2, [pc, #208]	; (8007d1c <HAL_DMA_Start_IT+0x1f4>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d04a      	beq.n	8007ce4 <HAL_DMA_Start_IT+0x1bc>
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	4a33      	ldr	r2, [pc, #204]	; (8007d20 <HAL_DMA_Start_IT+0x1f8>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d045      	beq.n	8007ce4 <HAL_DMA_Start_IT+0x1bc>
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	4a31      	ldr	r2, [pc, #196]	; (8007d24 <HAL_DMA_Start_IT+0x1fc>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d040      	beq.n	8007ce4 <HAL_DMA_Start_IT+0x1bc>
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	4a30      	ldr	r2, [pc, #192]	; (8007d28 <HAL_DMA_Start_IT+0x200>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d03b      	beq.n	8007ce4 <HAL_DMA_Start_IT+0x1bc>
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4a2e      	ldr	r2, [pc, #184]	; (8007d2c <HAL_DMA_Start_IT+0x204>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d036      	beq.n	8007ce4 <HAL_DMA_Start_IT+0x1bc>
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4a2d      	ldr	r2, [pc, #180]	; (8007d30 <HAL_DMA_Start_IT+0x208>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d031      	beq.n	8007ce4 <HAL_DMA_Start_IT+0x1bc>
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4a2b      	ldr	r2, [pc, #172]	; (8007d34 <HAL_DMA_Start_IT+0x20c>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d02c      	beq.n	8007ce4 <HAL_DMA_Start_IT+0x1bc>
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4a2a      	ldr	r2, [pc, #168]	; (8007d38 <HAL_DMA_Start_IT+0x210>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d027      	beq.n	8007ce4 <HAL_DMA_Start_IT+0x1bc>
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4a28      	ldr	r2, [pc, #160]	; (8007d3c <HAL_DMA_Start_IT+0x214>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d022      	beq.n	8007ce4 <HAL_DMA_Start_IT+0x1bc>
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4a27      	ldr	r2, [pc, #156]	; (8007d40 <HAL_DMA_Start_IT+0x218>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d01d      	beq.n	8007ce4 <HAL_DMA_Start_IT+0x1bc>
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a25      	ldr	r2, [pc, #148]	; (8007d44 <HAL_DMA_Start_IT+0x21c>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d018      	beq.n	8007ce4 <HAL_DMA_Start_IT+0x1bc>
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4a24      	ldr	r2, [pc, #144]	; (8007d48 <HAL_DMA_Start_IT+0x220>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d013      	beq.n	8007ce4 <HAL_DMA_Start_IT+0x1bc>
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a22      	ldr	r2, [pc, #136]	; (8007d4c <HAL_DMA_Start_IT+0x224>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d00e      	beq.n	8007ce4 <HAL_DMA_Start_IT+0x1bc>
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a21      	ldr	r2, [pc, #132]	; (8007d50 <HAL_DMA_Start_IT+0x228>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d009      	beq.n	8007ce4 <HAL_DMA_Start_IT+0x1bc>
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a1f      	ldr	r2, [pc, #124]	; (8007d54 <HAL_DMA_Start_IT+0x22c>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d004      	beq.n	8007ce4 <HAL_DMA_Start_IT+0x1bc>
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4a1e      	ldr	r2, [pc, #120]	; (8007d58 <HAL_DMA_Start_IT+0x230>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d101      	bne.n	8007ce8 <HAL_DMA_Start_IT+0x1c0>
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	e000      	b.n	8007cea <HAL_DMA_Start_IT+0x1c2>
 8007ce8:	2300      	movs	r3, #0
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d036      	beq.n	8007d5c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f023 021e 	bic.w	r2, r3, #30
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f042 0216 	orr.w	r2, r2, #22
 8007d00:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d03e      	beq.n	8007d88 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	681a      	ldr	r2, [r3, #0]
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f042 0208 	orr.w	r2, r2, #8
 8007d18:	601a      	str	r2, [r3, #0]
 8007d1a:	e035      	b.n	8007d88 <HAL_DMA_Start_IT+0x260>
 8007d1c:	40020010 	.word	0x40020010
 8007d20:	40020028 	.word	0x40020028
 8007d24:	40020040 	.word	0x40020040
 8007d28:	40020058 	.word	0x40020058
 8007d2c:	40020070 	.word	0x40020070
 8007d30:	40020088 	.word	0x40020088
 8007d34:	400200a0 	.word	0x400200a0
 8007d38:	400200b8 	.word	0x400200b8
 8007d3c:	40020410 	.word	0x40020410
 8007d40:	40020428 	.word	0x40020428
 8007d44:	40020440 	.word	0x40020440
 8007d48:	40020458 	.word	0x40020458
 8007d4c:	40020470 	.word	0x40020470
 8007d50:	40020488 	.word	0x40020488
 8007d54:	400204a0 	.word	0x400204a0
 8007d58:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f023 020e 	bic.w	r2, r3, #14
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f042 020a 	orr.w	r2, r2, #10
 8007d6e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d007      	beq.n	8007d88 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	681a      	ldr	r2, [r3, #0]
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f042 0204 	orr.w	r2, r2, #4
 8007d86:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4a83      	ldr	r2, [pc, #524]	; (8007f9c <HAL_DMA_Start_IT+0x474>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d072      	beq.n	8007e78 <HAL_DMA_Start_IT+0x350>
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4a82      	ldr	r2, [pc, #520]	; (8007fa0 <HAL_DMA_Start_IT+0x478>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d06d      	beq.n	8007e78 <HAL_DMA_Start_IT+0x350>
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4a80      	ldr	r2, [pc, #512]	; (8007fa4 <HAL_DMA_Start_IT+0x47c>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d068      	beq.n	8007e78 <HAL_DMA_Start_IT+0x350>
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4a7f      	ldr	r2, [pc, #508]	; (8007fa8 <HAL_DMA_Start_IT+0x480>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d063      	beq.n	8007e78 <HAL_DMA_Start_IT+0x350>
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4a7d      	ldr	r2, [pc, #500]	; (8007fac <HAL_DMA_Start_IT+0x484>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d05e      	beq.n	8007e78 <HAL_DMA_Start_IT+0x350>
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4a7c      	ldr	r2, [pc, #496]	; (8007fb0 <HAL_DMA_Start_IT+0x488>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d059      	beq.n	8007e78 <HAL_DMA_Start_IT+0x350>
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a7a      	ldr	r2, [pc, #488]	; (8007fb4 <HAL_DMA_Start_IT+0x48c>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d054      	beq.n	8007e78 <HAL_DMA_Start_IT+0x350>
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4a79      	ldr	r2, [pc, #484]	; (8007fb8 <HAL_DMA_Start_IT+0x490>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d04f      	beq.n	8007e78 <HAL_DMA_Start_IT+0x350>
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a77      	ldr	r2, [pc, #476]	; (8007fbc <HAL_DMA_Start_IT+0x494>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d04a      	beq.n	8007e78 <HAL_DMA_Start_IT+0x350>
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4a76      	ldr	r2, [pc, #472]	; (8007fc0 <HAL_DMA_Start_IT+0x498>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d045      	beq.n	8007e78 <HAL_DMA_Start_IT+0x350>
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a74      	ldr	r2, [pc, #464]	; (8007fc4 <HAL_DMA_Start_IT+0x49c>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d040      	beq.n	8007e78 <HAL_DMA_Start_IT+0x350>
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4a73      	ldr	r2, [pc, #460]	; (8007fc8 <HAL_DMA_Start_IT+0x4a0>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d03b      	beq.n	8007e78 <HAL_DMA_Start_IT+0x350>
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a71      	ldr	r2, [pc, #452]	; (8007fcc <HAL_DMA_Start_IT+0x4a4>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d036      	beq.n	8007e78 <HAL_DMA_Start_IT+0x350>
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4a70      	ldr	r2, [pc, #448]	; (8007fd0 <HAL_DMA_Start_IT+0x4a8>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d031      	beq.n	8007e78 <HAL_DMA_Start_IT+0x350>
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4a6e      	ldr	r2, [pc, #440]	; (8007fd4 <HAL_DMA_Start_IT+0x4ac>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d02c      	beq.n	8007e78 <HAL_DMA_Start_IT+0x350>
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4a6d      	ldr	r2, [pc, #436]	; (8007fd8 <HAL_DMA_Start_IT+0x4b0>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d027      	beq.n	8007e78 <HAL_DMA_Start_IT+0x350>
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a6b      	ldr	r2, [pc, #428]	; (8007fdc <HAL_DMA_Start_IT+0x4b4>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d022      	beq.n	8007e78 <HAL_DMA_Start_IT+0x350>
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4a6a      	ldr	r2, [pc, #424]	; (8007fe0 <HAL_DMA_Start_IT+0x4b8>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d01d      	beq.n	8007e78 <HAL_DMA_Start_IT+0x350>
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4a68      	ldr	r2, [pc, #416]	; (8007fe4 <HAL_DMA_Start_IT+0x4bc>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d018      	beq.n	8007e78 <HAL_DMA_Start_IT+0x350>
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a67      	ldr	r2, [pc, #412]	; (8007fe8 <HAL_DMA_Start_IT+0x4c0>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d013      	beq.n	8007e78 <HAL_DMA_Start_IT+0x350>
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4a65      	ldr	r2, [pc, #404]	; (8007fec <HAL_DMA_Start_IT+0x4c4>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d00e      	beq.n	8007e78 <HAL_DMA_Start_IT+0x350>
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a64      	ldr	r2, [pc, #400]	; (8007ff0 <HAL_DMA_Start_IT+0x4c8>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d009      	beq.n	8007e78 <HAL_DMA_Start_IT+0x350>
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a62      	ldr	r2, [pc, #392]	; (8007ff4 <HAL_DMA_Start_IT+0x4cc>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d004      	beq.n	8007e78 <HAL_DMA_Start_IT+0x350>
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4a61      	ldr	r2, [pc, #388]	; (8007ff8 <HAL_DMA_Start_IT+0x4d0>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d101      	bne.n	8007e7c <HAL_DMA_Start_IT+0x354>
 8007e78:	2301      	movs	r3, #1
 8007e7a:	e000      	b.n	8007e7e <HAL_DMA_Start_IT+0x356>
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d01a      	beq.n	8007eb8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d007      	beq.n	8007ea0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e94:	681a      	ldr	r2, [r3, #0]
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e9e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d007      	beq.n	8007eb8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007eac:	681a      	ldr	r2, [r3, #0]
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007eb2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007eb6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	4a37      	ldr	r2, [pc, #220]	; (8007f9c <HAL_DMA_Start_IT+0x474>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d04a      	beq.n	8007f58 <HAL_DMA_Start_IT+0x430>
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	4a36      	ldr	r2, [pc, #216]	; (8007fa0 <HAL_DMA_Start_IT+0x478>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d045      	beq.n	8007f58 <HAL_DMA_Start_IT+0x430>
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a34      	ldr	r2, [pc, #208]	; (8007fa4 <HAL_DMA_Start_IT+0x47c>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d040      	beq.n	8007f58 <HAL_DMA_Start_IT+0x430>
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4a33      	ldr	r2, [pc, #204]	; (8007fa8 <HAL_DMA_Start_IT+0x480>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d03b      	beq.n	8007f58 <HAL_DMA_Start_IT+0x430>
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4a31      	ldr	r2, [pc, #196]	; (8007fac <HAL_DMA_Start_IT+0x484>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d036      	beq.n	8007f58 <HAL_DMA_Start_IT+0x430>
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	4a30      	ldr	r2, [pc, #192]	; (8007fb0 <HAL_DMA_Start_IT+0x488>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d031      	beq.n	8007f58 <HAL_DMA_Start_IT+0x430>
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	4a2e      	ldr	r2, [pc, #184]	; (8007fb4 <HAL_DMA_Start_IT+0x48c>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d02c      	beq.n	8007f58 <HAL_DMA_Start_IT+0x430>
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4a2d      	ldr	r2, [pc, #180]	; (8007fb8 <HAL_DMA_Start_IT+0x490>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d027      	beq.n	8007f58 <HAL_DMA_Start_IT+0x430>
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4a2b      	ldr	r2, [pc, #172]	; (8007fbc <HAL_DMA_Start_IT+0x494>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d022      	beq.n	8007f58 <HAL_DMA_Start_IT+0x430>
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	4a2a      	ldr	r2, [pc, #168]	; (8007fc0 <HAL_DMA_Start_IT+0x498>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d01d      	beq.n	8007f58 <HAL_DMA_Start_IT+0x430>
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4a28      	ldr	r2, [pc, #160]	; (8007fc4 <HAL_DMA_Start_IT+0x49c>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d018      	beq.n	8007f58 <HAL_DMA_Start_IT+0x430>
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4a27      	ldr	r2, [pc, #156]	; (8007fc8 <HAL_DMA_Start_IT+0x4a0>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d013      	beq.n	8007f58 <HAL_DMA_Start_IT+0x430>
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4a25      	ldr	r2, [pc, #148]	; (8007fcc <HAL_DMA_Start_IT+0x4a4>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d00e      	beq.n	8007f58 <HAL_DMA_Start_IT+0x430>
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4a24      	ldr	r2, [pc, #144]	; (8007fd0 <HAL_DMA_Start_IT+0x4a8>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d009      	beq.n	8007f58 <HAL_DMA_Start_IT+0x430>
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4a22      	ldr	r2, [pc, #136]	; (8007fd4 <HAL_DMA_Start_IT+0x4ac>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d004      	beq.n	8007f58 <HAL_DMA_Start_IT+0x430>
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4a21      	ldr	r2, [pc, #132]	; (8007fd8 <HAL_DMA_Start_IT+0x4b0>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d108      	bne.n	8007f6a <HAL_DMA_Start_IT+0x442>
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	681a      	ldr	r2, [r3, #0]
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f042 0201 	orr.w	r2, r2, #1
 8007f66:	601a      	str	r2, [r3, #0]
 8007f68:	e012      	b.n	8007f90 <HAL_DMA_Start_IT+0x468>
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	681a      	ldr	r2, [r3, #0]
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f042 0201 	orr.w	r2, r2, #1
 8007f78:	601a      	str	r2, [r3, #0]
 8007f7a:	e009      	b.n	8007f90 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007f82:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	2200      	movs	r2, #0
 8007f88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007f90:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3718      	adds	r7, #24
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}
 8007f9a:	bf00      	nop
 8007f9c:	40020010 	.word	0x40020010
 8007fa0:	40020028 	.word	0x40020028
 8007fa4:	40020040 	.word	0x40020040
 8007fa8:	40020058 	.word	0x40020058
 8007fac:	40020070 	.word	0x40020070
 8007fb0:	40020088 	.word	0x40020088
 8007fb4:	400200a0 	.word	0x400200a0
 8007fb8:	400200b8 	.word	0x400200b8
 8007fbc:	40020410 	.word	0x40020410
 8007fc0:	40020428 	.word	0x40020428
 8007fc4:	40020440 	.word	0x40020440
 8007fc8:	40020458 	.word	0x40020458
 8007fcc:	40020470 	.word	0x40020470
 8007fd0:	40020488 	.word	0x40020488
 8007fd4:	400204a0 	.word	0x400204a0
 8007fd8:	400204b8 	.word	0x400204b8
 8007fdc:	58025408 	.word	0x58025408
 8007fe0:	5802541c 	.word	0x5802541c
 8007fe4:	58025430 	.word	0x58025430
 8007fe8:	58025444 	.word	0x58025444
 8007fec:	58025458 	.word	0x58025458
 8007ff0:	5802546c 	.word	0x5802546c
 8007ff4:	58025480 	.word	0x58025480
 8007ff8:	58025494 	.word	0x58025494

08007ffc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b086      	sub	sp, #24
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8008004:	f7fe ff32 	bl	8006e6c <HAL_GetTick>
 8008008:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d101      	bne.n	8008014 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8008010:	2301      	movs	r3, #1
 8008012:	e2dc      	b.n	80085ce <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800801a:	b2db      	uxtb	r3, r3
 800801c:	2b02      	cmp	r3, #2
 800801e:	d008      	beq.n	8008032 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2280      	movs	r2, #128	; 0x80
 8008024:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2200      	movs	r2, #0
 800802a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800802e:	2301      	movs	r3, #1
 8008030:	e2cd      	b.n	80085ce <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	4a76      	ldr	r2, [pc, #472]	; (8008210 <HAL_DMA_Abort+0x214>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d04a      	beq.n	80080d2 <HAL_DMA_Abort+0xd6>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4a74      	ldr	r2, [pc, #464]	; (8008214 <HAL_DMA_Abort+0x218>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d045      	beq.n	80080d2 <HAL_DMA_Abort+0xd6>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	4a73      	ldr	r2, [pc, #460]	; (8008218 <HAL_DMA_Abort+0x21c>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d040      	beq.n	80080d2 <HAL_DMA_Abort+0xd6>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4a71      	ldr	r2, [pc, #452]	; (800821c <HAL_DMA_Abort+0x220>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d03b      	beq.n	80080d2 <HAL_DMA_Abort+0xd6>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	4a70      	ldr	r2, [pc, #448]	; (8008220 <HAL_DMA_Abort+0x224>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d036      	beq.n	80080d2 <HAL_DMA_Abort+0xd6>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4a6e      	ldr	r2, [pc, #440]	; (8008224 <HAL_DMA_Abort+0x228>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d031      	beq.n	80080d2 <HAL_DMA_Abort+0xd6>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4a6d      	ldr	r2, [pc, #436]	; (8008228 <HAL_DMA_Abort+0x22c>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d02c      	beq.n	80080d2 <HAL_DMA_Abort+0xd6>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4a6b      	ldr	r2, [pc, #428]	; (800822c <HAL_DMA_Abort+0x230>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d027      	beq.n	80080d2 <HAL_DMA_Abort+0xd6>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4a6a      	ldr	r2, [pc, #424]	; (8008230 <HAL_DMA_Abort+0x234>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d022      	beq.n	80080d2 <HAL_DMA_Abort+0xd6>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4a68      	ldr	r2, [pc, #416]	; (8008234 <HAL_DMA_Abort+0x238>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d01d      	beq.n	80080d2 <HAL_DMA_Abort+0xd6>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4a67      	ldr	r2, [pc, #412]	; (8008238 <HAL_DMA_Abort+0x23c>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d018      	beq.n	80080d2 <HAL_DMA_Abort+0xd6>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4a65      	ldr	r2, [pc, #404]	; (800823c <HAL_DMA_Abort+0x240>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d013      	beq.n	80080d2 <HAL_DMA_Abort+0xd6>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4a64      	ldr	r2, [pc, #400]	; (8008240 <HAL_DMA_Abort+0x244>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d00e      	beq.n	80080d2 <HAL_DMA_Abort+0xd6>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4a62      	ldr	r2, [pc, #392]	; (8008244 <HAL_DMA_Abort+0x248>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d009      	beq.n	80080d2 <HAL_DMA_Abort+0xd6>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	4a61      	ldr	r2, [pc, #388]	; (8008248 <HAL_DMA_Abort+0x24c>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d004      	beq.n	80080d2 <HAL_DMA_Abort+0xd6>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a5f      	ldr	r2, [pc, #380]	; (800824c <HAL_DMA_Abort+0x250>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d101      	bne.n	80080d6 <HAL_DMA_Abort+0xda>
 80080d2:	2301      	movs	r3, #1
 80080d4:	e000      	b.n	80080d8 <HAL_DMA_Abort+0xdc>
 80080d6:	2300      	movs	r3, #0
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d013      	beq.n	8008104 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	681a      	ldr	r2, [r3, #0]
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f022 021e 	bic.w	r2, r2, #30
 80080ea:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	695a      	ldr	r2, [r3, #20]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80080fa:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	617b      	str	r3, [r7, #20]
 8008102:	e00a      	b.n	800811a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	681a      	ldr	r2, [r3, #0]
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f022 020e 	bic.w	r2, r2, #14
 8008112:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4a3c      	ldr	r2, [pc, #240]	; (8008210 <HAL_DMA_Abort+0x214>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d072      	beq.n	800820a <HAL_DMA_Abort+0x20e>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a3a      	ldr	r2, [pc, #232]	; (8008214 <HAL_DMA_Abort+0x218>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d06d      	beq.n	800820a <HAL_DMA_Abort+0x20e>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4a39      	ldr	r2, [pc, #228]	; (8008218 <HAL_DMA_Abort+0x21c>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d068      	beq.n	800820a <HAL_DMA_Abort+0x20e>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4a37      	ldr	r2, [pc, #220]	; (800821c <HAL_DMA_Abort+0x220>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d063      	beq.n	800820a <HAL_DMA_Abort+0x20e>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4a36      	ldr	r2, [pc, #216]	; (8008220 <HAL_DMA_Abort+0x224>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d05e      	beq.n	800820a <HAL_DMA_Abort+0x20e>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4a34      	ldr	r2, [pc, #208]	; (8008224 <HAL_DMA_Abort+0x228>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d059      	beq.n	800820a <HAL_DMA_Abort+0x20e>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4a33      	ldr	r2, [pc, #204]	; (8008228 <HAL_DMA_Abort+0x22c>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d054      	beq.n	800820a <HAL_DMA_Abort+0x20e>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	4a31      	ldr	r2, [pc, #196]	; (800822c <HAL_DMA_Abort+0x230>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d04f      	beq.n	800820a <HAL_DMA_Abort+0x20e>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4a30      	ldr	r2, [pc, #192]	; (8008230 <HAL_DMA_Abort+0x234>)
 8008170:	4293      	cmp	r3, r2
 8008172:	d04a      	beq.n	800820a <HAL_DMA_Abort+0x20e>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	4a2e      	ldr	r2, [pc, #184]	; (8008234 <HAL_DMA_Abort+0x238>)
 800817a:	4293      	cmp	r3, r2
 800817c:	d045      	beq.n	800820a <HAL_DMA_Abort+0x20e>
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4a2d      	ldr	r2, [pc, #180]	; (8008238 <HAL_DMA_Abort+0x23c>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d040      	beq.n	800820a <HAL_DMA_Abort+0x20e>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	4a2b      	ldr	r2, [pc, #172]	; (800823c <HAL_DMA_Abort+0x240>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d03b      	beq.n	800820a <HAL_DMA_Abort+0x20e>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	4a2a      	ldr	r2, [pc, #168]	; (8008240 <HAL_DMA_Abort+0x244>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d036      	beq.n	800820a <HAL_DMA_Abort+0x20e>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4a28      	ldr	r2, [pc, #160]	; (8008244 <HAL_DMA_Abort+0x248>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d031      	beq.n	800820a <HAL_DMA_Abort+0x20e>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4a27      	ldr	r2, [pc, #156]	; (8008248 <HAL_DMA_Abort+0x24c>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d02c      	beq.n	800820a <HAL_DMA_Abort+0x20e>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	4a25      	ldr	r2, [pc, #148]	; (800824c <HAL_DMA_Abort+0x250>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d027      	beq.n	800820a <HAL_DMA_Abort+0x20e>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4a24      	ldr	r2, [pc, #144]	; (8008250 <HAL_DMA_Abort+0x254>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d022      	beq.n	800820a <HAL_DMA_Abort+0x20e>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	4a22      	ldr	r2, [pc, #136]	; (8008254 <HAL_DMA_Abort+0x258>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d01d      	beq.n	800820a <HAL_DMA_Abort+0x20e>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	4a21      	ldr	r2, [pc, #132]	; (8008258 <HAL_DMA_Abort+0x25c>)
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d018      	beq.n	800820a <HAL_DMA_Abort+0x20e>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4a1f      	ldr	r2, [pc, #124]	; (800825c <HAL_DMA_Abort+0x260>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d013      	beq.n	800820a <HAL_DMA_Abort+0x20e>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	4a1e      	ldr	r2, [pc, #120]	; (8008260 <HAL_DMA_Abort+0x264>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d00e      	beq.n	800820a <HAL_DMA_Abort+0x20e>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a1c      	ldr	r2, [pc, #112]	; (8008264 <HAL_DMA_Abort+0x268>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d009      	beq.n	800820a <HAL_DMA_Abort+0x20e>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4a1b      	ldr	r2, [pc, #108]	; (8008268 <HAL_DMA_Abort+0x26c>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d004      	beq.n	800820a <HAL_DMA_Abort+0x20e>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4a19      	ldr	r2, [pc, #100]	; (800826c <HAL_DMA_Abort+0x270>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d132      	bne.n	8008270 <HAL_DMA_Abort+0x274>
 800820a:	2301      	movs	r3, #1
 800820c:	e031      	b.n	8008272 <HAL_DMA_Abort+0x276>
 800820e:	bf00      	nop
 8008210:	40020010 	.word	0x40020010
 8008214:	40020028 	.word	0x40020028
 8008218:	40020040 	.word	0x40020040
 800821c:	40020058 	.word	0x40020058
 8008220:	40020070 	.word	0x40020070
 8008224:	40020088 	.word	0x40020088
 8008228:	400200a0 	.word	0x400200a0
 800822c:	400200b8 	.word	0x400200b8
 8008230:	40020410 	.word	0x40020410
 8008234:	40020428 	.word	0x40020428
 8008238:	40020440 	.word	0x40020440
 800823c:	40020458 	.word	0x40020458
 8008240:	40020470 	.word	0x40020470
 8008244:	40020488 	.word	0x40020488
 8008248:	400204a0 	.word	0x400204a0
 800824c:	400204b8 	.word	0x400204b8
 8008250:	58025408 	.word	0x58025408
 8008254:	5802541c 	.word	0x5802541c
 8008258:	58025430 	.word	0x58025430
 800825c:	58025444 	.word	0x58025444
 8008260:	58025458 	.word	0x58025458
 8008264:	5802546c 	.word	0x5802546c
 8008268:	58025480 	.word	0x58025480
 800826c:	58025494 	.word	0x58025494
 8008270:	2300      	movs	r3, #0
 8008272:	2b00      	cmp	r3, #0
 8008274:	d007      	beq.n	8008286 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800827a:	681a      	ldr	r2, [r3, #0]
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008280:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008284:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4a6d      	ldr	r2, [pc, #436]	; (8008440 <HAL_DMA_Abort+0x444>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d04a      	beq.n	8008326 <HAL_DMA_Abort+0x32a>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	4a6b      	ldr	r2, [pc, #428]	; (8008444 <HAL_DMA_Abort+0x448>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d045      	beq.n	8008326 <HAL_DMA_Abort+0x32a>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	4a6a      	ldr	r2, [pc, #424]	; (8008448 <HAL_DMA_Abort+0x44c>)
 80082a0:	4293      	cmp	r3, r2
 80082a2:	d040      	beq.n	8008326 <HAL_DMA_Abort+0x32a>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	4a68      	ldr	r2, [pc, #416]	; (800844c <HAL_DMA_Abort+0x450>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d03b      	beq.n	8008326 <HAL_DMA_Abort+0x32a>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4a67      	ldr	r2, [pc, #412]	; (8008450 <HAL_DMA_Abort+0x454>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d036      	beq.n	8008326 <HAL_DMA_Abort+0x32a>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	4a65      	ldr	r2, [pc, #404]	; (8008454 <HAL_DMA_Abort+0x458>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d031      	beq.n	8008326 <HAL_DMA_Abort+0x32a>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	4a64      	ldr	r2, [pc, #400]	; (8008458 <HAL_DMA_Abort+0x45c>)
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d02c      	beq.n	8008326 <HAL_DMA_Abort+0x32a>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4a62      	ldr	r2, [pc, #392]	; (800845c <HAL_DMA_Abort+0x460>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d027      	beq.n	8008326 <HAL_DMA_Abort+0x32a>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4a61      	ldr	r2, [pc, #388]	; (8008460 <HAL_DMA_Abort+0x464>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d022      	beq.n	8008326 <HAL_DMA_Abort+0x32a>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4a5f      	ldr	r2, [pc, #380]	; (8008464 <HAL_DMA_Abort+0x468>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d01d      	beq.n	8008326 <HAL_DMA_Abort+0x32a>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	4a5e      	ldr	r2, [pc, #376]	; (8008468 <HAL_DMA_Abort+0x46c>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d018      	beq.n	8008326 <HAL_DMA_Abort+0x32a>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	4a5c      	ldr	r2, [pc, #368]	; (800846c <HAL_DMA_Abort+0x470>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d013      	beq.n	8008326 <HAL_DMA_Abort+0x32a>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	4a5b      	ldr	r2, [pc, #364]	; (8008470 <HAL_DMA_Abort+0x474>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d00e      	beq.n	8008326 <HAL_DMA_Abort+0x32a>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4a59      	ldr	r2, [pc, #356]	; (8008474 <HAL_DMA_Abort+0x478>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d009      	beq.n	8008326 <HAL_DMA_Abort+0x32a>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4a58      	ldr	r2, [pc, #352]	; (8008478 <HAL_DMA_Abort+0x47c>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d004      	beq.n	8008326 <HAL_DMA_Abort+0x32a>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4a56      	ldr	r2, [pc, #344]	; (800847c <HAL_DMA_Abort+0x480>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d108      	bne.n	8008338 <HAL_DMA_Abort+0x33c>
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	681a      	ldr	r2, [r3, #0]
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f022 0201 	bic.w	r2, r2, #1
 8008334:	601a      	str	r2, [r3, #0]
 8008336:	e007      	b.n	8008348 <HAL_DMA_Abort+0x34c>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	681a      	ldr	r2, [r3, #0]
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f022 0201 	bic.w	r2, r2, #1
 8008346:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8008348:	e013      	b.n	8008372 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800834a:	f7fe fd8f 	bl	8006e6c <HAL_GetTick>
 800834e:	4602      	mov	r2, r0
 8008350:	693b      	ldr	r3, [r7, #16]
 8008352:	1ad3      	subs	r3, r2, r3
 8008354:	2b05      	cmp	r3, #5
 8008356:	d90c      	bls.n	8008372 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2220      	movs	r2, #32
 800835c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2203      	movs	r2, #3
 8008362:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2200      	movs	r2, #0
 800836a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800836e:	2301      	movs	r3, #1
 8008370:	e12d      	b.n	80085ce <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f003 0301 	and.w	r3, r3, #1
 800837a:	2b00      	cmp	r3, #0
 800837c:	d1e5      	bne.n	800834a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4a2f      	ldr	r2, [pc, #188]	; (8008440 <HAL_DMA_Abort+0x444>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d04a      	beq.n	800841e <HAL_DMA_Abort+0x422>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	4a2d      	ldr	r2, [pc, #180]	; (8008444 <HAL_DMA_Abort+0x448>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d045      	beq.n	800841e <HAL_DMA_Abort+0x422>
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	4a2c      	ldr	r2, [pc, #176]	; (8008448 <HAL_DMA_Abort+0x44c>)
 8008398:	4293      	cmp	r3, r2
 800839a:	d040      	beq.n	800841e <HAL_DMA_Abort+0x422>
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	4a2a      	ldr	r2, [pc, #168]	; (800844c <HAL_DMA_Abort+0x450>)
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d03b      	beq.n	800841e <HAL_DMA_Abort+0x422>
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4a29      	ldr	r2, [pc, #164]	; (8008450 <HAL_DMA_Abort+0x454>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d036      	beq.n	800841e <HAL_DMA_Abort+0x422>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	4a27      	ldr	r2, [pc, #156]	; (8008454 <HAL_DMA_Abort+0x458>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d031      	beq.n	800841e <HAL_DMA_Abort+0x422>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	4a26      	ldr	r2, [pc, #152]	; (8008458 <HAL_DMA_Abort+0x45c>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d02c      	beq.n	800841e <HAL_DMA_Abort+0x422>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4a24      	ldr	r2, [pc, #144]	; (800845c <HAL_DMA_Abort+0x460>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d027      	beq.n	800841e <HAL_DMA_Abort+0x422>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4a23      	ldr	r2, [pc, #140]	; (8008460 <HAL_DMA_Abort+0x464>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d022      	beq.n	800841e <HAL_DMA_Abort+0x422>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4a21      	ldr	r2, [pc, #132]	; (8008464 <HAL_DMA_Abort+0x468>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d01d      	beq.n	800841e <HAL_DMA_Abort+0x422>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	4a20      	ldr	r2, [pc, #128]	; (8008468 <HAL_DMA_Abort+0x46c>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d018      	beq.n	800841e <HAL_DMA_Abort+0x422>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4a1e      	ldr	r2, [pc, #120]	; (800846c <HAL_DMA_Abort+0x470>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d013      	beq.n	800841e <HAL_DMA_Abort+0x422>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a1d      	ldr	r2, [pc, #116]	; (8008470 <HAL_DMA_Abort+0x474>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d00e      	beq.n	800841e <HAL_DMA_Abort+0x422>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4a1b      	ldr	r2, [pc, #108]	; (8008474 <HAL_DMA_Abort+0x478>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d009      	beq.n	800841e <HAL_DMA_Abort+0x422>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4a1a      	ldr	r2, [pc, #104]	; (8008478 <HAL_DMA_Abort+0x47c>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d004      	beq.n	800841e <HAL_DMA_Abort+0x422>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4a18      	ldr	r2, [pc, #96]	; (800847c <HAL_DMA_Abort+0x480>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d101      	bne.n	8008422 <HAL_DMA_Abort+0x426>
 800841e:	2301      	movs	r3, #1
 8008420:	e000      	b.n	8008424 <HAL_DMA_Abort+0x428>
 8008422:	2300      	movs	r3, #0
 8008424:	2b00      	cmp	r3, #0
 8008426:	d02b      	beq.n	8008480 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800842c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008432:	f003 031f 	and.w	r3, r3, #31
 8008436:	223f      	movs	r2, #63	; 0x3f
 8008438:	409a      	lsls	r2, r3
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	609a      	str	r2, [r3, #8]
 800843e:	e02a      	b.n	8008496 <HAL_DMA_Abort+0x49a>
 8008440:	40020010 	.word	0x40020010
 8008444:	40020028 	.word	0x40020028
 8008448:	40020040 	.word	0x40020040
 800844c:	40020058 	.word	0x40020058
 8008450:	40020070 	.word	0x40020070
 8008454:	40020088 	.word	0x40020088
 8008458:	400200a0 	.word	0x400200a0
 800845c:	400200b8 	.word	0x400200b8
 8008460:	40020410 	.word	0x40020410
 8008464:	40020428 	.word	0x40020428
 8008468:	40020440 	.word	0x40020440
 800846c:	40020458 	.word	0x40020458
 8008470:	40020470 	.word	0x40020470
 8008474:	40020488 	.word	0x40020488
 8008478:	400204a0 	.word	0x400204a0
 800847c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008484:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800848a:	f003 031f 	and.w	r3, r3, #31
 800848e:	2201      	movs	r2, #1
 8008490:	409a      	lsls	r2, r3
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4a4f      	ldr	r2, [pc, #316]	; (80085d8 <HAL_DMA_Abort+0x5dc>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d072      	beq.n	8008586 <HAL_DMA_Abort+0x58a>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4a4d      	ldr	r2, [pc, #308]	; (80085dc <HAL_DMA_Abort+0x5e0>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d06d      	beq.n	8008586 <HAL_DMA_Abort+0x58a>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4a4c      	ldr	r2, [pc, #304]	; (80085e0 <HAL_DMA_Abort+0x5e4>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d068      	beq.n	8008586 <HAL_DMA_Abort+0x58a>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	4a4a      	ldr	r2, [pc, #296]	; (80085e4 <HAL_DMA_Abort+0x5e8>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d063      	beq.n	8008586 <HAL_DMA_Abort+0x58a>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4a49      	ldr	r2, [pc, #292]	; (80085e8 <HAL_DMA_Abort+0x5ec>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d05e      	beq.n	8008586 <HAL_DMA_Abort+0x58a>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4a47      	ldr	r2, [pc, #284]	; (80085ec <HAL_DMA_Abort+0x5f0>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d059      	beq.n	8008586 <HAL_DMA_Abort+0x58a>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4a46      	ldr	r2, [pc, #280]	; (80085f0 <HAL_DMA_Abort+0x5f4>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d054      	beq.n	8008586 <HAL_DMA_Abort+0x58a>
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4a44      	ldr	r2, [pc, #272]	; (80085f4 <HAL_DMA_Abort+0x5f8>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d04f      	beq.n	8008586 <HAL_DMA_Abort+0x58a>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	4a43      	ldr	r2, [pc, #268]	; (80085f8 <HAL_DMA_Abort+0x5fc>)
 80084ec:	4293      	cmp	r3, r2
 80084ee:	d04a      	beq.n	8008586 <HAL_DMA_Abort+0x58a>
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	4a41      	ldr	r2, [pc, #260]	; (80085fc <HAL_DMA_Abort+0x600>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d045      	beq.n	8008586 <HAL_DMA_Abort+0x58a>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	4a40      	ldr	r2, [pc, #256]	; (8008600 <HAL_DMA_Abort+0x604>)
 8008500:	4293      	cmp	r3, r2
 8008502:	d040      	beq.n	8008586 <HAL_DMA_Abort+0x58a>
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	4a3e      	ldr	r2, [pc, #248]	; (8008604 <HAL_DMA_Abort+0x608>)
 800850a:	4293      	cmp	r3, r2
 800850c:	d03b      	beq.n	8008586 <HAL_DMA_Abort+0x58a>
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	4a3d      	ldr	r2, [pc, #244]	; (8008608 <HAL_DMA_Abort+0x60c>)
 8008514:	4293      	cmp	r3, r2
 8008516:	d036      	beq.n	8008586 <HAL_DMA_Abort+0x58a>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4a3b      	ldr	r2, [pc, #236]	; (800860c <HAL_DMA_Abort+0x610>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d031      	beq.n	8008586 <HAL_DMA_Abort+0x58a>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	4a3a      	ldr	r2, [pc, #232]	; (8008610 <HAL_DMA_Abort+0x614>)
 8008528:	4293      	cmp	r3, r2
 800852a:	d02c      	beq.n	8008586 <HAL_DMA_Abort+0x58a>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	4a38      	ldr	r2, [pc, #224]	; (8008614 <HAL_DMA_Abort+0x618>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d027      	beq.n	8008586 <HAL_DMA_Abort+0x58a>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	4a37      	ldr	r2, [pc, #220]	; (8008618 <HAL_DMA_Abort+0x61c>)
 800853c:	4293      	cmp	r3, r2
 800853e:	d022      	beq.n	8008586 <HAL_DMA_Abort+0x58a>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	4a35      	ldr	r2, [pc, #212]	; (800861c <HAL_DMA_Abort+0x620>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d01d      	beq.n	8008586 <HAL_DMA_Abort+0x58a>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4a34      	ldr	r2, [pc, #208]	; (8008620 <HAL_DMA_Abort+0x624>)
 8008550:	4293      	cmp	r3, r2
 8008552:	d018      	beq.n	8008586 <HAL_DMA_Abort+0x58a>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4a32      	ldr	r2, [pc, #200]	; (8008624 <HAL_DMA_Abort+0x628>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d013      	beq.n	8008586 <HAL_DMA_Abort+0x58a>
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	4a31      	ldr	r2, [pc, #196]	; (8008628 <HAL_DMA_Abort+0x62c>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d00e      	beq.n	8008586 <HAL_DMA_Abort+0x58a>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	4a2f      	ldr	r2, [pc, #188]	; (800862c <HAL_DMA_Abort+0x630>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d009      	beq.n	8008586 <HAL_DMA_Abort+0x58a>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	4a2e      	ldr	r2, [pc, #184]	; (8008630 <HAL_DMA_Abort+0x634>)
 8008578:	4293      	cmp	r3, r2
 800857a:	d004      	beq.n	8008586 <HAL_DMA_Abort+0x58a>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4a2c      	ldr	r2, [pc, #176]	; (8008634 <HAL_DMA_Abort+0x638>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d101      	bne.n	800858a <HAL_DMA_Abort+0x58e>
 8008586:	2301      	movs	r3, #1
 8008588:	e000      	b.n	800858c <HAL_DMA_Abort+0x590>
 800858a:	2300      	movs	r3, #0
 800858c:	2b00      	cmp	r3, #0
 800858e:	d015      	beq.n	80085bc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008594:	687a      	ldr	r2, [r7, #4]
 8008596:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008598:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d00c      	beq.n	80085bc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085a6:	681a      	ldr	r2, [r3, #0]
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80085b0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085b6:	687a      	ldr	r2, [r7, #4]
 80085b8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80085ba:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2201      	movs	r2, #1
 80085c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2200      	movs	r2, #0
 80085c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80085cc:	2300      	movs	r3, #0
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	3718      	adds	r7, #24
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}
 80085d6:	bf00      	nop
 80085d8:	40020010 	.word	0x40020010
 80085dc:	40020028 	.word	0x40020028
 80085e0:	40020040 	.word	0x40020040
 80085e4:	40020058 	.word	0x40020058
 80085e8:	40020070 	.word	0x40020070
 80085ec:	40020088 	.word	0x40020088
 80085f0:	400200a0 	.word	0x400200a0
 80085f4:	400200b8 	.word	0x400200b8
 80085f8:	40020410 	.word	0x40020410
 80085fc:	40020428 	.word	0x40020428
 8008600:	40020440 	.word	0x40020440
 8008604:	40020458 	.word	0x40020458
 8008608:	40020470 	.word	0x40020470
 800860c:	40020488 	.word	0x40020488
 8008610:	400204a0 	.word	0x400204a0
 8008614:	400204b8 	.word	0x400204b8
 8008618:	58025408 	.word	0x58025408
 800861c:	5802541c 	.word	0x5802541c
 8008620:	58025430 	.word	0x58025430
 8008624:	58025444 	.word	0x58025444
 8008628:	58025458 	.word	0x58025458
 800862c:	5802546c 	.word	0x5802546c
 8008630:	58025480 	.word	0x58025480
 8008634:	58025494 	.word	0x58025494

08008638 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b084      	sub	sp, #16
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d101      	bne.n	800864a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8008646:	2301      	movs	r3, #1
 8008648:	e237      	b.n	8008aba <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008650:	b2db      	uxtb	r3, r3
 8008652:	2b02      	cmp	r3, #2
 8008654:	d004      	beq.n	8008660 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2280      	movs	r2, #128	; 0x80
 800865a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800865c:	2301      	movs	r3, #1
 800865e:	e22c      	b.n	8008aba <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4a5c      	ldr	r2, [pc, #368]	; (80087d8 <HAL_DMA_Abort_IT+0x1a0>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d04a      	beq.n	8008700 <HAL_DMA_Abort_IT+0xc8>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4a5b      	ldr	r2, [pc, #364]	; (80087dc <HAL_DMA_Abort_IT+0x1a4>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d045      	beq.n	8008700 <HAL_DMA_Abort_IT+0xc8>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4a59      	ldr	r2, [pc, #356]	; (80087e0 <HAL_DMA_Abort_IT+0x1a8>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d040      	beq.n	8008700 <HAL_DMA_Abort_IT+0xc8>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	4a58      	ldr	r2, [pc, #352]	; (80087e4 <HAL_DMA_Abort_IT+0x1ac>)
 8008684:	4293      	cmp	r3, r2
 8008686:	d03b      	beq.n	8008700 <HAL_DMA_Abort_IT+0xc8>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a56      	ldr	r2, [pc, #344]	; (80087e8 <HAL_DMA_Abort_IT+0x1b0>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d036      	beq.n	8008700 <HAL_DMA_Abort_IT+0xc8>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4a55      	ldr	r2, [pc, #340]	; (80087ec <HAL_DMA_Abort_IT+0x1b4>)
 8008698:	4293      	cmp	r3, r2
 800869a:	d031      	beq.n	8008700 <HAL_DMA_Abort_IT+0xc8>
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a53      	ldr	r2, [pc, #332]	; (80087f0 <HAL_DMA_Abort_IT+0x1b8>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d02c      	beq.n	8008700 <HAL_DMA_Abort_IT+0xc8>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4a52      	ldr	r2, [pc, #328]	; (80087f4 <HAL_DMA_Abort_IT+0x1bc>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d027      	beq.n	8008700 <HAL_DMA_Abort_IT+0xc8>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4a50      	ldr	r2, [pc, #320]	; (80087f8 <HAL_DMA_Abort_IT+0x1c0>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d022      	beq.n	8008700 <HAL_DMA_Abort_IT+0xc8>
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	4a4f      	ldr	r2, [pc, #316]	; (80087fc <HAL_DMA_Abort_IT+0x1c4>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d01d      	beq.n	8008700 <HAL_DMA_Abort_IT+0xc8>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4a4d      	ldr	r2, [pc, #308]	; (8008800 <HAL_DMA_Abort_IT+0x1c8>)
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d018      	beq.n	8008700 <HAL_DMA_Abort_IT+0xc8>
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	4a4c      	ldr	r2, [pc, #304]	; (8008804 <HAL_DMA_Abort_IT+0x1cc>)
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d013      	beq.n	8008700 <HAL_DMA_Abort_IT+0xc8>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	4a4a      	ldr	r2, [pc, #296]	; (8008808 <HAL_DMA_Abort_IT+0x1d0>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d00e      	beq.n	8008700 <HAL_DMA_Abort_IT+0xc8>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	4a49      	ldr	r2, [pc, #292]	; (800880c <HAL_DMA_Abort_IT+0x1d4>)
 80086e8:	4293      	cmp	r3, r2
 80086ea:	d009      	beq.n	8008700 <HAL_DMA_Abort_IT+0xc8>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4a47      	ldr	r2, [pc, #284]	; (8008810 <HAL_DMA_Abort_IT+0x1d8>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d004      	beq.n	8008700 <HAL_DMA_Abort_IT+0xc8>
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	4a46      	ldr	r2, [pc, #280]	; (8008814 <HAL_DMA_Abort_IT+0x1dc>)
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d101      	bne.n	8008704 <HAL_DMA_Abort_IT+0xcc>
 8008700:	2301      	movs	r3, #1
 8008702:	e000      	b.n	8008706 <HAL_DMA_Abort_IT+0xce>
 8008704:	2300      	movs	r3, #0
 8008706:	2b00      	cmp	r3, #0
 8008708:	f000 8086 	beq.w	8008818 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2204      	movs	r2, #4
 8008710:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	4a2f      	ldr	r2, [pc, #188]	; (80087d8 <HAL_DMA_Abort_IT+0x1a0>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d04a      	beq.n	80087b4 <HAL_DMA_Abort_IT+0x17c>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	4a2e      	ldr	r2, [pc, #184]	; (80087dc <HAL_DMA_Abort_IT+0x1a4>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d045      	beq.n	80087b4 <HAL_DMA_Abort_IT+0x17c>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4a2c      	ldr	r2, [pc, #176]	; (80087e0 <HAL_DMA_Abort_IT+0x1a8>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d040      	beq.n	80087b4 <HAL_DMA_Abort_IT+0x17c>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	4a2b      	ldr	r2, [pc, #172]	; (80087e4 <HAL_DMA_Abort_IT+0x1ac>)
 8008738:	4293      	cmp	r3, r2
 800873a:	d03b      	beq.n	80087b4 <HAL_DMA_Abort_IT+0x17c>
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	4a29      	ldr	r2, [pc, #164]	; (80087e8 <HAL_DMA_Abort_IT+0x1b0>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d036      	beq.n	80087b4 <HAL_DMA_Abort_IT+0x17c>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4a28      	ldr	r2, [pc, #160]	; (80087ec <HAL_DMA_Abort_IT+0x1b4>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d031      	beq.n	80087b4 <HAL_DMA_Abort_IT+0x17c>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	4a26      	ldr	r2, [pc, #152]	; (80087f0 <HAL_DMA_Abort_IT+0x1b8>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d02c      	beq.n	80087b4 <HAL_DMA_Abort_IT+0x17c>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	4a25      	ldr	r2, [pc, #148]	; (80087f4 <HAL_DMA_Abort_IT+0x1bc>)
 8008760:	4293      	cmp	r3, r2
 8008762:	d027      	beq.n	80087b4 <HAL_DMA_Abort_IT+0x17c>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4a23      	ldr	r2, [pc, #140]	; (80087f8 <HAL_DMA_Abort_IT+0x1c0>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d022      	beq.n	80087b4 <HAL_DMA_Abort_IT+0x17c>
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	4a22      	ldr	r2, [pc, #136]	; (80087fc <HAL_DMA_Abort_IT+0x1c4>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d01d      	beq.n	80087b4 <HAL_DMA_Abort_IT+0x17c>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	4a20      	ldr	r2, [pc, #128]	; (8008800 <HAL_DMA_Abort_IT+0x1c8>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d018      	beq.n	80087b4 <HAL_DMA_Abort_IT+0x17c>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	4a1f      	ldr	r2, [pc, #124]	; (8008804 <HAL_DMA_Abort_IT+0x1cc>)
 8008788:	4293      	cmp	r3, r2
 800878a:	d013      	beq.n	80087b4 <HAL_DMA_Abort_IT+0x17c>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	4a1d      	ldr	r2, [pc, #116]	; (8008808 <HAL_DMA_Abort_IT+0x1d0>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d00e      	beq.n	80087b4 <HAL_DMA_Abort_IT+0x17c>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4a1c      	ldr	r2, [pc, #112]	; (800880c <HAL_DMA_Abort_IT+0x1d4>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d009      	beq.n	80087b4 <HAL_DMA_Abort_IT+0x17c>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4a1a      	ldr	r2, [pc, #104]	; (8008810 <HAL_DMA_Abort_IT+0x1d8>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d004      	beq.n	80087b4 <HAL_DMA_Abort_IT+0x17c>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	4a19      	ldr	r2, [pc, #100]	; (8008814 <HAL_DMA_Abort_IT+0x1dc>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d108      	bne.n	80087c6 <HAL_DMA_Abort_IT+0x18e>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	681a      	ldr	r2, [r3, #0]
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f022 0201 	bic.w	r2, r2, #1
 80087c2:	601a      	str	r2, [r3, #0]
 80087c4:	e178      	b.n	8008ab8 <HAL_DMA_Abort_IT+0x480>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	681a      	ldr	r2, [r3, #0]
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f022 0201 	bic.w	r2, r2, #1
 80087d4:	601a      	str	r2, [r3, #0]
 80087d6:	e16f      	b.n	8008ab8 <HAL_DMA_Abort_IT+0x480>
 80087d8:	40020010 	.word	0x40020010
 80087dc:	40020028 	.word	0x40020028
 80087e0:	40020040 	.word	0x40020040
 80087e4:	40020058 	.word	0x40020058
 80087e8:	40020070 	.word	0x40020070
 80087ec:	40020088 	.word	0x40020088
 80087f0:	400200a0 	.word	0x400200a0
 80087f4:	400200b8 	.word	0x400200b8
 80087f8:	40020410 	.word	0x40020410
 80087fc:	40020428 	.word	0x40020428
 8008800:	40020440 	.word	0x40020440
 8008804:	40020458 	.word	0x40020458
 8008808:	40020470 	.word	0x40020470
 800880c:	40020488 	.word	0x40020488
 8008810:	400204a0 	.word	0x400204a0
 8008814:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	681a      	ldr	r2, [r3, #0]
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f022 020e 	bic.w	r2, r2, #14
 8008826:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4a6c      	ldr	r2, [pc, #432]	; (80089e0 <HAL_DMA_Abort_IT+0x3a8>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d04a      	beq.n	80088c8 <HAL_DMA_Abort_IT+0x290>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	4a6b      	ldr	r2, [pc, #428]	; (80089e4 <HAL_DMA_Abort_IT+0x3ac>)
 8008838:	4293      	cmp	r3, r2
 800883a:	d045      	beq.n	80088c8 <HAL_DMA_Abort_IT+0x290>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4a69      	ldr	r2, [pc, #420]	; (80089e8 <HAL_DMA_Abort_IT+0x3b0>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d040      	beq.n	80088c8 <HAL_DMA_Abort_IT+0x290>
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	4a68      	ldr	r2, [pc, #416]	; (80089ec <HAL_DMA_Abort_IT+0x3b4>)
 800884c:	4293      	cmp	r3, r2
 800884e:	d03b      	beq.n	80088c8 <HAL_DMA_Abort_IT+0x290>
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	4a66      	ldr	r2, [pc, #408]	; (80089f0 <HAL_DMA_Abort_IT+0x3b8>)
 8008856:	4293      	cmp	r3, r2
 8008858:	d036      	beq.n	80088c8 <HAL_DMA_Abort_IT+0x290>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	4a65      	ldr	r2, [pc, #404]	; (80089f4 <HAL_DMA_Abort_IT+0x3bc>)
 8008860:	4293      	cmp	r3, r2
 8008862:	d031      	beq.n	80088c8 <HAL_DMA_Abort_IT+0x290>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	4a63      	ldr	r2, [pc, #396]	; (80089f8 <HAL_DMA_Abort_IT+0x3c0>)
 800886a:	4293      	cmp	r3, r2
 800886c:	d02c      	beq.n	80088c8 <HAL_DMA_Abort_IT+0x290>
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	4a62      	ldr	r2, [pc, #392]	; (80089fc <HAL_DMA_Abort_IT+0x3c4>)
 8008874:	4293      	cmp	r3, r2
 8008876:	d027      	beq.n	80088c8 <HAL_DMA_Abort_IT+0x290>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	4a60      	ldr	r2, [pc, #384]	; (8008a00 <HAL_DMA_Abort_IT+0x3c8>)
 800887e:	4293      	cmp	r3, r2
 8008880:	d022      	beq.n	80088c8 <HAL_DMA_Abort_IT+0x290>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	4a5f      	ldr	r2, [pc, #380]	; (8008a04 <HAL_DMA_Abort_IT+0x3cc>)
 8008888:	4293      	cmp	r3, r2
 800888a:	d01d      	beq.n	80088c8 <HAL_DMA_Abort_IT+0x290>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	4a5d      	ldr	r2, [pc, #372]	; (8008a08 <HAL_DMA_Abort_IT+0x3d0>)
 8008892:	4293      	cmp	r3, r2
 8008894:	d018      	beq.n	80088c8 <HAL_DMA_Abort_IT+0x290>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	4a5c      	ldr	r2, [pc, #368]	; (8008a0c <HAL_DMA_Abort_IT+0x3d4>)
 800889c:	4293      	cmp	r3, r2
 800889e:	d013      	beq.n	80088c8 <HAL_DMA_Abort_IT+0x290>
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	4a5a      	ldr	r2, [pc, #360]	; (8008a10 <HAL_DMA_Abort_IT+0x3d8>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d00e      	beq.n	80088c8 <HAL_DMA_Abort_IT+0x290>
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4a59      	ldr	r2, [pc, #356]	; (8008a14 <HAL_DMA_Abort_IT+0x3dc>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d009      	beq.n	80088c8 <HAL_DMA_Abort_IT+0x290>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	4a57      	ldr	r2, [pc, #348]	; (8008a18 <HAL_DMA_Abort_IT+0x3e0>)
 80088ba:	4293      	cmp	r3, r2
 80088bc:	d004      	beq.n	80088c8 <HAL_DMA_Abort_IT+0x290>
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	4a56      	ldr	r2, [pc, #344]	; (8008a1c <HAL_DMA_Abort_IT+0x3e4>)
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d108      	bne.n	80088da <HAL_DMA_Abort_IT+0x2a2>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	681a      	ldr	r2, [r3, #0]
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f022 0201 	bic.w	r2, r2, #1
 80088d6:	601a      	str	r2, [r3, #0]
 80088d8:	e007      	b.n	80088ea <HAL_DMA_Abort_IT+0x2b2>
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	681a      	ldr	r2, [r3, #0]
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f022 0201 	bic.w	r2, r2, #1
 80088e8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	4a3c      	ldr	r2, [pc, #240]	; (80089e0 <HAL_DMA_Abort_IT+0x3a8>)
 80088f0:	4293      	cmp	r3, r2
 80088f2:	d072      	beq.n	80089da <HAL_DMA_Abort_IT+0x3a2>
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	4a3a      	ldr	r2, [pc, #232]	; (80089e4 <HAL_DMA_Abort_IT+0x3ac>)
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d06d      	beq.n	80089da <HAL_DMA_Abort_IT+0x3a2>
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	4a39      	ldr	r2, [pc, #228]	; (80089e8 <HAL_DMA_Abort_IT+0x3b0>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d068      	beq.n	80089da <HAL_DMA_Abort_IT+0x3a2>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	4a37      	ldr	r2, [pc, #220]	; (80089ec <HAL_DMA_Abort_IT+0x3b4>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d063      	beq.n	80089da <HAL_DMA_Abort_IT+0x3a2>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	4a36      	ldr	r2, [pc, #216]	; (80089f0 <HAL_DMA_Abort_IT+0x3b8>)
 8008918:	4293      	cmp	r3, r2
 800891a:	d05e      	beq.n	80089da <HAL_DMA_Abort_IT+0x3a2>
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	4a34      	ldr	r2, [pc, #208]	; (80089f4 <HAL_DMA_Abort_IT+0x3bc>)
 8008922:	4293      	cmp	r3, r2
 8008924:	d059      	beq.n	80089da <HAL_DMA_Abort_IT+0x3a2>
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	4a33      	ldr	r2, [pc, #204]	; (80089f8 <HAL_DMA_Abort_IT+0x3c0>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d054      	beq.n	80089da <HAL_DMA_Abort_IT+0x3a2>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	4a31      	ldr	r2, [pc, #196]	; (80089fc <HAL_DMA_Abort_IT+0x3c4>)
 8008936:	4293      	cmp	r3, r2
 8008938:	d04f      	beq.n	80089da <HAL_DMA_Abort_IT+0x3a2>
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	4a30      	ldr	r2, [pc, #192]	; (8008a00 <HAL_DMA_Abort_IT+0x3c8>)
 8008940:	4293      	cmp	r3, r2
 8008942:	d04a      	beq.n	80089da <HAL_DMA_Abort_IT+0x3a2>
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	4a2e      	ldr	r2, [pc, #184]	; (8008a04 <HAL_DMA_Abort_IT+0x3cc>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d045      	beq.n	80089da <HAL_DMA_Abort_IT+0x3a2>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	4a2d      	ldr	r2, [pc, #180]	; (8008a08 <HAL_DMA_Abort_IT+0x3d0>)
 8008954:	4293      	cmp	r3, r2
 8008956:	d040      	beq.n	80089da <HAL_DMA_Abort_IT+0x3a2>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	4a2b      	ldr	r2, [pc, #172]	; (8008a0c <HAL_DMA_Abort_IT+0x3d4>)
 800895e:	4293      	cmp	r3, r2
 8008960:	d03b      	beq.n	80089da <HAL_DMA_Abort_IT+0x3a2>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	4a2a      	ldr	r2, [pc, #168]	; (8008a10 <HAL_DMA_Abort_IT+0x3d8>)
 8008968:	4293      	cmp	r3, r2
 800896a:	d036      	beq.n	80089da <HAL_DMA_Abort_IT+0x3a2>
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	4a28      	ldr	r2, [pc, #160]	; (8008a14 <HAL_DMA_Abort_IT+0x3dc>)
 8008972:	4293      	cmp	r3, r2
 8008974:	d031      	beq.n	80089da <HAL_DMA_Abort_IT+0x3a2>
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	4a27      	ldr	r2, [pc, #156]	; (8008a18 <HAL_DMA_Abort_IT+0x3e0>)
 800897c:	4293      	cmp	r3, r2
 800897e:	d02c      	beq.n	80089da <HAL_DMA_Abort_IT+0x3a2>
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	4a25      	ldr	r2, [pc, #148]	; (8008a1c <HAL_DMA_Abort_IT+0x3e4>)
 8008986:	4293      	cmp	r3, r2
 8008988:	d027      	beq.n	80089da <HAL_DMA_Abort_IT+0x3a2>
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	4a24      	ldr	r2, [pc, #144]	; (8008a20 <HAL_DMA_Abort_IT+0x3e8>)
 8008990:	4293      	cmp	r3, r2
 8008992:	d022      	beq.n	80089da <HAL_DMA_Abort_IT+0x3a2>
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	4a22      	ldr	r2, [pc, #136]	; (8008a24 <HAL_DMA_Abort_IT+0x3ec>)
 800899a:	4293      	cmp	r3, r2
 800899c:	d01d      	beq.n	80089da <HAL_DMA_Abort_IT+0x3a2>
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	4a21      	ldr	r2, [pc, #132]	; (8008a28 <HAL_DMA_Abort_IT+0x3f0>)
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d018      	beq.n	80089da <HAL_DMA_Abort_IT+0x3a2>
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	4a1f      	ldr	r2, [pc, #124]	; (8008a2c <HAL_DMA_Abort_IT+0x3f4>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d013      	beq.n	80089da <HAL_DMA_Abort_IT+0x3a2>
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	4a1e      	ldr	r2, [pc, #120]	; (8008a30 <HAL_DMA_Abort_IT+0x3f8>)
 80089b8:	4293      	cmp	r3, r2
 80089ba:	d00e      	beq.n	80089da <HAL_DMA_Abort_IT+0x3a2>
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	4a1c      	ldr	r2, [pc, #112]	; (8008a34 <HAL_DMA_Abort_IT+0x3fc>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d009      	beq.n	80089da <HAL_DMA_Abort_IT+0x3a2>
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	4a1b      	ldr	r2, [pc, #108]	; (8008a38 <HAL_DMA_Abort_IT+0x400>)
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d004      	beq.n	80089da <HAL_DMA_Abort_IT+0x3a2>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	4a19      	ldr	r2, [pc, #100]	; (8008a3c <HAL_DMA_Abort_IT+0x404>)
 80089d6:	4293      	cmp	r3, r2
 80089d8:	d132      	bne.n	8008a40 <HAL_DMA_Abort_IT+0x408>
 80089da:	2301      	movs	r3, #1
 80089dc:	e031      	b.n	8008a42 <HAL_DMA_Abort_IT+0x40a>
 80089de:	bf00      	nop
 80089e0:	40020010 	.word	0x40020010
 80089e4:	40020028 	.word	0x40020028
 80089e8:	40020040 	.word	0x40020040
 80089ec:	40020058 	.word	0x40020058
 80089f0:	40020070 	.word	0x40020070
 80089f4:	40020088 	.word	0x40020088
 80089f8:	400200a0 	.word	0x400200a0
 80089fc:	400200b8 	.word	0x400200b8
 8008a00:	40020410 	.word	0x40020410
 8008a04:	40020428 	.word	0x40020428
 8008a08:	40020440 	.word	0x40020440
 8008a0c:	40020458 	.word	0x40020458
 8008a10:	40020470 	.word	0x40020470
 8008a14:	40020488 	.word	0x40020488
 8008a18:	400204a0 	.word	0x400204a0
 8008a1c:	400204b8 	.word	0x400204b8
 8008a20:	58025408 	.word	0x58025408
 8008a24:	5802541c 	.word	0x5802541c
 8008a28:	58025430 	.word	0x58025430
 8008a2c:	58025444 	.word	0x58025444
 8008a30:	58025458 	.word	0x58025458
 8008a34:	5802546c 	.word	0x5802546c
 8008a38:	58025480 	.word	0x58025480
 8008a3c:	58025494 	.word	0x58025494
 8008a40:	2300      	movs	r3, #0
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d028      	beq.n	8008a98 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a4a:	681a      	ldr	r2, [r3, #0]
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008a54:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a5a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a60:	f003 031f 	and.w	r3, r3, #31
 8008a64:	2201      	movs	r2, #1
 8008a66:	409a      	lsls	r2, r3
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a70:	687a      	ldr	r2, [r7, #4]
 8008a72:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008a74:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d00c      	beq.n	8008a98 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a82:	681a      	ldr	r2, [r3, #0]
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008a8c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a92:	687a      	ldr	r2, [r7, #4]
 8008a94:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008a96:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2201      	movs	r2, #1
 8008a9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d003      	beq.n	8008ab8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8008ab8:	2300      	movs	r3, #0
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	3710      	adds	r7, #16
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}
 8008ac2:	bf00      	nop

08008ac4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b08a      	sub	sp, #40	; 0x28
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8008acc:	2300      	movs	r3, #0
 8008ace:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008ad0:	4b67      	ldr	r3, [pc, #412]	; (8008c70 <HAL_DMA_IRQHandler+0x1ac>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	4a67      	ldr	r2, [pc, #412]	; (8008c74 <HAL_DMA_IRQHandler+0x1b0>)
 8008ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8008ada:	0a9b      	lsrs	r3, r3, #10
 8008adc:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ae2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ae8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8008aea:	6a3b      	ldr	r3, [r7, #32]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8008af0:	69fb      	ldr	r3, [r7, #28]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	4a5f      	ldr	r2, [pc, #380]	; (8008c78 <HAL_DMA_IRQHandler+0x1b4>)
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d04a      	beq.n	8008b96 <HAL_DMA_IRQHandler+0xd2>
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	4a5d      	ldr	r2, [pc, #372]	; (8008c7c <HAL_DMA_IRQHandler+0x1b8>)
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d045      	beq.n	8008b96 <HAL_DMA_IRQHandler+0xd2>
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	4a5c      	ldr	r2, [pc, #368]	; (8008c80 <HAL_DMA_IRQHandler+0x1bc>)
 8008b10:	4293      	cmp	r3, r2
 8008b12:	d040      	beq.n	8008b96 <HAL_DMA_IRQHandler+0xd2>
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	4a5a      	ldr	r2, [pc, #360]	; (8008c84 <HAL_DMA_IRQHandler+0x1c0>)
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	d03b      	beq.n	8008b96 <HAL_DMA_IRQHandler+0xd2>
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	4a59      	ldr	r2, [pc, #356]	; (8008c88 <HAL_DMA_IRQHandler+0x1c4>)
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d036      	beq.n	8008b96 <HAL_DMA_IRQHandler+0xd2>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	4a57      	ldr	r2, [pc, #348]	; (8008c8c <HAL_DMA_IRQHandler+0x1c8>)
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	d031      	beq.n	8008b96 <HAL_DMA_IRQHandler+0xd2>
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	4a56      	ldr	r2, [pc, #344]	; (8008c90 <HAL_DMA_IRQHandler+0x1cc>)
 8008b38:	4293      	cmp	r3, r2
 8008b3a:	d02c      	beq.n	8008b96 <HAL_DMA_IRQHandler+0xd2>
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	4a54      	ldr	r2, [pc, #336]	; (8008c94 <HAL_DMA_IRQHandler+0x1d0>)
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d027      	beq.n	8008b96 <HAL_DMA_IRQHandler+0xd2>
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	4a53      	ldr	r2, [pc, #332]	; (8008c98 <HAL_DMA_IRQHandler+0x1d4>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d022      	beq.n	8008b96 <HAL_DMA_IRQHandler+0xd2>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	4a51      	ldr	r2, [pc, #324]	; (8008c9c <HAL_DMA_IRQHandler+0x1d8>)
 8008b56:	4293      	cmp	r3, r2
 8008b58:	d01d      	beq.n	8008b96 <HAL_DMA_IRQHandler+0xd2>
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	4a50      	ldr	r2, [pc, #320]	; (8008ca0 <HAL_DMA_IRQHandler+0x1dc>)
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d018      	beq.n	8008b96 <HAL_DMA_IRQHandler+0xd2>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	4a4e      	ldr	r2, [pc, #312]	; (8008ca4 <HAL_DMA_IRQHandler+0x1e0>)
 8008b6a:	4293      	cmp	r3, r2
 8008b6c:	d013      	beq.n	8008b96 <HAL_DMA_IRQHandler+0xd2>
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	4a4d      	ldr	r2, [pc, #308]	; (8008ca8 <HAL_DMA_IRQHandler+0x1e4>)
 8008b74:	4293      	cmp	r3, r2
 8008b76:	d00e      	beq.n	8008b96 <HAL_DMA_IRQHandler+0xd2>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	4a4b      	ldr	r2, [pc, #300]	; (8008cac <HAL_DMA_IRQHandler+0x1e8>)
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d009      	beq.n	8008b96 <HAL_DMA_IRQHandler+0xd2>
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	4a4a      	ldr	r2, [pc, #296]	; (8008cb0 <HAL_DMA_IRQHandler+0x1ec>)
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d004      	beq.n	8008b96 <HAL_DMA_IRQHandler+0xd2>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	4a48      	ldr	r2, [pc, #288]	; (8008cb4 <HAL_DMA_IRQHandler+0x1f0>)
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d101      	bne.n	8008b9a <HAL_DMA_IRQHandler+0xd6>
 8008b96:	2301      	movs	r3, #1
 8008b98:	e000      	b.n	8008b9c <HAL_DMA_IRQHandler+0xd8>
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	f000 842b 	beq.w	80093f8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ba6:	f003 031f 	and.w	r3, r3, #31
 8008baa:	2208      	movs	r2, #8
 8008bac:	409a      	lsls	r2, r3
 8008bae:	69bb      	ldr	r3, [r7, #24]
 8008bb0:	4013      	ands	r3, r2
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	f000 80a2 	beq.w	8008cfc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	4a2e      	ldr	r2, [pc, #184]	; (8008c78 <HAL_DMA_IRQHandler+0x1b4>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d04a      	beq.n	8008c58 <HAL_DMA_IRQHandler+0x194>
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	4a2d      	ldr	r2, [pc, #180]	; (8008c7c <HAL_DMA_IRQHandler+0x1b8>)
 8008bc8:	4293      	cmp	r3, r2
 8008bca:	d045      	beq.n	8008c58 <HAL_DMA_IRQHandler+0x194>
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	4a2b      	ldr	r2, [pc, #172]	; (8008c80 <HAL_DMA_IRQHandler+0x1bc>)
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	d040      	beq.n	8008c58 <HAL_DMA_IRQHandler+0x194>
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	4a2a      	ldr	r2, [pc, #168]	; (8008c84 <HAL_DMA_IRQHandler+0x1c0>)
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d03b      	beq.n	8008c58 <HAL_DMA_IRQHandler+0x194>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	4a28      	ldr	r2, [pc, #160]	; (8008c88 <HAL_DMA_IRQHandler+0x1c4>)
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d036      	beq.n	8008c58 <HAL_DMA_IRQHandler+0x194>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	4a27      	ldr	r2, [pc, #156]	; (8008c8c <HAL_DMA_IRQHandler+0x1c8>)
 8008bf0:	4293      	cmp	r3, r2
 8008bf2:	d031      	beq.n	8008c58 <HAL_DMA_IRQHandler+0x194>
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	4a25      	ldr	r2, [pc, #148]	; (8008c90 <HAL_DMA_IRQHandler+0x1cc>)
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d02c      	beq.n	8008c58 <HAL_DMA_IRQHandler+0x194>
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	4a24      	ldr	r2, [pc, #144]	; (8008c94 <HAL_DMA_IRQHandler+0x1d0>)
 8008c04:	4293      	cmp	r3, r2
 8008c06:	d027      	beq.n	8008c58 <HAL_DMA_IRQHandler+0x194>
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	4a22      	ldr	r2, [pc, #136]	; (8008c98 <HAL_DMA_IRQHandler+0x1d4>)
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d022      	beq.n	8008c58 <HAL_DMA_IRQHandler+0x194>
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	4a21      	ldr	r2, [pc, #132]	; (8008c9c <HAL_DMA_IRQHandler+0x1d8>)
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d01d      	beq.n	8008c58 <HAL_DMA_IRQHandler+0x194>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	4a1f      	ldr	r2, [pc, #124]	; (8008ca0 <HAL_DMA_IRQHandler+0x1dc>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d018      	beq.n	8008c58 <HAL_DMA_IRQHandler+0x194>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	4a1e      	ldr	r2, [pc, #120]	; (8008ca4 <HAL_DMA_IRQHandler+0x1e0>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d013      	beq.n	8008c58 <HAL_DMA_IRQHandler+0x194>
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	4a1c      	ldr	r2, [pc, #112]	; (8008ca8 <HAL_DMA_IRQHandler+0x1e4>)
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d00e      	beq.n	8008c58 <HAL_DMA_IRQHandler+0x194>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	4a1b      	ldr	r2, [pc, #108]	; (8008cac <HAL_DMA_IRQHandler+0x1e8>)
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d009      	beq.n	8008c58 <HAL_DMA_IRQHandler+0x194>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	4a19      	ldr	r2, [pc, #100]	; (8008cb0 <HAL_DMA_IRQHandler+0x1ec>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d004      	beq.n	8008c58 <HAL_DMA_IRQHandler+0x194>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	4a18      	ldr	r2, [pc, #96]	; (8008cb4 <HAL_DMA_IRQHandler+0x1f0>)
 8008c54:	4293      	cmp	r3, r2
 8008c56:	d12f      	bne.n	8008cb8 <HAL_DMA_IRQHandler+0x1f4>
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f003 0304 	and.w	r3, r3, #4
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	bf14      	ite	ne
 8008c66:	2301      	movne	r3, #1
 8008c68:	2300      	moveq	r3, #0
 8008c6a:	b2db      	uxtb	r3, r3
 8008c6c:	e02e      	b.n	8008ccc <HAL_DMA_IRQHandler+0x208>
 8008c6e:	bf00      	nop
 8008c70:	24000004 	.word	0x24000004
 8008c74:	1b4e81b5 	.word	0x1b4e81b5
 8008c78:	40020010 	.word	0x40020010
 8008c7c:	40020028 	.word	0x40020028
 8008c80:	40020040 	.word	0x40020040
 8008c84:	40020058 	.word	0x40020058
 8008c88:	40020070 	.word	0x40020070
 8008c8c:	40020088 	.word	0x40020088
 8008c90:	400200a0 	.word	0x400200a0
 8008c94:	400200b8 	.word	0x400200b8
 8008c98:	40020410 	.word	0x40020410
 8008c9c:	40020428 	.word	0x40020428
 8008ca0:	40020440 	.word	0x40020440
 8008ca4:	40020458 	.word	0x40020458
 8008ca8:	40020470 	.word	0x40020470
 8008cac:	40020488 	.word	0x40020488
 8008cb0:	400204a0 	.word	0x400204a0
 8008cb4:	400204b8 	.word	0x400204b8
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f003 0308 	and.w	r3, r3, #8
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	bf14      	ite	ne
 8008cc6:	2301      	movne	r3, #1
 8008cc8:	2300      	moveq	r3, #0
 8008cca:	b2db      	uxtb	r3, r3
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d015      	beq.n	8008cfc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	681a      	ldr	r2, [r3, #0]
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f022 0204 	bic.w	r2, r2, #4
 8008cde:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ce4:	f003 031f 	and.w	r3, r3, #31
 8008ce8:	2208      	movs	r2, #8
 8008cea:	409a      	lsls	r2, r3
 8008cec:	6a3b      	ldr	r3, [r7, #32]
 8008cee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cf4:	f043 0201 	orr.w	r2, r3, #1
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d00:	f003 031f 	and.w	r3, r3, #31
 8008d04:	69ba      	ldr	r2, [r7, #24]
 8008d06:	fa22 f303 	lsr.w	r3, r2, r3
 8008d0a:	f003 0301 	and.w	r3, r3, #1
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d06e      	beq.n	8008df0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	4a69      	ldr	r2, [pc, #420]	; (8008ebc <HAL_DMA_IRQHandler+0x3f8>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d04a      	beq.n	8008db2 <HAL_DMA_IRQHandler+0x2ee>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4a67      	ldr	r2, [pc, #412]	; (8008ec0 <HAL_DMA_IRQHandler+0x3fc>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d045      	beq.n	8008db2 <HAL_DMA_IRQHandler+0x2ee>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	4a66      	ldr	r2, [pc, #408]	; (8008ec4 <HAL_DMA_IRQHandler+0x400>)
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d040      	beq.n	8008db2 <HAL_DMA_IRQHandler+0x2ee>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	4a64      	ldr	r2, [pc, #400]	; (8008ec8 <HAL_DMA_IRQHandler+0x404>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d03b      	beq.n	8008db2 <HAL_DMA_IRQHandler+0x2ee>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	4a63      	ldr	r2, [pc, #396]	; (8008ecc <HAL_DMA_IRQHandler+0x408>)
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d036      	beq.n	8008db2 <HAL_DMA_IRQHandler+0x2ee>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	4a61      	ldr	r2, [pc, #388]	; (8008ed0 <HAL_DMA_IRQHandler+0x40c>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d031      	beq.n	8008db2 <HAL_DMA_IRQHandler+0x2ee>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	4a60      	ldr	r2, [pc, #384]	; (8008ed4 <HAL_DMA_IRQHandler+0x410>)
 8008d54:	4293      	cmp	r3, r2
 8008d56:	d02c      	beq.n	8008db2 <HAL_DMA_IRQHandler+0x2ee>
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	4a5e      	ldr	r2, [pc, #376]	; (8008ed8 <HAL_DMA_IRQHandler+0x414>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d027      	beq.n	8008db2 <HAL_DMA_IRQHandler+0x2ee>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	4a5d      	ldr	r2, [pc, #372]	; (8008edc <HAL_DMA_IRQHandler+0x418>)
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d022      	beq.n	8008db2 <HAL_DMA_IRQHandler+0x2ee>
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	4a5b      	ldr	r2, [pc, #364]	; (8008ee0 <HAL_DMA_IRQHandler+0x41c>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d01d      	beq.n	8008db2 <HAL_DMA_IRQHandler+0x2ee>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	4a5a      	ldr	r2, [pc, #360]	; (8008ee4 <HAL_DMA_IRQHandler+0x420>)
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d018      	beq.n	8008db2 <HAL_DMA_IRQHandler+0x2ee>
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	4a58      	ldr	r2, [pc, #352]	; (8008ee8 <HAL_DMA_IRQHandler+0x424>)
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d013      	beq.n	8008db2 <HAL_DMA_IRQHandler+0x2ee>
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	4a57      	ldr	r2, [pc, #348]	; (8008eec <HAL_DMA_IRQHandler+0x428>)
 8008d90:	4293      	cmp	r3, r2
 8008d92:	d00e      	beq.n	8008db2 <HAL_DMA_IRQHandler+0x2ee>
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	4a55      	ldr	r2, [pc, #340]	; (8008ef0 <HAL_DMA_IRQHandler+0x42c>)
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	d009      	beq.n	8008db2 <HAL_DMA_IRQHandler+0x2ee>
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	4a54      	ldr	r2, [pc, #336]	; (8008ef4 <HAL_DMA_IRQHandler+0x430>)
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d004      	beq.n	8008db2 <HAL_DMA_IRQHandler+0x2ee>
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	4a52      	ldr	r2, [pc, #328]	; (8008ef8 <HAL_DMA_IRQHandler+0x434>)
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d10a      	bne.n	8008dc8 <HAL_DMA_IRQHandler+0x304>
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	695b      	ldr	r3, [r3, #20]
 8008db8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	bf14      	ite	ne
 8008dc0:	2301      	movne	r3, #1
 8008dc2:	2300      	moveq	r3, #0
 8008dc4:	b2db      	uxtb	r3, r3
 8008dc6:	e003      	b.n	8008dd0 <HAL_DMA_IRQHandler+0x30c>
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	2300      	movs	r3, #0
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d00d      	beq.n	8008df0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008dd8:	f003 031f 	and.w	r3, r3, #31
 8008ddc:	2201      	movs	r2, #1
 8008dde:	409a      	lsls	r2, r3
 8008de0:	6a3b      	ldr	r3, [r7, #32]
 8008de2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008de8:	f043 0202 	orr.w	r2, r3, #2
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008df4:	f003 031f 	and.w	r3, r3, #31
 8008df8:	2204      	movs	r2, #4
 8008dfa:	409a      	lsls	r2, r3
 8008dfc:	69bb      	ldr	r3, [r7, #24]
 8008dfe:	4013      	ands	r3, r2
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	f000 808f 	beq.w	8008f24 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	4a2c      	ldr	r2, [pc, #176]	; (8008ebc <HAL_DMA_IRQHandler+0x3f8>)
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	d04a      	beq.n	8008ea6 <HAL_DMA_IRQHandler+0x3e2>
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	4a2a      	ldr	r2, [pc, #168]	; (8008ec0 <HAL_DMA_IRQHandler+0x3fc>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d045      	beq.n	8008ea6 <HAL_DMA_IRQHandler+0x3e2>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	4a29      	ldr	r2, [pc, #164]	; (8008ec4 <HAL_DMA_IRQHandler+0x400>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d040      	beq.n	8008ea6 <HAL_DMA_IRQHandler+0x3e2>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	4a27      	ldr	r2, [pc, #156]	; (8008ec8 <HAL_DMA_IRQHandler+0x404>)
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d03b      	beq.n	8008ea6 <HAL_DMA_IRQHandler+0x3e2>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	4a26      	ldr	r2, [pc, #152]	; (8008ecc <HAL_DMA_IRQHandler+0x408>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d036      	beq.n	8008ea6 <HAL_DMA_IRQHandler+0x3e2>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	4a24      	ldr	r2, [pc, #144]	; (8008ed0 <HAL_DMA_IRQHandler+0x40c>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d031      	beq.n	8008ea6 <HAL_DMA_IRQHandler+0x3e2>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4a23      	ldr	r2, [pc, #140]	; (8008ed4 <HAL_DMA_IRQHandler+0x410>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d02c      	beq.n	8008ea6 <HAL_DMA_IRQHandler+0x3e2>
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	4a21      	ldr	r2, [pc, #132]	; (8008ed8 <HAL_DMA_IRQHandler+0x414>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d027      	beq.n	8008ea6 <HAL_DMA_IRQHandler+0x3e2>
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	4a20      	ldr	r2, [pc, #128]	; (8008edc <HAL_DMA_IRQHandler+0x418>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d022      	beq.n	8008ea6 <HAL_DMA_IRQHandler+0x3e2>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	4a1e      	ldr	r2, [pc, #120]	; (8008ee0 <HAL_DMA_IRQHandler+0x41c>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d01d      	beq.n	8008ea6 <HAL_DMA_IRQHandler+0x3e2>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	4a1d      	ldr	r2, [pc, #116]	; (8008ee4 <HAL_DMA_IRQHandler+0x420>)
 8008e70:	4293      	cmp	r3, r2
 8008e72:	d018      	beq.n	8008ea6 <HAL_DMA_IRQHandler+0x3e2>
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	4a1b      	ldr	r2, [pc, #108]	; (8008ee8 <HAL_DMA_IRQHandler+0x424>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d013      	beq.n	8008ea6 <HAL_DMA_IRQHandler+0x3e2>
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	4a1a      	ldr	r2, [pc, #104]	; (8008eec <HAL_DMA_IRQHandler+0x428>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d00e      	beq.n	8008ea6 <HAL_DMA_IRQHandler+0x3e2>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	4a18      	ldr	r2, [pc, #96]	; (8008ef0 <HAL_DMA_IRQHandler+0x42c>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d009      	beq.n	8008ea6 <HAL_DMA_IRQHandler+0x3e2>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	4a17      	ldr	r2, [pc, #92]	; (8008ef4 <HAL_DMA_IRQHandler+0x430>)
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	d004      	beq.n	8008ea6 <HAL_DMA_IRQHandler+0x3e2>
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	4a15      	ldr	r2, [pc, #84]	; (8008ef8 <HAL_DMA_IRQHandler+0x434>)
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d12a      	bne.n	8008efc <HAL_DMA_IRQHandler+0x438>
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f003 0302 	and.w	r3, r3, #2
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	bf14      	ite	ne
 8008eb4:	2301      	movne	r3, #1
 8008eb6:	2300      	moveq	r3, #0
 8008eb8:	b2db      	uxtb	r3, r3
 8008eba:	e023      	b.n	8008f04 <HAL_DMA_IRQHandler+0x440>
 8008ebc:	40020010 	.word	0x40020010
 8008ec0:	40020028 	.word	0x40020028
 8008ec4:	40020040 	.word	0x40020040
 8008ec8:	40020058 	.word	0x40020058
 8008ecc:	40020070 	.word	0x40020070
 8008ed0:	40020088 	.word	0x40020088
 8008ed4:	400200a0 	.word	0x400200a0
 8008ed8:	400200b8 	.word	0x400200b8
 8008edc:	40020410 	.word	0x40020410
 8008ee0:	40020428 	.word	0x40020428
 8008ee4:	40020440 	.word	0x40020440
 8008ee8:	40020458 	.word	0x40020458
 8008eec:	40020470 	.word	0x40020470
 8008ef0:	40020488 	.word	0x40020488
 8008ef4:	400204a0 	.word	0x400204a0
 8008ef8:	400204b8 	.word	0x400204b8
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	2300      	movs	r3, #0
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d00d      	beq.n	8008f24 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f0c:	f003 031f 	and.w	r3, r3, #31
 8008f10:	2204      	movs	r2, #4
 8008f12:	409a      	lsls	r2, r3
 8008f14:	6a3b      	ldr	r3, [r7, #32]
 8008f16:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f1c:	f043 0204 	orr.w	r2, r3, #4
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f28:	f003 031f 	and.w	r3, r3, #31
 8008f2c:	2210      	movs	r2, #16
 8008f2e:	409a      	lsls	r2, r3
 8008f30:	69bb      	ldr	r3, [r7, #24]
 8008f32:	4013      	ands	r3, r2
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	f000 80a6 	beq.w	8009086 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	4a85      	ldr	r2, [pc, #532]	; (8009154 <HAL_DMA_IRQHandler+0x690>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d04a      	beq.n	8008fda <HAL_DMA_IRQHandler+0x516>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	4a83      	ldr	r2, [pc, #524]	; (8009158 <HAL_DMA_IRQHandler+0x694>)
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	d045      	beq.n	8008fda <HAL_DMA_IRQHandler+0x516>
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	4a82      	ldr	r2, [pc, #520]	; (800915c <HAL_DMA_IRQHandler+0x698>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d040      	beq.n	8008fda <HAL_DMA_IRQHandler+0x516>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	4a80      	ldr	r2, [pc, #512]	; (8009160 <HAL_DMA_IRQHandler+0x69c>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d03b      	beq.n	8008fda <HAL_DMA_IRQHandler+0x516>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	4a7f      	ldr	r2, [pc, #508]	; (8009164 <HAL_DMA_IRQHandler+0x6a0>)
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d036      	beq.n	8008fda <HAL_DMA_IRQHandler+0x516>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	4a7d      	ldr	r2, [pc, #500]	; (8009168 <HAL_DMA_IRQHandler+0x6a4>)
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d031      	beq.n	8008fda <HAL_DMA_IRQHandler+0x516>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	4a7c      	ldr	r2, [pc, #496]	; (800916c <HAL_DMA_IRQHandler+0x6a8>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d02c      	beq.n	8008fda <HAL_DMA_IRQHandler+0x516>
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	4a7a      	ldr	r2, [pc, #488]	; (8009170 <HAL_DMA_IRQHandler+0x6ac>)
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d027      	beq.n	8008fda <HAL_DMA_IRQHandler+0x516>
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	4a79      	ldr	r2, [pc, #484]	; (8009174 <HAL_DMA_IRQHandler+0x6b0>)
 8008f90:	4293      	cmp	r3, r2
 8008f92:	d022      	beq.n	8008fda <HAL_DMA_IRQHandler+0x516>
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	4a77      	ldr	r2, [pc, #476]	; (8009178 <HAL_DMA_IRQHandler+0x6b4>)
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d01d      	beq.n	8008fda <HAL_DMA_IRQHandler+0x516>
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	4a76      	ldr	r2, [pc, #472]	; (800917c <HAL_DMA_IRQHandler+0x6b8>)
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	d018      	beq.n	8008fda <HAL_DMA_IRQHandler+0x516>
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	4a74      	ldr	r2, [pc, #464]	; (8009180 <HAL_DMA_IRQHandler+0x6bc>)
 8008fae:	4293      	cmp	r3, r2
 8008fb0:	d013      	beq.n	8008fda <HAL_DMA_IRQHandler+0x516>
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	4a73      	ldr	r2, [pc, #460]	; (8009184 <HAL_DMA_IRQHandler+0x6c0>)
 8008fb8:	4293      	cmp	r3, r2
 8008fba:	d00e      	beq.n	8008fda <HAL_DMA_IRQHandler+0x516>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	4a71      	ldr	r2, [pc, #452]	; (8009188 <HAL_DMA_IRQHandler+0x6c4>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d009      	beq.n	8008fda <HAL_DMA_IRQHandler+0x516>
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	4a70      	ldr	r2, [pc, #448]	; (800918c <HAL_DMA_IRQHandler+0x6c8>)
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	d004      	beq.n	8008fda <HAL_DMA_IRQHandler+0x516>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	4a6e      	ldr	r2, [pc, #440]	; (8009190 <HAL_DMA_IRQHandler+0x6cc>)
 8008fd6:	4293      	cmp	r3, r2
 8008fd8:	d10a      	bne.n	8008ff0 <HAL_DMA_IRQHandler+0x52c>
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f003 0308 	and.w	r3, r3, #8
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	bf14      	ite	ne
 8008fe8:	2301      	movne	r3, #1
 8008fea:	2300      	moveq	r3, #0
 8008fec:	b2db      	uxtb	r3, r3
 8008fee:	e009      	b.n	8009004 <HAL_DMA_IRQHandler+0x540>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f003 0304 	and.w	r3, r3, #4
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	bf14      	ite	ne
 8008ffe:	2301      	movne	r3, #1
 8009000:	2300      	moveq	r3, #0
 8009002:	b2db      	uxtb	r3, r3
 8009004:	2b00      	cmp	r3, #0
 8009006:	d03e      	beq.n	8009086 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800900c:	f003 031f 	and.w	r3, r3, #31
 8009010:	2210      	movs	r2, #16
 8009012:	409a      	lsls	r2, r3
 8009014:	6a3b      	ldr	r3, [r7, #32]
 8009016:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009022:	2b00      	cmp	r3, #0
 8009024:	d018      	beq.n	8009058 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009030:	2b00      	cmp	r3, #0
 8009032:	d108      	bne.n	8009046 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009038:	2b00      	cmp	r3, #0
 800903a:	d024      	beq.n	8009086 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	4798      	blx	r3
 8009044:	e01f      	b.n	8009086 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800904a:	2b00      	cmp	r3, #0
 800904c:	d01b      	beq.n	8009086 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	4798      	blx	r3
 8009056:	e016      	b.n	8009086 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009062:	2b00      	cmp	r3, #0
 8009064:	d107      	bne.n	8009076 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	681a      	ldr	r2, [r3, #0]
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f022 0208 	bic.w	r2, r2, #8
 8009074:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800907a:	2b00      	cmp	r3, #0
 800907c:	d003      	beq.n	8009086 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800908a:	f003 031f 	and.w	r3, r3, #31
 800908e:	2220      	movs	r2, #32
 8009090:	409a      	lsls	r2, r3
 8009092:	69bb      	ldr	r3, [r7, #24]
 8009094:	4013      	ands	r3, r2
 8009096:	2b00      	cmp	r3, #0
 8009098:	f000 8110 	beq.w	80092bc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	4a2c      	ldr	r2, [pc, #176]	; (8009154 <HAL_DMA_IRQHandler+0x690>)
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d04a      	beq.n	800913c <HAL_DMA_IRQHandler+0x678>
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	4a2b      	ldr	r2, [pc, #172]	; (8009158 <HAL_DMA_IRQHandler+0x694>)
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d045      	beq.n	800913c <HAL_DMA_IRQHandler+0x678>
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	4a29      	ldr	r2, [pc, #164]	; (800915c <HAL_DMA_IRQHandler+0x698>)
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d040      	beq.n	800913c <HAL_DMA_IRQHandler+0x678>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	4a28      	ldr	r2, [pc, #160]	; (8009160 <HAL_DMA_IRQHandler+0x69c>)
 80090c0:	4293      	cmp	r3, r2
 80090c2:	d03b      	beq.n	800913c <HAL_DMA_IRQHandler+0x678>
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	4a26      	ldr	r2, [pc, #152]	; (8009164 <HAL_DMA_IRQHandler+0x6a0>)
 80090ca:	4293      	cmp	r3, r2
 80090cc:	d036      	beq.n	800913c <HAL_DMA_IRQHandler+0x678>
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	4a25      	ldr	r2, [pc, #148]	; (8009168 <HAL_DMA_IRQHandler+0x6a4>)
 80090d4:	4293      	cmp	r3, r2
 80090d6:	d031      	beq.n	800913c <HAL_DMA_IRQHandler+0x678>
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	4a23      	ldr	r2, [pc, #140]	; (800916c <HAL_DMA_IRQHandler+0x6a8>)
 80090de:	4293      	cmp	r3, r2
 80090e0:	d02c      	beq.n	800913c <HAL_DMA_IRQHandler+0x678>
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	4a22      	ldr	r2, [pc, #136]	; (8009170 <HAL_DMA_IRQHandler+0x6ac>)
 80090e8:	4293      	cmp	r3, r2
 80090ea:	d027      	beq.n	800913c <HAL_DMA_IRQHandler+0x678>
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	4a20      	ldr	r2, [pc, #128]	; (8009174 <HAL_DMA_IRQHandler+0x6b0>)
 80090f2:	4293      	cmp	r3, r2
 80090f4:	d022      	beq.n	800913c <HAL_DMA_IRQHandler+0x678>
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	4a1f      	ldr	r2, [pc, #124]	; (8009178 <HAL_DMA_IRQHandler+0x6b4>)
 80090fc:	4293      	cmp	r3, r2
 80090fe:	d01d      	beq.n	800913c <HAL_DMA_IRQHandler+0x678>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	4a1d      	ldr	r2, [pc, #116]	; (800917c <HAL_DMA_IRQHandler+0x6b8>)
 8009106:	4293      	cmp	r3, r2
 8009108:	d018      	beq.n	800913c <HAL_DMA_IRQHandler+0x678>
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	4a1c      	ldr	r2, [pc, #112]	; (8009180 <HAL_DMA_IRQHandler+0x6bc>)
 8009110:	4293      	cmp	r3, r2
 8009112:	d013      	beq.n	800913c <HAL_DMA_IRQHandler+0x678>
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	4a1a      	ldr	r2, [pc, #104]	; (8009184 <HAL_DMA_IRQHandler+0x6c0>)
 800911a:	4293      	cmp	r3, r2
 800911c:	d00e      	beq.n	800913c <HAL_DMA_IRQHandler+0x678>
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	4a19      	ldr	r2, [pc, #100]	; (8009188 <HAL_DMA_IRQHandler+0x6c4>)
 8009124:	4293      	cmp	r3, r2
 8009126:	d009      	beq.n	800913c <HAL_DMA_IRQHandler+0x678>
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	4a17      	ldr	r2, [pc, #92]	; (800918c <HAL_DMA_IRQHandler+0x6c8>)
 800912e:	4293      	cmp	r3, r2
 8009130:	d004      	beq.n	800913c <HAL_DMA_IRQHandler+0x678>
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	4a16      	ldr	r2, [pc, #88]	; (8009190 <HAL_DMA_IRQHandler+0x6cc>)
 8009138:	4293      	cmp	r3, r2
 800913a:	d12b      	bne.n	8009194 <HAL_DMA_IRQHandler+0x6d0>
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f003 0310 	and.w	r3, r3, #16
 8009146:	2b00      	cmp	r3, #0
 8009148:	bf14      	ite	ne
 800914a:	2301      	movne	r3, #1
 800914c:	2300      	moveq	r3, #0
 800914e:	b2db      	uxtb	r3, r3
 8009150:	e02a      	b.n	80091a8 <HAL_DMA_IRQHandler+0x6e4>
 8009152:	bf00      	nop
 8009154:	40020010 	.word	0x40020010
 8009158:	40020028 	.word	0x40020028
 800915c:	40020040 	.word	0x40020040
 8009160:	40020058 	.word	0x40020058
 8009164:	40020070 	.word	0x40020070
 8009168:	40020088 	.word	0x40020088
 800916c:	400200a0 	.word	0x400200a0
 8009170:	400200b8 	.word	0x400200b8
 8009174:	40020410 	.word	0x40020410
 8009178:	40020428 	.word	0x40020428
 800917c:	40020440 	.word	0x40020440
 8009180:	40020458 	.word	0x40020458
 8009184:	40020470 	.word	0x40020470
 8009188:	40020488 	.word	0x40020488
 800918c:	400204a0 	.word	0x400204a0
 8009190:	400204b8 	.word	0x400204b8
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f003 0302 	and.w	r3, r3, #2
 800919e:	2b00      	cmp	r3, #0
 80091a0:	bf14      	ite	ne
 80091a2:	2301      	movne	r3, #1
 80091a4:	2300      	moveq	r3, #0
 80091a6:	b2db      	uxtb	r3, r3
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	f000 8087 	beq.w	80092bc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091b2:	f003 031f 	and.w	r3, r3, #31
 80091b6:	2220      	movs	r2, #32
 80091b8:	409a      	lsls	r2, r3
 80091ba:	6a3b      	ldr	r3, [r7, #32]
 80091bc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80091c4:	b2db      	uxtb	r3, r3
 80091c6:	2b04      	cmp	r3, #4
 80091c8:	d139      	bne.n	800923e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	681a      	ldr	r2, [r3, #0]
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f022 0216 	bic.w	r2, r2, #22
 80091d8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	695a      	ldr	r2, [r3, #20]
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80091e8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d103      	bne.n	80091fa <HAL_DMA_IRQHandler+0x736>
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d007      	beq.n	800920a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	681a      	ldr	r2, [r3, #0]
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f022 0208 	bic.w	r2, r2, #8
 8009208:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800920e:	f003 031f 	and.w	r3, r3, #31
 8009212:	223f      	movs	r2, #63	; 0x3f
 8009214:	409a      	lsls	r2, r3
 8009216:	6a3b      	ldr	r3, [r7, #32]
 8009218:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2201      	movs	r2, #1
 800921e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2200      	movs	r2, #0
 8009226:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800922e:	2b00      	cmp	r3, #0
 8009230:	f000 834a 	beq.w	80098c8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	4798      	blx	r3
          }
          return;
 800923c:	e344      	b.n	80098c8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009248:	2b00      	cmp	r3, #0
 800924a:	d018      	beq.n	800927e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009256:	2b00      	cmp	r3, #0
 8009258:	d108      	bne.n	800926c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800925e:	2b00      	cmp	r3, #0
 8009260:	d02c      	beq.n	80092bc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	4798      	blx	r3
 800926a:	e027      	b.n	80092bc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009270:	2b00      	cmp	r3, #0
 8009272:	d023      	beq.n	80092bc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	4798      	blx	r3
 800927c:	e01e      	b.n	80092bc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009288:	2b00      	cmp	r3, #0
 800928a:	d10f      	bne.n	80092ac <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	681a      	ldr	r2, [r3, #0]
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f022 0210 	bic.w	r2, r2, #16
 800929a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2201      	movs	r2, #1
 80092a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2200      	movs	r2, #0
 80092a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d003      	beq.n	80092bc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092b8:	6878      	ldr	r0, [r7, #4]
 80092ba:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	f000 8306 	beq.w	80098d2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092ca:	f003 0301 	and.w	r3, r3, #1
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	f000 8088 	beq.w	80093e4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2204      	movs	r2, #4
 80092d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	4a7a      	ldr	r2, [pc, #488]	; (80094cc <HAL_DMA_IRQHandler+0xa08>)
 80092e2:	4293      	cmp	r3, r2
 80092e4:	d04a      	beq.n	800937c <HAL_DMA_IRQHandler+0x8b8>
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	4a79      	ldr	r2, [pc, #484]	; (80094d0 <HAL_DMA_IRQHandler+0xa0c>)
 80092ec:	4293      	cmp	r3, r2
 80092ee:	d045      	beq.n	800937c <HAL_DMA_IRQHandler+0x8b8>
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	4a77      	ldr	r2, [pc, #476]	; (80094d4 <HAL_DMA_IRQHandler+0xa10>)
 80092f6:	4293      	cmp	r3, r2
 80092f8:	d040      	beq.n	800937c <HAL_DMA_IRQHandler+0x8b8>
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	4a76      	ldr	r2, [pc, #472]	; (80094d8 <HAL_DMA_IRQHandler+0xa14>)
 8009300:	4293      	cmp	r3, r2
 8009302:	d03b      	beq.n	800937c <HAL_DMA_IRQHandler+0x8b8>
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	4a74      	ldr	r2, [pc, #464]	; (80094dc <HAL_DMA_IRQHandler+0xa18>)
 800930a:	4293      	cmp	r3, r2
 800930c:	d036      	beq.n	800937c <HAL_DMA_IRQHandler+0x8b8>
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	4a73      	ldr	r2, [pc, #460]	; (80094e0 <HAL_DMA_IRQHandler+0xa1c>)
 8009314:	4293      	cmp	r3, r2
 8009316:	d031      	beq.n	800937c <HAL_DMA_IRQHandler+0x8b8>
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	4a71      	ldr	r2, [pc, #452]	; (80094e4 <HAL_DMA_IRQHandler+0xa20>)
 800931e:	4293      	cmp	r3, r2
 8009320:	d02c      	beq.n	800937c <HAL_DMA_IRQHandler+0x8b8>
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	4a70      	ldr	r2, [pc, #448]	; (80094e8 <HAL_DMA_IRQHandler+0xa24>)
 8009328:	4293      	cmp	r3, r2
 800932a:	d027      	beq.n	800937c <HAL_DMA_IRQHandler+0x8b8>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	4a6e      	ldr	r2, [pc, #440]	; (80094ec <HAL_DMA_IRQHandler+0xa28>)
 8009332:	4293      	cmp	r3, r2
 8009334:	d022      	beq.n	800937c <HAL_DMA_IRQHandler+0x8b8>
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	4a6d      	ldr	r2, [pc, #436]	; (80094f0 <HAL_DMA_IRQHandler+0xa2c>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d01d      	beq.n	800937c <HAL_DMA_IRQHandler+0x8b8>
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	4a6b      	ldr	r2, [pc, #428]	; (80094f4 <HAL_DMA_IRQHandler+0xa30>)
 8009346:	4293      	cmp	r3, r2
 8009348:	d018      	beq.n	800937c <HAL_DMA_IRQHandler+0x8b8>
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	4a6a      	ldr	r2, [pc, #424]	; (80094f8 <HAL_DMA_IRQHandler+0xa34>)
 8009350:	4293      	cmp	r3, r2
 8009352:	d013      	beq.n	800937c <HAL_DMA_IRQHandler+0x8b8>
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	4a68      	ldr	r2, [pc, #416]	; (80094fc <HAL_DMA_IRQHandler+0xa38>)
 800935a:	4293      	cmp	r3, r2
 800935c:	d00e      	beq.n	800937c <HAL_DMA_IRQHandler+0x8b8>
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	4a67      	ldr	r2, [pc, #412]	; (8009500 <HAL_DMA_IRQHandler+0xa3c>)
 8009364:	4293      	cmp	r3, r2
 8009366:	d009      	beq.n	800937c <HAL_DMA_IRQHandler+0x8b8>
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	4a65      	ldr	r2, [pc, #404]	; (8009504 <HAL_DMA_IRQHandler+0xa40>)
 800936e:	4293      	cmp	r3, r2
 8009370:	d004      	beq.n	800937c <HAL_DMA_IRQHandler+0x8b8>
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	4a64      	ldr	r2, [pc, #400]	; (8009508 <HAL_DMA_IRQHandler+0xa44>)
 8009378:	4293      	cmp	r3, r2
 800937a:	d108      	bne.n	800938e <HAL_DMA_IRQHandler+0x8ca>
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	681a      	ldr	r2, [r3, #0]
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f022 0201 	bic.w	r2, r2, #1
 800938a:	601a      	str	r2, [r3, #0]
 800938c:	e007      	b.n	800939e <HAL_DMA_IRQHandler+0x8da>
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	681a      	ldr	r2, [r3, #0]
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f022 0201 	bic.w	r2, r2, #1
 800939c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	3301      	adds	r3, #1
 80093a2:	60fb      	str	r3, [r7, #12]
 80093a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093a6:	429a      	cmp	r2, r3
 80093a8:	d307      	bcc.n	80093ba <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	f003 0301 	and.w	r3, r3, #1
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d1f2      	bne.n	800939e <HAL_DMA_IRQHandler+0x8da>
 80093b8:	e000      	b.n	80093bc <HAL_DMA_IRQHandler+0x8f8>
            break;
 80093ba:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f003 0301 	and.w	r3, r3, #1
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d004      	beq.n	80093d4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2203      	movs	r2, #3
 80093ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80093d2:	e003      	b.n	80093dc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2201      	movs	r2, #1
 80093d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2200      	movs	r2, #0
 80093e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	f000 8272 	beq.w	80098d2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	4798      	blx	r3
 80093f6:	e26c      	b.n	80098d2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	4a43      	ldr	r2, [pc, #268]	; (800950c <HAL_DMA_IRQHandler+0xa48>)
 80093fe:	4293      	cmp	r3, r2
 8009400:	d022      	beq.n	8009448 <HAL_DMA_IRQHandler+0x984>
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	4a42      	ldr	r2, [pc, #264]	; (8009510 <HAL_DMA_IRQHandler+0xa4c>)
 8009408:	4293      	cmp	r3, r2
 800940a:	d01d      	beq.n	8009448 <HAL_DMA_IRQHandler+0x984>
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	4a40      	ldr	r2, [pc, #256]	; (8009514 <HAL_DMA_IRQHandler+0xa50>)
 8009412:	4293      	cmp	r3, r2
 8009414:	d018      	beq.n	8009448 <HAL_DMA_IRQHandler+0x984>
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	4a3f      	ldr	r2, [pc, #252]	; (8009518 <HAL_DMA_IRQHandler+0xa54>)
 800941c:	4293      	cmp	r3, r2
 800941e:	d013      	beq.n	8009448 <HAL_DMA_IRQHandler+0x984>
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	4a3d      	ldr	r2, [pc, #244]	; (800951c <HAL_DMA_IRQHandler+0xa58>)
 8009426:	4293      	cmp	r3, r2
 8009428:	d00e      	beq.n	8009448 <HAL_DMA_IRQHandler+0x984>
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	4a3c      	ldr	r2, [pc, #240]	; (8009520 <HAL_DMA_IRQHandler+0xa5c>)
 8009430:	4293      	cmp	r3, r2
 8009432:	d009      	beq.n	8009448 <HAL_DMA_IRQHandler+0x984>
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	4a3a      	ldr	r2, [pc, #232]	; (8009524 <HAL_DMA_IRQHandler+0xa60>)
 800943a:	4293      	cmp	r3, r2
 800943c:	d004      	beq.n	8009448 <HAL_DMA_IRQHandler+0x984>
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	4a39      	ldr	r2, [pc, #228]	; (8009528 <HAL_DMA_IRQHandler+0xa64>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d101      	bne.n	800944c <HAL_DMA_IRQHandler+0x988>
 8009448:	2301      	movs	r3, #1
 800944a:	e000      	b.n	800944e <HAL_DMA_IRQHandler+0x98a>
 800944c:	2300      	movs	r3, #0
 800944e:	2b00      	cmp	r3, #0
 8009450:	f000 823f 	beq.w	80098d2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009460:	f003 031f 	and.w	r3, r3, #31
 8009464:	2204      	movs	r2, #4
 8009466:	409a      	lsls	r2, r3
 8009468:	697b      	ldr	r3, [r7, #20]
 800946a:	4013      	ands	r3, r2
 800946c:	2b00      	cmp	r3, #0
 800946e:	f000 80cd 	beq.w	800960c <HAL_DMA_IRQHandler+0xb48>
 8009472:	693b      	ldr	r3, [r7, #16]
 8009474:	f003 0304 	and.w	r3, r3, #4
 8009478:	2b00      	cmp	r3, #0
 800947a:	f000 80c7 	beq.w	800960c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009482:	f003 031f 	and.w	r3, r3, #31
 8009486:	2204      	movs	r2, #4
 8009488:	409a      	lsls	r2, r3
 800948a:	69fb      	ldr	r3, [r7, #28]
 800948c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800948e:	693b      	ldr	r3, [r7, #16]
 8009490:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009494:	2b00      	cmp	r3, #0
 8009496:	d049      	beq.n	800952c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8009498:	693b      	ldr	r3, [r7, #16]
 800949a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d109      	bne.n	80094b6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	f000 8210 	beq.w	80098cc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094b0:	6878      	ldr	r0, [r7, #4]
 80094b2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80094b4:	e20a      	b.n	80098cc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	f000 8206 	beq.w	80098cc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80094c8:	e200      	b.n	80098cc <HAL_DMA_IRQHandler+0xe08>
 80094ca:	bf00      	nop
 80094cc:	40020010 	.word	0x40020010
 80094d0:	40020028 	.word	0x40020028
 80094d4:	40020040 	.word	0x40020040
 80094d8:	40020058 	.word	0x40020058
 80094dc:	40020070 	.word	0x40020070
 80094e0:	40020088 	.word	0x40020088
 80094e4:	400200a0 	.word	0x400200a0
 80094e8:	400200b8 	.word	0x400200b8
 80094ec:	40020410 	.word	0x40020410
 80094f0:	40020428 	.word	0x40020428
 80094f4:	40020440 	.word	0x40020440
 80094f8:	40020458 	.word	0x40020458
 80094fc:	40020470 	.word	0x40020470
 8009500:	40020488 	.word	0x40020488
 8009504:	400204a0 	.word	0x400204a0
 8009508:	400204b8 	.word	0x400204b8
 800950c:	58025408 	.word	0x58025408
 8009510:	5802541c 	.word	0x5802541c
 8009514:	58025430 	.word	0x58025430
 8009518:	58025444 	.word	0x58025444
 800951c:	58025458 	.word	0x58025458
 8009520:	5802546c 	.word	0x5802546c
 8009524:	58025480 	.word	0x58025480
 8009528:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800952c:	693b      	ldr	r3, [r7, #16]
 800952e:	f003 0320 	and.w	r3, r3, #32
 8009532:	2b00      	cmp	r3, #0
 8009534:	d160      	bne.n	80095f8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	4a7f      	ldr	r2, [pc, #508]	; (8009738 <HAL_DMA_IRQHandler+0xc74>)
 800953c:	4293      	cmp	r3, r2
 800953e:	d04a      	beq.n	80095d6 <HAL_DMA_IRQHandler+0xb12>
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	4a7d      	ldr	r2, [pc, #500]	; (800973c <HAL_DMA_IRQHandler+0xc78>)
 8009546:	4293      	cmp	r3, r2
 8009548:	d045      	beq.n	80095d6 <HAL_DMA_IRQHandler+0xb12>
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	4a7c      	ldr	r2, [pc, #496]	; (8009740 <HAL_DMA_IRQHandler+0xc7c>)
 8009550:	4293      	cmp	r3, r2
 8009552:	d040      	beq.n	80095d6 <HAL_DMA_IRQHandler+0xb12>
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	4a7a      	ldr	r2, [pc, #488]	; (8009744 <HAL_DMA_IRQHandler+0xc80>)
 800955a:	4293      	cmp	r3, r2
 800955c:	d03b      	beq.n	80095d6 <HAL_DMA_IRQHandler+0xb12>
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	4a79      	ldr	r2, [pc, #484]	; (8009748 <HAL_DMA_IRQHandler+0xc84>)
 8009564:	4293      	cmp	r3, r2
 8009566:	d036      	beq.n	80095d6 <HAL_DMA_IRQHandler+0xb12>
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	4a77      	ldr	r2, [pc, #476]	; (800974c <HAL_DMA_IRQHandler+0xc88>)
 800956e:	4293      	cmp	r3, r2
 8009570:	d031      	beq.n	80095d6 <HAL_DMA_IRQHandler+0xb12>
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	4a76      	ldr	r2, [pc, #472]	; (8009750 <HAL_DMA_IRQHandler+0xc8c>)
 8009578:	4293      	cmp	r3, r2
 800957a:	d02c      	beq.n	80095d6 <HAL_DMA_IRQHandler+0xb12>
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	4a74      	ldr	r2, [pc, #464]	; (8009754 <HAL_DMA_IRQHandler+0xc90>)
 8009582:	4293      	cmp	r3, r2
 8009584:	d027      	beq.n	80095d6 <HAL_DMA_IRQHandler+0xb12>
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	4a73      	ldr	r2, [pc, #460]	; (8009758 <HAL_DMA_IRQHandler+0xc94>)
 800958c:	4293      	cmp	r3, r2
 800958e:	d022      	beq.n	80095d6 <HAL_DMA_IRQHandler+0xb12>
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	4a71      	ldr	r2, [pc, #452]	; (800975c <HAL_DMA_IRQHandler+0xc98>)
 8009596:	4293      	cmp	r3, r2
 8009598:	d01d      	beq.n	80095d6 <HAL_DMA_IRQHandler+0xb12>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	4a70      	ldr	r2, [pc, #448]	; (8009760 <HAL_DMA_IRQHandler+0xc9c>)
 80095a0:	4293      	cmp	r3, r2
 80095a2:	d018      	beq.n	80095d6 <HAL_DMA_IRQHandler+0xb12>
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	4a6e      	ldr	r2, [pc, #440]	; (8009764 <HAL_DMA_IRQHandler+0xca0>)
 80095aa:	4293      	cmp	r3, r2
 80095ac:	d013      	beq.n	80095d6 <HAL_DMA_IRQHandler+0xb12>
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	4a6d      	ldr	r2, [pc, #436]	; (8009768 <HAL_DMA_IRQHandler+0xca4>)
 80095b4:	4293      	cmp	r3, r2
 80095b6:	d00e      	beq.n	80095d6 <HAL_DMA_IRQHandler+0xb12>
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	4a6b      	ldr	r2, [pc, #428]	; (800976c <HAL_DMA_IRQHandler+0xca8>)
 80095be:	4293      	cmp	r3, r2
 80095c0:	d009      	beq.n	80095d6 <HAL_DMA_IRQHandler+0xb12>
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	4a6a      	ldr	r2, [pc, #424]	; (8009770 <HAL_DMA_IRQHandler+0xcac>)
 80095c8:	4293      	cmp	r3, r2
 80095ca:	d004      	beq.n	80095d6 <HAL_DMA_IRQHandler+0xb12>
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	4a68      	ldr	r2, [pc, #416]	; (8009774 <HAL_DMA_IRQHandler+0xcb0>)
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d108      	bne.n	80095e8 <HAL_DMA_IRQHandler+0xb24>
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	681a      	ldr	r2, [r3, #0]
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	f022 0208 	bic.w	r2, r2, #8
 80095e4:	601a      	str	r2, [r3, #0]
 80095e6:	e007      	b.n	80095f8 <HAL_DMA_IRQHandler+0xb34>
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	681a      	ldr	r2, [r3, #0]
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f022 0204 	bic.w	r2, r2, #4
 80095f6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	f000 8165 	beq.w	80098cc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800960a:	e15f      	b.n	80098cc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009610:	f003 031f 	and.w	r3, r3, #31
 8009614:	2202      	movs	r2, #2
 8009616:	409a      	lsls	r2, r3
 8009618:	697b      	ldr	r3, [r7, #20]
 800961a:	4013      	ands	r3, r2
 800961c:	2b00      	cmp	r3, #0
 800961e:	f000 80c5 	beq.w	80097ac <HAL_DMA_IRQHandler+0xce8>
 8009622:	693b      	ldr	r3, [r7, #16]
 8009624:	f003 0302 	and.w	r3, r3, #2
 8009628:	2b00      	cmp	r3, #0
 800962a:	f000 80bf 	beq.w	80097ac <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009632:	f003 031f 	and.w	r3, r3, #31
 8009636:	2202      	movs	r2, #2
 8009638:	409a      	lsls	r2, r3
 800963a:	69fb      	ldr	r3, [r7, #28]
 800963c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800963e:	693b      	ldr	r3, [r7, #16]
 8009640:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009644:	2b00      	cmp	r3, #0
 8009646:	d018      	beq.n	800967a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8009648:	693b      	ldr	r3, [r7, #16]
 800964a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800964e:	2b00      	cmp	r3, #0
 8009650:	d109      	bne.n	8009666 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009656:	2b00      	cmp	r3, #0
 8009658:	f000 813a 	beq.w	80098d0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009664:	e134      	b.n	80098d0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800966a:	2b00      	cmp	r3, #0
 800966c:	f000 8130 	beq.w	80098d0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009678:	e12a      	b.n	80098d0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800967a:	693b      	ldr	r3, [r7, #16]
 800967c:	f003 0320 	and.w	r3, r3, #32
 8009680:	2b00      	cmp	r3, #0
 8009682:	f040 8089 	bne.w	8009798 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	4a2b      	ldr	r2, [pc, #172]	; (8009738 <HAL_DMA_IRQHandler+0xc74>)
 800968c:	4293      	cmp	r3, r2
 800968e:	d04a      	beq.n	8009726 <HAL_DMA_IRQHandler+0xc62>
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	4a29      	ldr	r2, [pc, #164]	; (800973c <HAL_DMA_IRQHandler+0xc78>)
 8009696:	4293      	cmp	r3, r2
 8009698:	d045      	beq.n	8009726 <HAL_DMA_IRQHandler+0xc62>
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	4a28      	ldr	r2, [pc, #160]	; (8009740 <HAL_DMA_IRQHandler+0xc7c>)
 80096a0:	4293      	cmp	r3, r2
 80096a2:	d040      	beq.n	8009726 <HAL_DMA_IRQHandler+0xc62>
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	4a26      	ldr	r2, [pc, #152]	; (8009744 <HAL_DMA_IRQHandler+0xc80>)
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d03b      	beq.n	8009726 <HAL_DMA_IRQHandler+0xc62>
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	4a25      	ldr	r2, [pc, #148]	; (8009748 <HAL_DMA_IRQHandler+0xc84>)
 80096b4:	4293      	cmp	r3, r2
 80096b6:	d036      	beq.n	8009726 <HAL_DMA_IRQHandler+0xc62>
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	4a23      	ldr	r2, [pc, #140]	; (800974c <HAL_DMA_IRQHandler+0xc88>)
 80096be:	4293      	cmp	r3, r2
 80096c0:	d031      	beq.n	8009726 <HAL_DMA_IRQHandler+0xc62>
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	4a22      	ldr	r2, [pc, #136]	; (8009750 <HAL_DMA_IRQHandler+0xc8c>)
 80096c8:	4293      	cmp	r3, r2
 80096ca:	d02c      	beq.n	8009726 <HAL_DMA_IRQHandler+0xc62>
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	4a20      	ldr	r2, [pc, #128]	; (8009754 <HAL_DMA_IRQHandler+0xc90>)
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d027      	beq.n	8009726 <HAL_DMA_IRQHandler+0xc62>
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	4a1f      	ldr	r2, [pc, #124]	; (8009758 <HAL_DMA_IRQHandler+0xc94>)
 80096dc:	4293      	cmp	r3, r2
 80096de:	d022      	beq.n	8009726 <HAL_DMA_IRQHandler+0xc62>
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	4a1d      	ldr	r2, [pc, #116]	; (800975c <HAL_DMA_IRQHandler+0xc98>)
 80096e6:	4293      	cmp	r3, r2
 80096e8:	d01d      	beq.n	8009726 <HAL_DMA_IRQHandler+0xc62>
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	4a1c      	ldr	r2, [pc, #112]	; (8009760 <HAL_DMA_IRQHandler+0xc9c>)
 80096f0:	4293      	cmp	r3, r2
 80096f2:	d018      	beq.n	8009726 <HAL_DMA_IRQHandler+0xc62>
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	4a1a      	ldr	r2, [pc, #104]	; (8009764 <HAL_DMA_IRQHandler+0xca0>)
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d013      	beq.n	8009726 <HAL_DMA_IRQHandler+0xc62>
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	4a19      	ldr	r2, [pc, #100]	; (8009768 <HAL_DMA_IRQHandler+0xca4>)
 8009704:	4293      	cmp	r3, r2
 8009706:	d00e      	beq.n	8009726 <HAL_DMA_IRQHandler+0xc62>
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	4a17      	ldr	r2, [pc, #92]	; (800976c <HAL_DMA_IRQHandler+0xca8>)
 800970e:	4293      	cmp	r3, r2
 8009710:	d009      	beq.n	8009726 <HAL_DMA_IRQHandler+0xc62>
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	4a16      	ldr	r2, [pc, #88]	; (8009770 <HAL_DMA_IRQHandler+0xcac>)
 8009718:	4293      	cmp	r3, r2
 800971a:	d004      	beq.n	8009726 <HAL_DMA_IRQHandler+0xc62>
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	4a14      	ldr	r2, [pc, #80]	; (8009774 <HAL_DMA_IRQHandler+0xcb0>)
 8009722:	4293      	cmp	r3, r2
 8009724:	d128      	bne.n	8009778 <HAL_DMA_IRQHandler+0xcb4>
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	681a      	ldr	r2, [r3, #0]
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f022 0214 	bic.w	r2, r2, #20
 8009734:	601a      	str	r2, [r3, #0]
 8009736:	e027      	b.n	8009788 <HAL_DMA_IRQHandler+0xcc4>
 8009738:	40020010 	.word	0x40020010
 800973c:	40020028 	.word	0x40020028
 8009740:	40020040 	.word	0x40020040
 8009744:	40020058 	.word	0x40020058
 8009748:	40020070 	.word	0x40020070
 800974c:	40020088 	.word	0x40020088
 8009750:	400200a0 	.word	0x400200a0
 8009754:	400200b8 	.word	0x400200b8
 8009758:	40020410 	.word	0x40020410
 800975c:	40020428 	.word	0x40020428
 8009760:	40020440 	.word	0x40020440
 8009764:	40020458 	.word	0x40020458
 8009768:	40020470 	.word	0x40020470
 800976c:	40020488 	.word	0x40020488
 8009770:	400204a0 	.word	0x400204a0
 8009774:	400204b8 	.word	0x400204b8
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	681a      	ldr	r2, [r3, #0]
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	f022 020a 	bic.w	r2, r2, #10
 8009786:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2201      	movs	r2, #1
 800978c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2200      	movs	r2, #0
 8009794:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800979c:	2b00      	cmp	r3, #0
 800979e:	f000 8097 	beq.w	80098d0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80097aa:	e091      	b.n	80098d0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80097b0:	f003 031f 	and.w	r3, r3, #31
 80097b4:	2208      	movs	r2, #8
 80097b6:	409a      	lsls	r2, r3
 80097b8:	697b      	ldr	r3, [r7, #20]
 80097ba:	4013      	ands	r3, r2
 80097bc:	2b00      	cmp	r3, #0
 80097be:	f000 8088 	beq.w	80098d2 <HAL_DMA_IRQHandler+0xe0e>
 80097c2:	693b      	ldr	r3, [r7, #16]
 80097c4:	f003 0308 	and.w	r3, r3, #8
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	f000 8082 	beq.w	80098d2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	4a41      	ldr	r2, [pc, #260]	; (80098d8 <HAL_DMA_IRQHandler+0xe14>)
 80097d4:	4293      	cmp	r3, r2
 80097d6:	d04a      	beq.n	800986e <HAL_DMA_IRQHandler+0xdaa>
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	4a3f      	ldr	r2, [pc, #252]	; (80098dc <HAL_DMA_IRQHandler+0xe18>)
 80097de:	4293      	cmp	r3, r2
 80097e0:	d045      	beq.n	800986e <HAL_DMA_IRQHandler+0xdaa>
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	4a3e      	ldr	r2, [pc, #248]	; (80098e0 <HAL_DMA_IRQHandler+0xe1c>)
 80097e8:	4293      	cmp	r3, r2
 80097ea:	d040      	beq.n	800986e <HAL_DMA_IRQHandler+0xdaa>
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	4a3c      	ldr	r2, [pc, #240]	; (80098e4 <HAL_DMA_IRQHandler+0xe20>)
 80097f2:	4293      	cmp	r3, r2
 80097f4:	d03b      	beq.n	800986e <HAL_DMA_IRQHandler+0xdaa>
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	4a3b      	ldr	r2, [pc, #236]	; (80098e8 <HAL_DMA_IRQHandler+0xe24>)
 80097fc:	4293      	cmp	r3, r2
 80097fe:	d036      	beq.n	800986e <HAL_DMA_IRQHandler+0xdaa>
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	4a39      	ldr	r2, [pc, #228]	; (80098ec <HAL_DMA_IRQHandler+0xe28>)
 8009806:	4293      	cmp	r3, r2
 8009808:	d031      	beq.n	800986e <HAL_DMA_IRQHandler+0xdaa>
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	4a38      	ldr	r2, [pc, #224]	; (80098f0 <HAL_DMA_IRQHandler+0xe2c>)
 8009810:	4293      	cmp	r3, r2
 8009812:	d02c      	beq.n	800986e <HAL_DMA_IRQHandler+0xdaa>
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	4a36      	ldr	r2, [pc, #216]	; (80098f4 <HAL_DMA_IRQHandler+0xe30>)
 800981a:	4293      	cmp	r3, r2
 800981c:	d027      	beq.n	800986e <HAL_DMA_IRQHandler+0xdaa>
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	4a35      	ldr	r2, [pc, #212]	; (80098f8 <HAL_DMA_IRQHandler+0xe34>)
 8009824:	4293      	cmp	r3, r2
 8009826:	d022      	beq.n	800986e <HAL_DMA_IRQHandler+0xdaa>
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	4a33      	ldr	r2, [pc, #204]	; (80098fc <HAL_DMA_IRQHandler+0xe38>)
 800982e:	4293      	cmp	r3, r2
 8009830:	d01d      	beq.n	800986e <HAL_DMA_IRQHandler+0xdaa>
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	4a32      	ldr	r2, [pc, #200]	; (8009900 <HAL_DMA_IRQHandler+0xe3c>)
 8009838:	4293      	cmp	r3, r2
 800983a:	d018      	beq.n	800986e <HAL_DMA_IRQHandler+0xdaa>
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	4a30      	ldr	r2, [pc, #192]	; (8009904 <HAL_DMA_IRQHandler+0xe40>)
 8009842:	4293      	cmp	r3, r2
 8009844:	d013      	beq.n	800986e <HAL_DMA_IRQHandler+0xdaa>
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	4a2f      	ldr	r2, [pc, #188]	; (8009908 <HAL_DMA_IRQHandler+0xe44>)
 800984c:	4293      	cmp	r3, r2
 800984e:	d00e      	beq.n	800986e <HAL_DMA_IRQHandler+0xdaa>
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	4a2d      	ldr	r2, [pc, #180]	; (800990c <HAL_DMA_IRQHandler+0xe48>)
 8009856:	4293      	cmp	r3, r2
 8009858:	d009      	beq.n	800986e <HAL_DMA_IRQHandler+0xdaa>
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	4a2c      	ldr	r2, [pc, #176]	; (8009910 <HAL_DMA_IRQHandler+0xe4c>)
 8009860:	4293      	cmp	r3, r2
 8009862:	d004      	beq.n	800986e <HAL_DMA_IRQHandler+0xdaa>
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	4a2a      	ldr	r2, [pc, #168]	; (8009914 <HAL_DMA_IRQHandler+0xe50>)
 800986a:	4293      	cmp	r3, r2
 800986c:	d108      	bne.n	8009880 <HAL_DMA_IRQHandler+0xdbc>
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	681a      	ldr	r2, [r3, #0]
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	f022 021c 	bic.w	r2, r2, #28
 800987c:	601a      	str	r2, [r3, #0]
 800987e:	e007      	b.n	8009890 <HAL_DMA_IRQHandler+0xdcc>
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	681a      	ldr	r2, [r3, #0]
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	f022 020e 	bic.w	r2, r2, #14
 800988e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009894:	f003 031f 	and.w	r3, r3, #31
 8009898:	2201      	movs	r2, #1
 800989a:	409a      	lsls	r2, r3
 800989c:	69fb      	ldr	r3, [r7, #28]
 800989e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2201      	movs	r2, #1
 80098a4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2201      	movs	r2, #1
 80098aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2200      	movs	r2, #0
 80098b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d009      	beq.n	80098d2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098c2:	6878      	ldr	r0, [r7, #4]
 80098c4:	4798      	blx	r3
 80098c6:	e004      	b.n	80098d2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80098c8:	bf00      	nop
 80098ca:	e002      	b.n	80098d2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80098cc:	bf00      	nop
 80098ce:	e000      	b.n	80098d2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80098d0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80098d2:	3728      	adds	r7, #40	; 0x28
 80098d4:	46bd      	mov	sp, r7
 80098d6:	bd80      	pop	{r7, pc}
 80098d8:	40020010 	.word	0x40020010
 80098dc:	40020028 	.word	0x40020028
 80098e0:	40020040 	.word	0x40020040
 80098e4:	40020058 	.word	0x40020058
 80098e8:	40020070 	.word	0x40020070
 80098ec:	40020088 	.word	0x40020088
 80098f0:	400200a0 	.word	0x400200a0
 80098f4:	400200b8 	.word	0x400200b8
 80098f8:	40020410 	.word	0x40020410
 80098fc:	40020428 	.word	0x40020428
 8009900:	40020440 	.word	0x40020440
 8009904:	40020458 	.word	0x40020458
 8009908:	40020470 	.word	0x40020470
 800990c:	40020488 	.word	0x40020488
 8009910:	400204a0 	.word	0x400204a0
 8009914:	400204b8 	.word	0x400204b8

08009918 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009918:	b480      	push	{r7}
 800991a:	b087      	sub	sp, #28
 800991c:	af00      	add	r7, sp, #0
 800991e:	60f8      	str	r0, [r7, #12]
 8009920:	60b9      	str	r1, [r7, #8]
 8009922:	607a      	str	r2, [r7, #4]
 8009924:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800992a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009930:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	4a7f      	ldr	r2, [pc, #508]	; (8009b34 <DMA_SetConfig+0x21c>)
 8009938:	4293      	cmp	r3, r2
 800993a:	d072      	beq.n	8009a22 <DMA_SetConfig+0x10a>
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	4a7d      	ldr	r2, [pc, #500]	; (8009b38 <DMA_SetConfig+0x220>)
 8009942:	4293      	cmp	r3, r2
 8009944:	d06d      	beq.n	8009a22 <DMA_SetConfig+0x10a>
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	4a7c      	ldr	r2, [pc, #496]	; (8009b3c <DMA_SetConfig+0x224>)
 800994c:	4293      	cmp	r3, r2
 800994e:	d068      	beq.n	8009a22 <DMA_SetConfig+0x10a>
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	4a7a      	ldr	r2, [pc, #488]	; (8009b40 <DMA_SetConfig+0x228>)
 8009956:	4293      	cmp	r3, r2
 8009958:	d063      	beq.n	8009a22 <DMA_SetConfig+0x10a>
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	4a79      	ldr	r2, [pc, #484]	; (8009b44 <DMA_SetConfig+0x22c>)
 8009960:	4293      	cmp	r3, r2
 8009962:	d05e      	beq.n	8009a22 <DMA_SetConfig+0x10a>
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	4a77      	ldr	r2, [pc, #476]	; (8009b48 <DMA_SetConfig+0x230>)
 800996a:	4293      	cmp	r3, r2
 800996c:	d059      	beq.n	8009a22 <DMA_SetConfig+0x10a>
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	4a76      	ldr	r2, [pc, #472]	; (8009b4c <DMA_SetConfig+0x234>)
 8009974:	4293      	cmp	r3, r2
 8009976:	d054      	beq.n	8009a22 <DMA_SetConfig+0x10a>
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	4a74      	ldr	r2, [pc, #464]	; (8009b50 <DMA_SetConfig+0x238>)
 800997e:	4293      	cmp	r3, r2
 8009980:	d04f      	beq.n	8009a22 <DMA_SetConfig+0x10a>
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	4a73      	ldr	r2, [pc, #460]	; (8009b54 <DMA_SetConfig+0x23c>)
 8009988:	4293      	cmp	r3, r2
 800998a:	d04a      	beq.n	8009a22 <DMA_SetConfig+0x10a>
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	4a71      	ldr	r2, [pc, #452]	; (8009b58 <DMA_SetConfig+0x240>)
 8009992:	4293      	cmp	r3, r2
 8009994:	d045      	beq.n	8009a22 <DMA_SetConfig+0x10a>
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	4a70      	ldr	r2, [pc, #448]	; (8009b5c <DMA_SetConfig+0x244>)
 800999c:	4293      	cmp	r3, r2
 800999e:	d040      	beq.n	8009a22 <DMA_SetConfig+0x10a>
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	4a6e      	ldr	r2, [pc, #440]	; (8009b60 <DMA_SetConfig+0x248>)
 80099a6:	4293      	cmp	r3, r2
 80099a8:	d03b      	beq.n	8009a22 <DMA_SetConfig+0x10a>
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	4a6d      	ldr	r2, [pc, #436]	; (8009b64 <DMA_SetConfig+0x24c>)
 80099b0:	4293      	cmp	r3, r2
 80099b2:	d036      	beq.n	8009a22 <DMA_SetConfig+0x10a>
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	4a6b      	ldr	r2, [pc, #428]	; (8009b68 <DMA_SetConfig+0x250>)
 80099ba:	4293      	cmp	r3, r2
 80099bc:	d031      	beq.n	8009a22 <DMA_SetConfig+0x10a>
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	4a6a      	ldr	r2, [pc, #424]	; (8009b6c <DMA_SetConfig+0x254>)
 80099c4:	4293      	cmp	r3, r2
 80099c6:	d02c      	beq.n	8009a22 <DMA_SetConfig+0x10a>
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	4a68      	ldr	r2, [pc, #416]	; (8009b70 <DMA_SetConfig+0x258>)
 80099ce:	4293      	cmp	r3, r2
 80099d0:	d027      	beq.n	8009a22 <DMA_SetConfig+0x10a>
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	4a67      	ldr	r2, [pc, #412]	; (8009b74 <DMA_SetConfig+0x25c>)
 80099d8:	4293      	cmp	r3, r2
 80099da:	d022      	beq.n	8009a22 <DMA_SetConfig+0x10a>
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	4a65      	ldr	r2, [pc, #404]	; (8009b78 <DMA_SetConfig+0x260>)
 80099e2:	4293      	cmp	r3, r2
 80099e4:	d01d      	beq.n	8009a22 <DMA_SetConfig+0x10a>
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	4a64      	ldr	r2, [pc, #400]	; (8009b7c <DMA_SetConfig+0x264>)
 80099ec:	4293      	cmp	r3, r2
 80099ee:	d018      	beq.n	8009a22 <DMA_SetConfig+0x10a>
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	4a62      	ldr	r2, [pc, #392]	; (8009b80 <DMA_SetConfig+0x268>)
 80099f6:	4293      	cmp	r3, r2
 80099f8:	d013      	beq.n	8009a22 <DMA_SetConfig+0x10a>
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	4a61      	ldr	r2, [pc, #388]	; (8009b84 <DMA_SetConfig+0x26c>)
 8009a00:	4293      	cmp	r3, r2
 8009a02:	d00e      	beq.n	8009a22 <DMA_SetConfig+0x10a>
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	4a5f      	ldr	r2, [pc, #380]	; (8009b88 <DMA_SetConfig+0x270>)
 8009a0a:	4293      	cmp	r3, r2
 8009a0c:	d009      	beq.n	8009a22 <DMA_SetConfig+0x10a>
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	4a5e      	ldr	r2, [pc, #376]	; (8009b8c <DMA_SetConfig+0x274>)
 8009a14:	4293      	cmp	r3, r2
 8009a16:	d004      	beq.n	8009a22 <DMA_SetConfig+0x10a>
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	4a5c      	ldr	r2, [pc, #368]	; (8009b90 <DMA_SetConfig+0x278>)
 8009a1e:	4293      	cmp	r3, r2
 8009a20:	d101      	bne.n	8009a26 <DMA_SetConfig+0x10e>
 8009a22:	2301      	movs	r3, #1
 8009a24:	e000      	b.n	8009a28 <DMA_SetConfig+0x110>
 8009a26:	2300      	movs	r3, #0
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d00d      	beq.n	8009a48 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a30:	68fa      	ldr	r2, [r7, #12]
 8009a32:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009a34:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d004      	beq.n	8009a48 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a42:	68fa      	ldr	r2, [r7, #12]
 8009a44:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009a46:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	4a39      	ldr	r2, [pc, #228]	; (8009b34 <DMA_SetConfig+0x21c>)
 8009a4e:	4293      	cmp	r3, r2
 8009a50:	d04a      	beq.n	8009ae8 <DMA_SetConfig+0x1d0>
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	4a38      	ldr	r2, [pc, #224]	; (8009b38 <DMA_SetConfig+0x220>)
 8009a58:	4293      	cmp	r3, r2
 8009a5a:	d045      	beq.n	8009ae8 <DMA_SetConfig+0x1d0>
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	4a36      	ldr	r2, [pc, #216]	; (8009b3c <DMA_SetConfig+0x224>)
 8009a62:	4293      	cmp	r3, r2
 8009a64:	d040      	beq.n	8009ae8 <DMA_SetConfig+0x1d0>
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	4a35      	ldr	r2, [pc, #212]	; (8009b40 <DMA_SetConfig+0x228>)
 8009a6c:	4293      	cmp	r3, r2
 8009a6e:	d03b      	beq.n	8009ae8 <DMA_SetConfig+0x1d0>
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	4a33      	ldr	r2, [pc, #204]	; (8009b44 <DMA_SetConfig+0x22c>)
 8009a76:	4293      	cmp	r3, r2
 8009a78:	d036      	beq.n	8009ae8 <DMA_SetConfig+0x1d0>
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	4a32      	ldr	r2, [pc, #200]	; (8009b48 <DMA_SetConfig+0x230>)
 8009a80:	4293      	cmp	r3, r2
 8009a82:	d031      	beq.n	8009ae8 <DMA_SetConfig+0x1d0>
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	4a30      	ldr	r2, [pc, #192]	; (8009b4c <DMA_SetConfig+0x234>)
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	d02c      	beq.n	8009ae8 <DMA_SetConfig+0x1d0>
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	4a2f      	ldr	r2, [pc, #188]	; (8009b50 <DMA_SetConfig+0x238>)
 8009a94:	4293      	cmp	r3, r2
 8009a96:	d027      	beq.n	8009ae8 <DMA_SetConfig+0x1d0>
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	4a2d      	ldr	r2, [pc, #180]	; (8009b54 <DMA_SetConfig+0x23c>)
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	d022      	beq.n	8009ae8 <DMA_SetConfig+0x1d0>
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	4a2c      	ldr	r2, [pc, #176]	; (8009b58 <DMA_SetConfig+0x240>)
 8009aa8:	4293      	cmp	r3, r2
 8009aaa:	d01d      	beq.n	8009ae8 <DMA_SetConfig+0x1d0>
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	4a2a      	ldr	r2, [pc, #168]	; (8009b5c <DMA_SetConfig+0x244>)
 8009ab2:	4293      	cmp	r3, r2
 8009ab4:	d018      	beq.n	8009ae8 <DMA_SetConfig+0x1d0>
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	4a29      	ldr	r2, [pc, #164]	; (8009b60 <DMA_SetConfig+0x248>)
 8009abc:	4293      	cmp	r3, r2
 8009abe:	d013      	beq.n	8009ae8 <DMA_SetConfig+0x1d0>
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	4a27      	ldr	r2, [pc, #156]	; (8009b64 <DMA_SetConfig+0x24c>)
 8009ac6:	4293      	cmp	r3, r2
 8009ac8:	d00e      	beq.n	8009ae8 <DMA_SetConfig+0x1d0>
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	4a26      	ldr	r2, [pc, #152]	; (8009b68 <DMA_SetConfig+0x250>)
 8009ad0:	4293      	cmp	r3, r2
 8009ad2:	d009      	beq.n	8009ae8 <DMA_SetConfig+0x1d0>
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	4a24      	ldr	r2, [pc, #144]	; (8009b6c <DMA_SetConfig+0x254>)
 8009ada:	4293      	cmp	r3, r2
 8009adc:	d004      	beq.n	8009ae8 <DMA_SetConfig+0x1d0>
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	4a23      	ldr	r2, [pc, #140]	; (8009b70 <DMA_SetConfig+0x258>)
 8009ae4:	4293      	cmp	r3, r2
 8009ae6:	d101      	bne.n	8009aec <DMA_SetConfig+0x1d4>
 8009ae8:	2301      	movs	r3, #1
 8009aea:	e000      	b.n	8009aee <DMA_SetConfig+0x1d6>
 8009aec:	2300      	movs	r3, #0
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d059      	beq.n	8009ba6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009af6:	f003 031f 	and.w	r3, r3, #31
 8009afa:	223f      	movs	r2, #63	; 0x3f
 8009afc:	409a      	lsls	r2, r3
 8009afe:	697b      	ldr	r3, [r7, #20]
 8009b00:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	681a      	ldr	r2, [r3, #0]
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009b10:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	683a      	ldr	r2, [r7, #0]
 8009b18:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	689b      	ldr	r3, [r3, #8]
 8009b1e:	2b40      	cmp	r3, #64	; 0x40
 8009b20:	d138      	bne.n	8009b94 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	687a      	ldr	r2, [r7, #4]
 8009b28:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	68ba      	ldr	r2, [r7, #8]
 8009b30:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8009b32:	e086      	b.n	8009c42 <DMA_SetConfig+0x32a>
 8009b34:	40020010 	.word	0x40020010
 8009b38:	40020028 	.word	0x40020028
 8009b3c:	40020040 	.word	0x40020040
 8009b40:	40020058 	.word	0x40020058
 8009b44:	40020070 	.word	0x40020070
 8009b48:	40020088 	.word	0x40020088
 8009b4c:	400200a0 	.word	0x400200a0
 8009b50:	400200b8 	.word	0x400200b8
 8009b54:	40020410 	.word	0x40020410
 8009b58:	40020428 	.word	0x40020428
 8009b5c:	40020440 	.word	0x40020440
 8009b60:	40020458 	.word	0x40020458
 8009b64:	40020470 	.word	0x40020470
 8009b68:	40020488 	.word	0x40020488
 8009b6c:	400204a0 	.word	0x400204a0
 8009b70:	400204b8 	.word	0x400204b8
 8009b74:	58025408 	.word	0x58025408
 8009b78:	5802541c 	.word	0x5802541c
 8009b7c:	58025430 	.word	0x58025430
 8009b80:	58025444 	.word	0x58025444
 8009b84:	58025458 	.word	0x58025458
 8009b88:	5802546c 	.word	0x5802546c
 8009b8c:	58025480 	.word	0x58025480
 8009b90:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	68ba      	ldr	r2, [r7, #8]
 8009b9a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	687a      	ldr	r2, [r7, #4]
 8009ba2:	60da      	str	r2, [r3, #12]
}
 8009ba4:	e04d      	b.n	8009c42 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	4a29      	ldr	r2, [pc, #164]	; (8009c50 <DMA_SetConfig+0x338>)
 8009bac:	4293      	cmp	r3, r2
 8009bae:	d022      	beq.n	8009bf6 <DMA_SetConfig+0x2de>
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	4a27      	ldr	r2, [pc, #156]	; (8009c54 <DMA_SetConfig+0x33c>)
 8009bb6:	4293      	cmp	r3, r2
 8009bb8:	d01d      	beq.n	8009bf6 <DMA_SetConfig+0x2de>
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	4a26      	ldr	r2, [pc, #152]	; (8009c58 <DMA_SetConfig+0x340>)
 8009bc0:	4293      	cmp	r3, r2
 8009bc2:	d018      	beq.n	8009bf6 <DMA_SetConfig+0x2de>
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	4a24      	ldr	r2, [pc, #144]	; (8009c5c <DMA_SetConfig+0x344>)
 8009bca:	4293      	cmp	r3, r2
 8009bcc:	d013      	beq.n	8009bf6 <DMA_SetConfig+0x2de>
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	4a23      	ldr	r2, [pc, #140]	; (8009c60 <DMA_SetConfig+0x348>)
 8009bd4:	4293      	cmp	r3, r2
 8009bd6:	d00e      	beq.n	8009bf6 <DMA_SetConfig+0x2de>
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	4a21      	ldr	r2, [pc, #132]	; (8009c64 <DMA_SetConfig+0x34c>)
 8009bde:	4293      	cmp	r3, r2
 8009be0:	d009      	beq.n	8009bf6 <DMA_SetConfig+0x2de>
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	4a20      	ldr	r2, [pc, #128]	; (8009c68 <DMA_SetConfig+0x350>)
 8009be8:	4293      	cmp	r3, r2
 8009bea:	d004      	beq.n	8009bf6 <DMA_SetConfig+0x2de>
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	4a1e      	ldr	r2, [pc, #120]	; (8009c6c <DMA_SetConfig+0x354>)
 8009bf2:	4293      	cmp	r3, r2
 8009bf4:	d101      	bne.n	8009bfa <DMA_SetConfig+0x2e2>
 8009bf6:	2301      	movs	r3, #1
 8009bf8:	e000      	b.n	8009bfc <DMA_SetConfig+0x2e4>
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d020      	beq.n	8009c42 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c04:	f003 031f 	and.w	r3, r3, #31
 8009c08:	2201      	movs	r2, #1
 8009c0a:	409a      	lsls	r2, r3
 8009c0c:	693b      	ldr	r3, [r7, #16]
 8009c0e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	683a      	ldr	r2, [r7, #0]
 8009c16:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	689b      	ldr	r3, [r3, #8]
 8009c1c:	2b40      	cmp	r3, #64	; 0x40
 8009c1e:	d108      	bne.n	8009c32 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	687a      	ldr	r2, [r7, #4]
 8009c26:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	68ba      	ldr	r2, [r7, #8]
 8009c2e:	60da      	str	r2, [r3, #12]
}
 8009c30:	e007      	b.n	8009c42 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	68ba      	ldr	r2, [r7, #8]
 8009c38:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	687a      	ldr	r2, [r7, #4]
 8009c40:	60da      	str	r2, [r3, #12]
}
 8009c42:	bf00      	nop
 8009c44:	371c      	adds	r7, #28
 8009c46:	46bd      	mov	sp, r7
 8009c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4c:	4770      	bx	lr
 8009c4e:	bf00      	nop
 8009c50:	58025408 	.word	0x58025408
 8009c54:	5802541c 	.word	0x5802541c
 8009c58:	58025430 	.word	0x58025430
 8009c5c:	58025444 	.word	0x58025444
 8009c60:	58025458 	.word	0x58025458
 8009c64:	5802546c 	.word	0x5802546c
 8009c68:	58025480 	.word	0x58025480
 8009c6c:	58025494 	.word	0x58025494

08009c70 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009c70:	b480      	push	{r7}
 8009c72:	b085      	sub	sp, #20
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	4a42      	ldr	r2, [pc, #264]	; (8009d88 <DMA_CalcBaseAndBitshift+0x118>)
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	d04a      	beq.n	8009d18 <DMA_CalcBaseAndBitshift+0xa8>
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	4a41      	ldr	r2, [pc, #260]	; (8009d8c <DMA_CalcBaseAndBitshift+0x11c>)
 8009c88:	4293      	cmp	r3, r2
 8009c8a:	d045      	beq.n	8009d18 <DMA_CalcBaseAndBitshift+0xa8>
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	4a3f      	ldr	r2, [pc, #252]	; (8009d90 <DMA_CalcBaseAndBitshift+0x120>)
 8009c92:	4293      	cmp	r3, r2
 8009c94:	d040      	beq.n	8009d18 <DMA_CalcBaseAndBitshift+0xa8>
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	4a3e      	ldr	r2, [pc, #248]	; (8009d94 <DMA_CalcBaseAndBitshift+0x124>)
 8009c9c:	4293      	cmp	r3, r2
 8009c9e:	d03b      	beq.n	8009d18 <DMA_CalcBaseAndBitshift+0xa8>
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	4a3c      	ldr	r2, [pc, #240]	; (8009d98 <DMA_CalcBaseAndBitshift+0x128>)
 8009ca6:	4293      	cmp	r3, r2
 8009ca8:	d036      	beq.n	8009d18 <DMA_CalcBaseAndBitshift+0xa8>
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	4a3b      	ldr	r2, [pc, #236]	; (8009d9c <DMA_CalcBaseAndBitshift+0x12c>)
 8009cb0:	4293      	cmp	r3, r2
 8009cb2:	d031      	beq.n	8009d18 <DMA_CalcBaseAndBitshift+0xa8>
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	4a39      	ldr	r2, [pc, #228]	; (8009da0 <DMA_CalcBaseAndBitshift+0x130>)
 8009cba:	4293      	cmp	r3, r2
 8009cbc:	d02c      	beq.n	8009d18 <DMA_CalcBaseAndBitshift+0xa8>
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	4a38      	ldr	r2, [pc, #224]	; (8009da4 <DMA_CalcBaseAndBitshift+0x134>)
 8009cc4:	4293      	cmp	r3, r2
 8009cc6:	d027      	beq.n	8009d18 <DMA_CalcBaseAndBitshift+0xa8>
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	4a36      	ldr	r2, [pc, #216]	; (8009da8 <DMA_CalcBaseAndBitshift+0x138>)
 8009cce:	4293      	cmp	r3, r2
 8009cd0:	d022      	beq.n	8009d18 <DMA_CalcBaseAndBitshift+0xa8>
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	4a35      	ldr	r2, [pc, #212]	; (8009dac <DMA_CalcBaseAndBitshift+0x13c>)
 8009cd8:	4293      	cmp	r3, r2
 8009cda:	d01d      	beq.n	8009d18 <DMA_CalcBaseAndBitshift+0xa8>
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	4a33      	ldr	r2, [pc, #204]	; (8009db0 <DMA_CalcBaseAndBitshift+0x140>)
 8009ce2:	4293      	cmp	r3, r2
 8009ce4:	d018      	beq.n	8009d18 <DMA_CalcBaseAndBitshift+0xa8>
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	4a32      	ldr	r2, [pc, #200]	; (8009db4 <DMA_CalcBaseAndBitshift+0x144>)
 8009cec:	4293      	cmp	r3, r2
 8009cee:	d013      	beq.n	8009d18 <DMA_CalcBaseAndBitshift+0xa8>
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	4a30      	ldr	r2, [pc, #192]	; (8009db8 <DMA_CalcBaseAndBitshift+0x148>)
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	d00e      	beq.n	8009d18 <DMA_CalcBaseAndBitshift+0xa8>
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	4a2f      	ldr	r2, [pc, #188]	; (8009dbc <DMA_CalcBaseAndBitshift+0x14c>)
 8009d00:	4293      	cmp	r3, r2
 8009d02:	d009      	beq.n	8009d18 <DMA_CalcBaseAndBitshift+0xa8>
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	4a2d      	ldr	r2, [pc, #180]	; (8009dc0 <DMA_CalcBaseAndBitshift+0x150>)
 8009d0a:	4293      	cmp	r3, r2
 8009d0c:	d004      	beq.n	8009d18 <DMA_CalcBaseAndBitshift+0xa8>
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	4a2c      	ldr	r2, [pc, #176]	; (8009dc4 <DMA_CalcBaseAndBitshift+0x154>)
 8009d14:	4293      	cmp	r3, r2
 8009d16:	d101      	bne.n	8009d1c <DMA_CalcBaseAndBitshift+0xac>
 8009d18:	2301      	movs	r3, #1
 8009d1a:	e000      	b.n	8009d1e <DMA_CalcBaseAndBitshift+0xae>
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d024      	beq.n	8009d6c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	b2db      	uxtb	r3, r3
 8009d28:	3b10      	subs	r3, #16
 8009d2a:	4a27      	ldr	r2, [pc, #156]	; (8009dc8 <DMA_CalcBaseAndBitshift+0x158>)
 8009d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8009d30:	091b      	lsrs	r3, r3, #4
 8009d32:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	f003 0307 	and.w	r3, r3, #7
 8009d3a:	4a24      	ldr	r2, [pc, #144]	; (8009dcc <DMA_CalcBaseAndBitshift+0x15c>)
 8009d3c:	5cd3      	ldrb	r3, [r2, r3]
 8009d3e:	461a      	mov	r2, r3
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	2b03      	cmp	r3, #3
 8009d48:	d908      	bls.n	8009d5c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	461a      	mov	r2, r3
 8009d50:	4b1f      	ldr	r3, [pc, #124]	; (8009dd0 <DMA_CalcBaseAndBitshift+0x160>)
 8009d52:	4013      	ands	r3, r2
 8009d54:	1d1a      	adds	r2, r3, #4
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	659a      	str	r2, [r3, #88]	; 0x58
 8009d5a:	e00d      	b.n	8009d78 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	461a      	mov	r2, r3
 8009d62:	4b1b      	ldr	r3, [pc, #108]	; (8009dd0 <DMA_CalcBaseAndBitshift+0x160>)
 8009d64:	4013      	ands	r3, r2
 8009d66:	687a      	ldr	r2, [r7, #4]
 8009d68:	6593      	str	r3, [r2, #88]	; 0x58
 8009d6a:	e005      	b.n	8009d78 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	3714      	adds	r7, #20
 8009d80:	46bd      	mov	sp, r7
 8009d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d86:	4770      	bx	lr
 8009d88:	40020010 	.word	0x40020010
 8009d8c:	40020028 	.word	0x40020028
 8009d90:	40020040 	.word	0x40020040
 8009d94:	40020058 	.word	0x40020058
 8009d98:	40020070 	.word	0x40020070
 8009d9c:	40020088 	.word	0x40020088
 8009da0:	400200a0 	.word	0x400200a0
 8009da4:	400200b8 	.word	0x400200b8
 8009da8:	40020410 	.word	0x40020410
 8009dac:	40020428 	.word	0x40020428
 8009db0:	40020440 	.word	0x40020440
 8009db4:	40020458 	.word	0x40020458
 8009db8:	40020470 	.word	0x40020470
 8009dbc:	40020488 	.word	0x40020488
 8009dc0:	400204a0 	.word	0x400204a0
 8009dc4:	400204b8 	.word	0x400204b8
 8009dc8:	aaaaaaab 	.word	0xaaaaaaab
 8009dcc:	08011c68 	.word	0x08011c68
 8009dd0:	fffffc00 	.word	0xfffffc00

08009dd4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009dd4:	b480      	push	{r7}
 8009dd6:	b085      	sub	sp, #20
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009ddc:	2300      	movs	r3, #0
 8009dde:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	699b      	ldr	r3, [r3, #24]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d120      	bne.n	8009e2a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dec:	2b03      	cmp	r3, #3
 8009dee:	d858      	bhi.n	8009ea2 <DMA_CheckFifoParam+0xce>
 8009df0:	a201      	add	r2, pc, #4	; (adr r2, 8009df8 <DMA_CheckFifoParam+0x24>)
 8009df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009df6:	bf00      	nop
 8009df8:	08009e09 	.word	0x08009e09
 8009dfc:	08009e1b 	.word	0x08009e1b
 8009e00:	08009e09 	.word	0x08009e09
 8009e04:	08009ea3 	.word	0x08009ea3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d048      	beq.n	8009ea6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8009e14:	2301      	movs	r3, #1
 8009e16:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009e18:	e045      	b.n	8009ea6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e1e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009e22:	d142      	bne.n	8009eaa <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8009e24:	2301      	movs	r3, #1
 8009e26:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009e28:	e03f      	b.n	8009eaa <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	699b      	ldr	r3, [r3, #24]
 8009e2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e32:	d123      	bne.n	8009e7c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e38:	2b03      	cmp	r3, #3
 8009e3a:	d838      	bhi.n	8009eae <DMA_CheckFifoParam+0xda>
 8009e3c:	a201      	add	r2, pc, #4	; (adr r2, 8009e44 <DMA_CheckFifoParam+0x70>)
 8009e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e42:	bf00      	nop
 8009e44:	08009e55 	.word	0x08009e55
 8009e48:	08009e5b 	.word	0x08009e5b
 8009e4c:	08009e55 	.word	0x08009e55
 8009e50:	08009e6d 	.word	0x08009e6d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8009e54:	2301      	movs	r3, #1
 8009e56:	73fb      	strb	r3, [r7, #15]
        break;
 8009e58:	e030      	b.n	8009ebc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d025      	beq.n	8009eb2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8009e66:	2301      	movs	r3, #1
 8009e68:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009e6a:	e022      	b.n	8009eb2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e70:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009e74:	d11f      	bne.n	8009eb6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8009e76:	2301      	movs	r3, #1
 8009e78:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009e7a:	e01c      	b.n	8009eb6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e80:	2b02      	cmp	r3, #2
 8009e82:	d902      	bls.n	8009e8a <DMA_CheckFifoParam+0xb6>
 8009e84:	2b03      	cmp	r3, #3
 8009e86:	d003      	beq.n	8009e90 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8009e88:	e018      	b.n	8009ebc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	73fb      	strb	r3, [r7, #15]
        break;
 8009e8e:	e015      	b.n	8009ebc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d00e      	beq.n	8009eba <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8009e9c:	2301      	movs	r3, #1
 8009e9e:	73fb      	strb	r3, [r7, #15]
    break;
 8009ea0:	e00b      	b.n	8009eba <DMA_CheckFifoParam+0xe6>
        break;
 8009ea2:	bf00      	nop
 8009ea4:	e00a      	b.n	8009ebc <DMA_CheckFifoParam+0xe8>
        break;
 8009ea6:	bf00      	nop
 8009ea8:	e008      	b.n	8009ebc <DMA_CheckFifoParam+0xe8>
        break;
 8009eaa:	bf00      	nop
 8009eac:	e006      	b.n	8009ebc <DMA_CheckFifoParam+0xe8>
        break;
 8009eae:	bf00      	nop
 8009eb0:	e004      	b.n	8009ebc <DMA_CheckFifoParam+0xe8>
        break;
 8009eb2:	bf00      	nop
 8009eb4:	e002      	b.n	8009ebc <DMA_CheckFifoParam+0xe8>
        break;
 8009eb6:	bf00      	nop
 8009eb8:	e000      	b.n	8009ebc <DMA_CheckFifoParam+0xe8>
    break;
 8009eba:	bf00      	nop
    }
  }

  return status;
 8009ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	3714      	adds	r7, #20
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec8:	4770      	bx	lr
 8009eca:	bf00      	nop

08009ecc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009ecc:	b480      	push	{r7}
 8009ece:	b085      	sub	sp, #20
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	4a38      	ldr	r2, [pc, #224]	; (8009fc0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8009ee0:	4293      	cmp	r3, r2
 8009ee2:	d022      	beq.n	8009f2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	4a36      	ldr	r2, [pc, #216]	; (8009fc4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8009eea:	4293      	cmp	r3, r2
 8009eec:	d01d      	beq.n	8009f2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	4a35      	ldr	r2, [pc, #212]	; (8009fc8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8009ef4:	4293      	cmp	r3, r2
 8009ef6:	d018      	beq.n	8009f2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	4a33      	ldr	r2, [pc, #204]	; (8009fcc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8009efe:	4293      	cmp	r3, r2
 8009f00:	d013      	beq.n	8009f2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	4a32      	ldr	r2, [pc, #200]	; (8009fd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8009f08:	4293      	cmp	r3, r2
 8009f0a:	d00e      	beq.n	8009f2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	4a30      	ldr	r2, [pc, #192]	; (8009fd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8009f12:	4293      	cmp	r3, r2
 8009f14:	d009      	beq.n	8009f2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	4a2f      	ldr	r2, [pc, #188]	; (8009fd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8009f1c:	4293      	cmp	r3, r2
 8009f1e:	d004      	beq.n	8009f2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	4a2d      	ldr	r2, [pc, #180]	; (8009fdc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8009f26:	4293      	cmp	r3, r2
 8009f28:	d101      	bne.n	8009f2e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8009f2a:	2301      	movs	r3, #1
 8009f2c:	e000      	b.n	8009f30 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8009f2e:	2300      	movs	r3, #0
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d01a      	beq.n	8009f6a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	b2db      	uxtb	r3, r3
 8009f3a:	3b08      	subs	r3, #8
 8009f3c:	4a28      	ldr	r2, [pc, #160]	; (8009fe0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8009f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8009f42:	091b      	lsrs	r3, r3, #4
 8009f44:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8009f46:	68fa      	ldr	r2, [r7, #12]
 8009f48:	4b26      	ldr	r3, [pc, #152]	; (8009fe4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8009f4a:	4413      	add	r3, r2
 8009f4c:	009b      	lsls	r3, r3, #2
 8009f4e:	461a      	mov	r2, r3
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	4a24      	ldr	r2, [pc, #144]	; (8009fe8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8009f58:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	f003 031f 	and.w	r3, r3, #31
 8009f60:	2201      	movs	r2, #1
 8009f62:	409a      	lsls	r2, r3
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8009f68:	e024      	b.n	8009fb4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	b2db      	uxtb	r3, r3
 8009f70:	3b10      	subs	r3, #16
 8009f72:	4a1e      	ldr	r2, [pc, #120]	; (8009fec <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8009f74:	fba2 2303 	umull	r2, r3, r2, r3
 8009f78:	091b      	lsrs	r3, r3, #4
 8009f7a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8009f7c:	68bb      	ldr	r3, [r7, #8]
 8009f7e:	4a1c      	ldr	r2, [pc, #112]	; (8009ff0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8009f80:	4293      	cmp	r3, r2
 8009f82:	d806      	bhi.n	8009f92 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	4a1b      	ldr	r2, [pc, #108]	; (8009ff4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8009f88:	4293      	cmp	r3, r2
 8009f8a:	d902      	bls.n	8009f92 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	3308      	adds	r3, #8
 8009f90:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8009f92:	68fa      	ldr	r2, [r7, #12]
 8009f94:	4b18      	ldr	r3, [pc, #96]	; (8009ff8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8009f96:	4413      	add	r3, r2
 8009f98:	009b      	lsls	r3, r3, #2
 8009f9a:	461a      	mov	r2, r3
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	4a16      	ldr	r2, [pc, #88]	; (8009ffc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8009fa4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	f003 031f 	and.w	r3, r3, #31
 8009fac:	2201      	movs	r2, #1
 8009fae:	409a      	lsls	r2, r3
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	669a      	str	r2, [r3, #104]	; 0x68
}
 8009fb4:	bf00      	nop
 8009fb6:	3714      	adds	r7, #20
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbe:	4770      	bx	lr
 8009fc0:	58025408 	.word	0x58025408
 8009fc4:	5802541c 	.word	0x5802541c
 8009fc8:	58025430 	.word	0x58025430
 8009fcc:	58025444 	.word	0x58025444
 8009fd0:	58025458 	.word	0x58025458
 8009fd4:	5802546c 	.word	0x5802546c
 8009fd8:	58025480 	.word	0x58025480
 8009fdc:	58025494 	.word	0x58025494
 8009fe0:	cccccccd 	.word	0xcccccccd
 8009fe4:	16009600 	.word	0x16009600
 8009fe8:	58025880 	.word	0x58025880
 8009fec:	aaaaaaab 	.word	0xaaaaaaab
 8009ff0:	400204b8 	.word	0x400204b8
 8009ff4:	4002040f 	.word	0x4002040f
 8009ff8:	10008200 	.word	0x10008200
 8009ffc:	40020880 	.word	0x40020880

0800a000 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a000:	b480      	push	{r7}
 800a002:	b085      	sub	sp, #20
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	685b      	ldr	r3, [r3, #4]
 800a00c:	b2db      	uxtb	r3, r3
 800a00e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d04a      	beq.n	800a0ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	2b08      	cmp	r3, #8
 800a01a:	d847      	bhi.n	800a0ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	4a25      	ldr	r2, [pc, #148]	; (800a0b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800a022:	4293      	cmp	r3, r2
 800a024:	d022      	beq.n	800a06c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	4a24      	ldr	r2, [pc, #144]	; (800a0bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800a02c:	4293      	cmp	r3, r2
 800a02e:	d01d      	beq.n	800a06c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	4a22      	ldr	r2, [pc, #136]	; (800a0c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800a036:	4293      	cmp	r3, r2
 800a038:	d018      	beq.n	800a06c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	4a21      	ldr	r2, [pc, #132]	; (800a0c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800a040:	4293      	cmp	r3, r2
 800a042:	d013      	beq.n	800a06c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	4a1f      	ldr	r2, [pc, #124]	; (800a0c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800a04a:	4293      	cmp	r3, r2
 800a04c:	d00e      	beq.n	800a06c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	4a1e      	ldr	r2, [pc, #120]	; (800a0cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800a054:	4293      	cmp	r3, r2
 800a056:	d009      	beq.n	800a06c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	4a1c      	ldr	r2, [pc, #112]	; (800a0d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800a05e:	4293      	cmp	r3, r2
 800a060:	d004      	beq.n	800a06c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	4a1b      	ldr	r2, [pc, #108]	; (800a0d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800a068:	4293      	cmp	r3, r2
 800a06a:	d101      	bne.n	800a070 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800a06c:	2301      	movs	r3, #1
 800a06e:	e000      	b.n	800a072 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800a070:	2300      	movs	r3, #0
 800a072:	2b00      	cmp	r3, #0
 800a074:	d00a      	beq.n	800a08c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800a076:	68fa      	ldr	r2, [r7, #12]
 800a078:	4b17      	ldr	r3, [pc, #92]	; (800a0d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800a07a:	4413      	add	r3, r2
 800a07c:	009b      	lsls	r3, r3, #2
 800a07e:	461a      	mov	r2, r3
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	4a15      	ldr	r2, [pc, #84]	; (800a0dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800a088:	671a      	str	r2, [r3, #112]	; 0x70
 800a08a:	e009      	b.n	800a0a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800a08c:	68fa      	ldr	r2, [r7, #12]
 800a08e:	4b14      	ldr	r3, [pc, #80]	; (800a0e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800a090:	4413      	add	r3, r2
 800a092:	009b      	lsls	r3, r3, #2
 800a094:	461a      	mov	r2, r3
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	4a11      	ldr	r2, [pc, #68]	; (800a0e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800a09e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	3b01      	subs	r3, #1
 800a0a4:	2201      	movs	r2, #1
 800a0a6:	409a      	lsls	r2, r3
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800a0ac:	bf00      	nop
 800a0ae:	3714      	adds	r7, #20
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b6:	4770      	bx	lr
 800a0b8:	58025408 	.word	0x58025408
 800a0bc:	5802541c 	.word	0x5802541c
 800a0c0:	58025430 	.word	0x58025430
 800a0c4:	58025444 	.word	0x58025444
 800a0c8:	58025458 	.word	0x58025458
 800a0cc:	5802546c 	.word	0x5802546c
 800a0d0:	58025480 	.word	0x58025480
 800a0d4:	58025494 	.word	0x58025494
 800a0d8:	1600963f 	.word	0x1600963f
 800a0dc:	58025940 	.word	0x58025940
 800a0e0:	1000823f 	.word	0x1000823f
 800a0e4:	40020940 	.word	0x40020940

0800a0e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a0e8:	b480      	push	{r7}
 800a0ea:	b089      	sub	sp, #36	; 0x24
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
 800a0f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800a0f6:	4b86      	ldr	r3, [pc, #536]	; (800a310 <HAL_GPIO_Init+0x228>)
 800a0f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a0fa:	e18c      	b.n	800a416 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	681a      	ldr	r2, [r3, #0]
 800a100:	2101      	movs	r1, #1
 800a102:	69fb      	ldr	r3, [r7, #28]
 800a104:	fa01 f303 	lsl.w	r3, r1, r3
 800a108:	4013      	ands	r3, r2
 800a10a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800a10c:	693b      	ldr	r3, [r7, #16]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	f000 817e 	beq.w	800a410 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	685b      	ldr	r3, [r3, #4]
 800a118:	f003 0303 	and.w	r3, r3, #3
 800a11c:	2b01      	cmp	r3, #1
 800a11e:	d005      	beq.n	800a12c <HAL_GPIO_Init+0x44>
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	685b      	ldr	r3, [r3, #4]
 800a124:	f003 0303 	and.w	r3, r3, #3
 800a128:	2b02      	cmp	r3, #2
 800a12a:	d130      	bne.n	800a18e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	689b      	ldr	r3, [r3, #8]
 800a130:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a132:	69fb      	ldr	r3, [r7, #28]
 800a134:	005b      	lsls	r3, r3, #1
 800a136:	2203      	movs	r2, #3
 800a138:	fa02 f303 	lsl.w	r3, r2, r3
 800a13c:	43db      	mvns	r3, r3
 800a13e:	69ba      	ldr	r2, [r7, #24]
 800a140:	4013      	ands	r3, r2
 800a142:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	68da      	ldr	r2, [r3, #12]
 800a148:	69fb      	ldr	r3, [r7, #28]
 800a14a:	005b      	lsls	r3, r3, #1
 800a14c:	fa02 f303 	lsl.w	r3, r2, r3
 800a150:	69ba      	ldr	r2, [r7, #24]
 800a152:	4313      	orrs	r3, r2
 800a154:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	69ba      	ldr	r2, [r7, #24]
 800a15a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	685b      	ldr	r3, [r3, #4]
 800a160:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a162:	2201      	movs	r2, #1
 800a164:	69fb      	ldr	r3, [r7, #28]
 800a166:	fa02 f303 	lsl.w	r3, r2, r3
 800a16a:	43db      	mvns	r3, r3
 800a16c:	69ba      	ldr	r2, [r7, #24]
 800a16e:	4013      	ands	r3, r2
 800a170:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	685b      	ldr	r3, [r3, #4]
 800a176:	091b      	lsrs	r3, r3, #4
 800a178:	f003 0201 	and.w	r2, r3, #1
 800a17c:	69fb      	ldr	r3, [r7, #28]
 800a17e:	fa02 f303 	lsl.w	r3, r2, r3
 800a182:	69ba      	ldr	r2, [r7, #24]
 800a184:	4313      	orrs	r3, r2
 800a186:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	69ba      	ldr	r2, [r7, #24]
 800a18c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	685b      	ldr	r3, [r3, #4]
 800a192:	f003 0303 	and.w	r3, r3, #3
 800a196:	2b03      	cmp	r3, #3
 800a198:	d017      	beq.n	800a1ca <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	68db      	ldr	r3, [r3, #12]
 800a19e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a1a0:	69fb      	ldr	r3, [r7, #28]
 800a1a2:	005b      	lsls	r3, r3, #1
 800a1a4:	2203      	movs	r2, #3
 800a1a6:	fa02 f303 	lsl.w	r3, r2, r3
 800a1aa:	43db      	mvns	r3, r3
 800a1ac:	69ba      	ldr	r2, [r7, #24]
 800a1ae:	4013      	ands	r3, r2
 800a1b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	689a      	ldr	r2, [r3, #8]
 800a1b6:	69fb      	ldr	r3, [r7, #28]
 800a1b8:	005b      	lsls	r3, r3, #1
 800a1ba:	fa02 f303 	lsl.w	r3, r2, r3
 800a1be:	69ba      	ldr	r2, [r7, #24]
 800a1c0:	4313      	orrs	r3, r2
 800a1c2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	69ba      	ldr	r2, [r7, #24]
 800a1c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	685b      	ldr	r3, [r3, #4]
 800a1ce:	f003 0303 	and.w	r3, r3, #3
 800a1d2:	2b02      	cmp	r3, #2
 800a1d4:	d123      	bne.n	800a21e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a1d6:	69fb      	ldr	r3, [r7, #28]
 800a1d8:	08da      	lsrs	r2, r3, #3
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	3208      	adds	r2, #8
 800a1de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a1e4:	69fb      	ldr	r3, [r7, #28]
 800a1e6:	f003 0307 	and.w	r3, r3, #7
 800a1ea:	009b      	lsls	r3, r3, #2
 800a1ec:	220f      	movs	r2, #15
 800a1ee:	fa02 f303 	lsl.w	r3, r2, r3
 800a1f2:	43db      	mvns	r3, r3
 800a1f4:	69ba      	ldr	r2, [r7, #24]
 800a1f6:	4013      	ands	r3, r2
 800a1f8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	691a      	ldr	r2, [r3, #16]
 800a1fe:	69fb      	ldr	r3, [r7, #28]
 800a200:	f003 0307 	and.w	r3, r3, #7
 800a204:	009b      	lsls	r3, r3, #2
 800a206:	fa02 f303 	lsl.w	r3, r2, r3
 800a20a:	69ba      	ldr	r2, [r7, #24]
 800a20c:	4313      	orrs	r3, r2
 800a20e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a210:	69fb      	ldr	r3, [r7, #28]
 800a212:	08da      	lsrs	r2, r3, #3
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	3208      	adds	r2, #8
 800a218:	69b9      	ldr	r1, [r7, #24]
 800a21a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a224:	69fb      	ldr	r3, [r7, #28]
 800a226:	005b      	lsls	r3, r3, #1
 800a228:	2203      	movs	r2, #3
 800a22a:	fa02 f303 	lsl.w	r3, r2, r3
 800a22e:	43db      	mvns	r3, r3
 800a230:	69ba      	ldr	r2, [r7, #24]
 800a232:	4013      	ands	r3, r2
 800a234:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	685b      	ldr	r3, [r3, #4]
 800a23a:	f003 0203 	and.w	r2, r3, #3
 800a23e:	69fb      	ldr	r3, [r7, #28]
 800a240:	005b      	lsls	r3, r3, #1
 800a242:	fa02 f303 	lsl.w	r3, r2, r3
 800a246:	69ba      	ldr	r2, [r7, #24]
 800a248:	4313      	orrs	r3, r2
 800a24a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	69ba      	ldr	r2, [r7, #24]
 800a250:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	685b      	ldr	r3, [r3, #4]
 800a256:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	f000 80d8 	beq.w	800a410 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a260:	4b2c      	ldr	r3, [pc, #176]	; (800a314 <HAL_GPIO_Init+0x22c>)
 800a262:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a266:	4a2b      	ldr	r2, [pc, #172]	; (800a314 <HAL_GPIO_Init+0x22c>)
 800a268:	f043 0302 	orr.w	r3, r3, #2
 800a26c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800a270:	4b28      	ldr	r3, [pc, #160]	; (800a314 <HAL_GPIO_Init+0x22c>)
 800a272:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a276:	f003 0302 	and.w	r3, r3, #2
 800a27a:	60fb      	str	r3, [r7, #12]
 800a27c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a27e:	4a26      	ldr	r2, [pc, #152]	; (800a318 <HAL_GPIO_Init+0x230>)
 800a280:	69fb      	ldr	r3, [r7, #28]
 800a282:	089b      	lsrs	r3, r3, #2
 800a284:	3302      	adds	r3, #2
 800a286:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a28a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a28c:	69fb      	ldr	r3, [r7, #28]
 800a28e:	f003 0303 	and.w	r3, r3, #3
 800a292:	009b      	lsls	r3, r3, #2
 800a294:	220f      	movs	r2, #15
 800a296:	fa02 f303 	lsl.w	r3, r2, r3
 800a29a:	43db      	mvns	r3, r3
 800a29c:	69ba      	ldr	r2, [r7, #24]
 800a29e:	4013      	ands	r3, r2
 800a2a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	4a1d      	ldr	r2, [pc, #116]	; (800a31c <HAL_GPIO_Init+0x234>)
 800a2a6:	4293      	cmp	r3, r2
 800a2a8:	d04a      	beq.n	800a340 <HAL_GPIO_Init+0x258>
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	4a1c      	ldr	r2, [pc, #112]	; (800a320 <HAL_GPIO_Init+0x238>)
 800a2ae:	4293      	cmp	r3, r2
 800a2b0:	d02b      	beq.n	800a30a <HAL_GPIO_Init+0x222>
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	4a1b      	ldr	r2, [pc, #108]	; (800a324 <HAL_GPIO_Init+0x23c>)
 800a2b6:	4293      	cmp	r3, r2
 800a2b8:	d025      	beq.n	800a306 <HAL_GPIO_Init+0x21e>
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	4a1a      	ldr	r2, [pc, #104]	; (800a328 <HAL_GPIO_Init+0x240>)
 800a2be:	4293      	cmp	r3, r2
 800a2c0:	d01f      	beq.n	800a302 <HAL_GPIO_Init+0x21a>
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	4a19      	ldr	r2, [pc, #100]	; (800a32c <HAL_GPIO_Init+0x244>)
 800a2c6:	4293      	cmp	r3, r2
 800a2c8:	d019      	beq.n	800a2fe <HAL_GPIO_Init+0x216>
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	4a18      	ldr	r2, [pc, #96]	; (800a330 <HAL_GPIO_Init+0x248>)
 800a2ce:	4293      	cmp	r3, r2
 800a2d0:	d013      	beq.n	800a2fa <HAL_GPIO_Init+0x212>
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	4a17      	ldr	r2, [pc, #92]	; (800a334 <HAL_GPIO_Init+0x24c>)
 800a2d6:	4293      	cmp	r3, r2
 800a2d8:	d00d      	beq.n	800a2f6 <HAL_GPIO_Init+0x20e>
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	4a16      	ldr	r2, [pc, #88]	; (800a338 <HAL_GPIO_Init+0x250>)
 800a2de:	4293      	cmp	r3, r2
 800a2e0:	d007      	beq.n	800a2f2 <HAL_GPIO_Init+0x20a>
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	4a15      	ldr	r2, [pc, #84]	; (800a33c <HAL_GPIO_Init+0x254>)
 800a2e6:	4293      	cmp	r3, r2
 800a2e8:	d101      	bne.n	800a2ee <HAL_GPIO_Init+0x206>
 800a2ea:	2309      	movs	r3, #9
 800a2ec:	e029      	b.n	800a342 <HAL_GPIO_Init+0x25a>
 800a2ee:	230a      	movs	r3, #10
 800a2f0:	e027      	b.n	800a342 <HAL_GPIO_Init+0x25a>
 800a2f2:	2307      	movs	r3, #7
 800a2f4:	e025      	b.n	800a342 <HAL_GPIO_Init+0x25a>
 800a2f6:	2306      	movs	r3, #6
 800a2f8:	e023      	b.n	800a342 <HAL_GPIO_Init+0x25a>
 800a2fa:	2305      	movs	r3, #5
 800a2fc:	e021      	b.n	800a342 <HAL_GPIO_Init+0x25a>
 800a2fe:	2304      	movs	r3, #4
 800a300:	e01f      	b.n	800a342 <HAL_GPIO_Init+0x25a>
 800a302:	2303      	movs	r3, #3
 800a304:	e01d      	b.n	800a342 <HAL_GPIO_Init+0x25a>
 800a306:	2302      	movs	r3, #2
 800a308:	e01b      	b.n	800a342 <HAL_GPIO_Init+0x25a>
 800a30a:	2301      	movs	r3, #1
 800a30c:	e019      	b.n	800a342 <HAL_GPIO_Init+0x25a>
 800a30e:	bf00      	nop
 800a310:	58000080 	.word	0x58000080
 800a314:	58024400 	.word	0x58024400
 800a318:	58000400 	.word	0x58000400
 800a31c:	58020000 	.word	0x58020000
 800a320:	58020400 	.word	0x58020400
 800a324:	58020800 	.word	0x58020800
 800a328:	58020c00 	.word	0x58020c00
 800a32c:	58021000 	.word	0x58021000
 800a330:	58021400 	.word	0x58021400
 800a334:	58021800 	.word	0x58021800
 800a338:	58021c00 	.word	0x58021c00
 800a33c:	58022400 	.word	0x58022400
 800a340:	2300      	movs	r3, #0
 800a342:	69fa      	ldr	r2, [r7, #28]
 800a344:	f002 0203 	and.w	r2, r2, #3
 800a348:	0092      	lsls	r2, r2, #2
 800a34a:	4093      	lsls	r3, r2
 800a34c:	69ba      	ldr	r2, [r7, #24]
 800a34e:	4313      	orrs	r3, r2
 800a350:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a352:	4938      	ldr	r1, [pc, #224]	; (800a434 <HAL_GPIO_Init+0x34c>)
 800a354:	69fb      	ldr	r3, [r7, #28]
 800a356:	089b      	lsrs	r3, r3, #2
 800a358:	3302      	adds	r3, #2
 800a35a:	69ba      	ldr	r2, [r7, #24]
 800a35c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a360:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a368:	693b      	ldr	r3, [r7, #16]
 800a36a:	43db      	mvns	r3, r3
 800a36c:	69ba      	ldr	r2, [r7, #24]
 800a36e:	4013      	ands	r3, r2
 800a370:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	685b      	ldr	r3, [r3, #4]
 800a376:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d003      	beq.n	800a386 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800a37e:	69ba      	ldr	r2, [r7, #24]
 800a380:	693b      	ldr	r3, [r7, #16]
 800a382:	4313      	orrs	r3, r2
 800a384:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800a386:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a38a:	69bb      	ldr	r3, [r7, #24]
 800a38c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800a38e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a392:	685b      	ldr	r3, [r3, #4]
 800a394:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a396:	693b      	ldr	r3, [r7, #16]
 800a398:	43db      	mvns	r3, r3
 800a39a:	69ba      	ldr	r2, [r7, #24]
 800a39c:	4013      	ands	r3, r2
 800a39e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	685b      	ldr	r3, [r3, #4]
 800a3a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d003      	beq.n	800a3b4 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800a3ac:	69ba      	ldr	r2, [r7, #24]
 800a3ae:	693b      	ldr	r3, [r7, #16]
 800a3b0:	4313      	orrs	r3, r2
 800a3b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800a3b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a3b8:	69bb      	ldr	r3, [r7, #24]
 800a3ba:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800a3bc:	697b      	ldr	r3, [r7, #20]
 800a3be:	685b      	ldr	r3, [r3, #4]
 800a3c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a3c2:	693b      	ldr	r3, [r7, #16]
 800a3c4:	43db      	mvns	r3, r3
 800a3c6:	69ba      	ldr	r2, [r7, #24]
 800a3c8:	4013      	ands	r3, r2
 800a3ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	685b      	ldr	r3, [r3, #4]
 800a3d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d003      	beq.n	800a3e0 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800a3d8:	69ba      	ldr	r2, [r7, #24]
 800a3da:	693b      	ldr	r3, [r7, #16]
 800a3dc:	4313      	orrs	r3, r2
 800a3de:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800a3e0:	697b      	ldr	r3, [r7, #20]
 800a3e2:	69ba      	ldr	r2, [r7, #24]
 800a3e4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800a3e6:	697b      	ldr	r3, [r7, #20]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a3ec:	693b      	ldr	r3, [r7, #16]
 800a3ee:	43db      	mvns	r3, r3
 800a3f0:	69ba      	ldr	r2, [r7, #24]
 800a3f2:	4013      	ands	r3, r2
 800a3f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	685b      	ldr	r3, [r3, #4]
 800a3fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d003      	beq.n	800a40a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800a402:	69ba      	ldr	r2, [r7, #24]
 800a404:	693b      	ldr	r3, [r7, #16]
 800a406:	4313      	orrs	r3, r2
 800a408:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800a40a:	697b      	ldr	r3, [r7, #20]
 800a40c:	69ba      	ldr	r2, [r7, #24]
 800a40e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800a410:	69fb      	ldr	r3, [r7, #28]
 800a412:	3301      	adds	r3, #1
 800a414:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	681a      	ldr	r2, [r3, #0]
 800a41a:	69fb      	ldr	r3, [r7, #28]
 800a41c:	fa22 f303 	lsr.w	r3, r2, r3
 800a420:	2b00      	cmp	r3, #0
 800a422:	f47f ae6b 	bne.w	800a0fc <HAL_GPIO_Init+0x14>
  }
}
 800a426:	bf00      	nop
 800a428:	bf00      	nop
 800a42a:	3724      	adds	r7, #36	; 0x24
 800a42c:	46bd      	mov	sp, r7
 800a42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a432:	4770      	bx	lr
 800a434:	58000400 	.word	0x58000400

0800a438 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800a438:	b480      	push	{r7}
 800a43a:	b087      	sub	sp, #28
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
 800a440:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a442:	2300      	movs	r3, #0
 800a444:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800a446:	4b72      	ldr	r3, [pc, #456]	; (800a610 <HAL_GPIO_DeInit+0x1d8>)
 800a448:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800a44a:	e0d3      	b.n	800a5f4 <HAL_GPIO_DeInit+0x1bc>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 800a44c:	2201      	movs	r2, #1
 800a44e:	697b      	ldr	r3, [r7, #20]
 800a450:	fa02 f303 	lsl.w	r3, r2, r3
 800a454:	683a      	ldr	r2, [r7, #0]
 800a456:	4013      	ands	r3, r2
 800a458:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	f000 80c6 	beq.w	800a5ee <HAL_GPIO_DeInit+0x1b6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 800a462:	4a6c      	ldr	r2, [pc, #432]	; (800a614 <HAL_GPIO_DeInit+0x1dc>)
 800a464:	697b      	ldr	r3, [r7, #20]
 800a466:	089b      	lsrs	r3, r3, #2
 800a468:	3302      	adds	r3, #2
 800a46a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a46e:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800a470:	697b      	ldr	r3, [r7, #20]
 800a472:	f003 0303 	and.w	r3, r3, #3
 800a476:	009b      	lsls	r3, r3, #2
 800a478:	220f      	movs	r2, #15
 800a47a:	fa02 f303 	lsl.w	r3, r2, r3
 800a47e:	68ba      	ldr	r2, [r7, #8]
 800a480:	4013      	ands	r3, r2
 800a482:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	4a64      	ldr	r2, [pc, #400]	; (800a618 <HAL_GPIO_DeInit+0x1e0>)
 800a488:	4293      	cmp	r3, r2
 800a48a:	d031      	beq.n	800a4f0 <HAL_GPIO_DeInit+0xb8>
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	4a63      	ldr	r2, [pc, #396]	; (800a61c <HAL_GPIO_DeInit+0x1e4>)
 800a490:	4293      	cmp	r3, r2
 800a492:	d02b      	beq.n	800a4ec <HAL_GPIO_DeInit+0xb4>
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	4a62      	ldr	r2, [pc, #392]	; (800a620 <HAL_GPIO_DeInit+0x1e8>)
 800a498:	4293      	cmp	r3, r2
 800a49a:	d025      	beq.n	800a4e8 <HAL_GPIO_DeInit+0xb0>
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	4a61      	ldr	r2, [pc, #388]	; (800a624 <HAL_GPIO_DeInit+0x1ec>)
 800a4a0:	4293      	cmp	r3, r2
 800a4a2:	d01f      	beq.n	800a4e4 <HAL_GPIO_DeInit+0xac>
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	4a60      	ldr	r2, [pc, #384]	; (800a628 <HAL_GPIO_DeInit+0x1f0>)
 800a4a8:	4293      	cmp	r3, r2
 800a4aa:	d019      	beq.n	800a4e0 <HAL_GPIO_DeInit+0xa8>
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	4a5f      	ldr	r2, [pc, #380]	; (800a62c <HAL_GPIO_DeInit+0x1f4>)
 800a4b0:	4293      	cmp	r3, r2
 800a4b2:	d013      	beq.n	800a4dc <HAL_GPIO_DeInit+0xa4>
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	4a5e      	ldr	r2, [pc, #376]	; (800a630 <HAL_GPIO_DeInit+0x1f8>)
 800a4b8:	4293      	cmp	r3, r2
 800a4ba:	d00d      	beq.n	800a4d8 <HAL_GPIO_DeInit+0xa0>
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	4a5d      	ldr	r2, [pc, #372]	; (800a634 <HAL_GPIO_DeInit+0x1fc>)
 800a4c0:	4293      	cmp	r3, r2
 800a4c2:	d007      	beq.n	800a4d4 <HAL_GPIO_DeInit+0x9c>
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	4a5c      	ldr	r2, [pc, #368]	; (800a638 <HAL_GPIO_DeInit+0x200>)
 800a4c8:	4293      	cmp	r3, r2
 800a4ca:	d101      	bne.n	800a4d0 <HAL_GPIO_DeInit+0x98>
 800a4cc:	2309      	movs	r3, #9
 800a4ce:	e010      	b.n	800a4f2 <HAL_GPIO_DeInit+0xba>
 800a4d0:	230a      	movs	r3, #10
 800a4d2:	e00e      	b.n	800a4f2 <HAL_GPIO_DeInit+0xba>
 800a4d4:	2307      	movs	r3, #7
 800a4d6:	e00c      	b.n	800a4f2 <HAL_GPIO_DeInit+0xba>
 800a4d8:	2306      	movs	r3, #6
 800a4da:	e00a      	b.n	800a4f2 <HAL_GPIO_DeInit+0xba>
 800a4dc:	2305      	movs	r3, #5
 800a4de:	e008      	b.n	800a4f2 <HAL_GPIO_DeInit+0xba>
 800a4e0:	2304      	movs	r3, #4
 800a4e2:	e006      	b.n	800a4f2 <HAL_GPIO_DeInit+0xba>
 800a4e4:	2303      	movs	r3, #3
 800a4e6:	e004      	b.n	800a4f2 <HAL_GPIO_DeInit+0xba>
 800a4e8:	2302      	movs	r3, #2
 800a4ea:	e002      	b.n	800a4f2 <HAL_GPIO_DeInit+0xba>
 800a4ec:	2301      	movs	r3, #1
 800a4ee:	e000      	b.n	800a4f2 <HAL_GPIO_DeInit+0xba>
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	697a      	ldr	r2, [r7, #20]
 800a4f4:	f002 0203 	and.w	r2, r2, #3
 800a4f8:	0092      	lsls	r2, r2, #2
 800a4fa:	4093      	lsls	r3, r2
 800a4fc:	68ba      	ldr	r2, [r7, #8]
 800a4fe:	429a      	cmp	r2, r3
 800a500:	d136      	bne.n	800a570 <HAL_GPIO_DeInit+0x138>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800a502:	693b      	ldr	r3, [r7, #16]
 800a504:	681a      	ldr	r2, [r3, #0]
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	43db      	mvns	r3, r3
 800a50a:	401a      	ands	r2, r3
 800a50c:	693b      	ldr	r3, [r7, #16]
 800a50e:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 800a510:	693b      	ldr	r3, [r7, #16]
 800a512:	685a      	ldr	r2, [r3, #4]
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	43db      	mvns	r3, r3
 800a518:	401a      	ands	r2, r3
 800a51a:	693b      	ldr	r3, [r7, #16]
 800a51c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800a51e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a522:	685a      	ldr	r2, [r3, #4]
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	43db      	mvns	r3, r3
 800a528:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a52c:	4013      	ands	r3, r2
 800a52e:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800a530:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a534:	681a      	ldr	r2, [r3, #0]
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	43db      	mvns	r3, r3
 800a53a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a53e:	4013      	ands	r3, r2
 800a540:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800a542:	697b      	ldr	r3, [r7, #20]
 800a544:	f003 0303 	and.w	r3, r3, #3
 800a548:	009b      	lsls	r3, r3, #2
 800a54a:	220f      	movs	r2, #15
 800a54c:	fa02 f303 	lsl.w	r3, r2, r3
 800a550:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800a552:	4a30      	ldr	r2, [pc, #192]	; (800a614 <HAL_GPIO_DeInit+0x1dc>)
 800a554:	697b      	ldr	r3, [r7, #20]
 800a556:	089b      	lsrs	r3, r3, #2
 800a558:	3302      	adds	r3, #2
 800a55a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a55e:	68bb      	ldr	r3, [r7, #8]
 800a560:	43da      	mvns	r2, r3
 800a562:	482c      	ldr	r0, [pc, #176]	; (800a614 <HAL_GPIO_DeInit+0x1dc>)
 800a564:	697b      	ldr	r3, [r7, #20]
 800a566:	089b      	lsrs	r3, r3, #2
 800a568:	400a      	ands	r2, r1
 800a56a:	3302      	adds	r3, #2
 800a56c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681a      	ldr	r2, [r3, #0]
 800a574:	697b      	ldr	r3, [r7, #20]
 800a576:	005b      	lsls	r3, r3, #1
 800a578:	2103      	movs	r1, #3
 800a57a:	fa01 f303 	lsl.w	r3, r1, r3
 800a57e:	431a      	orrs	r2, r3
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800a584:	697b      	ldr	r3, [r7, #20]
 800a586:	08da      	lsrs	r2, r3, #3
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	3208      	adds	r2, #8
 800a58c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a590:	697b      	ldr	r3, [r7, #20]
 800a592:	f003 0307 	and.w	r3, r3, #7
 800a596:	009b      	lsls	r3, r3, #2
 800a598:	220f      	movs	r2, #15
 800a59a:	fa02 f303 	lsl.w	r3, r2, r3
 800a59e:	43db      	mvns	r3, r3
 800a5a0:	697a      	ldr	r2, [r7, #20]
 800a5a2:	08d2      	lsrs	r2, r2, #3
 800a5a4:	4019      	ands	r1, r3
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	3208      	adds	r2, #8
 800a5aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	68da      	ldr	r2, [r3, #12]
 800a5b2:	697b      	ldr	r3, [r7, #20]
 800a5b4:	005b      	lsls	r3, r3, #1
 800a5b6:	2103      	movs	r1, #3
 800a5b8:	fa01 f303 	lsl.w	r3, r1, r3
 800a5bc:	43db      	mvns	r3, r3
 800a5be:	401a      	ands	r2, r3
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	685a      	ldr	r2, [r3, #4]
 800a5c8:	2101      	movs	r1, #1
 800a5ca:	697b      	ldr	r3, [r7, #20]
 800a5cc:	fa01 f303 	lsl.w	r3, r1, r3
 800a5d0:	43db      	mvns	r3, r3
 800a5d2:	401a      	ands	r2, r3
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	689a      	ldr	r2, [r3, #8]
 800a5dc:	697b      	ldr	r3, [r7, #20]
 800a5de:	005b      	lsls	r3, r3, #1
 800a5e0:	2103      	movs	r1, #3
 800a5e2:	fa01 f303 	lsl.w	r3, r1, r3
 800a5e6:	43db      	mvns	r3, r3
 800a5e8:	401a      	ands	r2, r3
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	609a      	str	r2, [r3, #8]
    }

    position++;
 800a5ee:	697b      	ldr	r3, [r7, #20]
 800a5f0:	3301      	adds	r3, #1
 800a5f2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 800a5f4:	683a      	ldr	r2, [r7, #0]
 800a5f6:	697b      	ldr	r3, [r7, #20]
 800a5f8:	fa22 f303 	lsr.w	r3, r2, r3
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	f47f af25 	bne.w	800a44c <HAL_GPIO_DeInit+0x14>
  }
}
 800a602:	bf00      	nop
 800a604:	bf00      	nop
 800a606:	371c      	adds	r7, #28
 800a608:	46bd      	mov	sp, r7
 800a60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60e:	4770      	bx	lr
 800a610:	58000080 	.word	0x58000080
 800a614:	58000400 	.word	0x58000400
 800a618:	58020000 	.word	0x58020000
 800a61c:	58020400 	.word	0x58020400
 800a620:	58020800 	.word	0x58020800
 800a624:	58020c00 	.word	0x58020c00
 800a628:	58021000 	.word	0x58021000
 800a62c:	58021400 	.word	0x58021400
 800a630:	58021800 	.word	0x58021800
 800a634:	58021c00 	.word	0x58021c00
 800a638:	58022400 	.word	0x58022400

0800a63c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a63c:	b480      	push	{r7}
 800a63e:	b085      	sub	sp, #20
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
 800a644:	460b      	mov	r3, r1
 800a646:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	691a      	ldr	r2, [r3, #16]
 800a64c:	887b      	ldrh	r3, [r7, #2]
 800a64e:	4013      	ands	r3, r2
 800a650:	2b00      	cmp	r3, #0
 800a652:	d002      	beq.n	800a65a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a654:	2301      	movs	r3, #1
 800a656:	73fb      	strb	r3, [r7, #15]
 800a658:	e001      	b.n	800a65e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a65a:	2300      	movs	r3, #0
 800a65c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a65e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a660:	4618      	mov	r0, r3
 800a662:	3714      	adds	r7, #20
 800a664:	46bd      	mov	sp, r7
 800a666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66a:	4770      	bx	lr

0800a66c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a66c:	b480      	push	{r7}
 800a66e:	b083      	sub	sp, #12
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
 800a674:	460b      	mov	r3, r1
 800a676:	807b      	strh	r3, [r7, #2]
 800a678:	4613      	mov	r3, r2
 800a67a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a67c:	787b      	ldrb	r3, [r7, #1]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d003      	beq.n	800a68a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a682:	887a      	ldrh	r2, [r7, #2]
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800a688:	e003      	b.n	800a692 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800a68a:	887b      	ldrh	r3, [r7, #2]
 800a68c:	041a      	lsls	r2, r3, #16
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	619a      	str	r2, [r3, #24]
}
 800a692:	bf00      	nop
 800a694:	370c      	adds	r7, #12
 800a696:	46bd      	mov	sp, r7
 800a698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69c:	4770      	bx	lr
	...

0800a6a0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b084      	sub	sp, #16
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800a6a8:	4b19      	ldr	r3, [pc, #100]	; (800a710 <HAL_PWREx_ConfigSupply+0x70>)
 800a6aa:	68db      	ldr	r3, [r3, #12]
 800a6ac:	f003 0304 	and.w	r3, r3, #4
 800a6b0:	2b04      	cmp	r3, #4
 800a6b2:	d00a      	beq.n	800a6ca <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a6b4:	4b16      	ldr	r3, [pc, #88]	; (800a710 <HAL_PWREx_ConfigSupply+0x70>)
 800a6b6:	68db      	ldr	r3, [r3, #12]
 800a6b8:	f003 0307 	and.w	r3, r3, #7
 800a6bc:	687a      	ldr	r2, [r7, #4]
 800a6be:	429a      	cmp	r2, r3
 800a6c0:	d001      	beq.n	800a6c6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	e01f      	b.n	800a706 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	e01d      	b.n	800a706 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a6ca:	4b11      	ldr	r3, [pc, #68]	; (800a710 <HAL_PWREx_ConfigSupply+0x70>)
 800a6cc:	68db      	ldr	r3, [r3, #12]
 800a6ce:	f023 0207 	bic.w	r2, r3, #7
 800a6d2:	490f      	ldr	r1, [pc, #60]	; (800a710 <HAL_PWREx_ConfigSupply+0x70>)
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	4313      	orrs	r3, r2
 800a6d8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a6da:	f7fc fbc7 	bl	8006e6c <HAL_GetTick>
 800a6de:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a6e0:	e009      	b.n	800a6f6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a6e2:	f7fc fbc3 	bl	8006e6c <HAL_GetTick>
 800a6e6:	4602      	mov	r2, r0
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	1ad3      	subs	r3, r2, r3
 800a6ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a6f0:	d901      	bls.n	800a6f6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a6f2:	2301      	movs	r3, #1
 800a6f4:	e007      	b.n	800a706 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a6f6:	4b06      	ldr	r3, [pc, #24]	; (800a710 <HAL_PWREx_ConfigSupply+0x70>)
 800a6f8:	685b      	ldr	r3, [r3, #4]
 800a6fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a6fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a702:	d1ee      	bne.n	800a6e2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a704:	2300      	movs	r3, #0
}
 800a706:	4618      	mov	r0, r3
 800a708:	3710      	adds	r7, #16
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}
 800a70e:	bf00      	nop
 800a710:	58024800 	.word	0x58024800

0800a714 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b08c      	sub	sp, #48	; 0x30
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d101      	bne.n	800a726 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a722:	2301      	movs	r3, #1
 800a724:	e39d      	b.n	800ae62 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	f003 0301 	and.w	r3, r3, #1
 800a72e:	2b00      	cmp	r3, #0
 800a730:	f000 8087 	beq.w	800a842 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a734:	4b88      	ldr	r3, [pc, #544]	; (800a958 <HAL_RCC_OscConfig+0x244>)
 800a736:	691b      	ldr	r3, [r3, #16]
 800a738:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a73c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a73e:	4b86      	ldr	r3, [pc, #536]	; (800a958 <HAL_RCC_OscConfig+0x244>)
 800a740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a742:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a746:	2b10      	cmp	r3, #16
 800a748:	d007      	beq.n	800a75a <HAL_RCC_OscConfig+0x46>
 800a74a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a74c:	2b18      	cmp	r3, #24
 800a74e:	d110      	bne.n	800a772 <HAL_RCC_OscConfig+0x5e>
 800a750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a752:	f003 0303 	and.w	r3, r3, #3
 800a756:	2b02      	cmp	r3, #2
 800a758:	d10b      	bne.n	800a772 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a75a:	4b7f      	ldr	r3, [pc, #508]	; (800a958 <HAL_RCC_OscConfig+0x244>)
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a762:	2b00      	cmp	r3, #0
 800a764:	d06c      	beq.n	800a840 <HAL_RCC_OscConfig+0x12c>
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	685b      	ldr	r3, [r3, #4]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d168      	bne.n	800a840 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a76e:	2301      	movs	r3, #1
 800a770:	e377      	b.n	800ae62 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	685b      	ldr	r3, [r3, #4]
 800a776:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a77a:	d106      	bne.n	800a78a <HAL_RCC_OscConfig+0x76>
 800a77c:	4b76      	ldr	r3, [pc, #472]	; (800a958 <HAL_RCC_OscConfig+0x244>)
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	4a75      	ldr	r2, [pc, #468]	; (800a958 <HAL_RCC_OscConfig+0x244>)
 800a782:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a786:	6013      	str	r3, [r2, #0]
 800a788:	e02e      	b.n	800a7e8 <HAL_RCC_OscConfig+0xd4>
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	685b      	ldr	r3, [r3, #4]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d10c      	bne.n	800a7ac <HAL_RCC_OscConfig+0x98>
 800a792:	4b71      	ldr	r3, [pc, #452]	; (800a958 <HAL_RCC_OscConfig+0x244>)
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	4a70      	ldr	r2, [pc, #448]	; (800a958 <HAL_RCC_OscConfig+0x244>)
 800a798:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a79c:	6013      	str	r3, [r2, #0]
 800a79e:	4b6e      	ldr	r3, [pc, #440]	; (800a958 <HAL_RCC_OscConfig+0x244>)
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	4a6d      	ldr	r2, [pc, #436]	; (800a958 <HAL_RCC_OscConfig+0x244>)
 800a7a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a7a8:	6013      	str	r3, [r2, #0]
 800a7aa:	e01d      	b.n	800a7e8 <HAL_RCC_OscConfig+0xd4>
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	685b      	ldr	r3, [r3, #4]
 800a7b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a7b4:	d10c      	bne.n	800a7d0 <HAL_RCC_OscConfig+0xbc>
 800a7b6:	4b68      	ldr	r3, [pc, #416]	; (800a958 <HAL_RCC_OscConfig+0x244>)
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	4a67      	ldr	r2, [pc, #412]	; (800a958 <HAL_RCC_OscConfig+0x244>)
 800a7bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a7c0:	6013      	str	r3, [r2, #0]
 800a7c2:	4b65      	ldr	r3, [pc, #404]	; (800a958 <HAL_RCC_OscConfig+0x244>)
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	4a64      	ldr	r2, [pc, #400]	; (800a958 <HAL_RCC_OscConfig+0x244>)
 800a7c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a7cc:	6013      	str	r3, [r2, #0]
 800a7ce:	e00b      	b.n	800a7e8 <HAL_RCC_OscConfig+0xd4>
 800a7d0:	4b61      	ldr	r3, [pc, #388]	; (800a958 <HAL_RCC_OscConfig+0x244>)
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	4a60      	ldr	r2, [pc, #384]	; (800a958 <HAL_RCC_OscConfig+0x244>)
 800a7d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a7da:	6013      	str	r3, [r2, #0]
 800a7dc:	4b5e      	ldr	r3, [pc, #376]	; (800a958 <HAL_RCC_OscConfig+0x244>)
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	4a5d      	ldr	r2, [pc, #372]	; (800a958 <HAL_RCC_OscConfig+0x244>)
 800a7e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a7e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	685b      	ldr	r3, [r3, #4]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d013      	beq.n	800a818 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a7f0:	f7fc fb3c 	bl	8006e6c <HAL_GetTick>
 800a7f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a7f6:	e008      	b.n	800a80a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a7f8:	f7fc fb38 	bl	8006e6c <HAL_GetTick>
 800a7fc:	4602      	mov	r2, r0
 800a7fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a800:	1ad3      	subs	r3, r2, r3
 800a802:	2b64      	cmp	r3, #100	; 0x64
 800a804:	d901      	bls.n	800a80a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a806:	2303      	movs	r3, #3
 800a808:	e32b      	b.n	800ae62 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a80a:	4b53      	ldr	r3, [pc, #332]	; (800a958 <HAL_RCC_OscConfig+0x244>)
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a812:	2b00      	cmp	r3, #0
 800a814:	d0f0      	beq.n	800a7f8 <HAL_RCC_OscConfig+0xe4>
 800a816:	e014      	b.n	800a842 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a818:	f7fc fb28 	bl	8006e6c <HAL_GetTick>
 800a81c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a81e:	e008      	b.n	800a832 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a820:	f7fc fb24 	bl	8006e6c <HAL_GetTick>
 800a824:	4602      	mov	r2, r0
 800a826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a828:	1ad3      	subs	r3, r2, r3
 800a82a:	2b64      	cmp	r3, #100	; 0x64
 800a82c:	d901      	bls.n	800a832 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a82e:	2303      	movs	r3, #3
 800a830:	e317      	b.n	800ae62 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a832:	4b49      	ldr	r3, [pc, #292]	; (800a958 <HAL_RCC_OscConfig+0x244>)
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d1f0      	bne.n	800a820 <HAL_RCC_OscConfig+0x10c>
 800a83e:	e000      	b.n	800a842 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a840:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	f003 0302 	and.w	r3, r3, #2
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	f000 808c 	beq.w	800a968 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a850:	4b41      	ldr	r3, [pc, #260]	; (800a958 <HAL_RCC_OscConfig+0x244>)
 800a852:	691b      	ldr	r3, [r3, #16]
 800a854:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a858:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a85a:	4b3f      	ldr	r3, [pc, #252]	; (800a958 <HAL_RCC_OscConfig+0x244>)
 800a85c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a85e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a860:	6a3b      	ldr	r3, [r7, #32]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d007      	beq.n	800a876 <HAL_RCC_OscConfig+0x162>
 800a866:	6a3b      	ldr	r3, [r7, #32]
 800a868:	2b18      	cmp	r3, #24
 800a86a:	d137      	bne.n	800a8dc <HAL_RCC_OscConfig+0x1c8>
 800a86c:	69fb      	ldr	r3, [r7, #28]
 800a86e:	f003 0303 	and.w	r3, r3, #3
 800a872:	2b00      	cmp	r3, #0
 800a874:	d132      	bne.n	800a8dc <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a876:	4b38      	ldr	r3, [pc, #224]	; (800a958 <HAL_RCC_OscConfig+0x244>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	f003 0304 	and.w	r3, r3, #4
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d005      	beq.n	800a88e <HAL_RCC_OscConfig+0x17a>
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	68db      	ldr	r3, [r3, #12]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d101      	bne.n	800a88e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800a88a:	2301      	movs	r3, #1
 800a88c:	e2e9      	b.n	800ae62 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a88e:	4b32      	ldr	r3, [pc, #200]	; (800a958 <HAL_RCC_OscConfig+0x244>)
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	f023 0219 	bic.w	r2, r3, #25
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	68db      	ldr	r3, [r3, #12]
 800a89a:	492f      	ldr	r1, [pc, #188]	; (800a958 <HAL_RCC_OscConfig+0x244>)
 800a89c:	4313      	orrs	r3, r2
 800a89e:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a8a0:	f7fc fae4 	bl	8006e6c <HAL_GetTick>
 800a8a4:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a8a6:	e008      	b.n	800a8ba <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a8a8:	f7fc fae0 	bl	8006e6c <HAL_GetTick>
 800a8ac:	4602      	mov	r2, r0
 800a8ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8b0:	1ad3      	subs	r3, r2, r3
 800a8b2:	2b02      	cmp	r3, #2
 800a8b4:	d901      	bls.n	800a8ba <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 800a8b6:	2303      	movs	r3, #3
 800a8b8:	e2d3      	b.n	800ae62 <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a8ba:	4b27      	ldr	r3, [pc, #156]	; (800a958 <HAL_RCC_OscConfig+0x244>)
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	f003 0304 	and.w	r3, r3, #4
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d0f0      	beq.n	800a8a8 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a8c6:	4b24      	ldr	r3, [pc, #144]	; (800a958 <HAL_RCC_OscConfig+0x244>)
 800a8c8:	685b      	ldr	r3, [r3, #4]
 800a8ca:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	691b      	ldr	r3, [r3, #16]
 800a8d2:	061b      	lsls	r3, r3, #24
 800a8d4:	4920      	ldr	r1, [pc, #128]	; (800a958 <HAL_RCC_OscConfig+0x244>)
 800a8d6:	4313      	orrs	r3, r2
 800a8d8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a8da:	e045      	b.n	800a968 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	68db      	ldr	r3, [r3, #12]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d026      	beq.n	800a932 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a8e4:	4b1c      	ldr	r3, [pc, #112]	; (800a958 <HAL_RCC_OscConfig+0x244>)
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	f023 0219 	bic.w	r2, r3, #25
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	68db      	ldr	r3, [r3, #12]
 800a8f0:	4919      	ldr	r1, [pc, #100]	; (800a958 <HAL_RCC_OscConfig+0x244>)
 800a8f2:	4313      	orrs	r3, r2
 800a8f4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a8f6:	f7fc fab9 	bl	8006e6c <HAL_GetTick>
 800a8fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a8fc:	e008      	b.n	800a910 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a8fe:	f7fc fab5 	bl	8006e6c <HAL_GetTick>
 800a902:	4602      	mov	r2, r0
 800a904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a906:	1ad3      	subs	r3, r2, r3
 800a908:	2b02      	cmp	r3, #2
 800a90a:	d901      	bls.n	800a910 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800a90c:	2303      	movs	r3, #3
 800a90e:	e2a8      	b.n	800ae62 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a910:	4b11      	ldr	r3, [pc, #68]	; (800a958 <HAL_RCC_OscConfig+0x244>)
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	f003 0304 	and.w	r3, r3, #4
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d0f0      	beq.n	800a8fe <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a91c:	4b0e      	ldr	r3, [pc, #56]	; (800a958 <HAL_RCC_OscConfig+0x244>)
 800a91e:	685b      	ldr	r3, [r3, #4]
 800a920:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	691b      	ldr	r3, [r3, #16]
 800a928:	061b      	lsls	r3, r3, #24
 800a92a:	490b      	ldr	r1, [pc, #44]	; (800a958 <HAL_RCC_OscConfig+0x244>)
 800a92c:	4313      	orrs	r3, r2
 800a92e:	604b      	str	r3, [r1, #4]
 800a930:	e01a      	b.n	800a968 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a932:	4b09      	ldr	r3, [pc, #36]	; (800a958 <HAL_RCC_OscConfig+0x244>)
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	4a08      	ldr	r2, [pc, #32]	; (800a958 <HAL_RCC_OscConfig+0x244>)
 800a938:	f023 0301 	bic.w	r3, r3, #1
 800a93c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a93e:	f7fc fa95 	bl	8006e6c <HAL_GetTick>
 800a942:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a944:	e00a      	b.n	800a95c <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a946:	f7fc fa91 	bl	8006e6c <HAL_GetTick>
 800a94a:	4602      	mov	r2, r0
 800a94c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a94e:	1ad3      	subs	r3, r2, r3
 800a950:	2b02      	cmp	r3, #2
 800a952:	d903      	bls.n	800a95c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800a954:	2303      	movs	r3, #3
 800a956:	e284      	b.n	800ae62 <HAL_RCC_OscConfig+0x74e>
 800a958:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a95c:	4b96      	ldr	r3, [pc, #600]	; (800abb8 <HAL_RCC_OscConfig+0x4a4>)
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	f003 0304 	and.w	r3, r3, #4
 800a964:	2b00      	cmp	r3, #0
 800a966:	d1ee      	bne.n	800a946 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	f003 0310 	and.w	r3, r3, #16
 800a970:	2b00      	cmp	r3, #0
 800a972:	d06a      	beq.n	800aa4a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a974:	4b90      	ldr	r3, [pc, #576]	; (800abb8 <HAL_RCC_OscConfig+0x4a4>)
 800a976:	691b      	ldr	r3, [r3, #16]
 800a978:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a97c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a97e:	4b8e      	ldr	r3, [pc, #568]	; (800abb8 <HAL_RCC_OscConfig+0x4a4>)
 800a980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a982:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a984:	69bb      	ldr	r3, [r7, #24]
 800a986:	2b08      	cmp	r3, #8
 800a988:	d007      	beq.n	800a99a <HAL_RCC_OscConfig+0x286>
 800a98a:	69bb      	ldr	r3, [r7, #24]
 800a98c:	2b18      	cmp	r3, #24
 800a98e:	d11b      	bne.n	800a9c8 <HAL_RCC_OscConfig+0x2b4>
 800a990:	697b      	ldr	r3, [r7, #20]
 800a992:	f003 0303 	and.w	r3, r3, #3
 800a996:	2b01      	cmp	r3, #1
 800a998:	d116      	bne.n	800a9c8 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a99a:	4b87      	ldr	r3, [pc, #540]	; (800abb8 <HAL_RCC_OscConfig+0x4a4>)
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d005      	beq.n	800a9b2 <HAL_RCC_OscConfig+0x29e>
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	69db      	ldr	r3, [r3, #28]
 800a9aa:	2b80      	cmp	r3, #128	; 0x80
 800a9ac:	d001      	beq.n	800a9b2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800a9ae:	2301      	movs	r3, #1
 800a9b0:	e257      	b.n	800ae62 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a9b2:	4b81      	ldr	r3, [pc, #516]	; (800abb8 <HAL_RCC_OscConfig+0x4a4>)
 800a9b4:	68db      	ldr	r3, [r3, #12]
 800a9b6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	6a1b      	ldr	r3, [r3, #32]
 800a9be:	061b      	lsls	r3, r3, #24
 800a9c0:	497d      	ldr	r1, [pc, #500]	; (800abb8 <HAL_RCC_OscConfig+0x4a4>)
 800a9c2:	4313      	orrs	r3, r2
 800a9c4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a9c6:	e040      	b.n	800aa4a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	69db      	ldr	r3, [r3, #28]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d023      	beq.n	800aa18 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a9d0:	4b79      	ldr	r3, [pc, #484]	; (800abb8 <HAL_RCC_OscConfig+0x4a4>)
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	4a78      	ldr	r2, [pc, #480]	; (800abb8 <HAL_RCC_OscConfig+0x4a4>)
 800a9d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9dc:	f7fc fa46 	bl	8006e6c <HAL_GetTick>
 800a9e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a9e2:	e008      	b.n	800a9f6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800a9e4:	f7fc fa42 	bl	8006e6c <HAL_GetTick>
 800a9e8:	4602      	mov	r2, r0
 800a9ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ec:	1ad3      	subs	r3, r2, r3
 800a9ee:	2b02      	cmp	r3, #2
 800a9f0:	d901      	bls.n	800a9f6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800a9f2:	2303      	movs	r3, #3
 800a9f4:	e235      	b.n	800ae62 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a9f6:	4b70      	ldr	r3, [pc, #448]	; (800abb8 <HAL_RCC_OscConfig+0x4a4>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d0f0      	beq.n	800a9e4 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800aa02:	4b6d      	ldr	r3, [pc, #436]	; (800abb8 <HAL_RCC_OscConfig+0x4a4>)
 800aa04:	68db      	ldr	r3, [r3, #12]
 800aa06:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	6a1b      	ldr	r3, [r3, #32]
 800aa0e:	061b      	lsls	r3, r3, #24
 800aa10:	4969      	ldr	r1, [pc, #420]	; (800abb8 <HAL_RCC_OscConfig+0x4a4>)
 800aa12:	4313      	orrs	r3, r2
 800aa14:	60cb      	str	r3, [r1, #12]
 800aa16:	e018      	b.n	800aa4a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800aa18:	4b67      	ldr	r3, [pc, #412]	; (800abb8 <HAL_RCC_OscConfig+0x4a4>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	4a66      	ldr	r2, [pc, #408]	; (800abb8 <HAL_RCC_OscConfig+0x4a4>)
 800aa1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aa22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa24:	f7fc fa22 	bl	8006e6c <HAL_GetTick>
 800aa28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800aa2a:	e008      	b.n	800aa3e <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800aa2c:	f7fc fa1e 	bl	8006e6c <HAL_GetTick>
 800aa30:	4602      	mov	r2, r0
 800aa32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa34:	1ad3      	subs	r3, r2, r3
 800aa36:	2b02      	cmp	r3, #2
 800aa38:	d901      	bls.n	800aa3e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800aa3a:	2303      	movs	r3, #3
 800aa3c:	e211      	b.n	800ae62 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800aa3e:	4b5e      	ldr	r3, [pc, #376]	; (800abb8 <HAL_RCC_OscConfig+0x4a4>)
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d1f0      	bne.n	800aa2c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	f003 0308 	and.w	r3, r3, #8
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d036      	beq.n	800aac4 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	695b      	ldr	r3, [r3, #20]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d019      	beq.n	800aa92 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800aa5e:	4b56      	ldr	r3, [pc, #344]	; (800abb8 <HAL_RCC_OscConfig+0x4a4>)
 800aa60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa62:	4a55      	ldr	r2, [pc, #340]	; (800abb8 <HAL_RCC_OscConfig+0x4a4>)
 800aa64:	f043 0301 	orr.w	r3, r3, #1
 800aa68:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aa6a:	f7fc f9ff 	bl	8006e6c <HAL_GetTick>
 800aa6e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800aa70:	e008      	b.n	800aa84 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800aa72:	f7fc f9fb 	bl	8006e6c <HAL_GetTick>
 800aa76:	4602      	mov	r2, r0
 800aa78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa7a:	1ad3      	subs	r3, r2, r3
 800aa7c:	2b02      	cmp	r3, #2
 800aa7e:	d901      	bls.n	800aa84 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800aa80:	2303      	movs	r3, #3
 800aa82:	e1ee      	b.n	800ae62 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800aa84:	4b4c      	ldr	r3, [pc, #304]	; (800abb8 <HAL_RCC_OscConfig+0x4a4>)
 800aa86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa88:	f003 0302 	and.w	r3, r3, #2
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d0f0      	beq.n	800aa72 <HAL_RCC_OscConfig+0x35e>
 800aa90:	e018      	b.n	800aac4 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800aa92:	4b49      	ldr	r3, [pc, #292]	; (800abb8 <HAL_RCC_OscConfig+0x4a4>)
 800aa94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa96:	4a48      	ldr	r2, [pc, #288]	; (800abb8 <HAL_RCC_OscConfig+0x4a4>)
 800aa98:	f023 0301 	bic.w	r3, r3, #1
 800aa9c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aa9e:	f7fc f9e5 	bl	8006e6c <HAL_GetTick>
 800aaa2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800aaa4:	e008      	b.n	800aab8 <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800aaa6:	f7fc f9e1 	bl	8006e6c <HAL_GetTick>
 800aaaa:	4602      	mov	r2, r0
 800aaac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaae:	1ad3      	subs	r3, r2, r3
 800aab0:	2b02      	cmp	r3, #2
 800aab2:	d901      	bls.n	800aab8 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800aab4:	2303      	movs	r3, #3
 800aab6:	e1d4      	b.n	800ae62 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800aab8:	4b3f      	ldr	r3, [pc, #252]	; (800abb8 <HAL_RCC_OscConfig+0x4a4>)
 800aaba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aabc:	f003 0302 	and.w	r3, r3, #2
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d1f0      	bne.n	800aaa6 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	f003 0320 	and.w	r3, r3, #32
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d036      	beq.n	800ab3e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	699b      	ldr	r3, [r3, #24]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d019      	beq.n	800ab0c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800aad8:	4b37      	ldr	r3, [pc, #220]	; (800abb8 <HAL_RCC_OscConfig+0x4a4>)
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	4a36      	ldr	r2, [pc, #216]	; (800abb8 <HAL_RCC_OscConfig+0x4a4>)
 800aade:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800aae2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800aae4:	f7fc f9c2 	bl	8006e6c <HAL_GetTick>
 800aae8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800aaea:	e008      	b.n	800aafe <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800aaec:	f7fc f9be 	bl	8006e6c <HAL_GetTick>
 800aaf0:	4602      	mov	r2, r0
 800aaf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaf4:	1ad3      	subs	r3, r2, r3
 800aaf6:	2b02      	cmp	r3, #2
 800aaf8:	d901      	bls.n	800aafe <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800aafa:	2303      	movs	r3, #3
 800aafc:	e1b1      	b.n	800ae62 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800aafe:	4b2e      	ldr	r3, [pc, #184]	; (800abb8 <HAL_RCC_OscConfig+0x4a4>)
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d0f0      	beq.n	800aaec <HAL_RCC_OscConfig+0x3d8>
 800ab0a:	e018      	b.n	800ab3e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800ab0c:	4b2a      	ldr	r3, [pc, #168]	; (800abb8 <HAL_RCC_OscConfig+0x4a4>)
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	4a29      	ldr	r2, [pc, #164]	; (800abb8 <HAL_RCC_OscConfig+0x4a4>)
 800ab12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ab16:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800ab18:	f7fc f9a8 	bl	8006e6c <HAL_GetTick>
 800ab1c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ab1e:	e008      	b.n	800ab32 <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800ab20:	f7fc f9a4 	bl	8006e6c <HAL_GetTick>
 800ab24:	4602      	mov	r2, r0
 800ab26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab28:	1ad3      	subs	r3, r2, r3
 800ab2a:	2b02      	cmp	r3, #2
 800ab2c:	d901      	bls.n	800ab32 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800ab2e:	2303      	movs	r3, #3
 800ab30:	e197      	b.n	800ae62 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ab32:	4b21      	ldr	r3, [pc, #132]	; (800abb8 <HAL_RCC_OscConfig+0x4a4>)
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d1f0      	bne.n	800ab20 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	f003 0304 	and.w	r3, r3, #4
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	f000 8086 	beq.w	800ac58 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800ab4c:	4b1b      	ldr	r3, [pc, #108]	; (800abbc <HAL_RCC_OscConfig+0x4a8>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	4a1a      	ldr	r2, [pc, #104]	; (800abbc <HAL_RCC_OscConfig+0x4a8>)
 800ab52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab56:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ab58:	f7fc f988 	bl	8006e6c <HAL_GetTick>
 800ab5c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ab5e:	e008      	b.n	800ab72 <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800ab60:	f7fc f984 	bl	8006e6c <HAL_GetTick>
 800ab64:	4602      	mov	r2, r0
 800ab66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab68:	1ad3      	subs	r3, r2, r3
 800ab6a:	2b64      	cmp	r3, #100	; 0x64
 800ab6c:	d901      	bls.n	800ab72 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800ab6e:	2303      	movs	r3, #3
 800ab70:	e177      	b.n	800ae62 <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ab72:	4b12      	ldr	r3, [pc, #72]	; (800abbc <HAL_RCC_OscConfig+0x4a8>)
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d0f0      	beq.n	800ab60 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	689b      	ldr	r3, [r3, #8]
 800ab82:	2b01      	cmp	r3, #1
 800ab84:	d106      	bne.n	800ab94 <HAL_RCC_OscConfig+0x480>
 800ab86:	4b0c      	ldr	r3, [pc, #48]	; (800abb8 <HAL_RCC_OscConfig+0x4a4>)
 800ab88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab8a:	4a0b      	ldr	r2, [pc, #44]	; (800abb8 <HAL_RCC_OscConfig+0x4a4>)
 800ab8c:	f043 0301 	orr.w	r3, r3, #1
 800ab90:	6713      	str	r3, [r2, #112]	; 0x70
 800ab92:	e032      	b.n	800abfa <HAL_RCC_OscConfig+0x4e6>
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	689b      	ldr	r3, [r3, #8]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d111      	bne.n	800abc0 <HAL_RCC_OscConfig+0x4ac>
 800ab9c:	4b06      	ldr	r3, [pc, #24]	; (800abb8 <HAL_RCC_OscConfig+0x4a4>)
 800ab9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aba0:	4a05      	ldr	r2, [pc, #20]	; (800abb8 <HAL_RCC_OscConfig+0x4a4>)
 800aba2:	f023 0301 	bic.w	r3, r3, #1
 800aba6:	6713      	str	r3, [r2, #112]	; 0x70
 800aba8:	4b03      	ldr	r3, [pc, #12]	; (800abb8 <HAL_RCC_OscConfig+0x4a4>)
 800abaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abac:	4a02      	ldr	r2, [pc, #8]	; (800abb8 <HAL_RCC_OscConfig+0x4a4>)
 800abae:	f023 0304 	bic.w	r3, r3, #4
 800abb2:	6713      	str	r3, [r2, #112]	; 0x70
 800abb4:	e021      	b.n	800abfa <HAL_RCC_OscConfig+0x4e6>
 800abb6:	bf00      	nop
 800abb8:	58024400 	.word	0x58024400
 800abbc:	58024800 	.word	0x58024800
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	689b      	ldr	r3, [r3, #8]
 800abc4:	2b05      	cmp	r3, #5
 800abc6:	d10c      	bne.n	800abe2 <HAL_RCC_OscConfig+0x4ce>
 800abc8:	4b83      	ldr	r3, [pc, #524]	; (800add8 <HAL_RCC_OscConfig+0x6c4>)
 800abca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abcc:	4a82      	ldr	r2, [pc, #520]	; (800add8 <HAL_RCC_OscConfig+0x6c4>)
 800abce:	f043 0304 	orr.w	r3, r3, #4
 800abd2:	6713      	str	r3, [r2, #112]	; 0x70
 800abd4:	4b80      	ldr	r3, [pc, #512]	; (800add8 <HAL_RCC_OscConfig+0x6c4>)
 800abd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abd8:	4a7f      	ldr	r2, [pc, #508]	; (800add8 <HAL_RCC_OscConfig+0x6c4>)
 800abda:	f043 0301 	orr.w	r3, r3, #1
 800abde:	6713      	str	r3, [r2, #112]	; 0x70
 800abe0:	e00b      	b.n	800abfa <HAL_RCC_OscConfig+0x4e6>
 800abe2:	4b7d      	ldr	r3, [pc, #500]	; (800add8 <HAL_RCC_OscConfig+0x6c4>)
 800abe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abe6:	4a7c      	ldr	r2, [pc, #496]	; (800add8 <HAL_RCC_OscConfig+0x6c4>)
 800abe8:	f023 0301 	bic.w	r3, r3, #1
 800abec:	6713      	str	r3, [r2, #112]	; 0x70
 800abee:	4b7a      	ldr	r3, [pc, #488]	; (800add8 <HAL_RCC_OscConfig+0x6c4>)
 800abf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abf2:	4a79      	ldr	r2, [pc, #484]	; (800add8 <HAL_RCC_OscConfig+0x6c4>)
 800abf4:	f023 0304 	bic.w	r3, r3, #4
 800abf8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	689b      	ldr	r3, [r3, #8]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d015      	beq.n	800ac2e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac02:	f7fc f933 	bl	8006e6c <HAL_GetTick>
 800ac06:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ac08:	e00a      	b.n	800ac20 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ac0a:	f7fc f92f 	bl	8006e6c <HAL_GetTick>
 800ac0e:	4602      	mov	r2, r0
 800ac10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac12:	1ad3      	subs	r3, r2, r3
 800ac14:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac18:	4293      	cmp	r3, r2
 800ac1a:	d901      	bls.n	800ac20 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800ac1c:	2303      	movs	r3, #3
 800ac1e:	e120      	b.n	800ae62 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ac20:	4b6d      	ldr	r3, [pc, #436]	; (800add8 <HAL_RCC_OscConfig+0x6c4>)
 800ac22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac24:	f003 0302 	and.w	r3, r3, #2
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d0ee      	beq.n	800ac0a <HAL_RCC_OscConfig+0x4f6>
 800ac2c:	e014      	b.n	800ac58 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac2e:	f7fc f91d 	bl	8006e6c <HAL_GetTick>
 800ac32:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ac34:	e00a      	b.n	800ac4c <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ac36:	f7fc f919 	bl	8006e6c <HAL_GetTick>
 800ac3a:	4602      	mov	r2, r0
 800ac3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac3e:	1ad3      	subs	r3, r2, r3
 800ac40:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac44:	4293      	cmp	r3, r2
 800ac46:	d901      	bls.n	800ac4c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800ac48:	2303      	movs	r3, #3
 800ac4a:	e10a      	b.n	800ae62 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ac4c:	4b62      	ldr	r3, [pc, #392]	; (800add8 <HAL_RCC_OscConfig+0x6c4>)
 800ac4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac50:	f003 0302 	and.w	r3, r3, #2
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d1ee      	bne.n	800ac36 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	f000 80ff 	beq.w	800ae60 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800ac62:	4b5d      	ldr	r3, [pc, #372]	; (800add8 <HAL_RCC_OscConfig+0x6c4>)
 800ac64:	691b      	ldr	r3, [r3, #16]
 800ac66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ac6a:	2b18      	cmp	r3, #24
 800ac6c:	f000 80ba 	beq.w	800ade4 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac74:	2b02      	cmp	r3, #2
 800ac76:	f040 8095 	bne.w	800ada4 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ac7a:	4b57      	ldr	r3, [pc, #348]	; (800add8 <HAL_RCC_OscConfig+0x6c4>)
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	4a56      	ldr	r2, [pc, #344]	; (800add8 <HAL_RCC_OscConfig+0x6c4>)
 800ac80:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ac84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac86:	f7fc f8f1 	bl	8006e6c <HAL_GetTick>
 800ac8a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ac8c:	e008      	b.n	800aca0 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ac8e:	f7fc f8ed 	bl	8006e6c <HAL_GetTick>
 800ac92:	4602      	mov	r2, r0
 800ac94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac96:	1ad3      	subs	r3, r2, r3
 800ac98:	2b02      	cmp	r3, #2
 800ac9a:	d901      	bls.n	800aca0 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800ac9c:	2303      	movs	r3, #3
 800ac9e:	e0e0      	b.n	800ae62 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800aca0:	4b4d      	ldr	r3, [pc, #308]	; (800add8 <HAL_RCC_OscConfig+0x6c4>)
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d1f0      	bne.n	800ac8e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800acac:	4b4a      	ldr	r3, [pc, #296]	; (800add8 <HAL_RCC_OscConfig+0x6c4>)
 800acae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800acb0:	4b4a      	ldr	r3, [pc, #296]	; (800addc <HAL_RCC_OscConfig+0x6c8>)
 800acb2:	4013      	ands	r3, r2
 800acb4:	687a      	ldr	r2, [r7, #4]
 800acb6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800acb8:	687a      	ldr	r2, [r7, #4]
 800acba:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800acbc:	0112      	lsls	r2, r2, #4
 800acbe:	430a      	orrs	r2, r1
 800acc0:	4945      	ldr	r1, [pc, #276]	; (800add8 <HAL_RCC_OscConfig+0x6c4>)
 800acc2:	4313      	orrs	r3, r2
 800acc4:	628b      	str	r3, [r1, #40]	; 0x28
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acca:	3b01      	subs	r3, #1
 800accc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acd4:	3b01      	subs	r3, #1
 800acd6:	025b      	lsls	r3, r3, #9
 800acd8:	b29b      	uxth	r3, r3
 800acda:	431a      	orrs	r2, r3
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ace0:	3b01      	subs	r3, #1
 800ace2:	041b      	lsls	r3, r3, #16
 800ace4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ace8:	431a      	orrs	r2, r3
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acee:	3b01      	subs	r3, #1
 800acf0:	061b      	lsls	r3, r3, #24
 800acf2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800acf6:	4938      	ldr	r1, [pc, #224]	; (800add8 <HAL_RCC_OscConfig+0x6c4>)
 800acf8:	4313      	orrs	r3, r2
 800acfa:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800acfc:	4b36      	ldr	r3, [pc, #216]	; (800add8 <HAL_RCC_OscConfig+0x6c4>)
 800acfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad00:	4a35      	ldr	r2, [pc, #212]	; (800add8 <HAL_RCC_OscConfig+0x6c4>)
 800ad02:	f023 0301 	bic.w	r3, r3, #1
 800ad06:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800ad08:	4b33      	ldr	r3, [pc, #204]	; (800add8 <HAL_RCC_OscConfig+0x6c4>)
 800ad0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ad0c:	4b34      	ldr	r3, [pc, #208]	; (800ade0 <HAL_RCC_OscConfig+0x6cc>)
 800ad0e:	4013      	ands	r3, r2
 800ad10:	687a      	ldr	r2, [r7, #4]
 800ad12:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800ad14:	00d2      	lsls	r2, r2, #3
 800ad16:	4930      	ldr	r1, [pc, #192]	; (800add8 <HAL_RCC_OscConfig+0x6c4>)
 800ad18:	4313      	orrs	r3, r2
 800ad1a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800ad1c:	4b2e      	ldr	r3, [pc, #184]	; (800add8 <HAL_RCC_OscConfig+0x6c4>)
 800ad1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad20:	f023 020c 	bic.w	r2, r3, #12
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad28:	492b      	ldr	r1, [pc, #172]	; (800add8 <HAL_RCC_OscConfig+0x6c4>)
 800ad2a:	4313      	orrs	r3, r2
 800ad2c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800ad2e:	4b2a      	ldr	r3, [pc, #168]	; (800add8 <HAL_RCC_OscConfig+0x6c4>)
 800ad30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad32:	f023 0202 	bic.w	r2, r3, #2
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad3a:	4927      	ldr	r1, [pc, #156]	; (800add8 <HAL_RCC_OscConfig+0x6c4>)
 800ad3c:	4313      	orrs	r3, r2
 800ad3e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800ad40:	4b25      	ldr	r3, [pc, #148]	; (800add8 <HAL_RCC_OscConfig+0x6c4>)
 800ad42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad44:	4a24      	ldr	r2, [pc, #144]	; (800add8 <HAL_RCC_OscConfig+0x6c4>)
 800ad46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ad4a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad4c:	4b22      	ldr	r3, [pc, #136]	; (800add8 <HAL_RCC_OscConfig+0x6c4>)
 800ad4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad50:	4a21      	ldr	r2, [pc, #132]	; (800add8 <HAL_RCC_OscConfig+0x6c4>)
 800ad52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800ad58:	4b1f      	ldr	r3, [pc, #124]	; (800add8 <HAL_RCC_OscConfig+0x6c4>)
 800ad5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad5c:	4a1e      	ldr	r2, [pc, #120]	; (800add8 <HAL_RCC_OscConfig+0x6c4>)
 800ad5e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ad62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800ad64:	4b1c      	ldr	r3, [pc, #112]	; (800add8 <HAL_RCC_OscConfig+0x6c4>)
 800ad66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad68:	4a1b      	ldr	r2, [pc, #108]	; (800add8 <HAL_RCC_OscConfig+0x6c4>)
 800ad6a:	f043 0301 	orr.w	r3, r3, #1
 800ad6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ad70:	4b19      	ldr	r3, [pc, #100]	; (800add8 <HAL_RCC_OscConfig+0x6c4>)
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	4a18      	ldr	r2, [pc, #96]	; (800add8 <HAL_RCC_OscConfig+0x6c4>)
 800ad76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ad7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad7c:	f7fc f876 	bl	8006e6c <HAL_GetTick>
 800ad80:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ad82:	e008      	b.n	800ad96 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ad84:	f7fc f872 	bl	8006e6c <HAL_GetTick>
 800ad88:	4602      	mov	r2, r0
 800ad8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad8c:	1ad3      	subs	r3, r2, r3
 800ad8e:	2b02      	cmp	r3, #2
 800ad90:	d901      	bls.n	800ad96 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800ad92:	2303      	movs	r3, #3
 800ad94:	e065      	b.n	800ae62 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ad96:	4b10      	ldr	r3, [pc, #64]	; (800add8 <HAL_RCC_OscConfig+0x6c4>)
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d0f0      	beq.n	800ad84 <HAL_RCC_OscConfig+0x670>
 800ada2:	e05d      	b.n	800ae60 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ada4:	4b0c      	ldr	r3, [pc, #48]	; (800add8 <HAL_RCC_OscConfig+0x6c4>)
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	4a0b      	ldr	r2, [pc, #44]	; (800add8 <HAL_RCC_OscConfig+0x6c4>)
 800adaa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800adae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800adb0:	f7fc f85c 	bl	8006e6c <HAL_GetTick>
 800adb4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800adb6:	e008      	b.n	800adca <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800adb8:	f7fc f858 	bl	8006e6c <HAL_GetTick>
 800adbc:	4602      	mov	r2, r0
 800adbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adc0:	1ad3      	subs	r3, r2, r3
 800adc2:	2b02      	cmp	r3, #2
 800adc4:	d901      	bls.n	800adca <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800adc6:	2303      	movs	r3, #3
 800adc8:	e04b      	b.n	800ae62 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800adca:	4b03      	ldr	r3, [pc, #12]	; (800add8 <HAL_RCC_OscConfig+0x6c4>)
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800add2:	2b00      	cmp	r3, #0
 800add4:	d1f0      	bne.n	800adb8 <HAL_RCC_OscConfig+0x6a4>
 800add6:	e043      	b.n	800ae60 <HAL_RCC_OscConfig+0x74c>
 800add8:	58024400 	.word	0x58024400
 800addc:	fffffc0c 	.word	0xfffffc0c
 800ade0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800ade4:	4b21      	ldr	r3, [pc, #132]	; (800ae6c <HAL_RCC_OscConfig+0x758>)
 800ade6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ade8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800adea:	4b20      	ldr	r3, [pc, #128]	; (800ae6c <HAL_RCC_OscConfig+0x758>)
 800adec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adee:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adf4:	2b01      	cmp	r3, #1
 800adf6:	d031      	beq.n	800ae5c <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800adf8:	693b      	ldr	r3, [r7, #16]
 800adfa:	f003 0203 	and.w	r2, r3, #3
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ae02:	429a      	cmp	r2, r3
 800ae04:	d12a      	bne.n	800ae5c <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ae06:	693b      	ldr	r3, [r7, #16]
 800ae08:	091b      	lsrs	r3, r3, #4
 800ae0a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ae12:	429a      	cmp	r2, r3
 800ae14:	d122      	bne.n	800ae5c <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae20:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ae22:	429a      	cmp	r2, r3
 800ae24:	d11a      	bne.n	800ae5c <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	0a5b      	lsrs	r3, r3, #9
 800ae2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae32:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ae34:	429a      	cmp	r2, r3
 800ae36:	d111      	bne.n	800ae5c <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	0c1b      	lsrs	r3, r3, #16
 800ae3c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae44:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ae46:	429a      	cmp	r2, r3
 800ae48:	d108      	bne.n	800ae5c <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	0e1b      	lsrs	r3, r3, #24
 800ae4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae56:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ae58:	429a      	cmp	r2, r3
 800ae5a:	d001      	beq.n	800ae60 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800ae5c:	2301      	movs	r3, #1
 800ae5e:	e000      	b.n	800ae62 <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 800ae60:	2300      	movs	r3, #0
}
 800ae62:	4618      	mov	r0, r3
 800ae64:	3730      	adds	r7, #48	; 0x30
 800ae66:	46bd      	mov	sp, r7
 800ae68:	bd80      	pop	{r7, pc}
 800ae6a:	bf00      	nop
 800ae6c:	58024400 	.word	0x58024400

0800ae70 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b086      	sub	sp, #24
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
 800ae78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d101      	bne.n	800ae84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ae80:	2301      	movs	r3, #1
 800ae82:	e19c      	b.n	800b1be <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800ae84:	4b8a      	ldr	r3, [pc, #552]	; (800b0b0 <HAL_RCC_ClockConfig+0x240>)
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	f003 030f 	and.w	r3, r3, #15
 800ae8c:	683a      	ldr	r2, [r7, #0]
 800ae8e:	429a      	cmp	r2, r3
 800ae90:	d910      	bls.n	800aeb4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ae92:	4b87      	ldr	r3, [pc, #540]	; (800b0b0 <HAL_RCC_ClockConfig+0x240>)
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	f023 020f 	bic.w	r2, r3, #15
 800ae9a:	4985      	ldr	r1, [pc, #532]	; (800b0b0 <HAL_RCC_ClockConfig+0x240>)
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	4313      	orrs	r3, r2
 800aea0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800aea2:	4b83      	ldr	r3, [pc, #524]	; (800b0b0 <HAL_RCC_ClockConfig+0x240>)
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	f003 030f 	and.w	r3, r3, #15
 800aeaa:	683a      	ldr	r2, [r7, #0]
 800aeac:	429a      	cmp	r2, r3
 800aeae:	d001      	beq.n	800aeb4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800aeb0:	2301      	movs	r3, #1
 800aeb2:	e184      	b.n	800b1be <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	f003 0304 	and.w	r3, r3, #4
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d010      	beq.n	800aee2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	691a      	ldr	r2, [r3, #16]
 800aec4:	4b7b      	ldr	r3, [pc, #492]	; (800b0b4 <HAL_RCC_ClockConfig+0x244>)
 800aec6:	699b      	ldr	r3, [r3, #24]
 800aec8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800aecc:	429a      	cmp	r2, r3
 800aece:	d908      	bls.n	800aee2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800aed0:	4b78      	ldr	r3, [pc, #480]	; (800b0b4 <HAL_RCC_ClockConfig+0x244>)
 800aed2:	699b      	ldr	r3, [r3, #24]
 800aed4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	691b      	ldr	r3, [r3, #16]
 800aedc:	4975      	ldr	r1, [pc, #468]	; (800b0b4 <HAL_RCC_ClockConfig+0x244>)
 800aede:	4313      	orrs	r3, r2
 800aee0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	f003 0308 	and.w	r3, r3, #8
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d010      	beq.n	800af10 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	695a      	ldr	r2, [r3, #20]
 800aef2:	4b70      	ldr	r3, [pc, #448]	; (800b0b4 <HAL_RCC_ClockConfig+0x244>)
 800aef4:	69db      	ldr	r3, [r3, #28]
 800aef6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800aefa:	429a      	cmp	r2, r3
 800aefc:	d908      	bls.n	800af10 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800aefe:	4b6d      	ldr	r3, [pc, #436]	; (800b0b4 <HAL_RCC_ClockConfig+0x244>)
 800af00:	69db      	ldr	r3, [r3, #28]
 800af02:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	695b      	ldr	r3, [r3, #20]
 800af0a:	496a      	ldr	r1, [pc, #424]	; (800b0b4 <HAL_RCC_ClockConfig+0x244>)
 800af0c:	4313      	orrs	r3, r2
 800af0e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	f003 0310 	and.w	r3, r3, #16
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d010      	beq.n	800af3e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	699a      	ldr	r2, [r3, #24]
 800af20:	4b64      	ldr	r3, [pc, #400]	; (800b0b4 <HAL_RCC_ClockConfig+0x244>)
 800af22:	69db      	ldr	r3, [r3, #28]
 800af24:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800af28:	429a      	cmp	r2, r3
 800af2a:	d908      	bls.n	800af3e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800af2c:	4b61      	ldr	r3, [pc, #388]	; (800b0b4 <HAL_RCC_ClockConfig+0x244>)
 800af2e:	69db      	ldr	r3, [r3, #28]
 800af30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	699b      	ldr	r3, [r3, #24]
 800af38:	495e      	ldr	r1, [pc, #376]	; (800b0b4 <HAL_RCC_ClockConfig+0x244>)
 800af3a:	4313      	orrs	r3, r2
 800af3c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	f003 0320 	and.w	r3, r3, #32
 800af46:	2b00      	cmp	r3, #0
 800af48:	d010      	beq.n	800af6c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	69da      	ldr	r2, [r3, #28]
 800af4e:	4b59      	ldr	r3, [pc, #356]	; (800b0b4 <HAL_RCC_ClockConfig+0x244>)
 800af50:	6a1b      	ldr	r3, [r3, #32]
 800af52:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800af56:	429a      	cmp	r2, r3
 800af58:	d908      	bls.n	800af6c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800af5a:	4b56      	ldr	r3, [pc, #344]	; (800b0b4 <HAL_RCC_ClockConfig+0x244>)
 800af5c:	6a1b      	ldr	r3, [r3, #32]
 800af5e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	69db      	ldr	r3, [r3, #28]
 800af66:	4953      	ldr	r1, [pc, #332]	; (800b0b4 <HAL_RCC_ClockConfig+0x244>)
 800af68:	4313      	orrs	r3, r2
 800af6a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	f003 0302 	and.w	r3, r3, #2
 800af74:	2b00      	cmp	r3, #0
 800af76:	d010      	beq.n	800af9a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	68da      	ldr	r2, [r3, #12]
 800af7c:	4b4d      	ldr	r3, [pc, #308]	; (800b0b4 <HAL_RCC_ClockConfig+0x244>)
 800af7e:	699b      	ldr	r3, [r3, #24]
 800af80:	f003 030f 	and.w	r3, r3, #15
 800af84:	429a      	cmp	r2, r3
 800af86:	d908      	bls.n	800af9a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800af88:	4b4a      	ldr	r3, [pc, #296]	; (800b0b4 <HAL_RCC_ClockConfig+0x244>)
 800af8a:	699b      	ldr	r3, [r3, #24]
 800af8c:	f023 020f 	bic.w	r2, r3, #15
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	68db      	ldr	r3, [r3, #12]
 800af94:	4947      	ldr	r1, [pc, #284]	; (800b0b4 <HAL_RCC_ClockConfig+0x244>)
 800af96:	4313      	orrs	r3, r2
 800af98:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	f003 0301 	and.w	r3, r3, #1
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d055      	beq.n	800b052 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800afa6:	4b43      	ldr	r3, [pc, #268]	; (800b0b4 <HAL_RCC_ClockConfig+0x244>)
 800afa8:	699b      	ldr	r3, [r3, #24]
 800afaa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	689b      	ldr	r3, [r3, #8]
 800afb2:	4940      	ldr	r1, [pc, #256]	; (800b0b4 <HAL_RCC_ClockConfig+0x244>)
 800afb4:	4313      	orrs	r3, r2
 800afb6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	685b      	ldr	r3, [r3, #4]
 800afbc:	2b02      	cmp	r3, #2
 800afbe:	d107      	bne.n	800afd0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800afc0:	4b3c      	ldr	r3, [pc, #240]	; (800b0b4 <HAL_RCC_ClockConfig+0x244>)
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d121      	bne.n	800b010 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800afcc:	2301      	movs	r3, #1
 800afce:	e0f6      	b.n	800b1be <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	685b      	ldr	r3, [r3, #4]
 800afd4:	2b03      	cmp	r3, #3
 800afd6:	d107      	bne.n	800afe8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800afd8:	4b36      	ldr	r3, [pc, #216]	; (800b0b4 <HAL_RCC_ClockConfig+0x244>)
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d115      	bne.n	800b010 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800afe4:	2301      	movs	r3, #1
 800afe6:	e0ea      	b.n	800b1be <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	685b      	ldr	r3, [r3, #4]
 800afec:	2b01      	cmp	r3, #1
 800afee:	d107      	bne.n	800b000 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800aff0:	4b30      	ldr	r3, [pc, #192]	; (800b0b4 <HAL_RCC_ClockConfig+0x244>)
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d109      	bne.n	800b010 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800affc:	2301      	movs	r3, #1
 800affe:	e0de      	b.n	800b1be <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b000:	4b2c      	ldr	r3, [pc, #176]	; (800b0b4 <HAL_RCC_ClockConfig+0x244>)
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	f003 0304 	and.w	r3, r3, #4
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d101      	bne.n	800b010 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800b00c:	2301      	movs	r3, #1
 800b00e:	e0d6      	b.n	800b1be <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b010:	4b28      	ldr	r3, [pc, #160]	; (800b0b4 <HAL_RCC_ClockConfig+0x244>)
 800b012:	691b      	ldr	r3, [r3, #16]
 800b014:	f023 0207 	bic.w	r2, r3, #7
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	685b      	ldr	r3, [r3, #4]
 800b01c:	4925      	ldr	r1, [pc, #148]	; (800b0b4 <HAL_RCC_ClockConfig+0x244>)
 800b01e:	4313      	orrs	r3, r2
 800b020:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b022:	f7fb ff23 	bl	8006e6c <HAL_GetTick>
 800b026:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b028:	e00a      	b.n	800b040 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b02a:	f7fb ff1f 	bl	8006e6c <HAL_GetTick>
 800b02e:	4602      	mov	r2, r0
 800b030:	697b      	ldr	r3, [r7, #20]
 800b032:	1ad3      	subs	r3, r2, r3
 800b034:	f241 3288 	movw	r2, #5000	; 0x1388
 800b038:	4293      	cmp	r3, r2
 800b03a:	d901      	bls.n	800b040 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800b03c:	2303      	movs	r3, #3
 800b03e:	e0be      	b.n	800b1be <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b040:	4b1c      	ldr	r3, [pc, #112]	; (800b0b4 <HAL_RCC_ClockConfig+0x244>)
 800b042:	691b      	ldr	r3, [r3, #16]
 800b044:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	685b      	ldr	r3, [r3, #4]
 800b04c:	00db      	lsls	r3, r3, #3
 800b04e:	429a      	cmp	r2, r3
 800b050:	d1eb      	bne.n	800b02a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	f003 0302 	and.w	r3, r3, #2
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d010      	beq.n	800b080 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	68da      	ldr	r2, [r3, #12]
 800b062:	4b14      	ldr	r3, [pc, #80]	; (800b0b4 <HAL_RCC_ClockConfig+0x244>)
 800b064:	699b      	ldr	r3, [r3, #24]
 800b066:	f003 030f 	and.w	r3, r3, #15
 800b06a:	429a      	cmp	r2, r3
 800b06c:	d208      	bcs.n	800b080 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b06e:	4b11      	ldr	r3, [pc, #68]	; (800b0b4 <HAL_RCC_ClockConfig+0x244>)
 800b070:	699b      	ldr	r3, [r3, #24]
 800b072:	f023 020f 	bic.w	r2, r3, #15
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	68db      	ldr	r3, [r3, #12]
 800b07a:	490e      	ldr	r1, [pc, #56]	; (800b0b4 <HAL_RCC_ClockConfig+0x244>)
 800b07c:	4313      	orrs	r3, r2
 800b07e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b080:	4b0b      	ldr	r3, [pc, #44]	; (800b0b0 <HAL_RCC_ClockConfig+0x240>)
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	f003 030f 	and.w	r3, r3, #15
 800b088:	683a      	ldr	r2, [r7, #0]
 800b08a:	429a      	cmp	r2, r3
 800b08c:	d214      	bcs.n	800b0b8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b08e:	4b08      	ldr	r3, [pc, #32]	; (800b0b0 <HAL_RCC_ClockConfig+0x240>)
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	f023 020f 	bic.w	r2, r3, #15
 800b096:	4906      	ldr	r1, [pc, #24]	; (800b0b0 <HAL_RCC_ClockConfig+0x240>)
 800b098:	683b      	ldr	r3, [r7, #0]
 800b09a:	4313      	orrs	r3, r2
 800b09c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b09e:	4b04      	ldr	r3, [pc, #16]	; (800b0b0 <HAL_RCC_ClockConfig+0x240>)
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	f003 030f 	and.w	r3, r3, #15
 800b0a6:	683a      	ldr	r2, [r7, #0]
 800b0a8:	429a      	cmp	r2, r3
 800b0aa:	d005      	beq.n	800b0b8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800b0ac:	2301      	movs	r3, #1
 800b0ae:	e086      	b.n	800b1be <HAL_RCC_ClockConfig+0x34e>
 800b0b0:	52002000 	.word	0x52002000
 800b0b4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	f003 0304 	and.w	r3, r3, #4
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d010      	beq.n	800b0e6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	691a      	ldr	r2, [r3, #16]
 800b0c8:	4b3f      	ldr	r3, [pc, #252]	; (800b1c8 <HAL_RCC_ClockConfig+0x358>)
 800b0ca:	699b      	ldr	r3, [r3, #24]
 800b0cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b0d0:	429a      	cmp	r2, r3
 800b0d2:	d208      	bcs.n	800b0e6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b0d4:	4b3c      	ldr	r3, [pc, #240]	; (800b1c8 <HAL_RCC_ClockConfig+0x358>)
 800b0d6:	699b      	ldr	r3, [r3, #24]
 800b0d8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	691b      	ldr	r3, [r3, #16]
 800b0e0:	4939      	ldr	r1, [pc, #228]	; (800b1c8 <HAL_RCC_ClockConfig+0x358>)
 800b0e2:	4313      	orrs	r3, r2
 800b0e4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	f003 0308 	and.w	r3, r3, #8
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d010      	beq.n	800b114 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	695a      	ldr	r2, [r3, #20]
 800b0f6:	4b34      	ldr	r3, [pc, #208]	; (800b1c8 <HAL_RCC_ClockConfig+0x358>)
 800b0f8:	69db      	ldr	r3, [r3, #28]
 800b0fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b0fe:	429a      	cmp	r2, r3
 800b100:	d208      	bcs.n	800b114 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b102:	4b31      	ldr	r3, [pc, #196]	; (800b1c8 <HAL_RCC_ClockConfig+0x358>)
 800b104:	69db      	ldr	r3, [r3, #28]
 800b106:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	695b      	ldr	r3, [r3, #20]
 800b10e:	492e      	ldr	r1, [pc, #184]	; (800b1c8 <HAL_RCC_ClockConfig+0x358>)
 800b110:	4313      	orrs	r3, r2
 800b112:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	f003 0310 	and.w	r3, r3, #16
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d010      	beq.n	800b142 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	699a      	ldr	r2, [r3, #24]
 800b124:	4b28      	ldr	r3, [pc, #160]	; (800b1c8 <HAL_RCC_ClockConfig+0x358>)
 800b126:	69db      	ldr	r3, [r3, #28]
 800b128:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b12c:	429a      	cmp	r2, r3
 800b12e:	d208      	bcs.n	800b142 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b130:	4b25      	ldr	r3, [pc, #148]	; (800b1c8 <HAL_RCC_ClockConfig+0x358>)
 800b132:	69db      	ldr	r3, [r3, #28]
 800b134:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	699b      	ldr	r3, [r3, #24]
 800b13c:	4922      	ldr	r1, [pc, #136]	; (800b1c8 <HAL_RCC_ClockConfig+0x358>)
 800b13e:	4313      	orrs	r3, r2
 800b140:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	f003 0320 	and.w	r3, r3, #32
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d010      	beq.n	800b170 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	69da      	ldr	r2, [r3, #28]
 800b152:	4b1d      	ldr	r3, [pc, #116]	; (800b1c8 <HAL_RCC_ClockConfig+0x358>)
 800b154:	6a1b      	ldr	r3, [r3, #32]
 800b156:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b15a:	429a      	cmp	r2, r3
 800b15c:	d208      	bcs.n	800b170 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800b15e:	4b1a      	ldr	r3, [pc, #104]	; (800b1c8 <HAL_RCC_ClockConfig+0x358>)
 800b160:	6a1b      	ldr	r3, [r3, #32]
 800b162:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	69db      	ldr	r3, [r3, #28]
 800b16a:	4917      	ldr	r1, [pc, #92]	; (800b1c8 <HAL_RCC_ClockConfig+0x358>)
 800b16c:	4313      	orrs	r3, r2
 800b16e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b170:	f000 f834 	bl	800b1dc <HAL_RCC_GetSysClockFreq>
 800b174:	4602      	mov	r2, r0
 800b176:	4b14      	ldr	r3, [pc, #80]	; (800b1c8 <HAL_RCC_ClockConfig+0x358>)
 800b178:	699b      	ldr	r3, [r3, #24]
 800b17a:	0a1b      	lsrs	r3, r3, #8
 800b17c:	f003 030f 	and.w	r3, r3, #15
 800b180:	4912      	ldr	r1, [pc, #72]	; (800b1cc <HAL_RCC_ClockConfig+0x35c>)
 800b182:	5ccb      	ldrb	r3, [r1, r3]
 800b184:	f003 031f 	and.w	r3, r3, #31
 800b188:	fa22 f303 	lsr.w	r3, r2, r3
 800b18c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b18e:	4b0e      	ldr	r3, [pc, #56]	; (800b1c8 <HAL_RCC_ClockConfig+0x358>)
 800b190:	699b      	ldr	r3, [r3, #24]
 800b192:	f003 030f 	and.w	r3, r3, #15
 800b196:	4a0d      	ldr	r2, [pc, #52]	; (800b1cc <HAL_RCC_ClockConfig+0x35c>)
 800b198:	5cd3      	ldrb	r3, [r2, r3]
 800b19a:	f003 031f 	and.w	r3, r3, #31
 800b19e:	693a      	ldr	r2, [r7, #16]
 800b1a0:	fa22 f303 	lsr.w	r3, r2, r3
 800b1a4:	4a0a      	ldr	r2, [pc, #40]	; (800b1d0 <HAL_RCC_ClockConfig+0x360>)
 800b1a6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b1a8:	4a0a      	ldr	r2, [pc, #40]	; (800b1d4 <HAL_RCC_ClockConfig+0x364>)
 800b1aa:	693b      	ldr	r3, [r7, #16]
 800b1ac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800b1ae:	4b0a      	ldr	r3, [pc, #40]	; (800b1d8 <HAL_RCC_ClockConfig+0x368>)
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	f7fb fe10 	bl	8006dd8 <HAL_InitTick>
 800b1b8:	4603      	mov	r3, r0
 800b1ba:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800b1bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1be:	4618      	mov	r0, r3
 800b1c0:	3718      	adds	r7, #24
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	bd80      	pop	{r7, pc}
 800b1c6:	bf00      	nop
 800b1c8:	58024400 	.word	0x58024400
 800b1cc:	08011c58 	.word	0x08011c58
 800b1d0:	24000008 	.word	0x24000008
 800b1d4:	24000004 	.word	0x24000004
 800b1d8:	2400000c 	.word	0x2400000c

0800b1dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b1dc:	b480      	push	{r7}
 800b1de:	b089      	sub	sp, #36	; 0x24
 800b1e0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b1e2:	4bb3      	ldr	r3, [pc, #716]	; (800b4b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b1e4:	691b      	ldr	r3, [r3, #16]
 800b1e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b1ea:	2b18      	cmp	r3, #24
 800b1ec:	f200 8155 	bhi.w	800b49a <HAL_RCC_GetSysClockFreq+0x2be>
 800b1f0:	a201      	add	r2, pc, #4	; (adr r2, 800b1f8 <HAL_RCC_GetSysClockFreq+0x1c>)
 800b1f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1f6:	bf00      	nop
 800b1f8:	0800b25d 	.word	0x0800b25d
 800b1fc:	0800b49b 	.word	0x0800b49b
 800b200:	0800b49b 	.word	0x0800b49b
 800b204:	0800b49b 	.word	0x0800b49b
 800b208:	0800b49b 	.word	0x0800b49b
 800b20c:	0800b49b 	.word	0x0800b49b
 800b210:	0800b49b 	.word	0x0800b49b
 800b214:	0800b49b 	.word	0x0800b49b
 800b218:	0800b283 	.word	0x0800b283
 800b21c:	0800b49b 	.word	0x0800b49b
 800b220:	0800b49b 	.word	0x0800b49b
 800b224:	0800b49b 	.word	0x0800b49b
 800b228:	0800b49b 	.word	0x0800b49b
 800b22c:	0800b49b 	.word	0x0800b49b
 800b230:	0800b49b 	.word	0x0800b49b
 800b234:	0800b49b 	.word	0x0800b49b
 800b238:	0800b289 	.word	0x0800b289
 800b23c:	0800b49b 	.word	0x0800b49b
 800b240:	0800b49b 	.word	0x0800b49b
 800b244:	0800b49b 	.word	0x0800b49b
 800b248:	0800b49b 	.word	0x0800b49b
 800b24c:	0800b49b 	.word	0x0800b49b
 800b250:	0800b49b 	.word	0x0800b49b
 800b254:	0800b49b 	.word	0x0800b49b
 800b258:	0800b28f 	.word	0x0800b28f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b25c:	4b94      	ldr	r3, [pc, #592]	; (800b4b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	f003 0320 	and.w	r3, r3, #32
 800b264:	2b00      	cmp	r3, #0
 800b266:	d009      	beq.n	800b27c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b268:	4b91      	ldr	r3, [pc, #580]	; (800b4b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	08db      	lsrs	r3, r3, #3
 800b26e:	f003 0303 	and.w	r3, r3, #3
 800b272:	4a90      	ldr	r2, [pc, #576]	; (800b4b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b274:	fa22 f303 	lsr.w	r3, r2, r3
 800b278:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800b27a:	e111      	b.n	800b4a0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b27c:	4b8d      	ldr	r3, [pc, #564]	; (800b4b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b27e:	61bb      	str	r3, [r7, #24]
    break;
 800b280:	e10e      	b.n	800b4a0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800b282:	4b8d      	ldr	r3, [pc, #564]	; (800b4b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b284:	61bb      	str	r3, [r7, #24]
    break;
 800b286:	e10b      	b.n	800b4a0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800b288:	4b8c      	ldr	r3, [pc, #560]	; (800b4bc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800b28a:	61bb      	str	r3, [r7, #24]
    break;
 800b28c:	e108      	b.n	800b4a0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b28e:	4b88      	ldr	r3, [pc, #544]	; (800b4b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b292:	f003 0303 	and.w	r3, r3, #3
 800b296:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800b298:	4b85      	ldr	r3, [pc, #532]	; (800b4b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b29a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b29c:	091b      	lsrs	r3, r3, #4
 800b29e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b2a2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b2a4:	4b82      	ldr	r3, [pc, #520]	; (800b4b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b2a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2a8:	f003 0301 	and.w	r3, r3, #1
 800b2ac:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800b2ae:	4b80      	ldr	r3, [pc, #512]	; (800b4b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b2b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2b2:	08db      	lsrs	r3, r3, #3
 800b2b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b2b8:	68fa      	ldr	r2, [r7, #12]
 800b2ba:	fb02 f303 	mul.w	r3, r2, r3
 800b2be:	ee07 3a90 	vmov	s15, r3
 800b2c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2c6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800b2ca:	693b      	ldr	r3, [r7, #16]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	f000 80e1 	beq.w	800b494 <HAL_RCC_GetSysClockFreq+0x2b8>
 800b2d2:	697b      	ldr	r3, [r7, #20]
 800b2d4:	2b02      	cmp	r3, #2
 800b2d6:	f000 8083 	beq.w	800b3e0 <HAL_RCC_GetSysClockFreq+0x204>
 800b2da:	697b      	ldr	r3, [r7, #20]
 800b2dc:	2b02      	cmp	r3, #2
 800b2de:	f200 80a1 	bhi.w	800b424 <HAL_RCC_GetSysClockFreq+0x248>
 800b2e2:	697b      	ldr	r3, [r7, #20]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d003      	beq.n	800b2f0 <HAL_RCC_GetSysClockFreq+0x114>
 800b2e8:	697b      	ldr	r3, [r7, #20]
 800b2ea:	2b01      	cmp	r3, #1
 800b2ec:	d056      	beq.n	800b39c <HAL_RCC_GetSysClockFreq+0x1c0>
 800b2ee:	e099      	b.n	800b424 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b2f0:	4b6f      	ldr	r3, [pc, #444]	; (800b4b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	f003 0320 	and.w	r3, r3, #32
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d02d      	beq.n	800b358 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b2fc:	4b6c      	ldr	r3, [pc, #432]	; (800b4b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	08db      	lsrs	r3, r3, #3
 800b302:	f003 0303 	and.w	r3, r3, #3
 800b306:	4a6b      	ldr	r2, [pc, #428]	; (800b4b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b308:	fa22 f303 	lsr.w	r3, r2, r3
 800b30c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	ee07 3a90 	vmov	s15, r3
 800b314:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b318:	693b      	ldr	r3, [r7, #16]
 800b31a:	ee07 3a90 	vmov	s15, r3
 800b31e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b322:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b326:	4b62      	ldr	r3, [pc, #392]	; (800b4b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b32a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b32e:	ee07 3a90 	vmov	s15, r3
 800b332:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b336:	ed97 6a02 	vldr	s12, [r7, #8]
 800b33a:	eddf 5a61 	vldr	s11, [pc, #388]	; 800b4c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b33e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b342:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b346:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b34a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b34e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b352:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800b356:	e087      	b.n	800b468 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b358:	693b      	ldr	r3, [r7, #16]
 800b35a:	ee07 3a90 	vmov	s15, r3
 800b35e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b362:	eddf 6a58 	vldr	s13, [pc, #352]	; 800b4c4 <HAL_RCC_GetSysClockFreq+0x2e8>
 800b366:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b36a:	4b51      	ldr	r3, [pc, #324]	; (800b4b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b36c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b36e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b372:	ee07 3a90 	vmov	s15, r3
 800b376:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b37a:	ed97 6a02 	vldr	s12, [r7, #8]
 800b37e:	eddf 5a50 	vldr	s11, [pc, #320]	; 800b4c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b382:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b386:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b38a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b38e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b392:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b396:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b39a:	e065      	b.n	800b468 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b39c:	693b      	ldr	r3, [r7, #16]
 800b39e:	ee07 3a90 	vmov	s15, r3
 800b3a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3a6:	eddf 6a48 	vldr	s13, [pc, #288]	; 800b4c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b3aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3ae:	4b40      	ldr	r3, [pc, #256]	; (800b4b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b3b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3b6:	ee07 3a90 	vmov	s15, r3
 800b3ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3be:	ed97 6a02 	vldr	s12, [r7, #8]
 800b3c2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800b4c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b3c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b3d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b3de:	e043      	b.n	800b468 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b3e0:	693b      	ldr	r3, [r7, #16]
 800b3e2:	ee07 3a90 	vmov	s15, r3
 800b3e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3ea:	eddf 6a38 	vldr	s13, [pc, #224]	; 800b4cc <HAL_RCC_GetSysClockFreq+0x2f0>
 800b3ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3f2:	4b2f      	ldr	r3, [pc, #188]	; (800b4b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b3f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3fa:	ee07 3a90 	vmov	s15, r3
 800b3fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b402:	ed97 6a02 	vldr	s12, [r7, #8]
 800b406:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800b4c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b40a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b40e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b412:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b416:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b41a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b41e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b422:	e021      	b.n	800b468 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b424:	693b      	ldr	r3, [r7, #16]
 800b426:	ee07 3a90 	vmov	s15, r3
 800b42a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b42e:	eddf 6a26 	vldr	s13, [pc, #152]	; 800b4c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b432:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b436:	4b1e      	ldr	r3, [pc, #120]	; (800b4b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b43a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b43e:	ee07 3a90 	vmov	s15, r3
 800b442:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b446:	ed97 6a02 	vldr	s12, [r7, #8]
 800b44a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800b4c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b44e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b452:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b456:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b45a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b45e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b462:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b466:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800b468:	4b11      	ldr	r3, [pc, #68]	; (800b4b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b46a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b46c:	0a5b      	lsrs	r3, r3, #9
 800b46e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b472:	3301      	adds	r3, #1
 800b474:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800b476:	683b      	ldr	r3, [r7, #0]
 800b478:	ee07 3a90 	vmov	s15, r3
 800b47c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b480:	edd7 6a07 	vldr	s13, [r7, #28]
 800b484:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b488:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b48c:	ee17 3a90 	vmov	r3, s15
 800b490:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800b492:	e005      	b.n	800b4a0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800b494:	2300      	movs	r3, #0
 800b496:	61bb      	str	r3, [r7, #24]
    break;
 800b498:	e002      	b.n	800b4a0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800b49a:	4b07      	ldr	r3, [pc, #28]	; (800b4b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b49c:	61bb      	str	r3, [r7, #24]
    break;
 800b49e:	bf00      	nop
  }

  return sysclockfreq;
 800b4a0:	69bb      	ldr	r3, [r7, #24]
}
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	3724      	adds	r7, #36	; 0x24
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ac:	4770      	bx	lr
 800b4ae:	bf00      	nop
 800b4b0:	58024400 	.word	0x58024400
 800b4b4:	03d09000 	.word	0x03d09000
 800b4b8:	003d0900 	.word	0x003d0900
 800b4bc:	007a1200 	.word	0x007a1200
 800b4c0:	46000000 	.word	0x46000000
 800b4c4:	4c742400 	.word	0x4c742400
 800b4c8:	4a742400 	.word	0x4a742400
 800b4cc:	4af42400 	.word	0x4af42400

0800b4d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b082      	sub	sp, #8
 800b4d4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b4d6:	f7ff fe81 	bl	800b1dc <HAL_RCC_GetSysClockFreq>
 800b4da:	4602      	mov	r2, r0
 800b4dc:	4b10      	ldr	r3, [pc, #64]	; (800b520 <HAL_RCC_GetHCLKFreq+0x50>)
 800b4de:	699b      	ldr	r3, [r3, #24]
 800b4e0:	0a1b      	lsrs	r3, r3, #8
 800b4e2:	f003 030f 	and.w	r3, r3, #15
 800b4e6:	490f      	ldr	r1, [pc, #60]	; (800b524 <HAL_RCC_GetHCLKFreq+0x54>)
 800b4e8:	5ccb      	ldrb	r3, [r1, r3]
 800b4ea:	f003 031f 	and.w	r3, r3, #31
 800b4ee:	fa22 f303 	lsr.w	r3, r2, r3
 800b4f2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b4f4:	4b0a      	ldr	r3, [pc, #40]	; (800b520 <HAL_RCC_GetHCLKFreq+0x50>)
 800b4f6:	699b      	ldr	r3, [r3, #24]
 800b4f8:	f003 030f 	and.w	r3, r3, #15
 800b4fc:	4a09      	ldr	r2, [pc, #36]	; (800b524 <HAL_RCC_GetHCLKFreq+0x54>)
 800b4fe:	5cd3      	ldrb	r3, [r2, r3]
 800b500:	f003 031f 	and.w	r3, r3, #31
 800b504:	687a      	ldr	r2, [r7, #4]
 800b506:	fa22 f303 	lsr.w	r3, r2, r3
 800b50a:	4a07      	ldr	r2, [pc, #28]	; (800b528 <HAL_RCC_GetHCLKFreq+0x58>)
 800b50c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b50e:	4a07      	ldr	r2, [pc, #28]	; (800b52c <HAL_RCC_GetHCLKFreq+0x5c>)
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b514:	4b04      	ldr	r3, [pc, #16]	; (800b528 <HAL_RCC_GetHCLKFreq+0x58>)
 800b516:	681b      	ldr	r3, [r3, #0]
}
 800b518:	4618      	mov	r0, r3
 800b51a:	3708      	adds	r7, #8
 800b51c:	46bd      	mov	sp, r7
 800b51e:	bd80      	pop	{r7, pc}
 800b520:	58024400 	.word	0x58024400
 800b524:	08011c58 	.word	0x08011c58
 800b528:	24000008 	.word	0x24000008
 800b52c:	24000004 	.word	0x24000004

0800b530 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b530:	b580      	push	{r7, lr}
 800b532:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800b534:	f7ff ffcc 	bl	800b4d0 <HAL_RCC_GetHCLKFreq>
 800b538:	4602      	mov	r2, r0
 800b53a:	4b06      	ldr	r3, [pc, #24]	; (800b554 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b53c:	69db      	ldr	r3, [r3, #28]
 800b53e:	091b      	lsrs	r3, r3, #4
 800b540:	f003 0307 	and.w	r3, r3, #7
 800b544:	4904      	ldr	r1, [pc, #16]	; (800b558 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b546:	5ccb      	ldrb	r3, [r1, r3]
 800b548:	f003 031f 	and.w	r3, r3, #31
 800b54c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800b550:	4618      	mov	r0, r3
 800b552:	bd80      	pop	{r7, pc}
 800b554:	58024400 	.word	0x58024400
 800b558:	08011c58 	.word	0x08011c58

0800b55c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800b560:	f7ff ffb6 	bl	800b4d0 <HAL_RCC_GetHCLKFreq>
 800b564:	4602      	mov	r2, r0
 800b566:	4b06      	ldr	r3, [pc, #24]	; (800b580 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b568:	69db      	ldr	r3, [r3, #28]
 800b56a:	0a1b      	lsrs	r3, r3, #8
 800b56c:	f003 0307 	and.w	r3, r3, #7
 800b570:	4904      	ldr	r1, [pc, #16]	; (800b584 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b572:	5ccb      	ldrb	r3, [r1, r3]
 800b574:	f003 031f 	and.w	r3, r3, #31
 800b578:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800b57c:	4618      	mov	r0, r3
 800b57e:	bd80      	pop	{r7, pc}
 800b580:	58024400 	.word	0x58024400
 800b584:	08011c58 	.word	0x08011c58

0800b588 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b086      	sub	sp, #24
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b590:	2300      	movs	r3, #0
 800b592:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b594:	2300      	movs	r3, #0
 800b596:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d03f      	beq.n	800b624 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b5a8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b5ac:	d02a      	beq.n	800b604 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800b5ae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b5b2:	d824      	bhi.n	800b5fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 800b5b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b5b8:	d018      	beq.n	800b5ec <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b5ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b5be:	d81e      	bhi.n	800b5fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d003      	beq.n	800b5cc <HAL_RCCEx_PeriphCLKConfig+0x44>
 800b5c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b5c8:	d007      	beq.n	800b5da <HAL_RCCEx_PeriphCLKConfig+0x52>
 800b5ca:	e018      	b.n	800b5fe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b5cc:	4ba4      	ldr	r3, [pc, #656]	; (800b860 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800b5ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5d0:	4aa3      	ldr	r2, [pc, #652]	; (800b860 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800b5d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b5d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800b5d8:	e015      	b.n	800b606 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	3304      	adds	r3, #4
 800b5de:	2102      	movs	r1, #2
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	f001 f989 	bl	800c8f8 <RCCEx_PLL2_Config>
 800b5e6:	4603      	mov	r3, r0
 800b5e8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800b5ea:	e00c      	b.n	800b606 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	3324      	adds	r3, #36	; 0x24
 800b5f0:	2102      	movs	r1, #2
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	f001 fa32 	bl	800ca5c <RCCEx_PLL3_Config>
 800b5f8:	4603      	mov	r3, r0
 800b5fa:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800b5fc:	e003      	b.n	800b606 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b5fe:	2301      	movs	r3, #1
 800b600:	75fb      	strb	r3, [r7, #23]
      break;
 800b602:	e000      	b.n	800b606 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800b604:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b606:	7dfb      	ldrb	r3, [r7, #23]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d109      	bne.n	800b620 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b60c:	4b94      	ldr	r3, [pc, #592]	; (800b860 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800b60e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b610:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b618:	4991      	ldr	r1, [pc, #580]	; (800b860 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800b61a:	4313      	orrs	r3, r2
 800b61c:	650b      	str	r3, [r1, #80]	; 0x50
 800b61e:	e001      	b.n	800b624 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b620:	7dfb      	ldrb	r3, [r7, #23]
 800b622:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d03d      	beq.n	800b6ac <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b634:	2b04      	cmp	r3, #4
 800b636:	d826      	bhi.n	800b686 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800b638:	a201      	add	r2, pc, #4	; (adr r2, 800b640 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800b63a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b63e:	bf00      	nop
 800b640:	0800b655 	.word	0x0800b655
 800b644:	0800b663 	.word	0x0800b663
 800b648:	0800b675 	.word	0x0800b675
 800b64c:	0800b68d 	.word	0x0800b68d
 800b650:	0800b68d 	.word	0x0800b68d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b654:	4b82      	ldr	r3, [pc, #520]	; (800b860 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800b656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b658:	4a81      	ldr	r2, [pc, #516]	; (800b860 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800b65a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b65e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b660:	e015      	b.n	800b68e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	3304      	adds	r3, #4
 800b666:	2100      	movs	r1, #0
 800b668:	4618      	mov	r0, r3
 800b66a:	f001 f945 	bl	800c8f8 <RCCEx_PLL2_Config>
 800b66e:	4603      	mov	r3, r0
 800b670:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b672:	e00c      	b.n	800b68e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	3324      	adds	r3, #36	; 0x24
 800b678:	2100      	movs	r1, #0
 800b67a:	4618      	mov	r0, r3
 800b67c:	f001 f9ee 	bl	800ca5c <RCCEx_PLL3_Config>
 800b680:	4603      	mov	r3, r0
 800b682:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b684:	e003      	b.n	800b68e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b686:	2301      	movs	r3, #1
 800b688:	75fb      	strb	r3, [r7, #23]
      break;
 800b68a:	e000      	b.n	800b68e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800b68c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b68e:	7dfb      	ldrb	r3, [r7, #23]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d109      	bne.n	800b6a8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b694:	4b72      	ldr	r3, [pc, #456]	; (800b860 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800b696:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b698:	f023 0207 	bic.w	r2, r3, #7
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6a0:	496f      	ldr	r1, [pc, #444]	; (800b860 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800b6a2:	4313      	orrs	r3, r2
 800b6a4:	650b      	str	r3, [r1, #80]	; 0x50
 800b6a6:	e001      	b.n	800b6ac <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6a8:	7dfb      	ldrb	r3, [r7, #23]
 800b6aa:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d051      	beq.n	800b75c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b6be:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800b6c2:	d036      	beq.n	800b732 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800b6c4:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800b6c8:	d830      	bhi.n	800b72c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800b6ca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b6ce:	d032      	beq.n	800b736 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800b6d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b6d4:	d82a      	bhi.n	800b72c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800b6d6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b6da:	d02e      	beq.n	800b73a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 800b6dc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b6e0:	d824      	bhi.n	800b72c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800b6e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b6e6:	d018      	beq.n	800b71a <HAL_RCCEx_PeriphCLKConfig+0x192>
 800b6e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b6ec:	d81e      	bhi.n	800b72c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d003      	beq.n	800b6fa <HAL_RCCEx_PeriphCLKConfig+0x172>
 800b6f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b6f6:	d007      	beq.n	800b708 <HAL_RCCEx_PeriphCLKConfig+0x180>
 800b6f8:	e018      	b.n	800b72c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b6fa:	4b59      	ldr	r3, [pc, #356]	; (800b860 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800b6fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6fe:	4a58      	ldr	r2, [pc, #352]	; (800b860 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800b700:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b704:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b706:	e019      	b.n	800b73c <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	3304      	adds	r3, #4
 800b70c:	2100      	movs	r1, #0
 800b70e:	4618      	mov	r0, r3
 800b710:	f001 f8f2 	bl	800c8f8 <RCCEx_PLL2_Config>
 800b714:	4603      	mov	r3, r0
 800b716:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800b718:	e010      	b.n	800b73c <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	3324      	adds	r3, #36	; 0x24
 800b71e:	2100      	movs	r1, #0
 800b720:	4618      	mov	r0, r3
 800b722:	f001 f99b 	bl	800ca5c <RCCEx_PLL3_Config>
 800b726:	4603      	mov	r3, r0
 800b728:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b72a:	e007      	b.n	800b73c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800b72c:	2301      	movs	r3, #1
 800b72e:	75fb      	strb	r3, [r7, #23]
      break;
 800b730:	e004      	b.n	800b73c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800b732:	bf00      	nop
 800b734:	e002      	b.n	800b73c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800b736:	bf00      	nop
 800b738:	e000      	b.n	800b73c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800b73a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b73c:	7dfb      	ldrb	r3, [r7, #23]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d10a      	bne.n	800b758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b742:	4b47      	ldr	r3, [pc, #284]	; (800b860 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800b744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b746:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b750:	4943      	ldr	r1, [pc, #268]	; (800b860 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800b752:	4313      	orrs	r3, r2
 800b754:	658b      	str	r3, [r1, #88]	; 0x58
 800b756:	e001      	b.n	800b75c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b758:	7dfb      	ldrb	r3, [r7, #23]
 800b75a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b764:	2b00      	cmp	r3, #0
 800b766:	d051      	beq.n	800b80c <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b76e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800b772:	d036      	beq.n	800b7e2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800b774:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800b778:	d830      	bhi.n	800b7dc <HAL_RCCEx_PeriphCLKConfig+0x254>
 800b77a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b77e:	d032      	beq.n	800b7e6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 800b780:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b784:	d82a      	bhi.n	800b7dc <HAL_RCCEx_PeriphCLKConfig+0x254>
 800b786:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b78a:	d02e      	beq.n	800b7ea <HAL_RCCEx_PeriphCLKConfig+0x262>
 800b78c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b790:	d824      	bhi.n	800b7dc <HAL_RCCEx_PeriphCLKConfig+0x254>
 800b792:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b796:	d018      	beq.n	800b7ca <HAL_RCCEx_PeriphCLKConfig+0x242>
 800b798:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b79c:	d81e      	bhi.n	800b7dc <HAL_RCCEx_PeriphCLKConfig+0x254>
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d003      	beq.n	800b7aa <HAL_RCCEx_PeriphCLKConfig+0x222>
 800b7a2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b7a6:	d007      	beq.n	800b7b8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800b7a8:	e018      	b.n	800b7dc <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b7aa:	4b2d      	ldr	r3, [pc, #180]	; (800b860 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800b7ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7ae:	4a2c      	ldr	r2, [pc, #176]	; (800b860 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800b7b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b7b4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b7b6:	e019      	b.n	800b7ec <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	3304      	adds	r3, #4
 800b7bc:	2100      	movs	r1, #0
 800b7be:	4618      	mov	r0, r3
 800b7c0:	f001 f89a 	bl	800c8f8 <RCCEx_PLL2_Config>
 800b7c4:	4603      	mov	r3, r0
 800b7c6:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800b7c8:	e010      	b.n	800b7ec <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	3324      	adds	r3, #36	; 0x24
 800b7ce:	2100      	movs	r1, #0
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	f001 f943 	bl	800ca5c <RCCEx_PLL3_Config>
 800b7d6:	4603      	mov	r3, r0
 800b7d8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b7da:	e007      	b.n	800b7ec <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800b7dc:	2301      	movs	r3, #1
 800b7de:	75fb      	strb	r3, [r7, #23]
      break;
 800b7e0:	e004      	b.n	800b7ec <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800b7e2:	bf00      	nop
 800b7e4:	e002      	b.n	800b7ec <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800b7e6:	bf00      	nop
 800b7e8:	e000      	b.n	800b7ec <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800b7ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b7ec:	7dfb      	ldrb	r3, [r7, #23]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d10a      	bne.n	800b808 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b7f2:	4b1b      	ldr	r3, [pc, #108]	; (800b860 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800b7f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7f6:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b800:	4917      	ldr	r1, [pc, #92]	; (800b860 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800b802:	4313      	orrs	r3, r2
 800b804:	658b      	str	r3, [r1, #88]	; 0x58
 800b806:	e001      	b.n	800b80c <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b808:	7dfb      	ldrb	r3, [r7, #23]
 800b80a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b814:	2b00      	cmp	r3, #0
 800b816:	d035      	beq.n	800b884 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b81c:	2b30      	cmp	r3, #48	; 0x30
 800b81e:	d01c      	beq.n	800b85a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b820:	2b30      	cmp	r3, #48	; 0x30
 800b822:	d817      	bhi.n	800b854 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800b824:	2b20      	cmp	r3, #32
 800b826:	d00c      	beq.n	800b842 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800b828:	2b20      	cmp	r3, #32
 800b82a:	d813      	bhi.n	800b854 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d019      	beq.n	800b864 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800b830:	2b10      	cmp	r3, #16
 800b832:	d10f      	bne.n	800b854 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b834:	4b0a      	ldr	r3, [pc, #40]	; (800b860 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800b836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b838:	4a09      	ldr	r2, [pc, #36]	; (800b860 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800b83a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b83e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800b840:	e011      	b.n	800b866 <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	3304      	adds	r3, #4
 800b846:	2102      	movs	r1, #2
 800b848:	4618      	mov	r0, r3
 800b84a:	f001 f855 	bl	800c8f8 <RCCEx_PLL2_Config>
 800b84e:	4603      	mov	r3, r0
 800b850:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800b852:	e008      	b.n	800b866 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800b854:	2301      	movs	r3, #1
 800b856:	75fb      	strb	r3, [r7, #23]
      break;
 800b858:	e005      	b.n	800b866 <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 800b85a:	bf00      	nop
 800b85c:	e003      	b.n	800b866 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800b85e:	bf00      	nop
 800b860:	58024400 	.word	0x58024400
      break;
 800b864:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b866:	7dfb      	ldrb	r3, [r7, #23]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d109      	bne.n	800b880 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800b86c:	4ba3      	ldr	r3, [pc, #652]	; (800bafc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800b86e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b870:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b878:	49a0      	ldr	r1, [pc, #640]	; (800bafc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800b87a:	4313      	orrs	r3, r2
 800b87c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b87e:	e001      	b.n	800b884 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b880:	7dfb      	ldrb	r3, [r7, #23]
 800b882:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d047      	beq.n	800b920 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b894:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b898:	d030      	beq.n	800b8fc <HAL_RCCEx_PeriphCLKConfig+0x374>
 800b89a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b89e:	d82a      	bhi.n	800b8f6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800b8a0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b8a4:	d02c      	beq.n	800b900 <HAL_RCCEx_PeriphCLKConfig+0x378>
 800b8a6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b8aa:	d824      	bhi.n	800b8f6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800b8ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b8b0:	d018      	beq.n	800b8e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800b8b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b8b6:	d81e      	bhi.n	800b8f6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d003      	beq.n	800b8c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800b8bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b8c0:	d007      	beq.n	800b8d2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800b8c2:	e018      	b.n	800b8f6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b8c4:	4b8d      	ldr	r3, [pc, #564]	; (800bafc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800b8c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8c8:	4a8c      	ldr	r2, [pc, #560]	; (800bafc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800b8ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b8ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b8d0:	e017      	b.n	800b902 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	3304      	adds	r3, #4
 800b8d6:	2100      	movs	r1, #0
 800b8d8:	4618      	mov	r0, r3
 800b8da:	f001 f80d 	bl	800c8f8 <RCCEx_PLL2_Config>
 800b8de:	4603      	mov	r3, r0
 800b8e0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b8e2:	e00e      	b.n	800b902 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	3324      	adds	r3, #36	; 0x24
 800b8e8:	2100      	movs	r1, #0
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	f001 f8b6 	bl	800ca5c <RCCEx_PLL3_Config>
 800b8f0:	4603      	mov	r3, r0
 800b8f2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b8f4:	e005      	b.n	800b902 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b8f6:	2301      	movs	r3, #1
 800b8f8:	75fb      	strb	r3, [r7, #23]
      break;
 800b8fa:	e002      	b.n	800b902 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800b8fc:	bf00      	nop
 800b8fe:	e000      	b.n	800b902 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800b900:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b902:	7dfb      	ldrb	r3, [r7, #23]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d109      	bne.n	800b91c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b908:	4b7c      	ldr	r3, [pc, #496]	; (800bafc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800b90a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b90c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b914:	4979      	ldr	r1, [pc, #484]	; (800bafc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800b916:	4313      	orrs	r3, r2
 800b918:	650b      	str	r3, [r1, #80]	; 0x50
 800b91a:	e001      	b.n	800b920 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b91c:	7dfb      	ldrb	r3, [r7, #23]
 800b91e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d049      	beq.n	800b9c0 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b930:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b934:	d02e      	beq.n	800b994 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800b936:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b93a:	d828      	bhi.n	800b98e <HAL_RCCEx_PeriphCLKConfig+0x406>
 800b93c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b940:	d02a      	beq.n	800b998 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800b942:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b946:	d822      	bhi.n	800b98e <HAL_RCCEx_PeriphCLKConfig+0x406>
 800b948:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b94c:	d026      	beq.n	800b99c <HAL_RCCEx_PeriphCLKConfig+0x414>
 800b94e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b952:	d81c      	bhi.n	800b98e <HAL_RCCEx_PeriphCLKConfig+0x406>
 800b954:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b958:	d010      	beq.n	800b97c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800b95a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b95e:	d816      	bhi.n	800b98e <HAL_RCCEx_PeriphCLKConfig+0x406>
 800b960:	2b00      	cmp	r3, #0
 800b962:	d01d      	beq.n	800b9a0 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800b964:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b968:	d111      	bne.n	800b98e <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	3304      	adds	r3, #4
 800b96e:	2101      	movs	r1, #1
 800b970:	4618      	mov	r0, r3
 800b972:	f000 ffc1 	bl	800c8f8 <RCCEx_PLL2_Config>
 800b976:	4603      	mov	r3, r0
 800b978:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800b97a:	e012      	b.n	800b9a2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	3324      	adds	r3, #36	; 0x24
 800b980:	2101      	movs	r1, #1
 800b982:	4618      	mov	r0, r3
 800b984:	f001 f86a 	bl	800ca5c <RCCEx_PLL3_Config>
 800b988:	4603      	mov	r3, r0
 800b98a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800b98c:	e009      	b.n	800b9a2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b98e:	2301      	movs	r3, #1
 800b990:	75fb      	strb	r3, [r7, #23]
      break;
 800b992:	e006      	b.n	800b9a2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800b994:	bf00      	nop
 800b996:	e004      	b.n	800b9a2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800b998:	bf00      	nop
 800b99a:	e002      	b.n	800b9a2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800b99c:	bf00      	nop
 800b99e:	e000      	b.n	800b9a2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800b9a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b9a2:	7dfb      	ldrb	r3, [r7, #23]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d109      	bne.n	800b9bc <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b9a8:	4b54      	ldr	r3, [pc, #336]	; (800bafc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800b9aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9ac:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b9b4:	4951      	ldr	r1, [pc, #324]	; (800bafc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800b9b6:	4313      	orrs	r3, r2
 800b9b8:	650b      	str	r3, [r1, #80]	; 0x50
 800b9ba:	e001      	b.n	800b9c0 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9bc:	7dfb      	ldrb	r3, [r7, #23]
 800b9be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d04b      	beq.n	800ba64 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b9d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b9d6:	d02e      	beq.n	800ba36 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800b9d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b9dc:	d828      	bhi.n	800ba30 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800b9de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b9e2:	d02a      	beq.n	800ba3a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800b9e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b9e8:	d822      	bhi.n	800ba30 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800b9ea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b9ee:	d026      	beq.n	800ba3e <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 800b9f0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b9f4:	d81c      	bhi.n	800ba30 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800b9f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b9fa:	d010      	beq.n	800ba1e <HAL_RCCEx_PeriphCLKConfig+0x496>
 800b9fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ba00:	d816      	bhi.n	800ba30 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d01d      	beq.n	800ba42 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800ba06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ba0a:	d111      	bne.n	800ba30 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	3304      	adds	r3, #4
 800ba10:	2101      	movs	r1, #1
 800ba12:	4618      	mov	r0, r3
 800ba14:	f000 ff70 	bl	800c8f8 <RCCEx_PLL2_Config>
 800ba18:	4603      	mov	r3, r0
 800ba1a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800ba1c:	e012      	b.n	800ba44 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	3324      	adds	r3, #36	; 0x24
 800ba22:	2101      	movs	r1, #1
 800ba24:	4618      	mov	r0, r3
 800ba26:	f001 f819 	bl	800ca5c <RCCEx_PLL3_Config>
 800ba2a:	4603      	mov	r3, r0
 800ba2c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800ba2e:	e009      	b.n	800ba44 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800ba30:	2301      	movs	r3, #1
 800ba32:	75fb      	strb	r3, [r7, #23]
      break;
 800ba34:	e006      	b.n	800ba44 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800ba36:	bf00      	nop
 800ba38:	e004      	b.n	800ba44 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800ba3a:	bf00      	nop
 800ba3c:	e002      	b.n	800ba44 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800ba3e:	bf00      	nop
 800ba40:	e000      	b.n	800ba44 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800ba42:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ba44:	7dfb      	ldrb	r3, [r7, #23]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d10a      	bne.n	800ba60 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800ba4a:	4b2c      	ldr	r3, [pc, #176]	; (800bafc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800ba4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba4e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ba58:	4928      	ldr	r1, [pc, #160]	; (800bafc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800ba5a:	4313      	orrs	r3, r2
 800ba5c:	658b      	str	r3, [r1, #88]	; 0x58
 800ba5e:	e001      	b.n	800ba64 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba60:	7dfb      	ldrb	r3, [r7, #23]
 800ba62:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d02f      	beq.n	800bad0 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ba74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ba78:	d00e      	beq.n	800ba98 <HAL_RCCEx_PeriphCLKConfig+0x510>
 800ba7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ba7e:	d814      	bhi.n	800baaa <HAL_RCCEx_PeriphCLKConfig+0x522>
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d015      	beq.n	800bab0 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800ba84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ba88:	d10f      	bne.n	800baaa <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba8a:	4b1c      	ldr	r3, [pc, #112]	; (800bafc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800ba8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba8e:	4a1b      	ldr	r2, [pc, #108]	; (800bafc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800ba90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ba94:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800ba96:	e00c      	b.n	800bab2 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	3304      	adds	r3, #4
 800ba9c:	2101      	movs	r1, #1
 800ba9e:	4618      	mov	r0, r3
 800baa0:	f000 ff2a 	bl	800c8f8 <RCCEx_PLL2_Config>
 800baa4:	4603      	mov	r3, r0
 800baa6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800baa8:	e003      	b.n	800bab2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800baaa:	2301      	movs	r3, #1
 800baac:	75fb      	strb	r3, [r7, #23]
      break;
 800baae:	e000      	b.n	800bab2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 800bab0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bab2:	7dfb      	ldrb	r3, [r7, #23]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d109      	bne.n	800bacc <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800bab8:	4b10      	ldr	r3, [pc, #64]	; (800bafc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800baba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800babc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bac4:	490d      	ldr	r1, [pc, #52]	; (800bafc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800bac6:	4313      	orrs	r3, r2
 800bac8:	650b      	str	r3, [r1, #80]	; 0x50
 800baca:	e001      	b.n	800bad0 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bacc:	7dfb      	ldrb	r3, [r7, #23]
 800bace:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d034      	beq.n	800bb46 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bae0:	2b03      	cmp	r3, #3
 800bae2:	d81d      	bhi.n	800bb20 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800bae4:	a201      	add	r2, pc, #4	; (adr r2, 800baec <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800bae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baea:	bf00      	nop
 800baec:	0800bb27 	.word	0x0800bb27
 800baf0:	0800bb01 	.word	0x0800bb01
 800baf4:	0800bb0f 	.word	0x0800bb0f
 800baf8:	0800bb27 	.word	0x0800bb27
 800bafc:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bb00:	4bb1      	ldr	r3, [pc, #708]	; (800bdc8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800bb02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb04:	4ab0      	ldr	r2, [pc, #704]	; (800bdc8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800bb06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bb0a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800bb0c:	e00c      	b.n	800bb28 <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	3304      	adds	r3, #4
 800bb12:	2102      	movs	r1, #2
 800bb14:	4618      	mov	r0, r3
 800bb16:	f000 feef 	bl	800c8f8 <RCCEx_PLL2_Config>
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800bb1e:	e003      	b.n	800bb28 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800bb20:	2301      	movs	r3, #1
 800bb22:	75fb      	strb	r3, [r7, #23]
      break;
 800bb24:	e000      	b.n	800bb28 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 800bb26:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bb28:	7dfb      	ldrb	r3, [r7, #23]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d109      	bne.n	800bb42 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800bb2e:	4ba6      	ldr	r3, [pc, #664]	; (800bdc8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800bb30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb32:	f023 0203 	bic.w	r2, r3, #3
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb3a:	49a3      	ldr	r1, [pc, #652]	; (800bdc8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800bb3c:	4313      	orrs	r3, r2
 800bb3e:	64cb      	str	r3, [r1, #76]	; 0x4c
 800bb40:	e001      	b.n	800bb46 <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb42:	7dfb      	ldrb	r3, [r7, #23]
 800bb44:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	f000 8086 	beq.w	800bc60 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bb54:	4b9d      	ldr	r3, [pc, #628]	; (800bdcc <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	4a9c      	ldr	r2, [pc, #624]	; (800bdcc <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800bb5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bb5e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bb60:	f7fb f984 	bl	8006e6c <HAL_GetTick>
 800bb64:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bb66:	e009      	b.n	800bb7c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bb68:	f7fb f980 	bl	8006e6c <HAL_GetTick>
 800bb6c:	4602      	mov	r2, r0
 800bb6e:	693b      	ldr	r3, [r7, #16]
 800bb70:	1ad3      	subs	r3, r2, r3
 800bb72:	2b64      	cmp	r3, #100	; 0x64
 800bb74:	d902      	bls.n	800bb7c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 800bb76:	2303      	movs	r3, #3
 800bb78:	75fb      	strb	r3, [r7, #23]
        break;
 800bb7a:	e005      	b.n	800bb88 <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bb7c:	4b93      	ldr	r3, [pc, #588]	; (800bdcc <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d0ef      	beq.n	800bb68 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 800bb88:	7dfb      	ldrb	r3, [r7, #23]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d166      	bne.n	800bc5c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800bb8e:	4b8e      	ldr	r3, [pc, #568]	; (800bdc8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800bb90:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bb98:	4053      	eors	r3, r2
 800bb9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d013      	beq.n	800bbca <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800bba2:	4b89      	ldr	r3, [pc, #548]	; (800bdc8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800bba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bba6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bbaa:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bbac:	4b86      	ldr	r3, [pc, #536]	; (800bdc8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800bbae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbb0:	4a85      	ldr	r2, [pc, #532]	; (800bdc8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800bbb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bbb6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bbb8:	4b83      	ldr	r3, [pc, #524]	; (800bdc8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800bbba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbbc:	4a82      	ldr	r2, [pc, #520]	; (800bdc8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800bbbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bbc2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800bbc4:	4a80      	ldr	r2, [pc, #512]	; (800bdc8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bbd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bbd4:	d115      	bne.n	800bc02 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bbd6:	f7fb f949 	bl	8006e6c <HAL_GetTick>
 800bbda:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bbdc:	e00b      	b.n	800bbf6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bbde:	f7fb f945 	bl	8006e6c <HAL_GetTick>
 800bbe2:	4602      	mov	r2, r0
 800bbe4:	693b      	ldr	r3, [r7, #16]
 800bbe6:	1ad3      	subs	r3, r2, r3
 800bbe8:	f241 3288 	movw	r2, #5000	; 0x1388
 800bbec:	4293      	cmp	r3, r2
 800bbee:	d902      	bls.n	800bbf6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 800bbf0:	2303      	movs	r3, #3
 800bbf2:	75fb      	strb	r3, [r7, #23]
            break;
 800bbf4:	e005      	b.n	800bc02 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bbf6:	4b74      	ldr	r3, [pc, #464]	; (800bdc8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800bbf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbfa:	f003 0302 	and.w	r3, r3, #2
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d0ed      	beq.n	800bbde <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 800bc02:	7dfb      	ldrb	r3, [r7, #23]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d126      	bne.n	800bc56 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bc0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bc12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bc16:	d10d      	bne.n	800bc34 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 800bc18:	4b6b      	ldr	r3, [pc, #428]	; (800bdc8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800bc1a:	691b      	ldr	r3, [r3, #16]
 800bc1c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bc26:	0919      	lsrs	r1, r3, #4
 800bc28:	4b69      	ldr	r3, [pc, #420]	; (800bdd0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800bc2a:	400b      	ands	r3, r1
 800bc2c:	4966      	ldr	r1, [pc, #408]	; (800bdc8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800bc2e:	4313      	orrs	r3, r2
 800bc30:	610b      	str	r3, [r1, #16]
 800bc32:	e005      	b.n	800bc40 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800bc34:	4b64      	ldr	r3, [pc, #400]	; (800bdc8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800bc36:	691b      	ldr	r3, [r3, #16]
 800bc38:	4a63      	ldr	r2, [pc, #396]	; (800bdc8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800bc3a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800bc3e:	6113      	str	r3, [r2, #16]
 800bc40:	4b61      	ldr	r3, [pc, #388]	; (800bdc8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800bc42:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bc4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bc4e:	495e      	ldr	r1, [pc, #376]	; (800bdc8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800bc50:	4313      	orrs	r3, r2
 800bc52:	670b      	str	r3, [r1, #112]	; 0x70
 800bc54:	e004      	b.n	800bc60 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800bc56:	7dfb      	ldrb	r3, [r7, #23]
 800bc58:	75bb      	strb	r3, [r7, #22]
 800bc5a:	e001      	b.n	800bc60 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc5c:	7dfb      	ldrb	r3, [r7, #23]
 800bc5e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	f003 0301 	and.w	r3, r3, #1
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d07e      	beq.n	800bd6a <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc70:	2b28      	cmp	r3, #40	; 0x28
 800bc72:	d867      	bhi.n	800bd44 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 800bc74:	a201      	add	r2, pc, #4	; (adr r2, 800bc7c <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 800bc76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc7a:	bf00      	nop
 800bc7c:	0800bd4b 	.word	0x0800bd4b
 800bc80:	0800bd45 	.word	0x0800bd45
 800bc84:	0800bd45 	.word	0x0800bd45
 800bc88:	0800bd45 	.word	0x0800bd45
 800bc8c:	0800bd45 	.word	0x0800bd45
 800bc90:	0800bd45 	.word	0x0800bd45
 800bc94:	0800bd45 	.word	0x0800bd45
 800bc98:	0800bd45 	.word	0x0800bd45
 800bc9c:	0800bd21 	.word	0x0800bd21
 800bca0:	0800bd45 	.word	0x0800bd45
 800bca4:	0800bd45 	.word	0x0800bd45
 800bca8:	0800bd45 	.word	0x0800bd45
 800bcac:	0800bd45 	.word	0x0800bd45
 800bcb0:	0800bd45 	.word	0x0800bd45
 800bcb4:	0800bd45 	.word	0x0800bd45
 800bcb8:	0800bd45 	.word	0x0800bd45
 800bcbc:	0800bd33 	.word	0x0800bd33
 800bcc0:	0800bd45 	.word	0x0800bd45
 800bcc4:	0800bd45 	.word	0x0800bd45
 800bcc8:	0800bd45 	.word	0x0800bd45
 800bccc:	0800bd45 	.word	0x0800bd45
 800bcd0:	0800bd45 	.word	0x0800bd45
 800bcd4:	0800bd45 	.word	0x0800bd45
 800bcd8:	0800bd45 	.word	0x0800bd45
 800bcdc:	0800bd4b 	.word	0x0800bd4b
 800bce0:	0800bd45 	.word	0x0800bd45
 800bce4:	0800bd45 	.word	0x0800bd45
 800bce8:	0800bd45 	.word	0x0800bd45
 800bcec:	0800bd45 	.word	0x0800bd45
 800bcf0:	0800bd45 	.word	0x0800bd45
 800bcf4:	0800bd45 	.word	0x0800bd45
 800bcf8:	0800bd45 	.word	0x0800bd45
 800bcfc:	0800bd4b 	.word	0x0800bd4b
 800bd00:	0800bd45 	.word	0x0800bd45
 800bd04:	0800bd45 	.word	0x0800bd45
 800bd08:	0800bd45 	.word	0x0800bd45
 800bd0c:	0800bd45 	.word	0x0800bd45
 800bd10:	0800bd45 	.word	0x0800bd45
 800bd14:	0800bd45 	.word	0x0800bd45
 800bd18:	0800bd45 	.word	0x0800bd45
 800bd1c:	0800bd4b 	.word	0x0800bd4b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	3304      	adds	r3, #4
 800bd24:	2101      	movs	r1, #1
 800bd26:	4618      	mov	r0, r3
 800bd28:	f000 fde6 	bl	800c8f8 <RCCEx_PLL2_Config>
 800bd2c:	4603      	mov	r3, r0
 800bd2e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800bd30:	e00c      	b.n	800bd4c <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	3324      	adds	r3, #36	; 0x24
 800bd36:	2101      	movs	r1, #1
 800bd38:	4618      	mov	r0, r3
 800bd3a:	f000 fe8f 	bl	800ca5c <RCCEx_PLL3_Config>
 800bd3e:	4603      	mov	r3, r0
 800bd40:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800bd42:	e003      	b.n	800bd4c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bd44:	2301      	movs	r3, #1
 800bd46:	75fb      	strb	r3, [r7, #23]
      break;
 800bd48:	e000      	b.n	800bd4c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 800bd4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bd4c:	7dfb      	ldrb	r3, [r7, #23]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d109      	bne.n	800bd66 <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800bd52:	4b1d      	ldr	r3, [pc, #116]	; (800bdc8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800bd54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd56:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd5e:	491a      	ldr	r1, [pc, #104]	; (800bdc8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800bd60:	4313      	orrs	r3, r2
 800bd62:	654b      	str	r3, [r1, #84]	; 0x54
 800bd64:	e001      	b.n	800bd6a <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd66:	7dfb      	ldrb	r3, [r7, #23]
 800bd68:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	f003 0302 	and.w	r3, r3, #2
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d03e      	beq.n	800bdf4 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd7a:	2b05      	cmp	r3, #5
 800bd7c:	d820      	bhi.n	800bdc0 <HAL_RCCEx_PeriphCLKConfig+0x838>
 800bd7e:	a201      	add	r2, pc, #4	; (adr r2, 800bd84 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 800bd80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd84:	0800bdd5 	.word	0x0800bdd5
 800bd88:	0800bd9d 	.word	0x0800bd9d
 800bd8c:	0800bdaf 	.word	0x0800bdaf
 800bd90:	0800bdd5 	.word	0x0800bdd5
 800bd94:	0800bdd5 	.word	0x0800bdd5
 800bd98:	0800bdd5 	.word	0x0800bdd5
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	3304      	adds	r3, #4
 800bda0:	2101      	movs	r1, #1
 800bda2:	4618      	mov	r0, r3
 800bda4:	f000 fda8 	bl	800c8f8 <RCCEx_PLL2_Config>
 800bda8:	4603      	mov	r3, r0
 800bdaa:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800bdac:	e013      	b.n	800bdd6 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	3324      	adds	r3, #36	; 0x24
 800bdb2:	2101      	movs	r1, #1
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	f000 fe51 	bl	800ca5c <RCCEx_PLL3_Config>
 800bdba:	4603      	mov	r3, r0
 800bdbc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800bdbe:	e00a      	b.n	800bdd6 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bdc0:	2301      	movs	r3, #1
 800bdc2:	75fb      	strb	r3, [r7, #23]
      break;
 800bdc4:	e007      	b.n	800bdd6 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 800bdc6:	bf00      	nop
 800bdc8:	58024400 	.word	0x58024400
 800bdcc:	58024800 	.word	0x58024800
 800bdd0:	00ffffcf 	.word	0x00ffffcf
      break;
 800bdd4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bdd6:	7dfb      	ldrb	r3, [r7, #23]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d109      	bne.n	800bdf0 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800bddc:	4b9f      	ldr	r3, [pc, #636]	; (800c05c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800bdde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bde0:	f023 0207 	bic.w	r2, r3, #7
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bde8:	499c      	ldr	r1, [pc, #624]	; (800c05c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800bdea:	4313      	orrs	r3, r2
 800bdec:	654b      	str	r3, [r1, #84]	; 0x54
 800bdee:	e001      	b.n	800bdf4 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bdf0:	7dfb      	ldrb	r3, [r7, #23]
 800bdf2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	f003 0304 	and.w	r3, r3, #4
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d039      	beq.n	800be74 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800be06:	2b05      	cmp	r3, #5
 800be08:	d820      	bhi.n	800be4c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800be0a:	a201      	add	r2, pc, #4	; (adr r2, 800be10 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800be0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be10:	0800be53 	.word	0x0800be53
 800be14:	0800be29 	.word	0x0800be29
 800be18:	0800be3b 	.word	0x0800be3b
 800be1c:	0800be53 	.word	0x0800be53
 800be20:	0800be53 	.word	0x0800be53
 800be24:	0800be53 	.word	0x0800be53
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	3304      	adds	r3, #4
 800be2c:	2101      	movs	r1, #1
 800be2e:	4618      	mov	r0, r3
 800be30:	f000 fd62 	bl	800c8f8 <RCCEx_PLL2_Config>
 800be34:	4603      	mov	r3, r0
 800be36:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800be38:	e00c      	b.n	800be54 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	3324      	adds	r3, #36	; 0x24
 800be3e:	2101      	movs	r1, #1
 800be40:	4618      	mov	r0, r3
 800be42:	f000 fe0b 	bl	800ca5c <RCCEx_PLL3_Config>
 800be46:	4603      	mov	r3, r0
 800be48:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800be4a:	e003      	b.n	800be54 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800be4c:	2301      	movs	r3, #1
 800be4e:	75fb      	strb	r3, [r7, #23]
      break;
 800be50:	e000      	b.n	800be54 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 800be52:	bf00      	nop
    }

    if(ret == HAL_OK)
 800be54:	7dfb      	ldrb	r3, [r7, #23]
 800be56:	2b00      	cmp	r3, #0
 800be58:	d10a      	bne.n	800be70 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800be5a:	4b80      	ldr	r3, [pc, #512]	; (800c05c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800be5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be5e:	f023 0207 	bic.w	r2, r3, #7
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800be68:	497c      	ldr	r1, [pc, #496]	; (800c05c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800be6a:	4313      	orrs	r3, r2
 800be6c:	658b      	str	r3, [r1, #88]	; 0x58
 800be6e:	e001      	b.n	800be74 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be70:	7dfb      	ldrb	r3, [r7, #23]
 800be72:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	f003 0320 	and.w	r3, r3, #32
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d04b      	beq.n	800bf18 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be86:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800be8a:	d02e      	beq.n	800beea <HAL_RCCEx_PeriphCLKConfig+0x962>
 800be8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800be90:	d828      	bhi.n	800bee4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800be92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be96:	d02a      	beq.n	800beee <HAL_RCCEx_PeriphCLKConfig+0x966>
 800be98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be9c:	d822      	bhi.n	800bee4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800be9e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bea2:	d026      	beq.n	800bef2 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800bea4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bea8:	d81c      	bhi.n	800bee4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800beaa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800beae:	d010      	beq.n	800bed2 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 800beb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800beb4:	d816      	bhi.n	800bee4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d01d      	beq.n	800bef6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800beba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bebe:	d111      	bne.n	800bee4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	3304      	adds	r3, #4
 800bec4:	2100      	movs	r1, #0
 800bec6:	4618      	mov	r0, r3
 800bec8:	f000 fd16 	bl	800c8f8 <RCCEx_PLL2_Config>
 800becc:	4603      	mov	r3, r0
 800bece:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800bed0:	e012      	b.n	800bef8 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	3324      	adds	r3, #36	; 0x24
 800bed6:	2102      	movs	r1, #2
 800bed8:	4618      	mov	r0, r3
 800beda:	f000 fdbf 	bl	800ca5c <RCCEx_PLL3_Config>
 800bede:	4603      	mov	r3, r0
 800bee0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800bee2:	e009      	b.n	800bef8 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bee4:	2301      	movs	r3, #1
 800bee6:	75fb      	strb	r3, [r7, #23]
      break;
 800bee8:	e006      	b.n	800bef8 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800beea:	bf00      	nop
 800beec:	e004      	b.n	800bef8 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800beee:	bf00      	nop
 800bef0:	e002      	b.n	800bef8 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800bef2:	bf00      	nop
 800bef4:	e000      	b.n	800bef8 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800bef6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bef8:	7dfb      	ldrb	r3, [r7, #23]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d10a      	bne.n	800bf14 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800befe:	4b57      	ldr	r3, [pc, #348]	; (800c05c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800bf00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf02:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf0c:	4953      	ldr	r1, [pc, #332]	; (800c05c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800bf0e:	4313      	orrs	r3, r2
 800bf10:	654b      	str	r3, [r1, #84]	; 0x54
 800bf12:	e001      	b.n	800bf18 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf14:	7dfb      	ldrb	r3, [r7, #23]
 800bf16:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d04b      	beq.n	800bfbc <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bf2a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bf2e:	d02e      	beq.n	800bf8e <HAL_RCCEx_PeriphCLKConfig+0xa06>
 800bf30:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bf34:	d828      	bhi.n	800bf88 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800bf36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf3a:	d02a      	beq.n	800bf92 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800bf3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf40:	d822      	bhi.n	800bf88 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800bf42:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bf46:	d026      	beq.n	800bf96 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800bf48:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bf4c:	d81c      	bhi.n	800bf88 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800bf4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bf52:	d010      	beq.n	800bf76 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 800bf54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bf58:	d816      	bhi.n	800bf88 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d01d      	beq.n	800bf9a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800bf5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bf62:	d111      	bne.n	800bf88 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	3304      	adds	r3, #4
 800bf68:	2100      	movs	r1, #0
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	f000 fcc4 	bl	800c8f8 <RCCEx_PLL2_Config>
 800bf70:	4603      	mov	r3, r0
 800bf72:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800bf74:	e012      	b.n	800bf9c <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	3324      	adds	r3, #36	; 0x24
 800bf7a:	2102      	movs	r1, #2
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	f000 fd6d 	bl	800ca5c <RCCEx_PLL3_Config>
 800bf82:	4603      	mov	r3, r0
 800bf84:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800bf86:	e009      	b.n	800bf9c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bf88:	2301      	movs	r3, #1
 800bf8a:	75fb      	strb	r3, [r7, #23]
      break;
 800bf8c:	e006      	b.n	800bf9c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800bf8e:	bf00      	nop
 800bf90:	e004      	b.n	800bf9c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800bf92:	bf00      	nop
 800bf94:	e002      	b.n	800bf9c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800bf96:	bf00      	nop
 800bf98:	e000      	b.n	800bf9c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800bf9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bf9c:	7dfb      	ldrb	r3, [r7, #23]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d10a      	bne.n	800bfb8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800bfa2:	4b2e      	ldr	r3, [pc, #184]	; (800c05c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800bfa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bfa6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bfb0:	492a      	ldr	r1, [pc, #168]	; (800c05c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800bfb2:	4313      	orrs	r3, r2
 800bfb4:	658b      	str	r3, [r1, #88]	; 0x58
 800bfb6:	e001      	b.n	800bfbc <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bfb8:	7dfb      	ldrb	r3, [r7, #23]
 800bfba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d04d      	beq.n	800c064 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bfce:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800bfd2:	d02e      	beq.n	800c032 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 800bfd4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800bfd8:	d828      	bhi.n	800c02c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800bfda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bfde:	d02a      	beq.n	800c036 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800bfe0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bfe4:	d822      	bhi.n	800c02c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800bfe6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800bfea:	d026      	beq.n	800c03a <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800bfec:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800bff0:	d81c      	bhi.n	800c02c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800bff2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bff6:	d010      	beq.n	800c01a <HAL_RCCEx_PeriphCLKConfig+0xa92>
 800bff8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bffc:	d816      	bhi.n	800c02c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d01d      	beq.n	800c03e <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800c002:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c006:	d111      	bne.n	800c02c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	3304      	adds	r3, #4
 800c00c:	2100      	movs	r1, #0
 800c00e:	4618      	mov	r0, r3
 800c010:	f000 fc72 	bl	800c8f8 <RCCEx_PLL2_Config>
 800c014:	4603      	mov	r3, r0
 800c016:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800c018:	e012      	b.n	800c040 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	3324      	adds	r3, #36	; 0x24
 800c01e:	2102      	movs	r1, #2
 800c020:	4618      	mov	r0, r3
 800c022:	f000 fd1b 	bl	800ca5c <RCCEx_PLL3_Config>
 800c026:	4603      	mov	r3, r0
 800c028:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800c02a:	e009      	b.n	800c040 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c02c:	2301      	movs	r3, #1
 800c02e:	75fb      	strb	r3, [r7, #23]
      break;
 800c030:	e006      	b.n	800c040 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800c032:	bf00      	nop
 800c034:	e004      	b.n	800c040 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800c036:	bf00      	nop
 800c038:	e002      	b.n	800c040 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800c03a:	bf00      	nop
 800c03c:	e000      	b.n	800c040 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800c03e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c040:	7dfb      	ldrb	r3, [r7, #23]
 800c042:	2b00      	cmp	r3, #0
 800c044:	d10c      	bne.n	800c060 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c046:	4b05      	ldr	r3, [pc, #20]	; (800c05c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800c048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c04a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c054:	4901      	ldr	r1, [pc, #4]	; (800c05c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800c056:	4313      	orrs	r3, r2
 800c058:	658b      	str	r3, [r1, #88]	; 0x58
 800c05a:	e003      	b.n	800c064 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800c05c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c060:	7dfb      	ldrb	r3, [r7, #23]
 800c062:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	f003 0308 	and.w	r3, r3, #8
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d018      	beq.n	800c0a2 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c074:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c078:	d10a      	bne.n	800c090 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	3324      	adds	r3, #36	; 0x24
 800c07e:	2102      	movs	r1, #2
 800c080:	4618      	mov	r0, r3
 800c082:	f000 fceb 	bl	800ca5c <RCCEx_PLL3_Config>
 800c086:	4603      	mov	r3, r0
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d001      	beq.n	800c090 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 800c08c:	2301      	movs	r3, #1
 800c08e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800c090:	4b8a      	ldr	r3, [pc, #552]	; (800c2bc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800c092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c094:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c09c:	4987      	ldr	r1, [pc, #540]	; (800c2bc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800c09e:	4313      	orrs	r3, r2
 800c0a0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	f003 0310 	and.w	r3, r3, #16
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d01a      	beq.n	800c0e4 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c0b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c0b8:	d10a      	bne.n	800c0d0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	3324      	adds	r3, #36	; 0x24
 800c0be:	2102      	movs	r1, #2
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	f000 fccb 	bl	800ca5c <RCCEx_PLL3_Config>
 800c0c6:	4603      	mov	r3, r0
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d001      	beq.n	800c0d0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 800c0cc:	2301      	movs	r3, #1
 800c0ce:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c0d0:	4b7a      	ldr	r3, [pc, #488]	; (800c2bc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800c0d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c0de:	4977      	ldr	r1, [pc, #476]	; (800c2bc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800c0e0:	4313      	orrs	r3, r2
 800c0e2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d034      	beq.n	800c15a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c0f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c0fa:	d01d      	beq.n	800c138 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800c0fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c100:	d817      	bhi.n	800c132 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800c102:	2b00      	cmp	r3, #0
 800c104:	d003      	beq.n	800c10e <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800c106:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c10a:	d009      	beq.n	800c120 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c10c:	e011      	b.n	800c132 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	3304      	adds	r3, #4
 800c112:	2100      	movs	r1, #0
 800c114:	4618      	mov	r0, r3
 800c116:	f000 fbef 	bl	800c8f8 <RCCEx_PLL2_Config>
 800c11a:	4603      	mov	r3, r0
 800c11c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800c11e:	e00c      	b.n	800c13a <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	3324      	adds	r3, #36	; 0x24
 800c124:	2102      	movs	r1, #2
 800c126:	4618      	mov	r0, r3
 800c128:	f000 fc98 	bl	800ca5c <RCCEx_PLL3_Config>
 800c12c:	4603      	mov	r3, r0
 800c12e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800c130:	e003      	b.n	800c13a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c132:	2301      	movs	r3, #1
 800c134:	75fb      	strb	r3, [r7, #23]
      break;
 800c136:	e000      	b.n	800c13a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 800c138:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c13a:	7dfb      	ldrb	r3, [r7, #23]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d10a      	bne.n	800c156 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c140:	4b5e      	ldr	r3, [pc, #376]	; (800c2bc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800c142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c144:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c14e:	495b      	ldr	r1, [pc, #364]	; (800c2bc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800c150:	4313      	orrs	r3, r2
 800c152:	658b      	str	r3, [r1, #88]	; 0x58
 800c154:	e001      	b.n	800c15a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c156:	7dfb      	ldrb	r3, [r7, #23]
 800c158:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c162:	2b00      	cmp	r3, #0
 800c164:	d033      	beq.n	800c1ce <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c16c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c170:	d01c      	beq.n	800c1ac <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800c172:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c176:	d816      	bhi.n	800c1a6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800c178:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c17c:	d003      	beq.n	800c186 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800c17e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c182:	d007      	beq.n	800c194 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 800c184:	e00f      	b.n	800c1a6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c186:	4b4d      	ldr	r3, [pc, #308]	; (800c2bc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800c188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c18a:	4a4c      	ldr	r2, [pc, #304]	; (800c2bc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800c18c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c190:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800c192:	e00c      	b.n	800c1ae <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	3324      	adds	r3, #36	; 0x24
 800c198:	2101      	movs	r1, #1
 800c19a:	4618      	mov	r0, r3
 800c19c:	f000 fc5e 	bl	800ca5c <RCCEx_PLL3_Config>
 800c1a0:	4603      	mov	r3, r0
 800c1a2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800c1a4:	e003      	b.n	800c1ae <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c1a6:	2301      	movs	r3, #1
 800c1a8:	75fb      	strb	r3, [r7, #23]
      break;
 800c1aa:	e000      	b.n	800c1ae <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 800c1ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c1ae:	7dfb      	ldrb	r3, [r7, #23]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d10a      	bne.n	800c1ca <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c1b4:	4b41      	ldr	r3, [pc, #260]	; (800c2bc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800c1b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c1c2:	493e      	ldr	r1, [pc, #248]	; (800c2bc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800c1c4:	4313      	orrs	r3, r2
 800c1c6:	654b      	str	r3, [r1, #84]	; 0x54
 800c1c8:	e001      	b.n	800c1ce <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c1ca:	7dfb      	ldrb	r3, [r7, #23]
 800c1cc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d029      	beq.n	800c22e <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d003      	beq.n	800c1ea <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800c1e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c1e6:	d007      	beq.n	800c1f8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800c1e8:	e00f      	b.n	800c20a <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c1ea:	4b34      	ldr	r3, [pc, #208]	; (800c2bc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800c1ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1ee:	4a33      	ldr	r2, [pc, #204]	; (800c2bc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800c1f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c1f4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800c1f6:	e00b      	b.n	800c210 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	3304      	adds	r3, #4
 800c1fc:	2102      	movs	r1, #2
 800c1fe:	4618      	mov	r0, r3
 800c200:	f000 fb7a 	bl	800c8f8 <RCCEx_PLL2_Config>
 800c204:	4603      	mov	r3, r0
 800c206:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800c208:	e002      	b.n	800c210 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 800c20a:	2301      	movs	r3, #1
 800c20c:	75fb      	strb	r3, [r7, #23]
      break;
 800c20e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c210:	7dfb      	ldrb	r3, [r7, #23]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d109      	bne.n	800c22a <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c216:	4b29      	ldr	r3, [pc, #164]	; (800c2bc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800c218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c21a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c222:	4926      	ldr	r1, [pc, #152]	; (800c2bc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800c224:	4313      	orrs	r3, r2
 800c226:	64cb      	str	r3, [r1, #76]	; 0x4c
 800c228:	e001      	b.n	800c22e <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c22a:	7dfb      	ldrb	r3, [r7, #23]
 800c22c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c236:	2b00      	cmp	r3, #0
 800c238:	d00a      	beq.n	800c250 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	3324      	adds	r3, #36	; 0x24
 800c23e:	2102      	movs	r1, #2
 800c240:	4618      	mov	r0, r3
 800c242:	f000 fc0b 	bl	800ca5c <RCCEx_PLL3_Config>
 800c246:	4603      	mov	r3, r0
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d001      	beq.n	800c250 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 800c24c:	2301      	movs	r3, #1
 800c24e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d033      	beq.n	800c2c4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c260:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c264:	d017      	beq.n	800c296 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800c266:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c26a:	d811      	bhi.n	800c290 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800c26c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c270:	d013      	beq.n	800c29a <HAL_RCCEx_PeriphCLKConfig+0xd12>
 800c272:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c276:	d80b      	bhi.n	800c290 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d010      	beq.n	800c29e <HAL_RCCEx_PeriphCLKConfig+0xd16>
 800c27c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c280:	d106      	bne.n	800c290 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c282:	4b0e      	ldr	r3, [pc, #56]	; (800c2bc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800c284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c286:	4a0d      	ldr	r2, [pc, #52]	; (800c2bc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800c288:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c28c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800c28e:	e007      	b.n	800c2a0 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c290:	2301      	movs	r3, #1
 800c292:	75fb      	strb	r3, [r7, #23]
      break;
 800c294:	e004      	b.n	800c2a0 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800c296:	bf00      	nop
 800c298:	e002      	b.n	800c2a0 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800c29a:	bf00      	nop
 800c29c:	e000      	b.n	800c2a0 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800c29e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c2a0:	7dfb      	ldrb	r3, [r7, #23]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d10c      	bne.n	800c2c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c2a6:	4b05      	ldr	r3, [pc, #20]	; (800c2bc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800c2a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c2b2:	4902      	ldr	r1, [pc, #8]	; (800c2bc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800c2b4:	4313      	orrs	r3, r2
 800c2b6:	654b      	str	r3, [r1, #84]	; 0x54
 800c2b8:	e004      	b.n	800c2c4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 800c2ba:	bf00      	nop
 800c2bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2c0:	7dfb      	ldrb	r3, [r7, #23]
 800c2c2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d008      	beq.n	800c2e2 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c2d0:	4b29      	ldr	r3, [pc, #164]	; (800c378 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800c2d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c2d4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c2dc:	4926      	ldr	r1, [pc, #152]	; (800c378 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800c2de:	4313      	orrs	r3, r2
 800c2e0:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d008      	beq.n	800c300 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c2ee:	4b22      	ldr	r3, [pc, #136]	; (800c378 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800c2f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c2f2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c2fa:	491f      	ldr	r1, [pc, #124]	; (800c378 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800c2fc:	4313      	orrs	r3, r2
 800c2fe:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d00d      	beq.n	800c328 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c30c:	4b1a      	ldr	r3, [pc, #104]	; (800c378 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800c30e:	691b      	ldr	r3, [r3, #16]
 800c310:	4a19      	ldr	r2, [pc, #100]	; (800c378 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800c312:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c316:	6113      	str	r3, [r2, #16]
 800c318:	4b17      	ldr	r3, [pc, #92]	; (800c378 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800c31a:	691a      	ldr	r2, [r3, #16]
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c322:	4915      	ldr	r1, [pc, #84]	; (800c378 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800c324:	4313      	orrs	r3, r2
 800c326:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	da08      	bge.n	800c342 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c330:	4b11      	ldr	r3, [pc, #68]	; (800c378 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800c332:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c334:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c33c:	490e      	ldr	r1, [pc, #56]	; (800c378 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800c33e:	4313      	orrs	r3, r2
 800c340:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d009      	beq.n	800c362 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c34e:	4b0a      	ldr	r3, [pc, #40]	; (800c378 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800c350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c352:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c35c:	4906      	ldr	r1, [pc, #24]	; (800c378 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800c35e:	4313      	orrs	r3, r2
 800c360:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800c362:	7dbb      	ldrb	r3, [r7, #22]
 800c364:	2b00      	cmp	r3, #0
 800c366:	d101      	bne.n	800c36c <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 800c368:	2300      	movs	r3, #0
 800c36a:	e000      	b.n	800c36e <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 800c36c:	2301      	movs	r3, #1
}
 800c36e:	4618      	mov	r0, r3
 800c370:	3718      	adds	r7, #24
 800c372:	46bd      	mov	sp, r7
 800c374:	bd80      	pop	{r7, pc}
 800c376:	bf00      	nop
 800c378:	58024400 	.word	0x58024400

0800c37c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c37c:	b580      	push	{r7, lr}
 800c37e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c380:	f7ff f8a6 	bl	800b4d0 <HAL_RCC_GetHCLKFreq>
 800c384:	4602      	mov	r2, r0
 800c386:	4b06      	ldr	r3, [pc, #24]	; (800c3a0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c388:	6a1b      	ldr	r3, [r3, #32]
 800c38a:	091b      	lsrs	r3, r3, #4
 800c38c:	f003 0307 	and.w	r3, r3, #7
 800c390:	4904      	ldr	r1, [pc, #16]	; (800c3a4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c392:	5ccb      	ldrb	r3, [r1, r3]
 800c394:	f003 031f 	and.w	r3, r3, #31
 800c398:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c39c:	4618      	mov	r0, r3
 800c39e:	bd80      	pop	{r7, pc}
 800c3a0:	58024400 	.word	0x58024400
 800c3a4:	08011c58 	.word	0x08011c58

0800c3a8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800c3a8:	b480      	push	{r7}
 800c3aa:	b089      	sub	sp, #36	; 0x24
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c3b0:	4ba1      	ldr	r3, [pc, #644]	; (800c638 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c3b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3b4:	f003 0303 	and.w	r3, r3, #3
 800c3b8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800c3ba:	4b9f      	ldr	r3, [pc, #636]	; (800c638 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c3bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3be:	0b1b      	lsrs	r3, r3, #12
 800c3c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c3c4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c3c6:	4b9c      	ldr	r3, [pc, #624]	; (800c638 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c3c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3ca:	091b      	lsrs	r3, r3, #4
 800c3cc:	f003 0301 	and.w	r3, r3, #1
 800c3d0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800c3d2:	4b99      	ldr	r3, [pc, #612]	; (800c638 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c3d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3d6:	08db      	lsrs	r3, r3, #3
 800c3d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c3dc:	693a      	ldr	r2, [r7, #16]
 800c3de:	fb02 f303 	mul.w	r3, r2, r3
 800c3e2:	ee07 3a90 	vmov	s15, r3
 800c3e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3ea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c3ee:	697b      	ldr	r3, [r7, #20]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	f000 8111 	beq.w	800c618 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c3f6:	69bb      	ldr	r3, [r7, #24]
 800c3f8:	2b02      	cmp	r3, #2
 800c3fa:	f000 8083 	beq.w	800c504 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c3fe:	69bb      	ldr	r3, [r7, #24]
 800c400:	2b02      	cmp	r3, #2
 800c402:	f200 80a1 	bhi.w	800c548 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c406:	69bb      	ldr	r3, [r7, #24]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d003      	beq.n	800c414 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c40c:	69bb      	ldr	r3, [r7, #24]
 800c40e:	2b01      	cmp	r3, #1
 800c410:	d056      	beq.n	800c4c0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c412:	e099      	b.n	800c548 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c414:	4b88      	ldr	r3, [pc, #544]	; (800c638 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	f003 0320 	and.w	r3, r3, #32
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d02d      	beq.n	800c47c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c420:	4b85      	ldr	r3, [pc, #532]	; (800c638 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	08db      	lsrs	r3, r3, #3
 800c426:	f003 0303 	and.w	r3, r3, #3
 800c42a:	4a84      	ldr	r2, [pc, #528]	; (800c63c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c42c:	fa22 f303 	lsr.w	r3, r2, r3
 800c430:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c432:	68bb      	ldr	r3, [r7, #8]
 800c434:	ee07 3a90 	vmov	s15, r3
 800c438:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c43c:	697b      	ldr	r3, [r7, #20]
 800c43e:	ee07 3a90 	vmov	s15, r3
 800c442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c446:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c44a:	4b7b      	ldr	r3, [pc, #492]	; (800c638 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c44c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c44e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c452:	ee07 3a90 	vmov	s15, r3
 800c456:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c45a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c45e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c640 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c462:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c466:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c46a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c46e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c472:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c476:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800c47a:	e087      	b.n	800c58c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c47c:	697b      	ldr	r3, [r7, #20]
 800c47e:	ee07 3a90 	vmov	s15, r3
 800c482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c486:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c644 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c48a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c48e:	4b6a      	ldr	r3, [pc, #424]	; (800c638 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c492:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c496:	ee07 3a90 	vmov	s15, r3
 800c49a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c49e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c4a2:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c640 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c4a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c4aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c4ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c4b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c4b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c4ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c4be:	e065      	b.n	800c58c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c4c0:	697b      	ldr	r3, [r7, #20]
 800c4c2:	ee07 3a90 	vmov	s15, r3
 800c4c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4ca:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c648 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c4ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c4d2:	4b59      	ldr	r3, [pc, #356]	; (800c638 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c4d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4da:	ee07 3a90 	vmov	s15, r3
 800c4de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c4e2:	ed97 6a03 	vldr	s12, [r7, #12]
 800c4e6:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c640 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c4ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c4ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c4f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c4f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c4fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c4fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c502:	e043      	b.n	800c58c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c504:	697b      	ldr	r3, [r7, #20]
 800c506:	ee07 3a90 	vmov	s15, r3
 800c50a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c50e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c64c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c512:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c516:	4b48      	ldr	r3, [pc, #288]	; (800c638 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c51a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c51e:	ee07 3a90 	vmov	s15, r3
 800c522:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c526:	ed97 6a03 	vldr	s12, [r7, #12]
 800c52a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c640 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c52e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c532:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c536:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c53a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c53e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c542:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c546:	e021      	b.n	800c58c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c548:	697b      	ldr	r3, [r7, #20]
 800c54a:	ee07 3a90 	vmov	s15, r3
 800c54e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c552:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c648 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c556:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c55a:	4b37      	ldr	r3, [pc, #220]	; (800c638 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c55c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c55e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c562:	ee07 3a90 	vmov	s15, r3
 800c566:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c56a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c56e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c640 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c572:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c576:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c57a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c57e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c582:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c586:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c58a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800c58c:	4b2a      	ldr	r3, [pc, #168]	; (800c638 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c58e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c590:	0a5b      	lsrs	r3, r3, #9
 800c592:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c596:	ee07 3a90 	vmov	s15, r3
 800c59a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c59e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c5a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c5a6:	edd7 6a07 	vldr	s13, [r7, #28]
 800c5aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c5ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c5b2:	ee17 2a90 	vmov	r2, s15
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800c5ba:	4b1f      	ldr	r3, [pc, #124]	; (800c638 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c5bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5be:	0c1b      	lsrs	r3, r3, #16
 800c5c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c5c4:	ee07 3a90 	vmov	s15, r3
 800c5c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c5d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c5d4:	edd7 6a07 	vldr	s13, [r7, #28]
 800c5d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c5dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c5e0:	ee17 2a90 	vmov	r2, s15
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800c5e8:	4b13      	ldr	r3, [pc, #76]	; (800c638 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c5ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5ec:	0e1b      	lsrs	r3, r3, #24
 800c5ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c5f2:	ee07 3a90 	vmov	s15, r3
 800c5f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c5fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c602:	edd7 6a07 	vldr	s13, [r7, #28]
 800c606:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c60a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c60e:	ee17 2a90 	vmov	r2, s15
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c616:	e008      	b.n	800c62a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	2200      	movs	r2, #0
 800c61c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	2200      	movs	r2, #0
 800c622:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	2200      	movs	r2, #0
 800c628:	609a      	str	r2, [r3, #8]
}
 800c62a:	bf00      	nop
 800c62c:	3724      	adds	r7, #36	; 0x24
 800c62e:	46bd      	mov	sp, r7
 800c630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c634:	4770      	bx	lr
 800c636:	bf00      	nop
 800c638:	58024400 	.word	0x58024400
 800c63c:	03d09000 	.word	0x03d09000
 800c640:	46000000 	.word	0x46000000
 800c644:	4c742400 	.word	0x4c742400
 800c648:	4a742400 	.word	0x4a742400
 800c64c:	4af42400 	.word	0x4af42400

0800c650 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800c650:	b480      	push	{r7}
 800c652:	b089      	sub	sp, #36	; 0x24
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c658:	4ba1      	ldr	r3, [pc, #644]	; (800c8e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c65a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c65c:	f003 0303 	and.w	r3, r3, #3
 800c660:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800c662:	4b9f      	ldr	r3, [pc, #636]	; (800c8e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c666:	0d1b      	lsrs	r3, r3, #20
 800c668:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c66c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c66e:	4b9c      	ldr	r3, [pc, #624]	; (800c8e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c672:	0a1b      	lsrs	r3, r3, #8
 800c674:	f003 0301 	and.w	r3, r3, #1
 800c678:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800c67a:	4b99      	ldr	r3, [pc, #612]	; (800c8e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c67c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c67e:	08db      	lsrs	r3, r3, #3
 800c680:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c684:	693a      	ldr	r2, [r7, #16]
 800c686:	fb02 f303 	mul.w	r3, r2, r3
 800c68a:	ee07 3a90 	vmov	s15, r3
 800c68e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c692:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c696:	697b      	ldr	r3, [r7, #20]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	f000 8111 	beq.w	800c8c0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c69e:	69bb      	ldr	r3, [r7, #24]
 800c6a0:	2b02      	cmp	r3, #2
 800c6a2:	f000 8083 	beq.w	800c7ac <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c6a6:	69bb      	ldr	r3, [r7, #24]
 800c6a8:	2b02      	cmp	r3, #2
 800c6aa:	f200 80a1 	bhi.w	800c7f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800c6ae:	69bb      	ldr	r3, [r7, #24]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d003      	beq.n	800c6bc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800c6b4:	69bb      	ldr	r3, [r7, #24]
 800c6b6:	2b01      	cmp	r3, #1
 800c6b8:	d056      	beq.n	800c768 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800c6ba:	e099      	b.n	800c7f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c6bc:	4b88      	ldr	r3, [pc, #544]	; (800c8e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	f003 0320 	and.w	r3, r3, #32
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d02d      	beq.n	800c724 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c6c8:	4b85      	ldr	r3, [pc, #532]	; (800c8e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	08db      	lsrs	r3, r3, #3
 800c6ce:	f003 0303 	and.w	r3, r3, #3
 800c6d2:	4a84      	ldr	r2, [pc, #528]	; (800c8e4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c6d4:	fa22 f303 	lsr.w	r3, r2, r3
 800c6d8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c6da:	68bb      	ldr	r3, [r7, #8]
 800c6dc:	ee07 3a90 	vmov	s15, r3
 800c6e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c6e4:	697b      	ldr	r3, [r7, #20]
 800c6e6:	ee07 3a90 	vmov	s15, r3
 800c6ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c6f2:	4b7b      	ldr	r3, [pc, #492]	; (800c8e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c6f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6fa:	ee07 3a90 	vmov	s15, r3
 800c6fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c702:	ed97 6a03 	vldr	s12, [r7, #12]
 800c706:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c8e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c70a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c70e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c712:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c716:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c71a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c71e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800c722:	e087      	b.n	800c834 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c724:	697b      	ldr	r3, [r7, #20]
 800c726:	ee07 3a90 	vmov	s15, r3
 800c72a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c72e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c8ec <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c732:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c736:	4b6a      	ldr	r3, [pc, #424]	; (800c8e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c73a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c73e:	ee07 3a90 	vmov	s15, r3
 800c742:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c746:	ed97 6a03 	vldr	s12, [r7, #12]
 800c74a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c8e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c74e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c752:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c756:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c75a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c75e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c762:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c766:	e065      	b.n	800c834 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c768:	697b      	ldr	r3, [r7, #20]
 800c76a:	ee07 3a90 	vmov	s15, r3
 800c76e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c772:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c8f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c776:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c77a:	4b59      	ldr	r3, [pc, #356]	; (800c8e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c77c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c77e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c782:	ee07 3a90 	vmov	s15, r3
 800c786:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c78a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c78e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c8e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c792:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c796:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c79a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c79e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c7a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c7a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c7aa:	e043      	b.n	800c834 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c7ac:	697b      	ldr	r3, [r7, #20]
 800c7ae:	ee07 3a90 	vmov	s15, r3
 800c7b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7b6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c8f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c7ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c7be:	4b48      	ldr	r3, [pc, #288]	; (800c8e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c7c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7c6:	ee07 3a90 	vmov	s15, r3
 800c7ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c7ce:	ed97 6a03 	vldr	s12, [r7, #12]
 800c7d2:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c8e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c7d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c7da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c7de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c7e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c7e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c7ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c7ee:	e021      	b.n	800c834 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c7f0:	697b      	ldr	r3, [r7, #20]
 800c7f2:	ee07 3a90 	vmov	s15, r3
 800c7f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7fa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c8f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c7fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c802:	4b37      	ldr	r3, [pc, #220]	; (800c8e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c806:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c80a:	ee07 3a90 	vmov	s15, r3
 800c80e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c812:	ed97 6a03 	vldr	s12, [r7, #12]
 800c816:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c8e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c81a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c81e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c822:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c826:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c82a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c82e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c832:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800c834:	4b2a      	ldr	r3, [pc, #168]	; (800c8e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c838:	0a5b      	lsrs	r3, r3, #9
 800c83a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c83e:	ee07 3a90 	vmov	s15, r3
 800c842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c846:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c84a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c84e:	edd7 6a07 	vldr	s13, [r7, #28]
 800c852:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c856:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c85a:	ee17 2a90 	vmov	r2, s15
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800c862:	4b1f      	ldr	r3, [pc, #124]	; (800c8e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c866:	0c1b      	lsrs	r3, r3, #16
 800c868:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c86c:	ee07 3a90 	vmov	s15, r3
 800c870:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c874:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c878:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c87c:	edd7 6a07 	vldr	s13, [r7, #28]
 800c880:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c884:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c888:	ee17 2a90 	vmov	r2, s15
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800c890:	4b13      	ldr	r3, [pc, #76]	; (800c8e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c894:	0e1b      	lsrs	r3, r3, #24
 800c896:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c89a:	ee07 3a90 	vmov	s15, r3
 800c89e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c8a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c8aa:	edd7 6a07 	vldr	s13, [r7, #28]
 800c8ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c8b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c8b6:	ee17 2a90 	vmov	r2, s15
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c8be:	e008      	b.n	800c8d2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	2200      	movs	r2, #0
 800c8ca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	2200      	movs	r2, #0
 800c8d0:	609a      	str	r2, [r3, #8]
}
 800c8d2:	bf00      	nop
 800c8d4:	3724      	adds	r7, #36	; 0x24
 800c8d6:	46bd      	mov	sp, r7
 800c8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8dc:	4770      	bx	lr
 800c8de:	bf00      	nop
 800c8e0:	58024400 	.word	0x58024400
 800c8e4:	03d09000 	.word	0x03d09000
 800c8e8:	46000000 	.word	0x46000000
 800c8ec:	4c742400 	.word	0x4c742400
 800c8f0:	4a742400 	.word	0x4a742400
 800c8f4:	4af42400 	.word	0x4af42400

0800c8f8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b084      	sub	sp, #16
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
 800c900:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c902:	2300      	movs	r3, #0
 800c904:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c906:	4b53      	ldr	r3, [pc, #332]	; (800ca54 <RCCEx_PLL2_Config+0x15c>)
 800c908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c90a:	f003 0303 	and.w	r3, r3, #3
 800c90e:	2b03      	cmp	r3, #3
 800c910:	d101      	bne.n	800c916 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c912:	2301      	movs	r3, #1
 800c914:	e099      	b.n	800ca4a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c916:	4b4f      	ldr	r3, [pc, #316]	; (800ca54 <RCCEx_PLL2_Config+0x15c>)
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	4a4e      	ldr	r2, [pc, #312]	; (800ca54 <RCCEx_PLL2_Config+0x15c>)
 800c91c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c920:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c922:	f7fa faa3 	bl	8006e6c <HAL_GetTick>
 800c926:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c928:	e008      	b.n	800c93c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c92a:	f7fa fa9f 	bl	8006e6c <HAL_GetTick>
 800c92e:	4602      	mov	r2, r0
 800c930:	68bb      	ldr	r3, [r7, #8]
 800c932:	1ad3      	subs	r3, r2, r3
 800c934:	2b02      	cmp	r3, #2
 800c936:	d901      	bls.n	800c93c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c938:	2303      	movs	r3, #3
 800c93a:	e086      	b.n	800ca4a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c93c:	4b45      	ldr	r3, [pc, #276]	; (800ca54 <RCCEx_PLL2_Config+0x15c>)
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c944:	2b00      	cmp	r3, #0
 800c946:	d1f0      	bne.n	800c92a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c948:	4b42      	ldr	r3, [pc, #264]	; (800ca54 <RCCEx_PLL2_Config+0x15c>)
 800c94a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c94c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	031b      	lsls	r3, r3, #12
 800c956:	493f      	ldr	r1, [pc, #252]	; (800ca54 <RCCEx_PLL2_Config+0x15c>)
 800c958:	4313      	orrs	r3, r2
 800c95a:	628b      	str	r3, [r1, #40]	; 0x28
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	685b      	ldr	r3, [r3, #4]
 800c960:	3b01      	subs	r3, #1
 800c962:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	689b      	ldr	r3, [r3, #8]
 800c96a:	3b01      	subs	r3, #1
 800c96c:	025b      	lsls	r3, r3, #9
 800c96e:	b29b      	uxth	r3, r3
 800c970:	431a      	orrs	r2, r3
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	68db      	ldr	r3, [r3, #12]
 800c976:	3b01      	subs	r3, #1
 800c978:	041b      	lsls	r3, r3, #16
 800c97a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c97e:	431a      	orrs	r2, r3
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	691b      	ldr	r3, [r3, #16]
 800c984:	3b01      	subs	r3, #1
 800c986:	061b      	lsls	r3, r3, #24
 800c988:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c98c:	4931      	ldr	r1, [pc, #196]	; (800ca54 <RCCEx_PLL2_Config+0x15c>)
 800c98e:	4313      	orrs	r3, r2
 800c990:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c992:	4b30      	ldr	r3, [pc, #192]	; (800ca54 <RCCEx_PLL2_Config+0x15c>)
 800c994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c996:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	695b      	ldr	r3, [r3, #20]
 800c99e:	492d      	ldr	r1, [pc, #180]	; (800ca54 <RCCEx_PLL2_Config+0x15c>)
 800c9a0:	4313      	orrs	r3, r2
 800c9a2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c9a4:	4b2b      	ldr	r3, [pc, #172]	; (800ca54 <RCCEx_PLL2_Config+0x15c>)
 800c9a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9a8:	f023 0220 	bic.w	r2, r3, #32
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	699b      	ldr	r3, [r3, #24]
 800c9b0:	4928      	ldr	r1, [pc, #160]	; (800ca54 <RCCEx_PLL2_Config+0x15c>)
 800c9b2:	4313      	orrs	r3, r2
 800c9b4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c9b6:	4b27      	ldr	r3, [pc, #156]	; (800ca54 <RCCEx_PLL2_Config+0x15c>)
 800c9b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9ba:	4a26      	ldr	r2, [pc, #152]	; (800ca54 <RCCEx_PLL2_Config+0x15c>)
 800c9bc:	f023 0310 	bic.w	r3, r3, #16
 800c9c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c9c2:	4b24      	ldr	r3, [pc, #144]	; (800ca54 <RCCEx_PLL2_Config+0x15c>)
 800c9c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c9c6:	4b24      	ldr	r3, [pc, #144]	; (800ca58 <RCCEx_PLL2_Config+0x160>)
 800c9c8:	4013      	ands	r3, r2
 800c9ca:	687a      	ldr	r2, [r7, #4]
 800c9cc:	69d2      	ldr	r2, [r2, #28]
 800c9ce:	00d2      	lsls	r2, r2, #3
 800c9d0:	4920      	ldr	r1, [pc, #128]	; (800ca54 <RCCEx_PLL2_Config+0x15c>)
 800c9d2:	4313      	orrs	r3, r2
 800c9d4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c9d6:	4b1f      	ldr	r3, [pc, #124]	; (800ca54 <RCCEx_PLL2_Config+0x15c>)
 800c9d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9da:	4a1e      	ldr	r2, [pc, #120]	; (800ca54 <RCCEx_PLL2_Config+0x15c>)
 800c9dc:	f043 0310 	orr.w	r3, r3, #16
 800c9e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c9e2:	683b      	ldr	r3, [r7, #0]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d106      	bne.n	800c9f6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c9e8:	4b1a      	ldr	r3, [pc, #104]	; (800ca54 <RCCEx_PLL2_Config+0x15c>)
 800c9ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9ec:	4a19      	ldr	r2, [pc, #100]	; (800ca54 <RCCEx_PLL2_Config+0x15c>)
 800c9ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c9f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c9f4:	e00f      	b.n	800ca16 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c9f6:	683b      	ldr	r3, [r7, #0]
 800c9f8:	2b01      	cmp	r3, #1
 800c9fa:	d106      	bne.n	800ca0a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c9fc:	4b15      	ldr	r3, [pc, #84]	; (800ca54 <RCCEx_PLL2_Config+0x15c>)
 800c9fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca00:	4a14      	ldr	r2, [pc, #80]	; (800ca54 <RCCEx_PLL2_Config+0x15c>)
 800ca02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ca06:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ca08:	e005      	b.n	800ca16 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ca0a:	4b12      	ldr	r3, [pc, #72]	; (800ca54 <RCCEx_PLL2_Config+0x15c>)
 800ca0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca0e:	4a11      	ldr	r2, [pc, #68]	; (800ca54 <RCCEx_PLL2_Config+0x15c>)
 800ca10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ca14:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800ca16:	4b0f      	ldr	r3, [pc, #60]	; (800ca54 <RCCEx_PLL2_Config+0x15c>)
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	4a0e      	ldr	r2, [pc, #56]	; (800ca54 <RCCEx_PLL2_Config+0x15c>)
 800ca1c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ca20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ca22:	f7fa fa23 	bl	8006e6c <HAL_GetTick>
 800ca26:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ca28:	e008      	b.n	800ca3c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800ca2a:	f7fa fa1f 	bl	8006e6c <HAL_GetTick>
 800ca2e:	4602      	mov	r2, r0
 800ca30:	68bb      	ldr	r3, [r7, #8]
 800ca32:	1ad3      	subs	r3, r2, r3
 800ca34:	2b02      	cmp	r3, #2
 800ca36:	d901      	bls.n	800ca3c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ca38:	2303      	movs	r3, #3
 800ca3a:	e006      	b.n	800ca4a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ca3c:	4b05      	ldr	r3, [pc, #20]	; (800ca54 <RCCEx_PLL2_Config+0x15c>)
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d0f0      	beq.n	800ca2a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800ca48:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	3710      	adds	r7, #16
 800ca4e:	46bd      	mov	sp, r7
 800ca50:	bd80      	pop	{r7, pc}
 800ca52:	bf00      	nop
 800ca54:	58024400 	.word	0x58024400
 800ca58:	ffff0007 	.word	0xffff0007

0800ca5c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800ca5c:	b580      	push	{r7, lr}
 800ca5e:	b084      	sub	sp, #16
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	6078      	str	r0, [r7, #4]
 800ca64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ca66:	2300      	movs	r3, #0
 800ca68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ca6a:	4b53      	ldr	r3, [pc, #332]	; (800cbb8 <RCCEx_PLL3_Config+0x15c>)
 800ca6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca6e:	f003 0303 	and.w	r3, r3, #3
 800ca72:	2b03      	cmp	r3, #3
 800ca74:	d101      	bne.n	800ca7a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800ca76:	2301      	movs	r3, #1
 800ca78:	e099      	b.n	800cbae <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800ca7a:	4b4f      	ldr	r3, [pc, #316]	; (800cbb8 <RCCEx_PLL3_Config+0x15c>)
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	4a4e      	ldr	r2, [pc, #312]	; (800cbb8 <RCCEx_PLL3_Config+0x15c>)
 800ca80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ca84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ca86:	f7fa f9f1 	bl	8006e6c <HAL_GetTick>
 800ca8a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ca8c:	e008      	b.n	800caa0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800ca8e:	f7fa f9ed 	bl	8006e6c <HAL_GetTick>
 800ca92:	4602      	mov	r2, r0
 800ca94:	68bb      	ldr	r3, [r7, #8]
 800ca96:	1ad3      	subs	r3, r2, r3
 800ca98:	2b02      	cmp	r3, #2
 800ca9a:	d901      	bls.n	800caa0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ca9c:	2303      	movs	r3, #3
 800ca9e:	e086      	b.n	800cbae <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800caa0:	4b45      	ldr	r3, [pc, #276]	; (800cbb8 <RCCEx_PLL3_Config+0x15c>)
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d1f0      	bne.n	800ca8e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800caac:	4b42      	ldr	r3, [pc, #264]	; (800cbb8 <RCCEx_PLL3_Config+0x15c>)
 800caae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cab0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	051b      	lsls	r3, r3, #20
 800caba:	493f      	ldr	r1, [pc, #252]	; (800cbb8 <RCCEx_PLL3_Config+0x15c>)
 800cabc:	4313      	orrs	r3, r2
 800cabe:	628b      	str	r3, [r1, #40]	; 0x28
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	685b      	ldr	r3, [r3, #4]
 800cac4:	3b01      	subs	r3, #1
 800cac6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	689b      	ldr	r3, [r3, #8]
 800cace:	3b01      	subs	r3, #1
 800cad0:	025b      	lsls	r3, r3, #9
 800cad2:	b29b      	uxth	r3, r3
 800cad4:	431a      	orrs	r2, r3
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	68db      	ldr	r3, [r3, #12]
 800cada:	3b01      	subs	r3, #1
 800cadc:	041b      	lsls	r3, r3, #16
 800cade:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800cae2:	431a      	orrs	r2, r3
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	691b      	ldr	r3, [r3, #16]
 800cae8:	3b01      	subs	r3, #1
 800caea:	061b      	lsls	r3, r3, #24
 800caec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800caf0:	4931      	ldr	r1, [pc, #196]	; (800cbb8 <RCCEx_PLL3_Config+0x15c>)
 800caf2:	4313      	orrs	r3, r2
 800caf4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800caf6:	4b30      	ldr	r3, [pc, #192]	; (800cbb8 <RCCEx_PLL3_Config+0x15c>)
 800caf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cafa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	695b      	ldr	r3, [r3, #20]
 800cb02:	492d      	ldr	r1, [pc, #180]	; (800cbb8 <RCCEx_PLL3_Config+0x15c>)
 800cb04:	4313      	orrs	r3, r2
 800cb06:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800cb08:	4b2b      	ldr	r3, [pc, #172]	; (800cbb8 <RCCEx_PLL3_Config+0x15c>)
 800cb0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb0c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	699b      	ldr	r3, [r3, #24]
 800cb14:	4928      	ldr	r1, [pc, #160]	; (800cbb8 <RCCEx_PLL3_Config+0x15c>)
 800cb16:	4313      	orrs	r3, r2
 800cb18:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800cb1a:	4b27      	ldr	r3, [pc, #156]	; (800cbb8 <RCCEx_PLL3_Config+0x15c>)
 800cb1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb1e:	4a26      	ldr	r2, [pc, #152]	; (800cbb8 <RCCEx_PLL3_Config+0x15c>)
 800cb20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cb24:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800cb26:	4b24      	ldr	r3, [pc, #144]	; (800cbb8 <RCCEx_PLL3_Config+0x15c>)
 800cb28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cb2a:	4b24      	ldr	r3, [pc, #144]	; (800cbbc <RCCEx_PLL3_Config+0x160>)
 800cb2c:	4013      	ands	r3, r2
 800cb2e:	687a      	ldr	r2, [r7, #4]
 800cb30:	69d2      	ldr	r2, [r2, #28]
 800cb32:	00d2      	lsls	r2, r2, #3
 800cb34:	4920      	ldr	r1, [pc, #128]	; (800cbb8 <RCCEx_PLL3_Config+0x15c>)
 800cb36:	4313      	orrs	r3, r2
 800cb38:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800cb3a:	4b1f      	ldr	r3, [pc, #124]	; (800cbb8 <RCCEx_PLL3_Config+0x15c>)
 800cb3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb3e:	4a1e      	ldr	r2, [pc, #120]	; (800cbb8 <RCCEx_PLL3_Config+0x15c>)
 800cb40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cb44:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800cb46:	683b      	ldr	r3, [r7, #0]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d106      	bne.n	800cb5a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800cb4c:	4b1a      	ldr	r3, [pc, #104]	; (800cbb8 <RCCEx_PLL3_Config+0x15c>)
 800cb4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb50:	4a19      	ldr	r2, [pc, #100]	; (800cbb8 <RCCEx_PLL3_Config+0x15c>)
 800cb52:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800cb56:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cb58:	e00f      	b.n	800cb7a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800cb5a:	683b      	ldr	r3, [r7, #0]
 800cb5c:	2b01      	cmp	r3, #1
 800cb5e:	d106      	bne.n	800cb6e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800cb60:	4b15      	ldr	r3, [pc, #84]	; (800cbb8 <RCCEx_PLL3_Config+0x15c>)
 800cb62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb64:	4a14      	ldr	r2, [pc, #80]	; (800cbb8 <RCCEx_PLL3_Config+0x15c>)
 800cb66:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800cb6a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cb6c:	e005      	b.n	800cb7a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800cb6e:	4b12      	ldr	r3, [pc, #72]	; (800cbb8 <RCCEx_PLL3_Config+0x15c>)
 800cb70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb72:	4a11      	ldr	r2, [pc, #68]	; (800cbb8 <RCCEx_PLL3_Config+0x15c>)
 800cb74:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cb78:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800cb7a:	4b0f      	ldr	r3, [pc, #60]	; (800cbb8 <RCCEx_PLL3_Config+0x15c>)
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	4a0e      	ldr	r2, [pc, #56]	; (800cbb8 <RCCEx_PLL3_Config+0x15c>)
 800cb80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cb84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cb86:	f7fa f971 	bl	8006e6c <HAL_GetTick>
 800cb8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cb8c:	e008      	b.n	800cba0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800cb8e:	f7fa f96d 	bl	8006e6c <HAL_GetTick>
 800cb92:	4602      	mov	r2, r0
 800cb94:	68bb      	ldr	r3, [r7, #8]
 800cb96:	1ad3      	subs	r3, r2, r3
 800cb98:	2b02      	cmp	r3, #2
 800cb9a:	d901      	bls.n	800cba0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cb9c:	2303      	movs	r3, #3
 800cb9e:	e006      	b.n	800cbae <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cba0:	4b05      	ldr	r3, [pc, #20]	; (800cbb8 <RCCEx_PLL3_Config+0x15c>)
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d0f0      	beq.n	800cb8e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800cbac:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbae:	4618      	mov	r0, r3
 800cbb0:	3710      	adds	r7, #16
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	bd80      	pop	{r7, pc}
 800cbb6:	bf00      	nop
 800cbb8:	58024400 	.word	0x58024400
 800cbbc:	ffff0007 	.word	0xffff0007

0800cbc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	b082      	sub	sp, #8
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d101      	bne.n	800cbd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800cbce:	2301      	movs	r3, #1
 800cbd0:	e049      	b.n	800cc66 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cbd8:	b2db      	uxtb	r3, r3
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d106      	bne.n	800cbec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800cbe6:	6878      	ldr	r0, [r7, #4]
 800cbe8:	f7f9 fa56 	bl	8006098 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	2202      	movs	r2, #2
 800cbf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681a      	ldr	r2, [r3, #0]
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	3304      	adds	r3, #4
 800cbfc:	4619      	mov	r1, r3
 800cbfe:	4610      	mov	r0, r2
 800cc00:	f001 f820 	bl	800dc44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	2201      	movs	r2, #1
 800cc08:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	2201      	movs	r2, #1
 800cc10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	2201      	movs	r2, #1
 800cc18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	2201      	movs	r2, #1
 800cc20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	2201      	movs	r2, #1
 800cc28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	2201      	movs	r2, #1
 800cc30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	2201      	movs	r2, #1
 800cc38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	2201      	movs	r2, #1
 800cc40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	2201      	movs	r2, #1
 800cc48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	2201      	movs	r2, #1
 800cc50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	2201      	movs	r2, #1
 800cc58:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	2201      	movs	r2, #1
 800cc60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cc64:	2300      	movs	r3, #0
}
 800cc66:	4618      	mov	r0, r3
 800cc68:	3708      	adds	r7, #8
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	bd80      	pop	{r7, pc}
	...

0800cc70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800cc70:	b480      	push	{r7}
 800cc72:	b085      	sub	sp, #20
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cc7e:	b2db      	uxtb	r3, r3
 800cc80:	2b01      	cmp	r3, #1
 800cc82:	d001      	beq.n	800cc88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800cc84:	2301      	movs	r3, #1
 800cc86:	e05e      	b.n	800cd46 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	2202      	movs	r2, #2
 800cc8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	68da      	ldr	r2, [r3, #12]
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	f042 0201 	orr.w	r2, r2, #1
 800cc9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	4a2b      	ldr	r2, [pc, #172]	; (800cd54 <HAL_TIM_Base_Start_IT+0xe4>)
 800cca6:	4293      	cmp	r3, r2
 800cca8:	d02c      	beq.n	800cd04 <HAL_TIM_Base_Start_IT+0x94>
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ccb2:	d027      	beq.n	800cd04 <HAL_TIM_Base_Start_IT+0x94>
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	4a27      	ldr	r2, [pc, #156]	; (800cd58 <HAL_TIM_Base_Start_IT+0xe8>)
 800ccba:	4293      	cmp	r3, r2
 800ccbc:	d022      	beq.n	800cd04 <HAL_TIM_Base_Start_IT+0x94>
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	4a26      	ldr	r2, [pc, #152]	; (800cd5c <HAL_TIM_Base_Start_IT+0xec>)
 800ccc4:	4293      	cmp	r3, r2
 800ccc6:	d01d      	beq.n	800cd04 <HAL_TIM_Base_Start_IT+0x94>
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	4a24      	ldr	r2, [pc, #144]	; (800cd60 <HAL_TIM_Base_Start_IT+0xf0>)
 800ccce:	4293      	cmp	r3, r2
 800ccd0:	d018      	beq.n	800cd04 <HAL_TIM_Base_Start_IT+0x94>
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	4a23      	ldr	r2, [pc, #140]	; (800cd64 <HAL_TIM_Base_Start_IT+0xf4>)
 800ccd8:	4293      	cmp	r3, r2
 800ccda:	d013      	beq.n	800cd04 <HAL_TIM_Base_Start_IT+0x94>
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	4a21      	ldr	r2, [pc, #132]	; (800cd68 <HAL_TIM_Base_Start_IT+0xf8>)
 800cce2:	4293      	cmp	r3, r2
 800cce4:	d00e      	beq.n	800cd04 <HAL_TIM_Base_Start_IT+0x94>
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	4a20      	ldr	r2, [pc, #128]	; (800cd6c <HAL_TIM_Base_Start_IT+0xfc>)
 800ccec:	4293      	cmp	r3, r2
 800ccee:	d009      	beq.n	800cd04 <HAL_TIM_Base_Start_IT+0x94>
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	4a1e      	ldr	r2, [pc, #120]	; (800cd70 <HAL_TIM_Base_Start_IT+0x100>)
 800ccf6:	4293      	cmp	r3, r2
 800ccf8:	d004      	beq.n	800cd04 <HAL_TIM_Base_Start_IT+0x94>
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	4a1d      	ldr	r2, [pc, #116]	; (800cd74 <HAL_TIM_Base_Start_IT+0x104>)
 800cd00:	4293      	cmp	r3, r2
 800cd02:	d115      	bne.n	800cd30 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	689a      	ldr	r2, [r3, #8]
 800cd0a:	4b1b      	ldr	r3, [pc, #108]	; (800cd78 <HAL_TIM_Base_Start_IT+0x108>)
 800cd0c:	4013      	ands	r3, r2
 800cd0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	2b06      	cmp	r3, #6
 800cd14:	d015      	beq.n	800cd42 <HAL_TIM_Base_Start_IT+0xd2>
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cd1c:	d011      	beq.n	800cd42 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	681a      	ldr	r2, [r3, #0]
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	f042 0201 	orr.w	r2, r2, #1
 800cd2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cd2e:	e008      	b.n	800cd42 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	681a      	ldr	r2, [r3, #0]
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	f042 0201 	orr.w	r2, r2, #1
 800cd3e:	601a      	str	r2, [r3, #0]
 800cd40:	e000      	b.n	800cd44 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cd42:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800cd44:	2300      	movs	r3, #0
}
 800cd46:	4618      	mov	r0, r3
 800cd48:	3714      	adds	r7, #20
 800cd4a:	46bd      	mov	sp, r7
 800cd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd50:	4770      	bx	lr
 800cd52:	bf00      	nop
 800cd54:	40010000 	.word	0x40010000
 800cd58:	40000400 	.word	0x40000400
 800cd5c:	40000800 	.word	0x40000800
 800cd60:	40000c00 	.word	0x40000c00
 800cd64:	40010400 	.word	0x40010400
 800cd68:	40001800 	.word	0x40001800
 800cd6c:	40014000 	.word	0x40014000
 800cd70:	4000e000 	.word	0x4000e000
 800cd74:	4000e400 	.word	0x4000e400
 800cd78:	00010007 	.word	0x00010007

0800cd7c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800cd7c:	b580      	push	{r7, lr}
 800cd7e:	b082      	sub	sp, #8
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d101      	bne.n	800cd8e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800cd8a:	2301      	movs	r3, #1
 800cd8c:	e049      	b.n	800ce22 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cd94:	b2db      	uxtb	r3, r3
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d106      	bne.n	800cda8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	2200      	movs	r2, #0
 800cd9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800cda2:	6878      	ldr	r0, [r7, #4]
 800cda4:	f7f9 fa0e 	bl	80061c4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	2202      	movs	r2, #2
 800cdac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681a      	ldr	r2, [r3, #0]
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	3304      	adds	r3, #4
 800cdb8:	4619      	mov	r1, r3
 800cdba:	4610      	mov	r0, r2
 800cdbc:	f000 ff42 	bl	800dc44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	2201      	movs	r2, #1
 800cdc4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	2201      	movs	r2, #1
 800cdcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	2201      	movs	r2, #1
 800cdd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	2201      	movs	r2, #1
 800cddc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	2201      	movs	r2, #1
 800cde4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	2201      	movs	r2, #1
 800cdec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	2201      	movs	r2, #1
 800cdf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	2201      	movs	r2, #1
 800cdfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	2201      	movs	r2, #1
 800ce04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	2201      	movs	r2, #1
 800ce0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	2201      	movs	r2, #1
 800ce14:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	2201      	movs	r2, #1
 800ce1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ce20:	2300      	movs	r3, #0
}
 800ce22:	4618      	mov	r0, r3
 800ce24:	3708      	adds	r7, #8
 800ce26:	46bd      	mov	sp, r7
 800ce28:	bd80      	pop	{r7, pc}
	...

0800ce2c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ce2c:	b580      	push	{r7, lr}
 800ce2e:	b084      	sub	sp, #16
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	6078      	str	r0, [r7, #4]
 800ce34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ce36:	683b      	ldr	r3, [r7, #0]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d109      	bne.n	800ce50 <HAL_TIM_PWM_Start+0x24>
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ce42:	b2db      	uxtb	r3, r3
 800ce44:	2b01      	cmp	r3, #1
 800ce46:	bf14      	ite	ne
 800ce48:	2301      	movne	r3, #1
 800ce4a:	2300      	moveq	r3, #0
 800ce4c:	b2db      	uxtb	r3, r3
 800ce4e:	e03c      	b.n	800ceca <HAL_TIM_PWM_Start+0x9e>
 800ce50:	683b      	ldr	r3, [r7, #0]
 800ce52:	2b04      	cmp	r3, #4
 800ce54:	d109      	bne.n	800ce6a <HAL_TIM_PWM_Start+0x3e>
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ce5c:	b2db      	uxtb	r3, r3
 800ce5e:	2b01      	cmp	r3, #1
 800ce60:	bf14      	ite	ne
 800ce62:	2301      	movne	r3, #1
 800ce64:	2300      	moveq	r3, #0
 800ce66:	b2db      	uxtb	r3, r3
 800ce68:	e02f      	b.n	800ceca <HAL_TIM_PWM_Start+0x9e>
 800ce6a:	683b      	ldr	r3, [r7, #0]
 800ce6c:	2b08      	cmp	r3, #8
 800ce6e:	d109      	bne.n	800ce84 <HAL_TIM_PWM_Start+0x58>
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ce76:	b2db      	uxtb	r3, r3
 800ce78:	2b01      	cmp	r3, #1
 800ce7a:	bf14      	ite	ne
 800ce7c:	2301      	movne	r3, #1
 800ce7e:	2300      	moveq	r3, #0
 800ce80:	b2db      	uxtb	r3, r3
 800ce82:	e022      	b.n	800ceca <HAL_TIM_PWM_Start+0x9e>
 800ce84:	683b      	ldr	r3, [r7, #0]
 800ce86:	2b0c      	cmp	r3, #12
 800ce88:	d109      	bne.n	800ce9e <HAL_TIM_PWM_Start+0x72>
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ce90:	b2db      	uxtb	r3, r3
 800ce92:	2b01      	cmp	r3, #1
 800ce94:	bf14      	ite	ne
 800ce96:	2301      	movne	r3, #1
 800ce98:	2300      	moveq	r3, #0
 800ce9a:	b2db      	uxtb	r3, r3
 800ce9c:	e015      	b.n	800ceca <HAL_TIM_PWM_Start+0x9e>
 800ce9e:	683b      	ldr	r3, [r7, #0]
 800cea0:	2b10      	cmp	r3, #16
 800cea2:	d109      	bne.n	800ceb8 <HAL_TIM_PWM_Start+0x8c>
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ceaa:	b2db      	uxtb	r3, r3
 800ceac:	2b01      	cmp	r3, #1
 800ceae:	bf14      	ite	ne
 800ceb0:	2301      	movne	r3, #1
 800ceb2:	2300      	moveq	r3, #0
 800ceb4:	b2db      	uxtb	r3, r3
 800ceb6:	e008      	b.n	800ceca <HAL_TIM_PWM_Start+0x9e>
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800cebe:	b2db      	uxtb	r3, r3
 800cec0:	2b01      	cmp	r3, #1
 800cec2:	bf14      	ite	ne
 800cec4:	2301      	movne	r3, #1
 800cec6:	2300      	moveq	r3, #0
 800cec8:	b2db      	uxtb	r3, r3
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d001      	beq.n	800ced2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800cece:	2301      	movs	r3, #1
 800ced0:	e0ab      	b.n	800d02a <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ced2:	683b      	ldr	r3, [r7, #0]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d104      	bne.n	800cee2 <HAL_TIM_PWM_Start+0xb6>
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	2202      	movs	r2, #2
 800cedc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cee0:	e023      	b.n	800cf2a <HAL_TIM_PWM_Start+0xfe>
 800cee2:	683b      	ldr	r3, [r7, #0]
 800cee4:	2b04      	cmp	r3, #4
 800cee6:	d104      	bne.n	800cef2 <HAL_TIM_PWM_Start+0xc6>
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	2202      	movs	r2, #2
 800ceec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cef0:	e01b      	b.n	800cf2a <HAL_TIM_PWM_Start+0xfe>
 800cef2:	683b      	ldr	r3, [r7, #0]
 800cef4:	2b08      	cmp	r3, #8
 800cef6:	d104      	bne.n	800cf02 <HAL_TIM_PWM_Start+0xd6>
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	2202      	movs	r2, #2
 800cefc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cf00:	e013      	b.n	800cf2a <HAL_TIM_PWM_Start+0xfe>
 800cf02:	683b      	ldr	r3, [r7, #0]
 800cf04:	2b0c      	cmp	r3, #12
 800cf06:	d104      	bne.n	800cf12 <HAL_TIM_PWM_Start+0xe6>
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	2202      	movs	r2, #2
 800cf0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cf10:	e00b      	b.n	800cf2a <HAL_TIM_PWM_Start+0xfe>
 800cf12:	683b      	ldr	r3, [r7, #0]
 800cf14:	2b10      	cmp	r3, #16
 800cf16:	d104      	bne.n	800cf22 <HAL_TIM_PWM_Start+0xf6>
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	2202      	movs	r2, #2
 800cf1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cf20:	e003      	b.n	800cf2a <HAL_TIM_PWM_Start+0xfe>
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	2202      	movs	r2, #2
 800cf26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	2201      	movs	r2, #1
 800cf30:	6839      	ldr	r1, [r7, #0]
 800cf32:	4618      	mov	r0, r3
 800cf34:	f001 faa0 	bl	800e478 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	4a3d      	ldr	r2, [pc, #244]	; (800d034 <HAL_TIM_PWM_Start+0x208>)
 800cf3e:	4293      	cmp	r3, r2
 800cf40:	d013      	beq.n	800cf6a <HAL_TIM_PWM_Start+0x13e>
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	4a3c      	ldr	r2, [pc, #240]	; (800d038 <HAL_TIM_PWM_Start+0x20c>)
 800cf48:	4293      	cmp	r3, r2
 800cf4a:	d00e      	beq.n	800cf6a <HAL_TIM_PWM_Start+0x13e>
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	4a3a      	ldr	r2, [pc, #232]	; (800d03c <HAL_TIM_PWM_Start+0x210>)
 800cf52:	4293      	cmp	r3, r2
 800cf54:	d009      	beq.n	800cf6a <HAL_TIM_PWM_Start+0x13e>
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	4a39      	ldr	r2, [pc, #228]	; (800d040 <HAL_TIM_PWM_Start+0x214>)
 800cf5c:	4293      	cmp	r3, r2
 800cf5e:	d004      	beq.n	800cf6a <HAL_TIM_PWM_Start+0x13e>
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	4a37      	ldr	r2, [pc, #220]	; (800d044 <HAL_TIM_PWM_Start+0x218>)
 800cf66:	4293      	cmp	r3, r2
 800cf68:	d101      	bne.n	800cf6e <HAL_TIM_PWM_Start+0x142>
 800cf6a:	2301      	movs	r3, #1
 800cf6c:	e000      	b.n	800cf70 <HAL_TIM_PWM_Start+0x144>
 800cf6e:	2300      	movs	r3, #0
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d007      	beq.n	800cf84 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cf82:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	4a2a      	ldr	r2, [pc, #168]	; (800d034 <HAL_TIM_PWM_Start+0x208>)
 800cf8a:	4293      	cmp	r3, r2
 800cf8c:	d02c      	beq.n	800cfe8 <HAL_TIM_PWM_Start+0x1bc>
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf96:	d027      	beq.n	800cfe8 <HAL_TIM_PWM_Start+0x1bc>
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	4a2a      	ldr	r2, [pc, #168]	; (800d048 <HAL_TIM_PWM_Start+0x21c>)
 800cf9e:	4293      	cmp	r3, r2
 800cfa0:	d022      	beq.n	800cfe8 <HAL_TIM_PWM_Start+0x1bc>
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	4a29      	ldr	r2, [pc, #164]	; (800d04c <HAL_TIM_PWM_Start+0x220>)
 800cfa8:	4293      	cmp	r3, r2
 800cfaa:	d01d      	beq.n	800cfe8 <HAL_TIM_PWM_Start+0x1bc>
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	4a27      	ldr	r2, [pc, #156]	; (800d050 <HAL_TIM_PWM_Start+0x224>)
 800cfb2:	4293      	cmp	r3, r2
 800cfb4:	d018      	beq.n	800cfe8 <HAL_TIM_PWM_Start+0x1bc>
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	4a1f      	ldr	r2, [pc, #124]	; (800d038 <HAL_TIM_PWM_Start+0x20c>)
 800cfbc:	4293      	cmp	r3, r2
 800cfbe:	d013      	beq.n	800cfe8 <HAL_TIM_PWM_Start+0x1bc>
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	4a23      	ldr	r2, [pc, #140]	; (800d054 <HAL_TIM_PWM_Start+0x228>)
 800cfc6:	4293      	cmp	r3, r2
 800cfc8:	d00e      	beq.n	800cfe8 <HAL_TIM_PWM_Start+0x1bc>
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	4a1b      	ldr	r2, [pc, #108]	; (800d03c <HAL_TIM_PWM_Start+0x210>)
 800cfd0:	4293      	cmp	r3, r2
 800cfd2:	d009      	beq.n	800cfe8 <HAL_TIM_PWM_Start+0x1bc>
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	4a1f      	ldr	r2, [pc, #124]	; (800d058 <HAL_TIM_PWM_Start+0x22c>)
 800cfda:	4293      	cmp	r3, r2
 800cfdc:	d004      	beq.n	800cfe8 <HAL_TIM_PWM_Start+0x1bc>
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	4a1e      	ldr	r2, [pc, #120]	; (800d05c <HAL_TIM_PWM_Start+0x230>)
 800cfe4:	4293      	cmp	r3, r2
 800cfe6:	d115      	bne.n	800d014 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	689a      	ldr	r2, [r3, #8]
 800cfee:	4b1c      	ldr	r3, [pc, #112]	; (800d060 <HAL_TIM_PWM_Start+0x234>)
 800cff0:	4013      	ands	r3, r2
 800cff2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	2b06      	cmp	r3, #6
 800cff8:	d015      	beq.n	800d026 <HAL_TIM_PWM_Start+0x1fa>
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d000:	d011      	beq.n	800d026 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	681a      	ldr	r2, [r3, #0]
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	f042 0201 	orr.w	r2, r2, #1
 800d010:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d012:	e008      	b.n	800d026 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	681a      	ldr	r2, [r3, #0]
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	f042 0201 	orr.w	r2, r2, #1
 800d022:	601a      	str	r2, [r3, #0]
 800d024:	e000      	b.n	800d028 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d026:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d028:	2300      	movs	r3, #0
}
 800d02a:	4618      	mov	r0, r3
 800d02c:	3710      	adds	r7, #16
 800d02e:	46bd      	mov	sp, r7
 800d030:	bd80      	pop	{r7, pc}
 800d032:	bf00      	nop
 800d034:	40010000 	.word	0x40010000
 800d038:	40010400 	.word	0x40010400
 800d03c:	40014000 	.word	0x40014000
 800d040:	40014400 	.word	0x40014400
 800d044:	40014800 	.word	0x40014800
 800d048:	40000400 	.word	0x40000400
 800d04c:	40000800 	.word	0x40000800
 800d050:	40000c00 	.word	0x40000c00
 800d054:	40001800 	.word	0x40001800
 800d058:	4000e000 	.word	0x4000e000
 800d05c:	4000e400 	.word	0x4000e400
 800d060:	00010007 	.word	0x00010007

0800d064 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d064:	b580      	push	{r7, lr}
 800d066:	b084      	sub	sp, #16
 800d068:	af00      	add	r7, sp, #0
 800d06a:	6078      	str	r0, [r7, #4]
 800d06c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d06e:	2300      	movs	r3, #0
 800d070:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d072:	683b      	ldr	r3, [r7, #0]
 800d074:	2b00      	cmp	r3, #0
 800d076:	d109      	bne.n	800d08c <HAL_TIM_PWM_Start_IT+0x28>
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d07e:	b2db      	uxtb	r3, r3
 800d080:	2b01      	cmp	r3, #1
 800d082:	bf14      	ite	ne
 800d084:	2301      	movne	r3, #1
 800d086:	2300      	moveq	r3, #0
 800d088:	b2db      	uxtb	r3, r3
 800d08a:	e03c      	b.n	800d106 <HAL_TIM_PWM_Start_IT+0xa2>
 800d08c:	683b      	ldr	r3, [r7, #0]
 800d08e:	2b04      	cmp	r3, #4
 800d090:	d109      	bne.n	800d0a6 <HAL_TIM_PWM_Start_IT+0x42>
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d098:	b2db      	uxtb	r3, r3
 800d09a:	2b01      	cmp	r3, #1
 800d09c:	bf14      	ite	ne
 800d09e:	2301      	movne	r3, #1
 800d0a0:	2300      	moveq	r3, #0
 800d0a2:	b2db      	uxtb	r3, r3
 800d0a4:	e02f      	b.n	800d106 <HAL_TIM_PWM_Start_IT+0xa2>
 800d0a6:	683b      	ldr	r3, [r7, #0]
 800d0a8:	2b08      	cmp	r3, #8
 800d0aa:	d109      	bne.n	800d0c0 <HAL_TIM_PWM_Start_IT+0x5c>
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d0b2:	b2db      	uxtb	r3, r3
 800d0b4:	2b01      	cmp	r3, #1
 800d0b6:	bf14      	ite	ne
 800d0b8:	2301      	movne	r3, #1
 800d0ba:	2300      	moveq	r3, #0
 800d0bc:	b2db      	uxtb	r3, r3
 800d0be:	e022      	b.n	800d106 <HAL_TIM_PWM_Start_IT+0xa2>
 800d0c0:	683b      	ldr	r3, [r7, #0]
 800d0c2:	2b0c      	cmp	r3, #12
 800d0c4:	d109      	bne.n	800d0da <HAL_TIM_PWM_Start_IT+0x76>
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d0cc:	b2db      	uxtb	r3, r3
 800d0ce:	2b01      	cmp	r3, #1
 800d0d0:	bf14      	ite	ne
 800d0d2:	2301      	movne	r3, #1
 800d0d4:	2300      	moveq	r3, #0
 800d0d6:	b2db      	uxtb	r3, r3
 800d0d8:	e015      	b.n	800d106 <HAL_TIM_PWM_Start_IT+0xa2>
 800d0da:	683b      	ldr	r3, [r7, #0]
 800d0dc:	2b10      	cmp	r3, #16
 800d0de:	d109      	bne.n	800d0f4 <HAL_TIM_PWM_Start_IT+0x90>
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d0e6:	b2db      	uxtb	r3, r3
 800d0e8:	2b01      	cmp	r3, #1
 800d0ea:	bf14      	ite	ne
 800d0ec:	2301      	movne	r3, #1
 800d0ee:	2300      	moveq	r3, #0
 800d0f0:	b2db      	uxtb	r3, r3
 800d0f2:	e008      	b.n	800d106 <HAL_TIM_PWM_Start_IT+0xa2>
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d0fa:	b2db      	uxtb	r3, r3
 800d0fc:	2b01      	cmp	r3, #1
 800d0fe:	bf14      	ite	ne
 800d100:	2301      	movne	r3, #1
 800d102:	2300      	moveq	r3, #0
 800d104:	b2db      	uxtb	r3, r3
 800d106:	2b00      	cmp	r3, #0
 800d108:	d001      	beq.n	800d10e <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800d10a:	2301      	movs	r3, #1
 800d10c:	e0f6      	b.n	800d2fc <HAL_TIM_PWM_Start_IT+0x298>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d10e:	683b      	ldr	r3, [r7, #0]
 800d110:	2b00      	cmp	r3, #0
 800d112:	d104      	bne.n	800d11e <HAL_TIM_PWM_Start_IT+0xba>
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	2202      	movs	r2, #2
 800d118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d11c:	e023      	b.n	800d166 <HAL_TIM_PWM_Start_IT+0x102>
 800d11e:	683b      	ldr	r3, [r7, #0]
 800d120:	2b04      	cmp	r3, #4
 800d122:	d104      	bne.n	800d12e <HAL_TIM_PWM_Start_IT+0xca>
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	2202      	movs	r2, #2
 800d128:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d12c:	e01b      	b.n	800d166 <HAL_TIM_PWM_Start_IT+0x102>
 800d12e:	683b      	ldr	r3, [r7, #0]
 800d130:	2b08      	cmp	r3, #8
 800d132:	d104      	bne.n	800d13e <HAL_TIM_PWM_Start_IT+0xda>
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	2202      	movs	r2, #2
 800d138:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d13c:	e013      	b.n	800d166 <HAL_TIM_PWM_Start_IT+0x102>
 800d13e:	683b      	ldr	r3, [r7, #0]
 800d140:	2b0c      	cmp	r3, #12
 800d142:	d104      	bne.n	800d14e <HAL_TIM_PWM_Start_IT+0xea>
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	2202      	movs	r2, #2
 800d148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d14c:	e00b      	b.n	800d166 <HAL_TIM_PWM_Start_IT+0x102>
 800d14e:	683b      	ldr	r3, [r7, #0]
 800d150:	2b10      	cmp	r3, #16
 800d152:	d104      	bne.n	800d15e <HAL_TIM_PWM_Start_IT+0xfa>
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	2202      	movs	r2, #2
 800d158:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d15c:	e003      	b.n	800d166 <HAL_TIM_PWM_Start_IT+0x102>
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	2202      	movs	r2, #2
 800d162:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800d166:	683b      	ldr	r3, [r7, #0]
 800d168:	2b0c      	cmp	r3, #12
 800d16a:	d841      	bhi.n	800d1f0 <HAL_TIM_PWM_Start_IT+0x18c>
 800d16c:	a201      	add	r2, pc, #4	; (adr r2, 800d174 <HAL_TIM_PWM_Start_IT+0x110>)
 800d16e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d172:	bf00      	nop
 800d174:	0800d1a9 	.word	0x0800d1a9
 800d178:	0800d1f1 	.word	0x0800d1f1
 800d17c:	0800d1f1 	.word	0x0800d1f1
 800d180:	0800d1f1 	.word	0x0800d1f1
 800d184:	0800d1bb 	.word	0x0800d1bb
 800d188:	0800d1f1 	.word	0x0800d1f1
 800d18c:	0800d1f1 	.word	0x0800d1f1
 800d190:	0800d1f1 	.word	0x0800d1f1
 800d194:	0800d1cd 	.word	0x0800d1cd
 800d198:	0800d1f1 	.word	0x0800d1f1
 800d19c:	0800d1f1 	.word	0x0800d1f1
 800d1a0:	0800d1f1 	.word	0x0800d1f1
 800d1a4:	0800d1df 	.word	0x0800d1df
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	68da      	ldr	r2, [r3, #12]
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	f042 0202 	orr.w	r2, r2, #2
 800d1b6:	60da      	str	r2, [r3, #12]
      break;
 800d1b8:	e01d      	b.n	800d1f6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	68da      	ldr	r2, [r3, #12]
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	f042 0204 	orr.w	r2, r2, #4
 800d1c8:	60da      	str	r2, [r3, #12]
      break;
 800d1ca:	e014      	b.n	800d1f6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	68da      	ldr	r2, [r3, #12]
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	f042 0208 	orr.w	r2, r2, #8
 800d1da:	60da      	str	r2, [r3, #12]
      break;
 800d1dc:	e00b      	b.n	800d1f6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	68da      	ldr	r2, [r3, #12]
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	f042 0210 	orr.w	r2, r2, #16
 800d1ec:	60da      	str	r2, [r3, #12]
      break;
 800d1ee:	e002      	b.n	800d1f6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800d1f0:	2301      	movs	r3, #1
 800d1f2:	73fb      	strb	r3, [r7, #15]
      break;
 800d1f4:	bf00      	nop
  }

  if (status == HAL_OK)
 800d1f6:	7bfb      	ldrb	r3, [r7, #15]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d17e      	bne.n	800d2fa <HAL_TIM_PWM_Start_IT+0x296>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	2201      	movs	r2, #1
 800d202:	6839      	ldr	r1, [r7, #0]
 800d204:	4618      	mov	r0, r3
 800d206:	f001 f937 	bl	800e478 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	4a3d      	ldr	r2, [pc, #244]	; (800d304 <HAL_TIM_PWM_Start_IT+0x2a0>)
 800d210:	4293      	cmp	r3, r2
 800d212:	d013      	beq.n	800d23c <HAL_TIM_PWM_Start_IT+0x1d8>
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	4a3b      	ldr	r2, [pc, #236]	; (800d308 <HAL_TIM_PWM_Start_IT+0x2a4>)
 800d21a:	4293      	cmp	r3, r2
 800d21c:	d00e      	beq.n	800d23c <HAL_TIM_PWM_Start_IT+0x1d8>
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	4a3a      	ldr	r2, [pc, #232]	; (800d30c <HAL_TIM_PWM_Start_IT+0x2a8>)
 800d224:	4293      	cmp	r3, r2
 800d226:	d009      	beq.n	800d23c <HAL_TIM_PWM_Start_IT+0x1d8>
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	4a38      	ldr	r2, [pc, #224]	; (800d310 <HAL_TIM_PWM_Start_IT+0x2ac>)
 800d22e:	4293      	cmp	r3, r2
 800d230:	d004      	beq.n	800d23c <HAL_TIM_PWM_Start_IT+0x1d8>
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	4a37      	ldr	r2, [pc, #220]	; (800d314 <HAL_TIM_PWM_Start_IT+0x2b0>)
 800d238:	4293      	cmp	r3, r2
 800d23a:	d101      	bne.n	800d240 <HAL_TIM_PWM_Start_IT+0x1dc>
 800d23c:	2301      	movs	r3, #1
 800d23e:	e000      	b.n	800d242 <HAL_TIM_PWM_Start_IT+0x1de>
 800d240:	2300      	movs	r3, #0
 800d242:	2b00      	cmp	r3, #0
 800d244:	d007      	beq.n	800d256 <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d254:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	4a2a      	ldr	r2, [pc, #168]	; (800d304 <HAL_TIM_PWM_Start_IT+0x2a0>)
 800d25c:	4293      	cmp	r3, r2
 800d25e:	d02c      	beq.n	800d2ba <HAL_TIM_PWM_Start_IT+0x256>
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d268:	d027      	beq.n	800d2ba <HAL_TIM_PWM_Start_IT+0x256>
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	4a2a      	ldr	r2, [pc, #168]	; (800d318 <HAL_TIM_PWM_Start_IT+0x2b4>)
 800d270:	4293      	cmp	r3, r2
 800d272:	d022      	beq.n	800d2ba <HAL_TIM_PWM_Start_IT+0x256>
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	4a28      	ldr	r2, [pc, #160]	; (800d31c <HAL_TIM_PWM_Start_IT+0x2b8>)
 800d27a:	4293      	cmp	r3, r2
 800d27c:	d01d      	beq.n	800d2ba <HAL_TIM_PWM_Start_IT+0x256>
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	4a27      	ldr	r2, [pc, #156]	; (800d320 <HAL_TIM_PWM_Start_IT+0x2bc>)
 800d284:	4293      	cmp	r3, r2
 800d286:	d018      	beq.n	800d2ba <HAL_TIM_PWM_Start_IT+0x256>
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	4a1e      	ldr	r2, [pc, #120]	; (800d308 <HAL_TIM_PWM_Start_IT+0x2a4>)
 800d28e:	4293      	cmp	r3, r2
 800d290:	d013      	beq.n	800d2ba <HAL_TIM_PWM_Start_IT+0x256>
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	4a23      	ldr	r2, [pc, #140]	; (800d324 <HAL_TIM_PWM_Start_IT+0x2c0>)
 800d298:	4293      	cmp	r3, r2
 800d29a:	d00e      	beq.n	800d2ba <HAL_TIM_PWM_Start_IT+0x256>
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	4a1a      	ldr	r2, [pc, #104]	; (800d30c <HAL_TIM_PWM_Start_IT+0x2a8>)
 800d2a2:	4293      	cmp	r3, r2
 800d2a4:	d009      	beq.n	800d2ba <HAL_TIM_PWM_Start_IT+0x256>
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	4a1f      	ldr	r2, [pc, #124]	; (800d328 <HAL_TIM_PWM_Start_IT+0x2c4>)
 800d2ac:	4293      	cmp	r3, r2
 800d2ae:	d004      	beq.n	800d2ba <HAL_TIM_PWM_Start_IT+0x256>
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	4a1d      	ldr	r2, [pc, #116]	; (800d32c <HAL_TIM_PWM_Start_IT+0x2c8>)
 800d2b6:	4293      	cmp	r3, r2
 800d2b8:	d115      	bne.n	800d2e6 <HAL_TIM_PWM_Start_IT+0x282>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	689a      	ldr	r2, [r3, #8]
 800d2c0:	4b1b      	ldr	r3, [pc, #108]	; (800d330 <HAL_TIM_PWM_Start_IT+0x2cc>)
 800d2c2:	4013      	ands	r3, r2
 800d2c4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d2c6:	68bb      	ldr	r3, [r7, #8]
 800d2c8:	2b06      	cmp	r3, #6
 800d2ca:	d015      	beq.n	800d2f8 <HAL_TIM_PWM_Start_IT+0x294>
 800d2cc:	68bb      	ldr	r3, [r7, #8]
 800d2ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d2d2:	d011      	beq.n	800d2f8 <HAL_TIM_PWM_Start_IT+0x294>
      {
        __HAL_TIM_ENABLE(htim);
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	681a      	ldr	r2, [r3, #0]
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	f042 0201 	orr.w	r2, r2, #1
 800d2e2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d2e4:	e008      	b.n	800d2f8 <HAL_TIM_PWM_Start_IT+0x294>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	681a      	ldr	r2, [r3, #0]
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	f042 0201 	orr.w	r2, r2, #1
 800d2f4:	601a      	str	r2, [r3, #0]
 800d2f6:	e000      	b.n	800d2fa <HAL_TIM_PWM_Start_IT+0x296>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d2f8:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800d2fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	3710      	adds	r7, #16
 800d300:	46bd      	mov	sp, r7
 800d302:	bd80      	pop	{r7, pc}
 800d304:	40010000 	.word	0x40010000
 800d308:	40010400 	.word	0x40010400
 800d30c:	40014000 	.word	0x40014000
 800d310:	40014400 	.word	0x40014400
 800d314:	40014800 	.word	0x40014800
 800d318:	40000400 	.word	0x40000400
 800d31c:	40000800 	.word	0x40000800
 800d320:	40000c00 	.word	0x40000c00
 800d324:	40001800 	.word	0x40001800
 800d328:	4000e000 	.word	0x4000e000
 800d32c:	4000e400 	.word	0x4000e400
 800d330:	00010007 	.word	0x00010007

0800d334 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800d334:	b580      	push	{r7, lr}
 800d336:	b086      	sub	sp, #24
 800d338:	af00      	add	r7, sp, #0
 800d33a:	6078      	str	r0, [r7, #4]
 800d33c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	2b00      	cmp	r3, #0
 800d342:	d101      	bne.n	800d348 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800d344:	2301      	movs	r3, #1
 800d346:	e08f      	b.n	800d468 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d34e:	b2db      	uxtb	r3, r3
 800d350:	2b00      	cmp	r3, #0
 800d352:	d106      	bne.n	800d362 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	2200      	movs	r2, #0
 800d358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800d35c:	6878      	ldr	r0, [r7, #4]
 800d35e:	f7f8 fd8d 	bl	8005e7c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	2202      	movs	r2, #2
 800d366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	6899      	ldr	r1, [r3, #8]
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	681a      	ldr	r2, [r3, #0]
 800d374:	4b3e      	ldr	r3, [pc, #248]	; (800d470 <HAL_TIM_Encoder_Init+0x13c>)
 800d376:	400b      	ands	r3, r1
 800d378:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	681a      	ldr	r2, [r3, #0]
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	3304      	adds	r3, #4
 800d382:	4619      	mov	r1, r3
 800d384:	4610      	mov	r0, r2
 800d386:	f000 fc5d 	bl	800dc44 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	689b      	ldr	r3, [r3, #8]
 800d390:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	699b      	ldr	r3, [r3, #24]
 800d398:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	6a1b      	ldr	r3, [r3, #32]
 800d3a0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800d3a2:	683b      	ldr	r3, [r7, #0]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	697a      	ldr	r2, [r7, #20]
 800d3a8:	4313      	orrs	r3, r2
 800d3aa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800d3ac:	693a      	ldr	r2, [r7, #16]
 800d3ae:	4b31      	ldr	r3, [pc, #196]	; (800d474 <HAL_TIM_Encoder_Init+0x140>)
 800d3b0:	4013      	ands	r3, r2
 800d3b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800d3b4:	683b      	ldr	r3, [r7, #0]
 800d3b6:	689a      	ldr	r2, [r3, #8]
 800d3b8:	683b      	ldr	r3, [r7, #0]
 800d3ba:	699b      	ldr	r3, [r3, #24]
 800d3bc:	021b      	lsls	r3, r3, #8
 800d3be:	4313      	orrs	r3, r2
 800d3c0:	693a      	ldr	r2, [r7, #16]
 800d3c2:	4313      	orrs	r3, r2
 800d3c4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800d3c6:	693a      	ldr	r2, [r7, #16]
 800d3c8:	4b2b      	ldr	r3, [pc, #172]	; (800d478 <HAL_TIM_Encoder_Init+0x144>)
 800d3ca:	4013      	ands	r3, r2
 800d3cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800d3ce:	693a      	ldr	r2, [r7, #16]
 800d3d0:	4b2a      	ldr	r3, [pc, #168]	; (800d47c <HAL_TIM_Encoder_Init+0x148>)
 800d3d2:	4013      	ands	r3, r2
 800d3d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800d3d6:	683b      	ldr	r3, [r7, #0]
 800d3d8:	68da      	ldr	r2, [r3, #12]
 800d3da:	683b      	ldr	r3, [r7, #0]
 800d3dc:	69db      	ldr	r3, [r3, #28]
 800d3de:	021b      	lsls	r3, r3, #8
 800d3e0:	4313      	orrs	r3, r2
 800d3e2:	693a      	ldr	r2, [r7, #16]
 800d3e4:	4313      	orrs	r3, r2
 800d3e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800d3e8:	683b      	ldr	r3, [r7, #0]
 800d3ea:	691b      	ldr	r3, [r3, #16]
 800d3ec:	011a      	lsls	r2, r3, #4
 800d3ee:	683b      	ldr	r3, [r7, #0]
 800d3f0:	6a1b      	ldr	r3, [r3, #32]
 800d3f2:	031b      	lsls	r3, r3, #12
 800d3f4:	4313      	orrs	r3, r2
 800d3f6:	693a      	ldr	r2, [r7, #16]
 800d3f8:	4313      	orrs	r3, r2
 800d3fa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800d402:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800d40a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800d40c:	683b      	ldr	r3, [r7, #0]
 800d40e:	685a      	ldr	r2, [r3, #4]
 800d410:	683b      	ldr	r3, [r7, #0]
 800d412:	695b      	ldr	r3, [r3, #20]
 800d414:	011b      	lsls	r3, r3, #4
 800d416:	4313      	orrs	r3, r2
 800d418:	68fa      	ldr	r2, [r7, #12]
 800d41a:	4313      	orrs	r3, r2
 800d41c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	697a      	ldr	r2, [r7, #20]
 800d424:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	693a      	ldr	r2, [r7, #16]
 800d42c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	68fa      	ldr	r2, [r7, #12]
 800d434:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	2201      	movs	r2, #1
 800d43a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	2201      	movs	r2, #1
 800d442:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	2201      	movs	r2, #1
 800d44a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	2201      	movs	r2, #1
 800d452:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	2201      	movs	r2, #1
 800d45a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	2201      	movs	r2, #1
 800d462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d466:	2300      	movs	r3, #0
}
 800d468:	4618      	mov	r0, r3
 800d46a:	3718      	adds	r7, #24
 800d46c:	46bd      	mov	sp, r7
 800d46e:	bd80      	pop	{r7, pc}
 800d470:	fffebff8 	.word	0xfffebff8
 800d474:	fffffcfc 	.word	0xfffffcfc
 800d478:	fffff3f3 	.word	0xfffff3f3
 800d47c:	ffff0f0f 	.word	0xffff0f0f

0800d480 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d480:	b580      	push	{r7, lr}
 800d482:	b084      	sub	sp, #16
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
 800d488:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d490:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d498:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d4a0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d4a8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800d4aa:	683b      	ldr	r3, [r7, #0]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d110      	bne.n	800d4d2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800d4b0:	7bfb      	ldrb	r3, [r7, #15]
 800d4b2:	2b01      	cmp	r3, #1
 800d4b4:	d102      	bne.n	800d4bc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800d4b6:	7b7b      	ldrb	r3, [r7, #13]
 800d4b8:	2b01      	cmp	r3, #1
 800d4ba:	d001      	beq.n	800d4c0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800d4bc:	2301      	movs	r3, #1
 800d4be:	e069      	b.n	800d594 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	2202      	movs	r2, #2
 800d4c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	2202      	movs	r2, #2
 800d4cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d4d0:	e031      	b.n	800d536 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800d4d2:	683b      	ldr	r3, [r7, #0]
 800d4d4:	2b04      	cmp	r3, #4
 800d4d6:	d110      	bne.n	800d4fa <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800d4d8:	7bbb      	ldrb	r3, [r7, #14]
 800d4da:	2b01      	cmp	r3, #1
 800d4dc:	d102      	bne.n	800d4e4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800d4de:	7b3b      	ldrb	r3, [r7, #12]
 800d4e0:	2b01      	cmp	r3, #1
 800d4e2:	d001      	beq.n	800d4e8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800d4e4:	2301      	movs	r3, #1
 800d4e6:	e055      	b.n	800d594 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	2202      	movs	r2, #2
 800d4ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	2202      	movs	r2, #2
 800d4f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d4f8:	e01d      	b.n	800d536 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800d4fa:	7bfb      	ldrb	r3, [r7, #15]
 800d4fc:	2b01      	cmp	r3, #1
 800d4fe:	d108      	bne.n	800d512 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800d500:	7bbb      	ldrb	r3, [r7, #14]
 800d502:	2b01      	cmp	r3, #1
 800d504:	d105      	bne.n	800d512 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800d506:	7b7b      	ldrb	r3, [r7, #13]
 800d508:	2b01      	cmp	r3, #1
 800d50a:	d102      	bne.n	800d512 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800d50c:	7b3b      	ldrb	r3, [r7, #12]
 800d50e:	2b01      	cmp	r3, #1
 800d510:	d001      	beq.n	800d516 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800d512:	2301      	movs	r3, #1
 800d514:	e03e      	b.n	800d594 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	2202      	movs	r2, #2
 800d51a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	2202      	movs	r2, #2
 800d522:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	2202      	movs	r2, #2
 800d52a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	2202      	movs	r2, #2
 800d532:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800d536:	683b      	ldr	r3, [r7, #0]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d003      	beq.n	800d544 <HAL_TIM_Encoder_Start+0xc4>
 800d53c:	683b      	ldr	r3, [r7, #0]
 800d53e:	2b04      	cmp	r3, #4
 800d540:	d008      	beq.n	800d554 <HAL_TIM_Encoder_Start+0xd4>
 800d542:	e00f      	b.n	800d564 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	2201      	movs	r2, #1
 800d54a:	2100      	movs	r1, #0
 800d54c:	4618      	mov	r0, r3
 800d54e:	f000 ff93 	bl	800e478 <TIM_CCxChannelCmd>
      break;
 800d552:	e016      	b.n	800d582 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	2201      	movs	r2, #1
 800d55a:	2104      	movs	r1, #4
 800d55c:	4618      	mov	r0, r3
 800d55e:	f000 ff8b 	bl	800e478 <TIM_CCxChannelCmd>
      break;
 800d562:	e00e      	b.n	800d582 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	2201      	movs	r2, #1
 800d56a:	2100      	movs	r1, #0
 800d56c:	4618      	mov	r0, r3
 800d56e:	f000 ff83 	bl	800e478 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	2201      	movs	r2, #1
 800d578:	2104      	movs	r1, #4
 800d57a:	4618      	mov	r0, r3
 800d57c:	f000 ff7c 	bl	800e478 <TIM_CCxChannelCmd>
      break;
 800d580:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	681a      	ldr	r2, [r3, #0]
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	f042 0201 	orr.w	r2, r2, #1
 800d590:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800d592:	2300      	movs	r3, #0
}
 800d594:	4618      	mov	r0, r3
 800d596:	3710      	adds	r7, #16
 800d598:	46bd      	mov	sp, r7
 800d59a:	bd80      	pop	{r7, pc}

0800d59c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d59c:	b580      	push	{r7, lr}
 800d59e:	b082      	sub	sp, #8
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	691b      	ldr	r3, [r3, #16]
 800d5aa:	f003 0302 	and.w	r3, r3, #2
 800d5ae:	2b02      	cmp	r3, #2
 800d5b0:	d122      	bne.n	800d5f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	68db      	ldr	r3, [r3, #12]
 800d5b8:	f003 0302 	and.w	r3, r3, #2
 800d5bc:	2b02      	cmp	r3, #2
 800d5be:	d11b      	bne.n	800d5f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	f06f 0202 	mvn.w	r2, #2
 800d5c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	2201      	movs	r2, #1
 800d5ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	699b      	ldr	r3, [r3, #24]
 800d5d6:	f003 0303 	and.w	r3, r3, #3
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d003      	beq.n	800d5e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d5de:	6878      	ldr	r0, [r7, #4]
 800d5e0:	f000 fb12 	bl	800dc08 <HAL_TIM_IC_CaptureCallback>
 800d5e4:	e005      	b.n	800d5f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d5e6:	6878      	ldr	r0, [r7, #4]
 800d5e8:	f000 fb04 	bl	800dbf4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d5ec:	6878      	ldr	r0, [r7, #4]
 800d5ee:	f000 fb15 	bl	800dc1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	2200      	movs	r2, #0
 800d5f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	691b      	ldr	r3, [r3, #16]
 800d5fe:	f003 0304 	and.w	r3, r3, #4
 800d602:	2b04      	cmp	r3, #4
 800d604:	d122      	bne.n	800d64c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	68db      	ldr	r3, [r3, #12]
 800d60c:	f003 0304 	and.w	r3, r3, #4
 800d610:	2b04      	cmp	r3, #4
 800d612:	d11b      	bne.n	800d64c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	f06f 0204 	mvn.w	r2, #4
 800d61c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	2202      	movs	r2, #2
 800d622:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	699b      	ldr	r3, [r3, #24]
 800d62a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d003      	beq.n	800d63a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d632:	6878      	ldr	r0, [r7, #4]
 800d634:	f000 fae8 	bl	800dc08 <HAL_TIM_IC_CaptureCallback>
 800d638:	e005      	b.n	800d646 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d63a:	6878      	ldr	r0, [r7, #4]
 800d63c:	f000 fada 	bl	800dbf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d640:	6878      	ldr	r0, [r7, #4]
 800d642:	f000 faeb 	bl	800dc1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	2200      	movs	r2, #0
 800d64a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	691b      	ldr	r3, [r3, #16]
 800d652:	f003 0308 	and.w	r3, r3, #8
 800d656:	2b08      	cmp	r3, #8
 800d658:	d122      	bne.n	800d6a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	68db      	ldr	r3, [r3, #12]
 800d660:	f003 0308 	and.w	r3, r3, #8
 800d664:	2b08      	cmp	r3, #8
 800d666:	d11b      	bne.n	800d6a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	f06f 0208 	mvn.w	r2, #8
 800d670:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	2204      	movs	r2, #4
 800d676:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	69db      	ldr	r3, [r3, #28]
 800d67e:	f003 0303 	and.w	r3, r3, #3
 800d682:	2b00      	cmp	r3, #0
 800d684:	d003      	beq.n	800d68e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d686:	6878      	ldr	r0, [r7, #4]
 800d688:	f000 fabe 	bl	800dc08 <HAL_TIM_IC_CaptureCallback>
 800d68c:	e005      	b.n	800d69a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d68e:	6878      	ldr	r0, [r7, #4]
 800d690:	f000 fab0 	bl	800dbf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d694:	6878      	ldr	r0, [r7, #4]
 800d696:	f000 fac1 	bl	800dc1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	2200      	movs	r2, #0
 800d69e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	691b      	ldr	r3, [r3, #16]
 800d6a6:	f003 0310 	and.w	r3, r3, #16
 800d6aa:	2b10      	cmp	r3, #16
 800d6ac:	d122      	bne.n	800d6f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	68db      	ldr	r3, [r3, #12]
 800d6b4:	f003 0310 	and.w	r3, r3, #16
 800d6b8:	2b10      	cmp	r3, #16
 800d6ba:	d11b      	bne.n	800d6f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	f06f 0210 	mvn.w	r2, #16
 800d6c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	2208      	movs	r2, #8
 800d6ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	69db      	ldr	r3, [r3, #28]
 800d6d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d003      	beq.n	800d6e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d6da:	6878      	ldr	r0, [r7, #4]
 800d6dc:	f000 fa94 	bl	800dc08 <HAL_TIM_IC_CaptureCallback>
 800d6e0:	e005      	b.n	800d6ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d6e2:	6878      	ldr	r0, [r7, #4]
 800d6e4:	f000 fa86 	bl	800dbf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d6e8:	6878      	ldr	r0, [r7, #4]
 800d6ea:	f000 fa97 	bl	800dc1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	2200      	movs	r2, #0
 800d6f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	691b      	ldr	r3, [r3, #16]
 800d6fa:	f003 0301 	and.w	r3, r3, #1
 800d6fe:	2b01      	cmp	r3, #1
 800d700:	d10e      	bne.n	800d720 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	68db      	ldr	r3, [r3, #12]
 800d708:	f003 0301 	and.w	r3, r3, #1
 800d70c:	2b01      	cmp	r3, #1
 800d70e:	d107      	bne.n	800d720 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	f06f 0201 	mvn.w	r2, #1
 800d718:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d71a:	6878      	ldr	r0, [r7, #4]
 800d71c:	f7f9 f8b6 	bl	800688c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	691b      	ldr	r3, [r3, #16]
 800d726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d72a:	2b80      	cmp	r3, #128	; 0x80
 800d72c:	d10e      	bne.n	800d74c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	68db      	ldr	r3, [r3, #12]
 800d734:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d738:	2b80      	cmp	r3, #128	; 0x80
 800d73a:	d107      	bne.n	800d74c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d744:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d746:	6878      	ldr	r0, [r7, #4]
 800d748:	f001 f802 	bl	800e750 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	691b      	ldr	r3, [r3, #16]
 800d752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d756:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d75a:	d10e      	bne.n	800d77a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	68db      	ldr	r3, [r3, #12]
 800d762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d766:	2b80      	cmp	r3, #128	; 0x80
 800d768:	d107      	bne.n	800d77a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d772:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d774:	6878      	ldr	r0, [r7, #4]
 800d776:	f000 fff5 	bl	800e764 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	691b      	ldr	r3, [r3, #16]
 800d780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d784:	2b40      	cmp	r3, #64	; 0x40
 800d786:	d10e      	bne.n	800d7a6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	68db      	ldr	r3, [r3, #12]
 800d78e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d792:	2b40      	cmp	r3, #64	; 0x40
 800d794:	d107      	bne.n	800d7a6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d79e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d7a0:	6878      	ldr	r0, [r7, #4]
 800d7a2:	f000 fa45 	bl	800dc30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	691b      	ldr	r3, [r3, #16]
 800d7ac:	f003 0320 	and.w	r3, r3, #32
 800d7b0:	2b20      	cmp	r3, #32
 800d7b2:	d10e      	bne.n	800d7d2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	68db      	ldr	r3, [r3, #12]
 800d7ba:	f003 0320 	and.w	r3, r3, #32
 800d7be:	2b20      	cmp	r3, #32
 800d7c0:	d107      	bne.n	800d7d2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	f06f 0220 	mvn.w	r2, #32
 800d7ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d7cc:	6878      	ldr	r0, [r7, #4]
 800d7ce:	f000 ffb5 	bl	800e73c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d7d2:	bf00      	nop
 800d7d4:	3708      	adds	r7, #8
 800d7d6:	46bd      	mov	sp, r7
 800d7d8:	bd80      	pop	{r7, pc}
	...

0800d7dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d7dc:	b580      	push	{r7, lr}
 800d7de:	b086      	sub	sp, #24
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	60f8      	str	r0, [r7, #12]
 800d7e4:	60b9      	str	r1, [r7, #8]
 800d7e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d7e8:	2300      	movs	r3, #0
 800d7ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d7f2:	2b01      	cmp	r3, #1
 800d7f4:	d101      	bne.n	800d7fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d7f6:	2302      	movs	r3, #2
 800d7f8:	e0ff      	b.n	800d9fa <HAL_TIM_PWM_ConfigChannel+0x21e>
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	2201      	movs	r2, #1
 800d7fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	2b14      	cmp	r3, #20
 800d806:	f200 80f0 	bhi.w	800d9ea <HAL_TIM_PWM_ConfigChannel+0x20e>
 800d80a:	a201      	add	r2, pc, #4	; (adr r2, 800d810 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d80c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d810:	0800d865 	.word	0x0800d865
 800d814:	0800d9eb 	.word	0x0800d9eb
 800d818:	0800d9eb 	.word	0x0800d9eb
 800d81c:	0800d9eb 	.word	0x0800d9eb
 800d820:	0800d8a5 	.word	0x0800d8a5
 800d824:	0800d9eb 	.word	0x0800d9eb
 800d828:	0800d9eb 	.word	0x0800d9eb
 800d82c:	0800d9eb 	.word	0x0800d9eb
 800d830:	0800d8e7 	.word	0x0800d8e7
 800d834:	0800d9eb 	.word	0x0800d9eb
 800d838:	0800d9eb 	.word	0x0800d9eb
 800d83c:	0800d9eb 	.word	0x0800d9eb
 800d840:	0800d927 	.word	0x0800d927
 800d844:	0800d9eb 	.word	0x0800d9eb
 800d848:	0800d9eb 	.word	0x0800d9eb
 800d84c:	0800d9eb 	.word	0x0800d9eb
 800d850:	0800d969 	.word	0x0800d969
 800d854:	0800d9eb 	.word	0x0800d9eb
 800d858:	0800d9eb 	.word	0x0800d9eb
 800d85c:	0800d9eb 	.word	0x0800d9eb
 800d860:	0800d9a9 	.word	0x0800d9a9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	68b9      	ldr	r1, [r7, #8]
 800d86a:	4618      	mov	r0, r3
 800d86c:	f000 fa90 	bl	800dd90 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	699a      	ldr	r2, [r3, #24]
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	f042 0208 	orr.w	r2, r2, #8
 800d87e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	699a      	ldr	r2, [r3, #24]
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	f022 0204 	bic.w	r2, r2, #4
 800d88e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	6999      	ldr	r1, [r3, #24]
 800d896:	68bb      	ldr	r3, [r7, #8]
 800d898:	691a      	ldr	r2, [r3, #16]
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	430a      	orrs	r2, r1
 800d8a0:	619a      	str	r2, [r3, #24]
      break;
 800d8a2:	e0a5      	b.n	800d9f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	68b9      	ldr	r1, [r7, #8]
 800d8aa:	4618      	mov	r0, r3
 800d8ac:	f000 fb00 	bl	800deb0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	699a      	ldr	r2, [r3, #24]
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d8be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	699a      	ldr	r2, [r3, #24]
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d8ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	6999      	ldr	r1, [r3, #24]
 800d8d6:	68bb      	ldr	r3, [r7, #8]
 800d8d8:	691b      	ldr	r3, [r3, #16]
 800d8da:	021a      	lsls	r2, r3, #8
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	430a      	orrs	r2, r1
 800d8e2:	619a      	str	r2, [r3, #24]
      break;
 800d8e4:	e084      	b.n	800d9f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	68b9      	ldr	r1, [r7, #8]
 800d8ec:	4618      	mov	r0, r3
 800d8ee:	f000 fb69 	bl	800dfc4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	69da      	ldr	r2, [r3, #28]
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	f042 0208 	orr.w	r2, r2, #8
 800d900:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	69da      	ldr	r2, [r3, #28]
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	f022 0204 	bic.w	r2, r2, #4
 800d910:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	69d9      	ldr	r1, [r3, #28]
 800d918:	68bb      	ldr	r3, [r7, #8]
 800d91a:	691a      	ldr	r2, [r3, #16]
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	430a      	orrs	r2, r1
 800d922:	61da      	str	r2, [r3, #28]
      break;
 800d924:	e064      	b.n	800d9f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	68b9      	ldr	r1, [r7, #8]
 800d92c:	4618      	mov	r0, r3
 800d92e:	f000 fbd1 	bl	800e0d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	69da      	ldr	r2, [r3, #28]
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d940:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	69da      	ldr	r2, [r3, #28]
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d950:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	69d9      	ldr	r1, [r3, #28]
 800d958:	68bb      	ldr	r3, [r7, #8]
 800d95a:	691b      	ldr	r3, [r3, #16]
 800d95c:	021a      	lsls	r2, r3, #8
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	430a      	orrs	r2, r1
 800d964:	61da      	str	r2, [r3, #28]
      break;
 800d966:	e043      	b.n	800d9f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	68b9      	ldr	r1, [r7, #8]
 800d96e:	4618      	mov	r0, r3
 800d970:	f000 fc1a 	bl	800e1a8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	f042 0208 	orr.w	r2, r2, #8
 800d982:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	f022 0204 	bic.w	r2, r2, #4
 800d992:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d99a:	68bb      	ldr	r3, [r7, #8]
 800d99c:	691a      	ldr	r2, [r3, #16]
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	430a      	orrs	r2, r1
 800d9a4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d9a6:	e023      	b.n	800d9f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	68b9      	ldr	r1, [r7, #8]
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	f000 fc5e 	bl	800e270 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d9c2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d9d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d9da:	68bb      	ldr	r3, [r7, #8]
 800d9dc:	691b      	ldr	r3, [r3, #16]
 800d9de:	021a      	lsls	r2, r3, #8
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	430a      	orrs	r2, r1
 800d9e6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d9e8:	e002      	b.n	800d9f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800d9ea:	2301      	movs	r3, #1
 800d9ec:	75fb      	strb	r3, [r7, #23]
      break;
 800d9ee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	2200      	movs	r2, #0
 800d9f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d9f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d9fa:	4618      	mov	r0, r3
 800d9fc:	3718      	adds	r7, #24
 800d9fe:	46bd      	mov	sp, r7
 800da00:	bd80      	pop	{r7, pc}
 800da02:	bf00      	nop

0800da04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800da04:	b580      	push	{r7, lr}
 800da06:	b084      	sub	sp, #16
 800da08:	af00      	add	r7, sp, #0
 800da0a:	6078      	str	r0, [r7, #4]
 800da0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800da0e:	2300      	movs	r3, #0
 800da10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800da18:	2b01      	cmp	r3, #1
 800da1a:	d101      	bne.n	800da20 <HAL_TIM_ConfigClockSource+0x1c>
 800da1c:	2302      	movs	r3, #2
 800da1e:	e0dc      	b.n	800dbda <HAL_TIM_ConfigClockSource+0x1d6>
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	2201      	movs	r2, #1
 800da24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	2202      	movs	r2, #2
 800da2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	689b      	ldr	r3, [r3, #8]
 800da36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800da38:	68ba      	ldr	r2, [r7, #8]
 800da3a:	4b6a      	ldr	r3, [pc, #424]	; (800dbe4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800da3c:	4013      	ands	r3, r2
 800da3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800da40:	68bb      	ldr	r3, [r7, #8]
 800da42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800da46:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	68ba      	ldr	r2, [r7, #8]
 800da4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800da50:	683b      	ldr	r3, [r7, #0]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	4a64      	ldr	r2, [pc, #400]	; (800dbe8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800da56:	4293      	cmp	r3, r2
 800da58:	f000 80a9 	beq.w	800dbae <HAL_TIM_ConfigClockSource+0x1aa>
 800da5c:	4a62      	ldr	r2, [pc, #392]	; (800dbe8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800da5e:	4293      	cmp	r3, r2
 800da60:	f200 80ae 	bhi.w	800dbc0 <HAL_TIM_ConfigClockSource+0x1bc>
 800da64:	4a61      	ldr	r2, [pc, #388]	; (800dbec <HAL_TIM_ConfigClockSource+0x1e8>)
 800da66:	4293      	cmp	r3, r2
 800da68:	f000 80a1 	beq.w	800dbae <HAL_TIM_ConfigClockSource+0x1aa>
 800da6c:	4a5f      	ldr	r2, [pc, #380]	; (800dbec <HAL_TIM_ConfigClockSource+0x1e8>)
 800da6e:	4293      	cmp	r3, r2
 800da70:	f200 80a6 	bhi.w	800dbc0 <HAL_TIM_ConfigClockSource+0x1bc>
 800da74:	4a5e      	ldr	r2, [pc, #376]	; (800dbf0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800da76:	4293      	cmp	r3, r2
 800da78:	f000 8099 	beq.w	800dbae <HAL_TIM_ConfigClockSource+0x1aa>
 800da7c:	4a5c      	ldr	r2, [pc, #368]	; (800dbf0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800da7e:	4293      	cmp	r3, r2
 800da80:	f200 809e 	bhi.w	800dbc0 <HAL_TIM_ConfigClockSource+0x1bc>
 800da84:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800da88:	f000 8091 	beq.w	800dbae <HAL_TIM_ConfigClockSource+0x1aa>
 800da8c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800da90:	f200 8096 	bhi.w	800dbc0 <HAL_TIM_ConfigClockSource+0x1bc>
 800da94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800da98:	f000 8089 	beq.w	800dbae <HAL_TIM_ConfigClockSource+0x1aa>
 800da9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800daa0:	f200 808e 	bhi.w	800dbc0 <HAL_TIM_ConfigClockSource+0x1bc>
 800daa4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800daa8:	d03e      	beq.n	800db28 <HAL_TIM_ConfigClockSource+0x124>
 800daaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800daae:	f200 8087 	bhi.w	800dbc0 <HAL_TIM_ConfigClockSource+0x1bc>
 800dab2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dab6:	f000 8086 	beq.w	800dbc6 <HAL_TIM_ConfigClockSource+0x1c2>
 800daba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dabe:	d87f      	bhi.n	800dbc0 <HAL_TIM_ConfigClockSource+0x1bc>
 800dac0:	2b70      	cmp	r3, #112	; 0x70
 800dac2:	d01a      	beq.n	800dafa <HAL_TIM_ConfigClockSource+0xf6>
 800dac4:	2b70      	cmp	r3, #112	; 0x70
 800dac6:	d87b      	bhi.n	800dbc0 <HAL_TIM_ConfigClockSource+0x1bc>
 800dac8:	2b60      	cmp	r3, #96	; 0x60
 800daca:	d050      	beq.n	800db6e <HAL_TIM_ConfigClockSource+0x16a>
 800dacc:	2b60      	cmp	r3, #96	; 0x60
 800dace:	d877      	bhi.n	800dbc0 <HAL_TIM_ConfigClockSource+0x1bc>
 800dad0:	2b50      	cmp	r3, #80	; 0x50
 800dad2:	d03c      	beq.n	800db4e <HAL_TIM_ConfigClockSource+0x14a>
 800dad4:	2b50      	cmp	r3, #80	; 0x50
 800dad6:	d873      	bhi.n	800dbc0 <HAL_TIM_ConfigClockSource+0x1bc>
 800dad8:	2b40      	cmp	r3, #64	; 0x40
 800dada:	d058      	beq.n	800db8e <HAL_TIM_ConfigClockSource+0x18a>
 800dadc:	2b40      	cmp	r3, #64	; 0x40
 800dade:	d86f      	bhi.n	800dbc0 <HAL_TIM_ConfigClockSource+0x1bc>
 800dae0:	2b30      	cmp	r3, #48	; 0x30
 800dae2:	d064      	beq.n	800dbae <HAL_TIM_ConfigClockSource+0x1aa>
 800dae4:	2b30      	cmp	r3, #48	; 0x30
 800dae6:	d86b      	bhi.n	800dbc0 <HAL_TIM_ConfigClockSource+0x1bc>
 800dae8:	2b20      	cmp	r3, #32
 800daea:	d060      	beq.n	800dbae <HAL_TIM_ConfigClockSource+0x1aa>
 800daec:	2b20      	cmp	r3, #32
 800daee:	d867      	bhi.n	800dbc0 <HAL_TIM_ConfigClockSource+0x1bc>
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d05c      	beq.n	800dbae <HAL_TIM_ConfigClockSource+0x1aa>
 800daf4:	2b10      	cmp	r3, #16
 800daf6:	d05a      	beq.n	800dbae <HAL_TIM_ConfigClockSource+0x1aa>
 800daf8:	e062      	b.n	800dbc0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	6818      	ldr	r0, [r3, #0]
 800dafe:	683b      	ldr	r3, [r7, #0]
 800db00:	6899      	ldr	r1, [r3, #8]
 800db02:	683b      	ldr	r3, [r7, #0]
 800db04:	685a      	ldr	r2, [r3, #4]
 800db06:	683b      	ldr	r3, [r7, #0]
 800db08:	68db      	ldr	r3, [r3, #12]
 800db0a:	f000 fc95 	bl	800e438 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	689b      	ldr	r3, [r3, #8]
 800db14:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800db16:	68bb      	ldr	r3, [r7, #8]
 800db18:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800db1c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	68ba      	ldr	r2, [r7, #8]
 800db24:	609a      	str	r2, [r3, #8]
      break;
 800db26:	e04f      	b.n	800dbc8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	6818      	ldr	r0, [r3, #0]
 800db2c:	683b      	ldr	r3, [r7, #0]
 800db2e:	6899      	ldr	r1, [r3, #8]
 800db30:	683b      	ldr	r3, [r7, #0]
 800db32:	685a      	ldr	r2, [r3, #4]
 800db34:	683b      	ldr	r3, [r7, #0]
 800db36:	68db      	ldr	r3, [r3, #12]
 800db38:	f000 fc7e 	bl	800e438 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	689a      	ldr	r2, [r3, #8]
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800db4a:	609a      	str	r2, [r3, #8]
      break;
 800db4c:	e03c      	b.n	800dbc8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	6818      	ldr	r0, [r3, #0]
 800db52:	683b      	ldr	r3, [r7, #0]
 800db54:	6859      	ldr	r1, [r3, #4]
 800db56:	683b      	ldr	r3, [r7, #0]
 800db58:	68db      	ldr	r3, [r3, #12]
 800db5a:	461a      	mov	r2, r3
 800db5c:	f000 fbee 	bl	800e33c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	2150      	movs	r1, #80	; 0x50
 800db66:	4618      	mov	r0, r3
 800db68:	f000 fc48 	bl	800e3fc <TIM_ITRx_SetConfig>
      break;
 800db6c:	e02c      	b.n	800dbc8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	6818      	ldr	r0, [r3, #0]
 800db72:	683b      	ldr	r3, [r7, #0]
 800db74:	6859      	ldr	r1, [r3, #4]
 800db76:	683b      	ldr	r3, [r7, #0]
 800db78:	68db      	ldr	r3, [r3, #12]
 800db7a:	461a      	mov	r2, r3
 800db7c:	f000 fc0d 	bl	800e39a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	2160      	movs	r1, #96	; 0x60
 800db86:	4618      	mov	r0, r3
 800db88:	f000 fc38 	bl	800e3fc <TIM_ITRx_SetConfig>
      break;
 800db8c:	e01c      	b.n	800dbc8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	6818      	ldr	r0, [r3, #0]
 800db92:	683b      	ldr	r3, [r7, #0]
 800db94:	6859      	ldr	r1, [r3, #4]
 800db96:	683b      	ldr	r3, [r7, #0]
 800db98:	68db      	ldr	r3, [r3, #12]
 800db9a:	461a      	mov	r2, r3
 800db9c:	f000 fbce 	bl	800e33c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	2140      	movs	r1, #64	; 0x40
 800dba6:	4618      	mov	r0, r3
 800dba8:	f000 fc28 	bl	800e3fc <TIM_ITRx_SetConfig>
      break;
 800dbac:	e00c      	b.n	800dbc8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	681a      	ldr	r2, [r3, #0]
 800dbb2:	683b      	ldr	r3, [r7, #0]
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	4619      	mov	r1, r3
 800dbb8:	4610      	mov	r0, r2
 800dbba:	f000 fc1f 	bl	800e3fc <TIM_ITRx_SetConfig>
      break;
 800dbbe:	e003      	b.n	800dbc8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800dbc0:	2301      	movs	r3, #1
 800dbc2:	73fb      	strb	r3, [r7, #15]
      break;
 800dbc4:	e000      	b.n	800dbc8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800dbc6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	2201      	movs	r2, #1
 800dbcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	2200      	movs	r2, #0
 800dbd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800dbd8:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbda:	4618      	mov	r0, r3
 800dbdc:	3710      	adds	r7, #16
 800dbde:	46bd      	mov	sp, r7
 800dbe0:	bd80      	pop	{r7, pc}
 800dbe2:	bf00      	nop
 800dbe4:	ffceff88 	.word	0xffceff88
 800dbe8:	00100040 	.word	0x00100040
 800dbec:	00100030 	.word	0x00100030
 800dbf0:	00100020 	.word	0x00100020

0800dbf4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800dbf4:	b480      	push	{r7}
 800dbf6:	b083      	sub	sp, #12
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800dbfc:	bf00      	nop
 800dbfe:	370c      	adds	r7, #12
 800dc00:	46bd      	mov	sp, r7
 800dc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc06:	4770      	bx	lr

0800dc08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800dc08:	b480      	push	{r7}
 800dc0a:	b083      	sub	sp, #12
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800dc10:	bf00      	nop
 800dc12:	370c      	adds	r7, #12
 800dc14:	46bd      	mov	sp, r7
 800dc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc1a:	4770      	bx	lr

0800dc1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800dc1c:	b480      	push	{r7}
 800dc1e:	b083      	sub	sp, #12
 800dc20:	af00      	add	r7, sp, #0
 800dc22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800dc24:	bf00      	nop
 800dc26:	370c      	adds	r7, #12
 800dc28:	46bd      	mov	sp, r7
 800dc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc2e:	4770      	bx	lr

0800dc30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800dc30:	b480      	push	{r7}
 800dc32:	b083      	sub	sp, #12
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800dc38:	bf00      	nop
 800dc3a:	370c      	adds	r7, #12
 800dc3c:	46bd      	mov	sp, r7
 800dc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc42:	4770      	bx	lr

0800dc44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800dc44:	b480      	push	{r7}
 800dc46:	b085      	sub	sp, #20
 800dc48:	af00      	add	r7, sp, #0
 800dc4a:	6078      	str	r0, [r7, #4]
 800dc4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	4a44      	ldr	r2, [pc, #272]	; (800dd68 <TIM_Base_SetConfig+0x124>)
 800dc58:	4293      	cmp	r3, r2
 800dc5a:	d013      	beq.n	800dc84 <TIM_Base_SetConfig+0x40>
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dc62:	d00f      	beq.n	800dc84 <TIM_Base_SetConfig+0x40>
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	4a41      	ldr	r2, [pc, #260]	; (800dd6c <TIM_Base_SetConfig+0x128>)
 800dc68:	4293      	cmp	r3, r2
 800dc6a:	d00b      	beq.n	800dc84 <TIM_Base_SetConfig+0x40>
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	4a40      	ldr	r2, [pc, #256]	; (800dd70 <TIM_Base_SetConfig+0x12c>)
 800dc70:	4293      	cmp	r3, r2
 800dc72:	d007      	beq.n	800dc84 <TIM_Base_SetConfig+0x40>
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	4a3f      	ldr	r2, [pc, #252]	; (800dd74 <TIM_Base_SetConfig+0x130>)
 800dc78:	4293      	cmp	r3, r2
 800dc7a:	d003      	beq.n	800dc84 <TIM_Base_SetConfig+0x40>
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	4a3e      	ldr	r2, [pc, #248]	; (800dd78 <TIM_Base_SetConfig+0x134>)
 800dc80:	4293      	cmp	r3, r2
 800dc82:	d108      	bne.n	800dc96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dc8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800dc8c:	683b      	ldr	r3, [r7, #0]
 800dc8e:	685b      	ldr	r3, [r3, #4]
 800dc90:	68fa      	ldr	r2, [r7, #12]
 800dc92:	4313      	orrs	r3, r2
 800dc94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	4a33      	ldr	r2, [pc, #204]	; (800dd68 <TIM_Base_SetConfig+0x124>)
 800dc9a:	4293      	cmp	r3, r2
 800dc9c:	d027      	beq.n	800dcee <TIM_Base_SetConfig+0xaa>
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dca4:	d023      	beq.n	800dcee <TIM_Base_SetConfig+0xaa>
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	4a30      	ldr	r2, [pc, #192]	; (800dd6c <TIM_Base_SetConfig+0x128>)
 800dcaa:	4293      	cmp	r3, r2
 800dcac:	d01f      	beq.n	800dcee <TIM_Base_SetConfig+0xaa>
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	4a2f      	ldr	r2, [pc, #188]	; (800dd70 <TIM_Base_SetConfig+0x12c>)
 800dcb2:	4293      	cmp	r3, r2
 800dcb4:	d01b      	beq.n	800dcee <TIM_Base_SetConfig+0xaa>
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	4a2e      	ldr	r2, [pc, #184]	; (800dd74 <TIM_Base_SetConfig+0x130>)
 800dcba:	4293      	cmp	r3, r2
 800dcbc:	d017      	beq.n	800dcee <TIM_Base_SetConfig+0xaa>
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	4a2d      	ldr	r2, [pc, #180]	; (800dd78 <TIM_Base_SetConfig+0x134>)
 800dcc2:	4293      	cmp	r3, r2
 800dcc4:	d013      	beq.n	800dcee <TIM_Base_SetConfig+0xaa>
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	4a2c      	ldr	r2, [pc, #176]	; (800dd7c <TIM_Base_SetConfig+0x138>)
 800dcca:	4293      	cmp	r3, r2
 800dccc:	d00f      	beq.n	800dcee <TIM_Base_SetConfig+0xaa>
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	4a2b      	ldr	r2, [pc, #172]	; (800dd80 <TIM_Base_SetConfig+0x13c>)
 800dcd2:	4293      	cmp	r3, r2
 800dcd4:	d00b      	beq.n	800dcee <TIM_Base_SetConfig+0xaa>
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	4a2a      	ldr	r2, [pc, #168]	; (800dd84 <TIM_Base_SetConfig+0x140>)
 800dcda:	4293      	cmp	r3, r2
 800dcdc:	d007      	beq.n	800dcee <TIM_Base_SetConfig+0xaa>
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	4a29      	ldr	r2, [pc, #164]	; (800dd88 <TIM_Base_SetConfig+0x144>)
 800dce2:	4293      	cmp	r3, r2
 800dce4:	d003      	beq.n	800dcee <TIM_Base_SetConfig+0xaa>
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	4a28      	ldr	r2, [pc, #160]	; (800dd8c <TIM_Base_SetConfig+0x148>)
 800dcea:	4293      	cmp	r3, r2
 800dcec:	d108      	bne.n	800dd00 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dcf4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800dcf6:	683b      	ldr	r3, [r7, #0]
 800dcf8:	68db      	ldr	r3, [r3, #12]
 800dcfa:	68fa      	ldr	r2, [r7, #12]
 800dcfc:	4313      	orrs	r3, r2
 800dcfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800dd06:	683b      	ldr	r3, [r7, #0]
 800dd08:	695b      	ldr	r3, [r3, #20]
 800dd0a:	4313      	orrs	r3, r2
 800dd0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	68fa      	ldr	r2, [r7, #12]
 800dd12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800dd14:	683b      	ldr	r3, [r7, #0]
 800dd16:	689a      	ldr	r2, [r3, #8]
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800dd1c:	683b      	ldr	r3, [r7, #0]
 800dd1e:	681a      	ldr	r2, [r3, #0]
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	4a10      	ldr	r2, [pc, #64]	; (800dd68 <TIM_Base_SetConfig+0x124>)
 800dd28:	4293      	cmp	r3, r2
 800dd2a:	d00f      	beq.n	800dd4c <TIM_Base_SetConfig+0x108>
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	4a12      	ldr	r2, [pc, #72]	; (800dd78 <TIM_Base_SetConfig+0x134>)
 800dd30:	4293      	cmp	r3, r2
 800dd32:	d00b      	beq.n	800dd4c <TIM_Base_SetConfig+0x108>
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	4a11      	ldr	r2, [pc, #68]	; (800dd7c <TIM_Base_SetConfig+0x138>)
 800dd38:	4293      	cmp	r3, r2
 800dd3a:	d007      	beq.n	800dd4c <TIM_Base_SetConfig+0x108>
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	4a10      	ldr	r2, [pc, #64]	; (800dd80 <TIM_Base_SetConfig+0x13c>)
 800dd40:	4293      	cmp	r3, r2
 800dd42:	d003      	beq.n	800dd4c <TIM_Base_SetConfig+0x108>
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	4a0f      	ldr	r2, [pc, #60]	; (800dd84 <TIM_Base_SetConfig+0x140>)
 800dd48:	4293      	cmp	r3, r2
 800dd4a:	d103      	bne.n	800dd54 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800dd4c:	683b      	ldr	r3, [r7, #0]
 800dd4e:	691a      	ldr	r2, [r3, #16]
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	2201      	movs	r2, #1
 800dd58:	615a      	str	r2, [r3, #20]
}
 800dd5a:	bf00      	nop
 800dd5c:	3714      	adds	r7, #20
 800dd5e:	46bd      	mov	sp, r7
 800dd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd64:	4770      	bx	lr
 800dd66:	bf00      	nop
 800dd68:	40010000 	.word	0x40010000
 800dd6c:	40000400 	.word	0x40000400
 800dd70:	40000800 	.word	0x40000800
 800dd74:	40000c00 	.word	0x40000c00
 800dd78:	40010400 	.word	0x40010400
 800dd7c:	40014000 	.word	0x40014000
 800dd80:	40014400 	.word	0x40014400
 800dd84:	40014800 	.word	0x40014800
 800dd88:	4000e000 	.word	0x4000e000
 800dd8c:	4000e400 	.word	0x4000e400

0800dd90 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800dd90:	b480      	push	{r7}
 800dd92:	b087      	sub	sp, #28
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	6078      	str	r0, [r7, #4]
 800dd98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	6a1b      	ldr	r3, [r3, #32]
 800dd9e:	f023 0201 	bic.w	r2, r3, #1
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	6a1b      	ldr	r3, [r3, #32]
 800ddaa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	685b      	ldr	r3, [r3, #4]
 800ddb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	699b      	ldr	r3, [r3, #24]
 800ddb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ddb8:	68fa      	ldr	r2, [r7, #12]
 800ddba:	4b37      	ldr	r3, [pc, #220]	; (800de98 <TIM_OC1_SetConfig+0x108>)
 800ddbc:	4013      	ands	r3, r2
 800ddbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	f023 0303 	bic.w	r3, r3, #3
 800ddc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ddc8:	683b      	ldr	r3, [r7, #0]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	68fa      	ldr	r2, [r7, #12]
 800ddce:	4313      	orrs	r3, r2
 800ddd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ddd2:	697b      	ldr	r3, [r7, #20]
 800ddd4:	f023 0302 	bic.w	r3, r3, #2
 800ddd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ddda:	683b      	ldr	r3, [r7, #0]
 800dddc:	689b      	ldr	r3, [r3, #8]
 800ddde:	697a      	ldr	r2, [r7, #20]
 800dde0:	4313      	orrs	r3, r2
 800dde2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	4a2d      	ldr	r2, [pc, #180]	; (800de9c <TIM_OC1_SetConfig+0x10c>)
 800dde8:	4293      	cmp	r3, r2
 800ddea:	d00f      	beq.n	800de0c <TIM_OC1_SetConfig+0x7c>
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	4a2c      	ldr	r2, [pc, #176]	; (800dea0 <TIM_OC1_SetConfig+0x110>)
 800ddf0:	4293      	cmp	r3, r2
 800ddf2:	d00b      	beq.n	800de0c <TIM_OC1_SetConfig+0x7c>
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	4a2b      	ldr	r2, [pc, #172]	; (800dea4 <TIM_OC1_SetConfig+0x114>)
 800ddf8:	4293      	cmp	r3, r2
 800ddfa:	d007      	beq.n	800de0c <TIM_OC1_SetConfig+0x7c>
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	4a2a      	ldr	r2, [pc, #168]	; (800dea8 <TIM_OC1_SetConfig+0x118>)
 800de00:	4293      	cmp	r3, r2
 800de02:	d003      	beq.n	800de0c <TIM_OC1_SetConfig+0x7c>
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	4a29      	ldr	r2, [pc, #164]	; (800deac <TIM_OC1_SetConfig+0x11c>)
 800de08:	4293      	cmp	r3, r2
 800de0a:	d10c      	bne.n	800de26 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800de0c:	697b      	ldr	r3, [r7, #20]
 800de0e:	f023 0308 	bic.w	r3, r3, #8
 800de12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800de14:	683b      	ldr	r3, [r7, #0]
 800de16:	68db      	ldr	r3, [r3, #12]
 800de18:	697a      	ldr	r2, [r7, #20]
 800de1a:	4313      	orrs	r3, r2
 800de1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800de1e:	697b      	ldr	r3, [r7, #20]
 800de20:	f023 0304 	bic.w	r3, r3, #4
 800de24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	4a1c      	ldr	r2, [pc, #112]	; (800de9c <TIM_OC1_SetConfig+0x10c>)
 800de2a:	4293      	cmp	r3, r2
 800de2c:	d00f      	beq.n	800de4e <TIM_OC1_SetConfig+0xbe>
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	4a1b      	ldr	r2, [pc, #108]	; (800dea0 <TIM_OC1_SetConfig+0x110>)
 800de32:	4293      	cmp	r3, r2
 800de34:	d00b      	beq.n	800de4e <TIM_OC1_SetConfig+0xbe>
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	4a1a      	ldr	r2, [pc, #104]	; (800dea4 <TIM_OC1_SetConfig+0x114>)
 800de3a:	4293      	cmp	r3, r2
 800de3c:	d007      	beq.n	800de4e <TIM_OC1_SetConfig+0xbe>
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	4a19      	ldr	r2, [pc, #100]	; (800dea8 <TIM_OC1_SetConfig+0x118>)
 800de42:	4293      	cmp	r3, r2
 800de44:	d003      	beq.n	800de4e <TIM_OC1_SetConfig+0xbe>
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	4a18      	ldr	r2, [pc, #96]	; (800deac <TIM_OC1_SetConfig+0x11c>)
 800de4a:	4293      	cmp	r3, r2
 800de4c:	d111      	bne.n	800de72 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800de4e:	693b      	ldr	r3, [r7, #16]
 800de50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800de54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800de56:	693b      	ldr	r3, [r7, #16]
 800de58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800de5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800de5e:	683b      	ldr	r3, [r7, #0]
 800de60:	695b      	ldr	r3, [r3, #20]
 800de62:	693a      	ldr	r2, [r7, #16]
 800de64:	4313      	orrs	r3, r2
 800de66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800de68:	683b      	ldr	r3, [r7, #0]
 800de6a:	699b      	ldr	r3, [r3, #24]
 800de6c:	693a      	ldr	r2, [r7, #16]
 800de6e:	4313      	orrs	r3, r2
 800de70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	693a      	ldr	r2, [r7, #16]
 800de76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	68fa      	ldr	r2, [r7, #12]
 800de7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800de7e:	683b      	ldr	r3, [r7, #0]
 800de80:	685a      	ldr	r2, [r3, #4]
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	697a      	ldr	r2, [r7, #20]
 800de8a:	621a      	str	r2, [r3, #32]
}
 800de8c:	bf00      	nop
 800de8e:	371c      	adds	r7, #28
 800de90:	46bd      	mov	sp, r7
 800de92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de96:	4770      	bx	lr
 800de98:	fffeff8f 	.word	0xfffeff8f
 800de9c:	40010000 	.word	0x40010000
 800dea0:	40010400 	.word	0x40010400
 800dea4:	40014000 	.word	0x40014000
 800dea8:	40014400 	.word	0x40014400
 800deac:	40014800 	.word	0x40014800

0800deb0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800deb0:	b480      	push	{r7}
 800deb2:	b087      	sub	sp, #28
 800deb4:	af00      	add	r7, sp, #0
 800deb6:	6078      	str	r0, [r7, #4]
 800deb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	6a1b      	ldr	r3, [r3, #32]
 800debe:	f023 0210 	bic.w	r2, r3, #16
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	6a1b      	ldr	r3, [r3, #32]
 800deca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	685b      	ldr	r3, [r3, #4]
 800ded0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	699b      	ldr	r3, [r3, #24]
 800ded6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ded8:	68fa      	ldr	r2, [r7, #12]
 800deda:	4b34      	ldr	r3, [pc, #208]	; (800dfac <TIM_OC2_SetConfig+0xfc>)
 800dedc:	4013      	ands	r3, r2
 800dede:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dee6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dee8:	683b      	ldr	r3, [r7, #0]
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	021b      	lsls	r3, r3, #8
 800deee:	68fa      	ldr	r2, [r7, #12]
 800def0:	4313      	orrs	r3, r2
 800def2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800def4:	697b      	ldr	r3, [r7, #20]
 800def6:	f023 0320 	bic.w	r3, r3, #32
 800defa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800defc:	683b      	ldr	r3, [r7, #0]
 800defe:	689b      	ldr	r3, [r3, #8]
 800df00:	011b      	lsls	r3, r3, #4
 800df02:	697a      	ldr	r2, [r7, #20]
 800df04:	4313      	orrs	r3, r2
 800df06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	4a29      	ldr	r2, [pc, #164]	; (800dfb0 <TIM_OC2_SetConfig+0x100>)
 800df0c:	4293      	cmp	r3, r2
 800df0e:	d003      	beq.n	800df18 <TIM_OC2_SetConfig+0x68>
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	4a28      	ldr	r2, [pc, #160]	; (800dfb4 <TIM_OC2_SetConfig+0x104>)
 800df14:	4293      	cmp	r3, r2
 800df16:	d10d      	bne.n	800df34 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800df18:	697b      	ldr	r3, [r7, #20]
 800df1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800df1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800df20:	683b      	ldr	r3, [r7, #0]
 800df22:	68db      	ldr	r3, [r3, #12]
 800df24:	011b      	lsls	r3, r3, #4
 800df26:	697a      	ldr	r2, [r7, #20]
 800df28:	4313      	orrs	r3, r2
 800df2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800df2c:	697b      	ldr	r3, [r7, #20]
 800df2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800df32:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	4a1e      	ldr	r2, [pc, #120]	; (800dfb0 <TIM_OC2_SetConfig+0x100>)
 800df38:	4293      	cmp	r3, r2
 800df3a:	d00f      	beq.n	800df5c <TIM_OC2_SetConfig+0xac>
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	4a1d      	ldr	r2, [pc, #116]	; (800dfb4 <TIM_OC2_SetConfig+0x104>)
 800df40:	4293      	cmp	r3, r2
 800df42:	d00b      	beq.n	800df5c <TIM_OC2_SetConfig+0xac>
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	4a1c      	ldr	r2, [pc, #112]	; (800dfb8 <TIM_OC2_SetConfig+0x108>)
 800df48:	4293      	cmp	r3, r2
 800df4a:	d007      	beq.n	800df5c <TIM_OC2_SetConfig+0xac>
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	4a1b      	ldr	r2, [pc, #108]	; (800dfbc <TIM_OC2_SetConfig+0x10c>)
 800df50:	4293      	cmp	r3, r2
 800df52:	d003      	beq.n	800df5c <TIM_OC2_SetConfig+0xac>
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	4a1a      	ldr	r2, [pc, #104]	; (800dfc0 <TIM_OC2_SetConfig+0x110>)
 800df58:	4293      	cmp	r3, r2
 800df5a:	d113      	bne.n	800df84 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800df5c:	693b      	ldr	r3, [r7, #16]
 800df5e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800df62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800df64:	693b      	ldr	r3, [r7, #16]
 800df66:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800df6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800df6c:	683b      	ldr	r3, [r7, #0]
 800df6e:	695b      	ldr	r3, [r3, #20]
 800df70:	009b      	lsls	r3, r3, #2
 800df72:	693a      	ldr	r2, [r7, #16]
 800df74:	4313      	orrs	r3, r2
 800df76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800df78:	683b      	ldr	r3, [r7, #0]
 800df7a:	699b      	ldr	r3, [r3, #24]
 800df7c:	009b      	lsls	r3, r3, #2
 800df7e:	693a      	ldr	r2, [r7, #16]
 800df80:	4313      	orrs	r3, r2
 800df82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	693a      	ldr	r2, [r7, #16]
 800df88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	68fa      	ldr	r2, [r7, #12]
 800df8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800df90:	683b      	ldr	r3, [r7, #0]
 800df92:	685a      	ldr	r2, [r3, #4]
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	697a      	ldr	r2, [r7, #20]
 800df9c:	621a      	str	r2, [r3, #32]
}
 800df9e:	bf00      	nop
 800dfa0:	371c      	adds	r7, #28
 800dfa2:	46bd      	mov	sp, r7
 800dfa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa8:	4770      	bx	lr
 800dfaa:	bf00      	nop
 800dfac:	feff8fff 	.word	0xfeff8fff
 800dfb0:	40010000 	.word	0x40010000
 800dfb4:	40010400 	.word	0x40010400
 800dfb8:	40014000 	.word	0x40014000
 800dfbc:	40014400 	.word	0x40014400
 800dfc0:	40014800 	.word	0x40014800

0800dfc4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800dfc4:	b480      	push	{r7}
 800dfc6:	b087      	sub	sp, #28
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	6078      	str	r0, [r7, #4]
 800dfcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	6a1b      	ldr	r3, [r3, #32]
 800dfd2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	6a1b      	ldr	r3, [r3, #32]
 800dfde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	685b      	ldr	r3, [r3, #4]
 800dfe4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	69db      	ldr	r3, [r3, #28]
 800dfea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800dfec:	68fa      	ldr	r2, [r7, #12]
 800dfee:	4b33      	ldr	r3, [pc, #204]	; (800e0bc <TIM_OC3_SetConfig+0xf8>)
 800dff0:	4013      	ands	r3, r2
 800dff2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	f023 0303 	bic.w	r3, r3, #3
 800dffa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dffc:	683b      	ldr	r3, [r7, #0]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	68fa      	ldr	r2, [r7, #12]
 800e002:	4313      	orrs	r3, r2
 800e004:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e006:	697b      	ldr	r3, [r7, #20]
 800e008:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e00c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e00e:	683b      	ldr	r3, [r7, #0]
 800e010:	689b      	ldr	r3, [r3, #8]
 800e012:	021b      	lsls	r3, r3, #8
 800e014:	697a      	ldr	r2, [r7, #20]
 800e016:	4313      	orrs	r3, r2
 800e018:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	4a28      	ldr	r2, [pc, #160]	; (800e0c0 <TIM_OC3_SetConfig+0xfc>)
 800e01e:	4293      	cmp	r3, r2
 800e020:	d003      	beq.n	800e02a <TIM_OC3_SetConfig+0x66>
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	4a27      	ldr	r2, [pc, #156]	; (800e0c4 <TIM_OC3_SetConfig+0x100>)
 800e026:	4293      	cmp	r3, r2
 800e028:	d10d      	bne.n	800e046 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e02a:	697b      	ldr	r3, [r7, #20]
 800e02c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e030:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e032:	683b      	ldr	r3, [r7, #0]
 800e034:	68db      	ldr	r3, [r3, #12]
 800e036:	021b      	lsls	r3, r3, #8
 800e038:	697a      	ldr	r2, [r7, #20]
 800e03a:	4313      	orrs	r3, r2
 800e03c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e03e:	697b      	ldr	r3, [r7, #20]
 800e040:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e044:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	4a1d      	ldr	r2, [pc, #116]	; (800e0c0 <TIM_OC3_SetConfig+0xfc>)
 800e04a:	4293      	cmp	r3, r2
 800e04c:	d00f      	beq.n	800e06e <TIM_OC3_SetConfig+0xaa>
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	4a1c      	ldr	r2, [pc, #112]	; (800e0c4 <TIM_OC3_SetConfig+0x100>)
 800e052:	4293      	cmp	r3, r2
 800e054:	d00b      	beq.n	800e06e <TIM_OC3_SetConfig+0xaa>
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	4a1b      	ldr	r2, [pc, #108]	; (800e0c8 <TIM_OC3_SetConfig+0x104>)
 800e05a:	4293      	cmp	r3, r2
 800e05c:	d007      	beq.n	800e06e <TIM_OC3_SetConfig+0xaa>
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	4a1a      	ldr	r2, [pc, #104]	; (800e0cc <TIM_OC3_SetConfig+0x108>)
 800e062:	4293      	cmp	r3, r2
 800e064:	d003      	beq.n	800e06e <TIM_OC3_SetConfig+0xaa>
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	4a19      	ldr	r2, [pc, #100]	; (800e0d0 <TIM_OC3_SetConfig+0x10c>)
 800e06a:	4293      	cmp	r3, r2
 800e06c:	d113      	bne.n	800e096 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e06e:	693b      	ldr	r3, [r7, #16]
 800e070:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e074:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e076:	693b      	ldr	r3, [r7, #16]
 800e078:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e07c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e07e:	683b      	ldr	r3, [r7, #0]
 800e080:	695b      	ldr	r3, [r3, #20]
 800e082:	011b      	lsls	r3, r3, #4
 800e084:	693a      	ldr	r2, [r7, #16]
 800e086:	4313      	orrs	r3, r2
 800e088:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e08a:	683b      	ldr	r3, [r7, #0]
 800e08c:	699b      	ldr	r3, [r3, #24]
 800e08e:	011b      	lsls	r3, r3, #4
 800e090:	693a      	ldr	r2, [r7, #16]
 800e092:	4313      	orrs	r3, r2
 800e094:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	693a      	ldr	r2, [r7, #16]
 800e09a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	68fa      	ldr	r2, [r7, #12]
 800e0a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e0a2:	683b      	ldr	r3, [r7, #0]
 800e0a4:	685a      	ldr	r2, [r3, #4]
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	697a      	ldr	r2, [r7, #20]
 800e0ae:	621a      	str	r2, [r3, #32]
}
 800e0b0:	bf00      	nop
 800e0b2:	371c      	adds	r7, #28
 800e0b4:	46bd      	mov	sp, r7
 800e0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ba:	4770      	bx	lr
 800e0bc:	fffeff8f 	.word	0xfffeff8f
 800e0c0:	40010000 	.word	0x40010000
 800e0c4:	40010400 	.word	0x40010400
 800e0c8:	40014000 	.word	0x40014000
 800e0cc:	40014400 	.word	0x40014400
 800e0d0:	40014800 	.word	0x40014800

0800e0d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e0d4:	b480      	push	{r7}
 800e0d6:	b087      	sub	sp, #28
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	6078      	str	r0, [r7, #4]
 800e0dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	6a1b      	ldr	r3, [r3, #32]
 800e0e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	6a1b      	ldr	r3, [r3, #32]
 800e0ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	685b      	ldr	r3, [r3, #4]
 800e0f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	69db      	ldr	r3, [r3, #28]
 800e0fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e0fc:	68fa      	ldr	r2, [r7, #12]
 800e0fe:	4b24      	ldr	r3, [pc, #144]	; (800e190 <TIM_OC4_SetConfig+0xbc>)
 800e100:	4013      	ands	r3, r2
 800e102:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e10a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e10c:	683b      	ldr	r3, [r7, #0]
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	021b      	lsls	r3, r3, #8
 800e112:	68fa      	ldr	r2, [r7, #12]
 800e114:	4313      	orrs	r3, r2
 800e116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e118:	693b      	ldr	r3, [r7, #16]
 800e11a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e11e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e120:	683b      	ldr	r3, [r7, #0]
 800e122:	689b      	ldr	r3, [r3, #8]
 800e124:	031b      	lsls	r3, r3, #12
 800e126:	693a      	ldr	r2, [r7, #16]
 800e128:	4313      	orrs	r3, r2
 800e12a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	4a19      	ldr	r2, [pc, #100]	; (800e194 <TIM_OC4_SetConfig+0xc0>)
 800e130:	4293      	cmp	r3, r2
 800e132:	d00f      	beq.n	800e154 <TIM_OC4_SetConfig+0x80>
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	4a18      	ldr	r2, [pc, #96]	; (800e198 <TIM_OC4_SetConfig+0xc4>)
 800e138:	4293      	cmp	r3, r2
 800e13a:	d00b      	beq.n	800e154 <TIM_OC4_SetConfig+0x80>
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	4a17      	ldr	r2, [pc, #92]	; (800e19c <TIM_OC4_SetConfig+0xc8>)
 800e140:	4293      	cmp	r3, r2
 800e142:	d007      	beq.n	800e154 <TIM_OC4_SetConfig+0x80>
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	4a16      	ldr	r2, [pc, #88]	; (800e1a0 <TIM_OC4_SetConfig+0xcc>)
 800e148:	4293      	cmp	r3, r2
 800e14a:	d003      	beq.n	800e154 <TIM_OC4_SetConfig+0x80>
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	4a15      	ldr	r2, [pc, #84]	; (800e1a4 <TIM_OC4_SetConfig+0xd0>)
 800e150:	4293      	cmp	r3, r2
 800e152:	d109      	bne.n	800e168 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e154:	697b      	ldr	r3, [r7, #20]
 800e156:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e15a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e15c:	683b      	ldr	r3, [r7, #0]
 800e15e:	695b      	ldr	r3, [r3, #20]
 800e160:	019b      	lsls	r3, r3, #6
 800e162:	697a      	ldr	r2, [r7, #20]
 800e164:	4313      	orrs	r3, r2
 800e166:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	697a      	ldr	r2, [r7, #20]
 800e16c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	68fa      	ldr	r2, [r7, #12]
 800e172:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e174:	683b      	ldr	r3, [r7, #0]
 800e176:	685a      	ldr	r2, [r3, #4]
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	693a      	ldr	r2, [r7, #16]
 800e180:	621a      	str	r2, [r3, #32]
}
 800e182:	bf00      	nop
 800e184:	371c      	adds	r7, #28
 800e186:	46bd      	mov	sp, r7
 800e188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e18c:	4770      	bx	lr
 800e18e:	bf00      	nop
 800e190:	feff8fff 	.word	0xfeff8fff
 800e194:	40010000 	.word	0x40010000
 800e198:	40010400 	.word	0x40010400
 800e19c:	40014000 	.word	0x40014000
 800e1a0:	40014400 	.word	0x40014400
 800e1a4:	40014800 	.word	0x40014800

0800e1a8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800e1a8:	b480      	push	{r7}
 800e1aa:	b087      	sub	sp, #28
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
 800e1b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	6a1b      	ldr	r3, [r3, #32]
 800e1b6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	6a1b      	ldr	r3, [r3, #32]
 800e1c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	685b      	ldr	r3, [r3, #4]
 800e1c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e1ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e1d0:	68fa      	ldr	r2, [r7, #12]
 800e1d2:	4b21      	ldr	r3, [pc, #132]	; (800e258 <TIM_OC5_SetConfig+0xb0>)
 800e1d4:	4013      	ands	r3, r2
 800e1d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e1d8:	683b      	ldr	r3, [r7, #0]
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	68fa      	ldr	r2, [r7, #12]
 800e1de:	4313      	orrs	r3, r2
 800e1e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e1e2:	693b      	ldr	r3, [r7, #16]
 800e1e4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800e1e8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e1ea:	683b      	ldr	r3, [r7, #0]
 800e1ec:	689b      	ldr	r3, [r3, #8]
 800e1ee:	041b      	lsls	r3, r3, #16
 800e1f0:	693a      	ldr	r2, [r7, #16]
 800e1f2:	4313      	orrs	r3, r2
 800e1f4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	4a18      	ldr	r2, [pc, #96]	; (800e25c <TIM_OC5_SetConfig+0xb4>)
 800e1fa:	4293      	cmp	r3, r2
 800e1fc:	d00f      	beq.n	800e21e <TIM_OC5_SetConfig+0x76>
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	4a17      	ldr	r2, [pc, #92]	; (800e260 <TIM_OC5_SetConfig+0xb8>)
 800e202:	4293      	cmp	r3, r2
 800e204:	d00b      	beq.n	800e21e <TIM_OC5_SetConfig+0x76>
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	4a16      	ldr	r2, [pc, #88]	; (800e264 <TIM_OC5_SetConfig+0xbc>)
 800e20a:	4293      	cmp	r3, r2
 800e20c:	d007      	beq.n	800e21e <TIM_OC5_SetConfig+0x76>
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	4a15      	ldr	r2, [pc, #84]	; (800e268 <TIM_OC5_SetConfig+0xc0>)
 800e212:	4293      	cmp	r3, r2
 800e214:	d003      	beq.n	800e21e <TIM_OC5_SetConfig+0x76>
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	4a14      	ldr	r2, [pc, #80]	; (800e26c <TIM_OC5_SetConfig+0xc4>)
 800e21a:	4293      	cmp	r3, r2
 800e21c:	d109      	bne.n	800e232 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e21e:	697b      	ldr	r3, [r7, #20]
 800e220:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e224:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e226:	683b      	ldr	r3, [r7, #0]
 800e228:	695b      	ldr	r3, [r3, #20]
 800e22a:	021b      	lsls	r3, r3, #8
 800e22c:	697a      	ldr	r2, [r7, #20]
 800e22e:	4313      	orrs	r3, r2
 800e230:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	697a      	ldr	r2, [r7, #20]
 800e236:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	68fa      	ldr	r2, [r7, #12]
 800e23c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e23e:	683b      	ldr	r3, [r7, #0]
 800e240:	685a      	ldr	r2, [r3, #4]
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	693a      	ldr	r2, [r7, #16]
 800e24a:	621a      	str	r2, [r3, #32]
}
 800e24c:	bf00      	nop
 800e24e:	371c      	adds	r7, #28
 800e250:	46bd      	mov	sp, r7
 800e252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e256:	4770      	bx	lr
 800e258:	fffeff8f 	.word	0xfffeff8f
 800e25c:	40010000 	.word	0x40010000
 800e260:	40010400 	.word	0x40010400
 800e264:	40014000 	.word	0x40014000
 800e268:	40014400 	.word	0x40014400
 800e26c:	40014800 	.word	0x40014800

0800e270 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800e270:	b480      	push	{r7}
 800e272:	b087      	sub	sp, #28
 800e274:	af00      	add	r7, sp, #0
 800e276:	6078      	str	r0, [r7, #4]
 800e278:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	6a1b      	ldr	r3, [r3, #32]
 800e27e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	6a1b      	ldr	r3, [r3, #32]
 800e28a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	685b      	ldr	r3, [r3, #4]
 800e290:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e298:	68fa      	ldr	r2, [r7, #12]
 800e29a:	4b22      	ldr	r3, [pc, #136]	; (800e324 <TIM_OC6_SetConfig+0xb4>)
 800e29c:	4013      	ands	r3, r2
 800e29e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e2a0:	683b      	ldr	r3, [r7, #0]
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	021b      	lsls	r3, r3, #8
 800e2a6:	68fa      	ldr	r2, [r7, #12]
 800e2a8:	4313      	orrs	r3, r2
 800e2aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e2ac:	693b      	ldr	r3, [r7, #16]
 800e2ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e2b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e2b4:	683b      	ldr	r3, [r7, #0]
 800e2b6:	689b      	ldr	r3, [r3, #8]
 800e2b8:	051b      	lsls	r3, r3, #20
 800e2ba:	693a      	ldr	r2, [r7, #16]
 800e2bc:	4313      	orrs	r3, r2
 800e2be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	4a19      	ldr	r2, [pc, #100]	; (800e328 <TIM_OC6_SetConfig+0xb8>)
 800e2c4:	4293      	cmp	r3, r2
 800e2c6:	d00f      	beq.n	800e2e8 <TIM_OC6_SetConfig+0x78>
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	4a18      	ldr	r2, [pc, #96]	; (800e32c <TIM_OC6_SetConfig+0xbc>)
 800e2cc:	4293      	cmp	r3, r2
 800e2ce:	d00b      	beq.n	800e2e8 <TIM_OC6_SetConfig+0x78>
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	4a17      	ldr	r2, [pc, #92]	; (800e330 <TIM_OC6_SetConfig+0xc0>)
 800e2d4:	4293      	cmp	r3, r2
 800e2d6:	d007      	beq.n	800e2e8 <TIM_OC6_SetConfig+0x78>
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	4a16      	ldr	r2, [pc, #88]	; (800e334 <TIM_OC6_SetConfig+0xc4>)
 800e2dc:	4293      	cmp	r3, r2
 800e2de:	d003      	beq.n	800e2e8 <TIM_OC6_SetConfig+0x78>
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	4a15      	ldr	r2, [pc, #84]	; (800e338 <TIM_OC6_SetConfig+0xc8>)
 800e2e4:	4293      	cmp	r3, r2
 800e2e6:	d109      	bne.n	800e2fc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e2e8:	697b      	ldr	r3, [r7, #20]
 800e2ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e2ee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e2f0:	683b      	ldr	r3, [r7, #0]
 800e2f2:	695b      	ldr	r3, [r3, #20]
 800e2f4:	029b      	lsls	r3, r3, #10
 800e2f6:	697a      	ldr	r2, [r7, #20]
 800e2f8:	4313      	orrs	r3, r2
 800e2fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	697a      	ldr	r2, [r7, #20]
 800e300:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	68fa      	ldr	r2, [r7, #12]
 800e306:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e308:	683b      	ldr	r3, [r7, #0]
 800e30a:	685a      	ldr	r2, [r3, #4]
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	693a      	ldr	r2, [r7, #16]
 800e314:	621a      	str	r2, [r3, #32]
}
 800e316:	bf00      	nop
 800e318:	371c      	adds	r7, #28
 800e31a:	46bd      	mov	sp, r7
 800e31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e320:	4770      	bx	lr
 800e322:	bf00      	nop
 800e324:	feff8fff 	.word	0xfeff8fff
 800e328:	40010000 	.word	0x40010000
 800e32c:	40010400 	.word	0x40010400
 800e330:	40014000 	.word	0x40014000
 800e334:	40014400 	.word	0x40014400
 800e338:	40014800 	.word	0x40014800

0800e33c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e33c:	b480      	push	{r7}
 800e33e:	b087      	sub	sp, #28
 800e340:	af00      	add	r7, sp, #0
 800e342:	60f8      	str	r0, [r7, #12]
 800e344:	60b9      	str	r1, [r7, #8]
 800e346:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	6a1b      	ldr	r3, [r3, #32]
 800e34c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	6a1b      	ldr	r3, [r3, #32]
 800e352:	f023 0201 	bic.w	r2, r3, #1
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	699b      	ldr	r3, [r3, #24]
 800e35e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e360:	693b      	ldr	r3, [r7, #16]
 800e362:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e366:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	011b      	lsls	r3, r3, #4
 800e36c:	693a      	ldr	r2, [r7, #16]
 800e36e:	4313      	orrs	r3, r2
 800e370:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e372:	697b      	ldr	r3, [r7, #20]
 800e374:	f023 030a 	bic.w	r3, r3, #10
 800e378:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e37a:	697a      	ldr	r2, [r7, #20]
 800e37c:	68bb      	ldr	r3, [r7, #8]
 800e37e:	4313      	orrs	r3, r2
 800e380:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	693a      	ldr	r2, [r7, #16]
 800e386:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	697a      	ldr	r2, [r7, #20]
 800e38c:	621a      	str	r2, [r3, #32]
}
 800e38e:	bf00      	nop
 800e390:	371c      	adds	r7, #28
 800e392:	46bd      	mov	sp, r7
 800e394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e398:	4770      	bx	lr

0800e39a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e39a:	b480      	push	{r7}
 800e39c:	b087      	sub	sp, #28
 800e39e:	af00      	add	r7, sp, #0
 800e3a0:	60f8      	str	r0, [r7, #12]
 800e3a2:	60b9      	str	r1, [r7, #8]
 800e3a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	6a1b      	ldr	r3, [r3, #32]
 800e3aa:	f023 0210 	bic.w	r2, r3, #16
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	699b      	ldr	r3, [r3, #24]
 800e3b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	6a1b      	ldr	r3, [r3, #32]
 800e3bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e3be:	697b      	ldr	r3, [r7, #20]
 800e3c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e3c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	031b      	lsls	r3, r3, #12
 800e3ca:	697a      	ldr	r2, [r7, #20]
 800e3cc:	4313      	orrs	r3, r2
 800e3ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e3d0:	693b      	ldr	r3, [r7, #16]
 800e3d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e3d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e3d8:	68bb      	ldr	r3, [r7, #8]
 800e3da:	011b      	lsls	r3, r3, #4
 800e3dc:	693a      	ldr	r2, [r7, #16]
 800e3de:	4313      	orrs	r3, r2
 800e3e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	697a      	ldr	r2, [r7, #20]
 800e3e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	693a      	ldr	r2, [r7, #16]
 800e3ec:	621a      	str	r2, [r3, #32]
}
 800e3ee:	bf00      	nop
 800e3f0:	371c      	adds	r7, #28
 800e3f2:	46bd      	mov	sp, r7
 800e3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f8:	4770      	bx	lr
	...

0800e3fc <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e3fc:	b480      	push	{r7}
 800e3fe:	b085      	sub	sp, #20
 800e400:	af00      	add	r7, sp, #0
 800e402:	6078      	str	r0, [r7, #4]
 800e404:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	689b      	ldr	r3, [r3, #8]
 800e40a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e40c:	68fa      	ldr	r2, [r7, #12]
 800e40e:	4b09      	ldr	r3, [pc, #36]	; (800e434 <TIM_ITRx_SetConfig+0x38>)
 800e410:	4013      	ands	r3, r2
 800e412:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e414:	683a      	ldr	r2, [r7, #0]
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	4313      	orrs	r3, r2
 800e41a:	f043 0307 	orr.w	r3, r3, #7
 800e41e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	68fa      	ldr	r2, [r7, #12]
 800e424:	609a      	str	r2, [r3, #8]
}
 800e426:	bf00      	nop
 800e428:	3714      	adds	r7, #20
 800e42a:	46bd      	mov	sp, r7
 800e42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e430:	4770      	bx	lr
 800e432:	bf00      	nop
 800e434:	ffcfff8f 	.word	0xffcfff8f

0800e438 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e438:	b480      	push	{r7}
 800e43a:	b087      	sub	sp, #28
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	60f8      	str	r0, [r7, #12]
 800e440:	60b9      	str	r1, [r7, #8]
 800e442:	607a      	str	r2, [r7, #4]
 800e444:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	689b      	ldr	r3, [r3, #8]
 800e44a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e44c:	697b      	ldr	r3, [r7, #20]
 800e44e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e452:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e454:	683b      	ldr	r3, [r7, #0]
 800e456:	021a      	lsls	r2, r3, #8
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	431a      	orrs	r2, r3
 800e45c:	68bb      	ldr	r3, [r7, #8]
 800e45e:	4313      	orrs	r3, r2
 800e460:	697a      	ldr	r2, [r7, #20]
 800e462:	4313      	orrs	r3, r2
 800e464:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	697a      	ldr	r2, [r7, #20]
 800e46a:	609a      	str	r2, [r3, #8]
}
 800e46c:	bf00      	nop
 800e46e:	371c      	adds	r7, #28
 800e470:	46bd      	mov	sp, r7
 800e472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e476:	4770      	bx	lr

0800e478 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800e478:	b480      	push	{r7}
 800e47a:	b087      	sub	sp, #28
 800e47c:	af00      	add	r7, sp, #0
 800e47e:	60f8      	str	r0, [r7, #12]
 800e480:	60b9      	str	r1, [r7, #8]
 800e482:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e484:	68bb      	ldr	r3, [r7, #8]
 800e486:	f003 031f 	and.w	r3, r3, #31
 800e48a:	2201      	movs	r2, #1
 800e48c:	fa02 f303 	lsl.w	r3, r2, r3
 800e490:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	6a1a      	ldr	r2, [r3, #32]
 800e496:	697b      	ldr	r3, [r7, #20]
 800e498:	43db      	mvns	r3, r3
 800e49a:	401a      	ands	r2, r3
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	6a1a      	ldr	r2, [r3, #32]
 800e4a4:	68bb      	ldr	r3, [r7, #8]
 800e4a6:	f003 031f 	and.w	r3, r3, #31
 800e4aa:	6879      	ldr	r1, [r7, #4]
 800e4ac:	fa01 f303 	lsl.w	r3, r1, r3
 800e4b0:	431a      	orrs	r2, r3
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	621a      	str	r2, [r3, #32]
}
 800e4b6:	bf00      	nop
 800e4b8:	371c      	adds	r7, #28
 800e4ba:	46bd      	mov	sp, r7
 800e4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c0:	4770      	bx	lr
	...

0800e4c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e4c4:	b480      	push	{r7}
 800e4c6:	b085      	sub	sp, #20
 800e4c8:	af00      	add	r7, sp, #0
 800e4ca:	6078      	str	r0, [r7, #4]
 800e4cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e4d4:	2b01      	cmp	r3, #1
 800e4d6:	d101      	bne.n	800e4dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e4d8:	2302      	movs	r3, #2
 800e4da:	e077      	b.n	800e5cc <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	2201      	movs	r2, #1
 800e4e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	2202      	movs	r2, #2
 800e4e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	685b      	ldr	r3, [r3, #4]
 800e4f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	689b      	ldr	r3, [r3, #8]
 800e4fa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	4a35      	ldr	r2, [pc, #212]	; (800e5d8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e502:	4293      	cmp	r3, r2
 800e504:	d004      	beq.n	800e510 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	4a34      	ldr	r2, [pc, #208]	; (800e5dc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e50c:	4293      	cmp	r3, r2
 800e50e:	d108      	bne.n	800e522 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800e516:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e518:	683b      	ldr	r3, [r7, #0]
 800e51a:	685b      	ldr	r3, [r3, #4]
 800e51c:	68fa      	ldr	r2, [r7, #12]
 800e51e:	4313      	orrs	r3, r2
 800e520:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e528:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e52a:	683b      	ldr	r3, [r7, #0]
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	68fa      	ldr	r2, [r7, #12]
 800e530:	4313      	orrs	r3, r2
 800e532:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	68fa      	ldr	r2, [r7, #12]
 800e53a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	4a25      	ldr	r2, [pc, #148]	; (800e5d8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e542:	4293      	cmp	r3, r2
 800e544:	d02c      	beq.n	800e5a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e54e:	d027      	beq.n	800e5a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	4a22      	ldr	r2, [pc, #136]	; (800e5e0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800e556:	4293      	cmp	r3, r2
 800e558:	d022      	beq.n	800e5a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	4a21      	ldr	r2, [pc, #132]	; (800e5e4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800e560:	4293      	cmp	r3, r2
 800e562:	d01d      	beq.n	800e5a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	4a1f      	ldr	r2, [pc, #124]	; (800e5e8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800e56a:	4293      	cmp	r3, r2
 800e56c:	d018      	beq.n	800e5a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	4a1a      	ldr	r2, [pc, #104]	; (800e5dc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e574:	4293      	cmp	r3, r2
 800e576:	d013      	beq.n	800e5a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	4a1b      	ldr	r2, [pc, #108]	; (800e5ec <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800e57e:	4293      	cmp	r3, r2
 800e580:	d00e      	beq.n	800e5a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	4a1a      	ldr	r2, [pc, #104]	; (800e5f0 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800e588:	4293      	cmp	r3, r2
 800e58a:	d009      	beq.n	800e5a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	4a18      	ldr	r2, [pc, #96]	; (800e5f4 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800e592:	4293      	cmp	r3, r2
 800e594:	d004      	beq.n	800e5a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	4a17      	ldr	r2, [pc, #92]	; (800e5f8 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800e59c:	4293      	cmp	r3, r2
 800e59e:	d10c      	bne.n	800e5ba <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e5a0:	68bb      	ldr	r3, [r7, #8]
 800e5a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e5a6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e5a8:	683b      	ldr	r3, [r7, #0]
 800e5aa:	689b      	ldr	r3, [r3, #8]
 800e5ac:	68ba      	ldr	r2, [r7, #8]
 800e5ae:	4313      	orrs	r3, r2
 800e5b0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	68ba      	ldr	r2, [r7, #8]
 800e5b8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	2201      	movs	r2, #1
 800e5be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	2200      	movs	r2, #0
 800e5c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e5ca:	2300      	movs	r3, #0
}
 800e5cc:	4618      	mov	r0, r3
 800e5ce:	3714      	adds	r7, #20
 800e5d0:	46bd      	mov	sp, r7
 800e5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d6:	4770      	bx	lr
 800e5d8:	40010000 	.word	0x40010000
 800e5dc:	40010400 	.word	0x40010400
 800e5e0:	40000400 	.word	0x40000400
 800e5e4:	40000800 	.word	0x40000800
 800e5e8:	40000c00 	.word	0x40000c00
 800e5ec:	40001800 	.word	0x40001800
 800e5f0:	40014000 	.word	0x40014000
 800e5f4:	4000e000 	.word	0x4000e000
 800e5f8:	4000e400 	.word	0x4000e400

0800e5fc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800e5fc:	b480      	push	{r7}
 800e5fe:	b085      	sub	sp, #20
 800e600:	af00      	add	r7, sp, #0
 800e602:	6078      	str	r0, [r7, #4]
 800e604:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800e606:	2300      	movs	r3, #0
 800e608:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e610:	2b01      	cmp	r3, #1
 800e612:	d101      	bne.n	800e618 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800e614:	2302      	movs	r3, #2
 800e616:	e087      	b.n	800e728 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	2201      	movs	r2, #1
 800e61c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800e626:	683b      	ldr	r3, [r7, #0]
 800e628:	68db      	ldr	r3, [r3, #12]
 800e62a:	4313      	orrs	r3, r2
 800e62c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e634:	683b      	ldr	r3, [r7, #0]
 800e636:	689b      	ldr	r3, [r3, #8]
 800e638:	4313      	orrs	r3, r2
 800e63a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800e642:	683b      	ldr	r3, [r7, #0]
 800e644:	685b      	ldr	r3, [r3, #4]
 800e646:	4313      	orrs	r3, r2
 800e648:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800e650:	683b      	ldr	r3, [r7, #0]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	4313      	orrs	r3, r2
 800e656:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e65e:	683b      	ldr	r3, [r7, #0]
 800e660:	691b      	ldr	r3, [r3, #16]
 800e662:	4313      	orrs	r3, r2
 800e664:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800e66c:	683b      	ldr	r3, [r7, #0]
 800e66e:	695b      	ldr	r3, [r3, #20]
 800e670:	4313      	orrs	r3, r2
 800e672:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800e67a:	683b      	ldr	r3, [r7, #0]
 800e67c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e67e:	4313      	orrs	r3, r2
 800e680:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800e688:	683b      	ldr	r3, [r7, #0]
 800e68a:	699b      	ldr	r3, [r3, #24]
 800e68c:	041b      	lsls	r3, r3, #16
 800e68e:	4313      	orrs	r3, r2
 800e690:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	4a27      	ldr	r2, [pc, #156]	; (800e734 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800e698:	4293      	cmp	r3, r2
 800e69a:	d004      	beq.n	800e6a6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	4a25      	ldr	r2, [pc, #148]	; (800e738 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800e6a2:	4293      	cmp	r3, r2
 800e6a4:	d106      	bne.n	800e6b4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800e6ac:	683b      	ldr	r3, [r7, #0]
 800e6ae:	69db      	ldr	r3, [r3, #28]
 800e6b0:	4313      	orrs	r3, r2
 800e6b2:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	4a1e      	ldr	r2, [pc, #120]	; (800e734 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800e6ba:	4293      	cmp	r3, r2
 800e6bc:	d004      	beq.n	800e6c8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	4a1d      	ldr	r2, [pc, #116]	; (800e738 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800e6c4:	4293      	cmp	r3, r2
 800e6c6:	d126      	bne.n	800e716 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800e6ce:	683b      	ldr	r3, [r7, #0]
 800e6d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6d2:	051b      	lsls	r3, r3, #20
 800e6d4:	4313      	orrs	r3, r2
 800e6d6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800e6de:	683b      	ldr	r3, [r7, #0]
 800e6e0:	6a1b      	ldr	r3, [r3, #32]
 800e6e2:	4313      	orrs	r3, r2
 800e6e4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800e6ec:	683b      	ldr	r3, [r7, #0]
 800e6ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6f0:	4313      	orrs	r3, r2
 800e6f2:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	4a0e      	ldr	r2, [pc, #56]	; (800e734 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800e6fa:	4293      	cmp	r3, r2
 800e6fc:	d004      	beq.n	800e708 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	4a0d      	ldr	r2, [pc, #52]	; (800e738 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800e704:	4293      	cmp	r3, r2
 800e706:	d106      	bne.n	800e716 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800e70e:	683b      	ldr	r3, [r7, #0]
 800e710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e712:	4313      	orrs	r3, r2
 800e714:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	68fa      	ldr	r2, [r7, #12]
 800e71c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	2200      	movs	r2, #0
 800e722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e726:	2300      	movs	r3, #0
}
 800e728:	4618      	mov	r0, r3
 800e72a:	3714      	adds	r7, #20
 800e72c:	46bd      	mov	sp, r7
 800e72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e732:	4770      	bx	lr
 800e734:	40010000 	.word	0x40010000
 800e738:	40010400 	.word	0x40010400

0800e73c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e73c:	b480      	push	{r7}
 800e73e:	b083      	sub	sp, #12
 800e740:	af00      	add	r7, sp, #0
 800e742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e744:	bf00      	nop
 800e746:	370c      	adds	r7, #12
 800e748:	46bd      	mov	sp, r7
 800e74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e74e:	4770      	bx	lr

0800e750 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e750:	b480      	push	{r7}
 800e752:	b083      	sub	sp, #12
 800e754:	af00      	add	r7, sp, #0
 800e756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e758:	bf00      	nop
 800e75a:	370c      	adds	r7, #12
 800e75c:	46bd      	mov	sp, r7
 800e75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e762:	4770      	bx	lr

0800e764 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e764:	b480      	push	{r7}
 800e766:	b083      	sub	sp, #12
 800e768:	af00      	add	r7, sp, #0
 800e76a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e76c:	bf00      	nop
 800e76e:	370c      	adds	r7, #12
 800e770:	46bd      	mov	sp, r7
 800e772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e776:	4770      	bx	lr

0800e778 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e778:	b580      	push	{r7, lr}
 800e77a:	b082      	sub	sp, #8
 800e77c:	af00      	add	r7, sp, #0
 800e77e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	2b00      	cmp	r3, #0
 800e784:	d101      	bne.n	800e78a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e786:	2301      	movs	r3, #1
 800e788:	e042      	b.n	800e810 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e790:	2b00      	cmp	r3, #0
 800e792:	d106      	bne.n	800e7a2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	2200      	movs	r2, #0
 800e798:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e79c:	6878      	ldr	r0, [r7, #4]
 800e79e:	f7f7 fe05 	bl	80063ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	2224      	movs	r2, #36	; 0x24
 800e7a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	681a      	ldr	r2, [r3, #0]
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	f022 0201 	bic.w	r2, r2, #1
 800e7b8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e7ba:	6878      	ldr	r0, [r7, #4]
 800e7bc:	f000 fd18 	bl	800f1f0 <UART_SetConfig>
 800e7c0:	4603      	mov	r3, r0
 800e7c2:	2b01      	cmp	r3, #1
 800e7c4:	d101      	bne.n	800e7ca <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800e7c6:	2301      	movs	r3, #1
 800e7c8:	e022      	b.n	800e810 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d002      	beq.n	800e7d8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800e7d2:	6878      	ldr	r0, [r7, #4]
 800e7d4:	f001 fb78 	bl	800fec8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	685a      	ldr	r2, [r3, #4]
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e7e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	689a      	ldr	r2, [r3, #8]
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e7f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	681a      	ldr	r2, [r3, #0]
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	f042 0201 	orr.w	r2, r2, #1
 800e806:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e808:	6878      	ldr	r0, [r7, #4]
 800e80a:	f001 fbff 	bl	801000c <UART_CheckIdleState>
 800e80e:	4603      	mov	r3, r0
}
 800e810:	4618      	mov	r0, r3
 800e812:	3708      	adds	r7, #8
 800e814:	46bd      	mov	sp, r7
 800e816:	bd80      	pop	{r7, pc}

0800e818 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800e818:	b580      	push	{r7, lr}
 800e81a:	b082      	sub	sp, #8
 800e81c:	af00      	add	r7, sp, #0
 800e81e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	2b00      	cmp	r3, #0
 800e824:	d101      	bne.n	800e82a <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800e826:	2301      	movs	r3, #1
 800e828:	e02e      	b.n	800e888 <HAL_UART_DeInit+0x70>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	2224      	movs	r2, #36	; 0x24
 800e82e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	681a      	ldr	r2, [r3, #0]
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	f022 0201 	bic.w	r2, r2, #1
 800e840:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	2200      	movs	r2, #0
 800e848:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	2200      	movs	r2, #0
 800e850:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	2200      	movs	r2, #0
 800e858:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800e85a:	6878      	ldr	r0, [r7, #4]
 800e85c:	f7f7 fe7a 	bl	8006554 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	2200      	movs	r2, #0
 800e864:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->gState = HAL_UART_STATE_RESET;
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	2200      	movs	r2, #0
 800e86c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_RESET;
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	2200      	movs	r2, #0
 800e874:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	2200      	movs	r2, #0
 800e87c:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	2200      	movs	r2, #0
 800e882:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e886:	2300      	movs	r3, #0
}
 800e888:	4618      	mov	r0, r3
 800e88a:	3708      	adds	r7, #8
 800e88c:	46bd      	mov	sp, r7
 800e88e:	bd80      	pop	{r7, pc}

0800e890 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800e890:	b580      	push	{r7, lr}
 800e892:	b08a      	sub	sp, #40	; 0x28
 800e894:	af00      	add	r7, sp, #0
 800e896:	60f8      	str	r0, [r7, #12]
 800e898:	60b9      	str	r1, [r7, #8]
 800e89a:	4613      	mov	r3, r2
 800e89c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e8a4:	2b20      	cmp	r3, #32
 800e8a6:	d17a      	bne.n	800e99e <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800e8a8:	68bb      	ldr	r3, [r7, #8]
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d002      	beq.n	800e8b4 <HAL_UART_Transmit_DMA+0x24>
 800e8ae:	88fb      	ldrh	r3, [r7, #6]
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d101      	bne.n	800e8b8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800e8b4:	2301      	movs	r3, #1
 800e8b6:	e073      	b.n	800e9a0 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e8be:	2b01      	cmp	r3, #1
 800e8c0:	d101      	bne.n	800e8c6 <HAL_UART_Transmit_DMA+0x36>
 800e8c2:	2302      	movs	r3, #2
 800e8c4:	e06c      	b.n	800e9a0 <HAL_UART_Transmit_DMA+0x110>
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	2201      	movs	r2, #1
 800e8ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	68ba      	ldr	r2, [r7, #8]
 800e8d2:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	88fa      	ldrh	r2, [r7, #6]
 800e8d8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	88fa      	ldrh	r2, [r7, #6]
 800e8e0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	2200      	movs	r2, #0
 800e8e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	2221      	movs	r2, #33	; 0x21
 800e8f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d02c      	beq.n	800e956 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e900:	4a29      	ldr	r2, [pc, #164]	; (800e9a8 <HAL_UART_Transmit_DMA+0x118>)
 800e902:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e908:	4a28      	ldr	r2, [pc, #160]	; (800e9ac <HAL_UART_Transmit_DMA+0x11c>)
 800e90a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e910:	4a27      	ldr	r2, [pc, #156]	; (800e9b0 <HAL_UART_Transmit_DMA+0x120>)
 800e912:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e918:	2200      	movs	r2, #0
 800e91a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e924:	4619      	mov	r1, r3
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	3328      	adds	r3, #40	; 0x28
 800e92c:	461a      	mov	r2, r3
 800e92e:	88fb      	ldrh	r3, [r7, #6]
 800e930:	f7f9 f8fa 	bl	8007b28 <HAL_DMA_Start_IT>
 800e934:	4603      	mov	r3, r0
 800e936:	2b00      	cmp	r3, #0
 800e938:	d00d      	beq.n	800e956 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	2210      	movs	r2, #16
 800e93e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	2200      	movs	r2, #0
 800e946:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	2220      	movs	r2, #32
 800e94e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800e952:	2301      	movs	r3, #1
 800e954:	e024      	b.n	800e9a0 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	2240      	movs	r2, #64	; 0x40
 800e95c:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	2200      	movs	r2, #0
 800e962:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	3308      	adds	r3, #8
 800e96c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e96e:	697b      	ldr	r3, [r7, #20]
 800e970:	e853 3f00 	ldrex	r3, [r3]
 800e974:	613b      	str	r3, [r7, #16]
   return(result);
 800e976:	693b      	ldr	r3, [r7, #16]
 800e978:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e97c:	627b      	str	r3, [r7, #36]	; 0x24
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	3308      	adds	r3, #8
 800e984:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e986:	623a      	str	r2, [r7, #32]
 800e988:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e98a:	69f9      	ldr	r1, [r7, #28]
 800e98c:	6a3a      	ldr	r2, [r7, #32]
 800e98e:	e841 2300 	strex	r3, r2, [r1]
 800e992:	61bb      	str	r3, [r7, #24]
   return(result);
 800e994:	69bb      	ldr	r3, [r7, #24]
 800e996:	2b00      	cmp	r3, #0
 800e998:	d1e5      	bne.n	800e966 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800e99a:	2300      	movs	r3, #0
 800e99c:	e000      	b.n	800e9a0 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800e99e:	2302      	movs	r3, #2
  }
}
 800e9a0:	4618      	mov	r0, r3
 800e9a2:	3728      	adds	r7, #40	; 0x28
 800e9a4:	46bd      	mov	sp, r7
 800e9a6:	bd80      	pop	{r7, pc}
 800e9a8:	080104d5 	.word	0x080104d5
 800e9ac:	0801056b 	.word	0x0801056b
 800e9b0:	080106e1 	.word	0x080106e1

0800e9b4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e9b4:	b580      	push	{r7, lr}
 800e9b6:	b08a      	sub	sp, #40	; 0x28
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	60f8      	str	r0, [r7, #12]
 800e9bc:	60b9      	str	r1, [r7, #8]
 800e9be:	4613      	mov	r3, r2
 800e9c0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e9c8:	2b20      	cmp	r3, #32
 800e9ca:	d142      	bne.n	800ea52 <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800e9cc:	68bb      	ldr	r3, [r7, #8]
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d002      	beq.n	800e9d8 <HAL_UART_Receive_DMA+0x24>
 800e9d2:	88fb      	ldrh	r3, [r7, #6]
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d101      	bne.n	800e9dc <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800e9d8:	2301      	movs	r3, #1
 800e9da:	e03b      	b.n	800ea54 <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e9e2:	2b01      	cmp	r3, #1
 800e9e4:	d101      	bne.n	800e9ea <HAL_UART_Receive_DMA+0x36>
 800e9e6:	2302      	movs	r3, #2
 800e9e8:	e034      	b.n	800ea54 <HAL_UART_Receive_DMA+0xa0>
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	2201      	movs	r2, #1
 800e9ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	2200      	movs	r2, #0
 800e9f6:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	4a17      	ldr	r2, [pc, #92]	; (800ea5c <HAL_UART_Receive_DMA+0xa8>)
 800e9fe:	4293      	cmp	r3, r2
 800ea00:	d01f      	beq.n	800ea42 <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	685b      	ldr	r3, [r3, #4]
 800ea08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d018      	beq.n	800ea42 <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea16:	697b      	ldr	r3, [r7, #20]
 800ea18:	e853 3f00 	ldrex	r3, [r3]
 800ea1c:	613b      	str	r3, [r7, #16]
   return(result);
 800ea1e:	693b      	ldr	r3, [r7, #16]
 800ea20:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ea24:	627b      	str	r3, [r7, #36]	; 0x24
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	461a      	mov	r2, r3
 800ea2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea2e:	623b      	str	r3, [r7, #32]
 800ea30:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea32:	69f9      	ldr	r1, [r7, #28]
 800ea34:	6a3a      	ldr	r2, [r7, #32]
 800ea36:	e841 2300 	strex	r3, r2, [r1]
 800ea3a:	61bb      	str	r3, [r7, #24]
   return(result);
 800ea3c:	69bb      	ldr	r3, [r7, #24]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d1e6      	bne.n	800ea10 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800ea42:	88fb      	ldrh	r3, [r7, #6]
 800ea44:	461a      	mov	r2, r3
 800ea46:	68b9      	ldr	r1, [r7, #8]
 800ea48:	68f8      	ldr	r0, [r7, #12]
 800ea4a:	f001 fbf3 	bl	8010234 <UART_Start_Receive_DMA>
 800ea4e:	4603      	mov	r3, r0
 800ea50:	e000      	b.n	800ea54 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800ea52:	2302      	movs	r3, #2
  }
}
 800ea54:	4618      	mov	r0, r3
 800ea56:	3728      	adds	r7, #40	; 0x28
 800ea58:	46bd      	mov	sp, r7
 800ea5a:	bd80      	pop	{r7, pc}
 800ea5c:	58000c00 	.word	0x58000c00

0800ea60 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ea60:	b580      	push	{r7, lr}
 800ea62:	b0ba      	sub	sp, #232	; 0xe8
 800ea64:	af00      	add	r7, sp, #0
 800ea66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	69db      	ldr	r3, [r3, #28]
 800ea6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	689b      	ldr	r3, [r3, #8]
 800ea82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ea86:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800ea8a:	f640 030f 	movw	r3, #2063	; 0x80f
 800ea8e:	4013      	ands	r3, r2
 800ea90:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800ea94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d11b      	bne.n	800ead4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ea9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eaa0:	f003 0320 	and.w	r3, r3, #32
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d015      	beq.n	800ead4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800eaa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eaac:	f003 0320 	and.w	r3, r3, #32
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d105      	bne.n	800eac0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800eab4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800eab8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d009      	beq.n	800ead4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	f000 835a 	beq.w	800f17e <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eace:	6878      	ldr	r0, [r7, #4]
 800ead0:	4798      	blx	r3
      }
      return;
 800ead2:	e354      	b.n	800f17e <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ead4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ead8:	2b00      	cmp	r3, #0
 800eada:	f000 811f 	beq.w	800ed1c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800eade:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800eae2:	4b8b      	ldr	r3, [pc, #556]	; (800ed10 <HAL_UART_IRQHandler+0x2b0>)
 800eae4:	4013      	ands	r3, r2
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d106      	bne.n	800eaf8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800eaea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800eaee:	4b89      	ldr	r3, [pc, #548]	; (800ed14 <HAL_UART_IRQHandler+0x2b4>)
 800eaf0:	4013      	ands	r3, r2
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	f000 8112 	beq.w	800ed1c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800eaf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eafc:	f003 0301 	and.w	r3, r3, #1
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d011      	beq.n	800eb28 <HAL_UART_IRQHandler+0xc8>
 800eb04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eb08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d00b      	beq.n	800eb28 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	2201      	movs	r2, #1
 800eb16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eb1e:	f043 0201 	orr.w	r2, r3, #1
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800eb28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eb2c:	f003 0302 	and.w	r3, r3, #2
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d011      	beq.n	800eb58 <HAL_UART_IRQHandler+0xf8>
 800eb34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800eb38:	f003 0301 	and.w	r3, r3, #1
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d00b      	beq.n	800eb58 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	2202      	movs	r2, #2
 800eb46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eb4e:	f043 0204 	orr.w	r2, r3, #4
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800eb58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eb5c:	f003 0304 	and.w	r3, r3, #4
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d011      	beq.n	800eb88 <HAL_UART_IRQHandler+0x128>
 800eb64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800eb68:	f003 0301 	and.w	r3, r3, #1
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d00b      	beq.n	800eb88 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	2204      	movs	r2, #4
 800eb76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eb7e:	f043 0202 	orr.w	r2, r3, #2
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800eb88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eb8c:	f003 0308 	and.w	r3, r3, #8
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d017      	beq.n	800ebc4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800eb94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eb98:	f003 0320 	and.w	r3, r3, #32
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d105      	bne.n	800ebac <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800eba0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800eba4:	4b5a      	ldr	r3, [pc, #360]	; (800ed10 <HAL_UART_IRQHandler+0x2b0>)
 800eba6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d00b      	beq.n	800ebc4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	2208      	movs	r2, #8
 800ebb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ebba:	f043 0208 	orr.w	r2, r3, #8
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ebc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ebc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d012      	beq.n	800ebf6 <HAL_UART_IRQHandler+0x196>
 800ebd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ebd4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d00c      	beq.n	800ebf6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ebe4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ebec:	f043 0220 	orr.w	r2, r3, #32
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	f000 82c0 	beq.w	800f182 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ec02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ec06:	f003 0320 	and.w	r3, r3, #32
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d013      	beq.n	800ec36 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ec0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ec12:	f003 0320 	and.w	r3, r3, #32
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d105      	bne.n	800ec26 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ec1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ec1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d007      	beq.n	800ec36 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d003      	beq.n	800ec36 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec32:	6878      	ldr	r0, [r7, #4]
 800ec34:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ec3c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	689b      	ldr	r3, [r3, #8]
 800ec46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec4a:	2b40      	cmp	r3, #64	; 0x40
 800ec4c:	d005      	beq.n	800ec5a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ec4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ec52:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d04f      	beq.n	800ecfa <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ec5a:	6878      	ldr	r0, [r7, #4]
 800ec5c:	f001 fbd4 	bl	8010408 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	689b      	ldr	r3, [r3, #8]
 800ec66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec6a:	2b40      	cmp	r3, #64	; 0x40
 800ec6c:	d141      	bne.n	800ecf2 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	3308      	adds	r3, #8
 800ec74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec78:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ec7c:	e853 3f00 	ldrex	r3, [r3]
 800ec80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ec84:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ec88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ec8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	3308      	adds	r3, #8
 800ec96:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ec9a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ec9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eca2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800eca6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ecaa:	e841 2300 	strex	r3, r2, [r1]
 800ecae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ecb2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d1d9      	bne.n	800ec6e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d013      	beq.n	800ecea <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ecc6:	4a14      	ldr	r2, [pc, #80]	; (800ed18 <HAL_UART_IRQHandler+0x2b8>)
 800ecc8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ecce:	4618      	mov	r0, r3
 800ecd0:	f7f9 fcb2 	bl	8008638 <HAL_DMA_Abort_IT>
 800ecd4:	4603      	mov	r3, r0
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d017      	beq.n	800ed0a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ecde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ece0:	687a      	ldr	r2, [r7, #4]
 800ece2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800ece4:	4610      	mov	r0, r2
 800ece6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ece8:	e00f      	b.n	800ed0a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ecea:	6878      	ldr	r0, [r7, #4]
 800ecec:	f7f5 f942 	bl	8003f74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ecf0:	e00b      	b.n	800ed0a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ecf2:	6878      	ldr	r0, [r7, #4]
 800ecf4:	f7f5 f93e 	bl	8003f74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ecf8:	e007      	b.n	800ed0a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ecfa:	6878      	ldr	r0, [r7, #4]
 800ecfc:	f7f5 f93a 	bl	8003f74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	2200      	movs	r2, #0
 800ed04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800ed08:	e23b      	b.n	800f182 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ed0a:	bf00      	nop
    return;
 800ed0c:	e239      	b.n	800f182 <HAL_UART_IRQHandler+0x722>
 800ed0e:	bf00      	nop
 800ed10:	10000001 	.word	0x10000001
 800ed14:	04000120 	.word	0x04000120
 800ed18:	08010761 	.word	0x08010761

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed20:	2b01      	cmp	r3, #1
 800ed22:	f040 81ce 	bne.w	800f0c2 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ed26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ed2a:	f003 0310 	and.w	r3, r3, #16
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	f000 81c7 	beq.w	800f0c2 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ed34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ed38:	f003 0310 	and.w	r3, r3, #16
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	f000 81c0 	beq.w	800f0c2 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	2210      	movs	r2, #16
 800ed48:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	689b      	ldr	r3, [r3, #8]
 800ed50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed54:	2b40      	cmp	r3, #64	; 0x40
 800ed56:	f040 813b 	bne.w	800efd0 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	4a8b      	ldr	r2, [pc, #556]	; (800ef90 <HAL_UART_IRQHandler+0x530>)
 800ed62:	4293      	cmp	r3, r2
 800ed64:	d059      	beq.n	800ee1a <HAL_UART_IRQHandler+0x3ba>
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	4a89      	ldr	r2, [pc, #548]	; (800ef94 <HAL_UART_IRQHandler+0x534>)
 800ed6e:	4293      	cmp	r3, r2
 800ed70:	d053      	beq.n	800ee1a <HAL_UART_IRQHandler+0x3ba>
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	4a87      	ldr	r2, [pc, #540]	; (800ef98 <HAL_UART_IRQHandler+0x538>)
 800ed7a:	4293      	cmp	r3, r2
 800ed7c:	d04d      	beq.n	800ee1a <HAL_UART_IRQHandler+0x3ba>
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	4a85      	ldr	r2, [pc, #532]	; (800ef9c <HAL_UART_IRQHandler+0x53c>)
 800ed86:	4293      	cmp	r3, r2
 800ed88:	d047      	beq.n	800ee1a <HAL_UART_IRQHandler+0x3ba>
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	4a83      	ldr	r2, [pc, #524]	; (800efa0 <HAL_UART_IRQHandler+0x540>)
 800ed92:	4293      	cmp	r3, r2
 800ed94:	d041      	beq.n	800ee1a <HAL_UART_IRQHandler+0x3ba>
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	4a81      	ldr	r2, [pc, #516]	; (800efa4 <HAL_UART_IRQHandler+0x544>)
 800ed9e:	4293      	cmp	r3, r2
 800eda0:	d03b      	beq.n	800ee1a <HAL_UART_IRQHandler+0x3ba>
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	4a7f      	ldr	r2, [pc, #508]	; (800efa8 <HAL_UART_IRQHandler+0x548>)
 800edaa:	4293      	cmp	r3, r2
 800edac:	d035      	beq.n	800ee1a <HAL_UART_IRQHandler+0x3ba>
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	4a7d      	ldr	r2, [pc, #500]	; (800efac <HAL_UART_IRQHandler+0x54c>)
 800edb6:	4293      	cmp	r3, r2
 800edb8:	d02f      	beq.n	800ee1a <HAL_UART_IRQHandler+0x3ba>
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	4a7b      	ldr	r2, [pc, #492]	; (800efb0 <HAL_UART_IRQHandler+0x550>)
 800edc2:	4293      	cmp	r3, r2
 800edc4:	d029      	beq.n	800ee1a <HAL_UART_IRQHandler+0x3ba>
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	4a79      	ldr	r2, [pc, #484]	; (800efb4 <HAL_UART_IRQHandler+0x554>)
 800edce:	4293      	cmp	r3, r2
 800edd0:	d023      	beq.n	800ee1a <HAL_UART_IRQHandler+0x3ba>
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	4a77      	ldr	r2, [pc, #476]	; (800efb8 <HAL_UART_IRQHandler+0x558>)
 800edda:	4293      	cmp	r3, r2
 800eddc:	d01d      	beq.n	800ee1a <HAL_UART_IRQHandler+0x3ba>
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	4a75      	ldr	r2, [pc, #468]	; (800efbc <HAL_UART_IRQHandler+0x55c>)
 800ede6:	4293      	cmp	r3, r2
 800ede8:	d017      	beq.n	800ee1a <HAL_UART_IRQHandler+0x3ba>
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	4a73      	ldr	r2, [pc, #460]	; (800efc0 <HAL_UART_IRQHandler+0x560>)
 800edf2:	4293      	cmp	r3, r2
 800edf4:	d011      	beq.n	800ee1a <HAL_UART_IRQHandler+0x3ba>
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	4a71      	ldr	r2, [pc, #452]	; (800efc4 <HAL_UART_IRQHandler+0x564>)
 800edfe:	4293      	cmp	r3, r2
 800ee00:	d00b      	beq.n	800ee1a <HAL_UART_IRQHandler+0x3ba>
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	4a6f      	ldr	r2, [pc, #444]	; (800efc8 <HAL_UART_IRQHandler+0x568>)
 800ee0a:	4293      	cmp	r3, r2
 800ee0c:	d005      	beq.n	800ee1a <HAL_UART_IRQHandler+0x3ba>
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	4a6d      	ldr	r2, [pc, #436]	; (800efcc <HAL_UART_IRQHandler+0x56c>)
 800ee16:	4293      	cmp	r3, r2
 800ee18:	d105      	bne.n	800ee26 <HAL_UART_IRQHandler+0x3c6>
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	685b      	ldr	r3, [r3, #4]
 800ee22:	b29b      	uxth	r3, r3
 800ee24:	e004      	b.n	800ee30 <HAL_UART_IRQHandler+0x3d0>
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	685b      	ldr	r3, [r3, #4]
 800ee2e:	b29b      	uxth	r3, r3
 800ee30:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ee34:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	f000 81a4 	beq.w	800f186 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ee44:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ee48:	429a      	cmp	r2, r3
 800ee4a:	f080 819c 	bcs.w	800f186 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ee54:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ee5c:	69db      	ldr	r3, [r3, #28]
 800ee5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ee62:	f000 8086 	beq.w	800ef72 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee6e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ee72:	e853 3f00 	ldrex	r3, [r3]
 800ee76:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ee7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ee7e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ee82:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	461a      	mov	r2, r3
 800ee8c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ee90:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ee94:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee98:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ee9c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800eea0:	e841 2300 	strex	r3, r2, [r1]
 800eea4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800eea8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d1da      	bne.n	800ee66 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	3308      	adds	r3, #8
 800eeb6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eeb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800eeba:	e853 3f00 	ldrex	r3, [r3]
 800eebe:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800eec0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800eec2:	f023 0301 	bic.w	r3, r3, #1
 800eec6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	3308      	adds	r3, #8
 800eed0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800eed4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800eed8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eeda:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800eedc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800eee0:	e841 2300 	strex	r3, r2, [r1]
 800eee4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800eee6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d1e1      	bne.n	800eeb0 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	3308      	adds	r3, #8
 800eef2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eef4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800eef6:	e853 3f00 	ldrex	r3, [r3]
 800eefa:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800eefc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eefe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ef02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	3308      	adds	r3, #8
 800ef0c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ef10:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ef12:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef14:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ef16:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ef18:	e841 2300 	strex	r3, r2, [r1]
 800ef1c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ef1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d1e3      	bne.n	800eeec <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	2220      	movs	r2, #32
 800ef28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	2200      	movs	r2, #0
 800ef30:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef3a:	e853 3f00 	ldrex	r3, [r3]
 800ef3e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ef40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ef42:	f023 0310 	bic.w	r3, r3, #16
 800ef46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	461a      	mov	r2, r3
 800ef50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ef54:	65bb      	str	r3, [r7, #88]	; 0x58
 800ef56:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef58:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ef5a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ef5c:	e841 2300 	strex	r3, r2, [r1]
 800ef60:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ef62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d1e4      	bne.n	800ef32 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ef6c:	4618      	mov	r0, r3
 800ef6e:	f7f9 f845 	bl	8007ffc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ef7e:	b29b      	uxth	r3, r3
 800ef80:	1ad3      	subs	r3, r2, r3
 800ef82:	b29b      	uxth	r3, r3
 800ef84:	4619      	mov	r1, r3
 800ef86:	6878      	ldr	r0, [r7, #4]
 800ef88:	f000 f926 	bl	800f1d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ef8c:	e0fb      	b.n	800f186 <HAL_UART_IRQHandler+0x726>
 800ef8e:	bf00      	nop
 800ef90:	40020010 	.word	0x40020010
 800ef94:	40020028 	.word	0x40020028
 800ef98:	40020040 	.word	0x40020040
 800ef9c:	40020058 	.word	0x40020058
 800efa0:	40020070 	.word	0x40020070
 800efa4:	40020088 	.word	0x40020088
 800efa8:	400200a0 	.word	0x400200a0
 800efac:	400200b8 	.word	0x400200b8
 800efb0:	40020410 	.word	0x40020410
 800efb4:	40020428 	.word	0x40020428
 800efb8:	40020440 	.word	0x40020440
 800efbc:	40020458 	.word	0x40020458
 800efc0:	40020470 	.word	0x40020470
 800efc4:	40020488 	.word	0x40020488
 800efc8:	400204a0 	.word	0x400204a0
 800efcc:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800efdc:	b29b      	uxth	r3, r3
 800efde:	1ad3      	subs	r3, r2, r3
 800efe0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800efea:	b29b      	uxth	r3, r3
 800efec:	2b00      	cmp	r3, #0
 800efee:	f000 80cc 	beq.w	800f18a <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800eff2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	f000 80c7 	beq.w	800f18a <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f004:	e853 3f00 	ldrex	r3, [r3]
 800f008:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f00a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f00c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f010:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	461a      	mov	r2, r3
 800f01a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f01e:	647b      	str	r3, [r7, #68]	; 0x44
 800f020:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f022:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f024:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f026:	e841 2300 	strex	r3, r2, [r1]
 800f02a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f02c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d1e4      	bne.n	800effc <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	3308      	adds	r3, #8
 800f038:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f03a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f03c:	e853 3f00 	ldrex	r3, [r3]
 800f040:	623b      	str	r3, [r7, #32]
   return(result);
 800f042:	6a3a      	ldr	r2, [r7, #32]
 800f044:	4b54      	ldr	r3, [pc, #336]	; (800f198 <HAL_UART_IRQHandler+0x738>)
 800f046:	4013      	ands	r3, r2
 800f048:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	3308      	adds	r3, #8
 800f052:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800f056:	633a      	str	r2, [r7, #48]	; 0x30
 800f058:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f05a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f05c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f05e:	e841 2300 	strex	r3, r2, [r1]
 800f062:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f066:	2b00      	cmp	r3, #0
 800f068:	d1e3      	bne.n	800f032 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	2220      	movs	r2, #32
 800f06e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	2200      	movs	r2, #0
 800f076:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	2200      	movs	r2, #0
 800f07c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f084:	693b      	ldr	r3, [r7, #16]
 800f086:	e853 3f00 	ldrex	r3, [r3]
 800f08a:	60fb      	str	r3, [r7, #12]
   return(result);
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	f023 0310 	bic.w	r3, r3, #16
 800f092:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	461a      	mov	r2, r3
 800f09c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f0a0:	61fb      	str	r3, [r7, #28]
 800f0a2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0a4:	69b9      	ldr	r1, [r7, #24]
 800f0a6:	69fa      	ldr	r2, [r7, #28]
 800f0a8:	e841 2300 	strex	r3, r2, [r1]
 800f0ac:	617b      	str	r3, [r7, #20]
   return(result);
 800f0ae:	697b      	ldr	r3, [r7, #20]
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d1e4      	bne.n	800f07e <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f0b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f0b8:	4619      	mov	r1, r3
 800f0ba:	6878      	ldr	r0, [r7, #4]
 800f0bc:	f000 f88c 	bl	800f1d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f0c0:	e063      	b.n	800f18a <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800f0c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f0c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d00e      	beq.n	800f0ec <HAL_UART_IRQHandler+0x68c>
 800f0ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f0d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d008      	beq.n	800f0ec <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800f0e2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800f0e4:	6878      	ldr	r0, [r7, #4]
 800f0e6:	f001 fb7c 	bl	80107e2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f0ea:	e051      	b.n	800f190 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800f0ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f0f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d014      	beq.n	800f122 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800f0f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f0fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f100:	2b00      	cmp	r3, #0
 800f102:	d105      	bne.n	800f110 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800f104:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f108:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d008      	beq.n	800f122 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f114:	2b00      	cmp	r3, #0
 800f116:	d03a      	beq.n	800f18e <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f11c:	6878      	ldr	r0, [r7, #4]
 800f11e:	4798      	blx	r3
    }
    return;
 800f120:	e035      	b.n	800f18e <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800f122:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d009      	beq.n	800f142 <HAL_UART_IRQHandler+0x6e2>
 800f12e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f136:	2b00      	cmp	r3, #0
 800f138:	d003      	beq.n	800f142 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800f13a:	6878      	ldr	r0, [r7, #4]
 800f13c:	f001 fb26 	bl	801078c <UART_EndTransmit_IT>
    return;
 800f140:	e026      	b.n	800f190 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800f142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f146:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d009      	beq.n	800f162 <HAL_UART_IRQHandler+0x702>
 800f14e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f152:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f156:	2b00      	cmp	r3, #0
 800f158:	d003      	beq.n	800f162 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800f15a:	6878      	ldr	r0, [r7, #4]
 800f15c:	f001 fb55 	bl	801080a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f160:	e016      	b.n	800f190 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800f162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f166:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d010      	beq.n	800f190 <HAL_UART_IRQHandler+0x730>
 800f16e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f172:	2b00      	cmp	r3, #0
 800f174:	da0c      	bge.n	800f190 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800f176:	6878      	ldr	r0, [r7, #4]
 800f178:	f001 fb3d 	bl	80107f6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f17c:	e008      	b.n	800f190 <HAL_UART_IRQHandler+0x730>
      return;
 800f17e:	bf00      	nop
 800f180:	e006      	b.n	800f190 <HAL_UART_IRQHandler+0x730>
    return;
 800f182:	bf00      	nop
 800f184:	e004      	b.n	800f190 <HAL_UART_IRQHandler+0x730>
      return;
 800f186:	bf00      	nop
 800f188:	e002      	b.n	800f190 <HAL_UART_IRQHandler+0x730>
      return;
 800f18a:	bf00      	nop
 800f18c:	e000      	b.n	800f190 <HAL_UART_IRQHandler+0x730>
    return;
 800f18e:	bf00      	nop
  }
}
 800f190:	37e8      	adds	r7, #232	; 0xe8
 800f192:	46bd      	mov	sp, r7
 800f194:	bd80      	pop	{r7, pc}
 800f196:	bf00      	nop
 800f198:	effffffe 	.word	0xeffffffe

0800f19c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800f19c:	b480      	push	{r7}
 800f19e:	b083      	sub	sp, #12
 800f1a0:	af00      	add	r7, sp, #0
 800f1a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800f1a4:	bf00      	nop
 800f1a6:	370c      	adds	r7, #12
 800f1a8:	46bd      	mov	sp, r7
 800f1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ae:	4770      	bx	lr

0800f1b0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800f1b0:	b480      	push	{r7}
 800f1b2:	b083      	sub	sp, #12
 800f1b4:	af00      	add	r7, sp, #0
 800f1b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800f1b8:	bf00      	nop
 800f1ba:	370c      	adds	r7, #12
 800f1bc:	46bd      	mov	sp, r7
 800f1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1c2:	4770      	bx	lr

0800f1c4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800f1c4:	b480      	push	{r7}
 800f1c6:	b083      	sub	sp, #12
 800f1c8:	af00      	add	r7, sp, #0
 800f1ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800f1cc:	bf00      	nop
 800f1ce:	370c      	adds	r7, #12
 800f1d0:	46bd      	mov	sp, r7
 800f1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1d6:	4770      	bx	lr

0800f1d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800f1d8:	b480      	push	{r7}
 800f1da:	b083      	sub	sp, #12
 800f1dc:	af00      	add	r7, sp, #0
 800f1de:	6078      	str	r0, [r7, #4]
 800f1e0:	460b      	mov	r3, r1
 800f1e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800f1e4:	bf00      	nop
 800f1e6:	370c      	adds	r7, #12
 800f1e8:	46bd      	mov	sp, r7
 800f1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ee:	4770      	bx	lr

0800f1f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f1f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f1f4:	b092      	sub	sp, #72	; 0x48
 800f1f6:	af00      	add	r7, sp, #0
 800f1f8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f1fa:	2300      	movs	r3, #0
 800f1fc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f200:	697b      	ldr	r3, [r7, #20]
 800f202:	689a      	ldr	r2, [r3, #8]
 800f204:	697b      	ldr	r3, [r7, #20]
 800f206:	691b      	ldr	r3, [r3, #16]
 800f208:	431a      	orrs	r2, r3
 800f20a:	697b      	ldr	r3, [r7, #20]
 800f20c:	695b      	ldr	r3, [r3, #20]
 800f20e:	431a      	orrs	r2, r3
 800f210:	697b      	ldr	r3, [r7, #20]
 800f212:	69db      	ldr	r3, [r3, #28]
 800f214:	4313      	orrs	r3, r2
 800f216:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f218:	697b      	ldr	r3, [r7, #20]
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	681a      	ldr	r2, [r3, #0]
 800f21e:	4bbe      	ldr	r3, [pc, #760]	; (800f518 <UART_SetConfig+0x328>)
 800f220:	4013      	ands	r3, r2
 800f222:	697a      	ldr	r2, [r7, #20]
 800f224:	6812      	ldr	r2, [r2, #0]
 800f226:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f228:	430b      	orrs	r3, r1
 800f22a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f22c:	697b      	ldr	r3, [r7, #20]
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	685b      	ldr	r3, [r3, #4]
 800f232:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f236:	697b      	ldr	r3, [r7, #20]
 800f238:	68da      	ldr	r2, [r3, #12]
 800f23a:	697b      	ldr	r3, [r7, #20]
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	430a      	orrs	r2, r1
 800f240:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f242:	697b      	ldr	r3, [r7, #20]
 800f244:	699b      	ldr	r3, [r3, #24]
 800f246:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f248:	697b      	ldr	r3, [r7, #20]
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	4ab3      	ldr	r2, [pc, #716]	; (800f51c <UART_SetConfig+0x32c>)
 800f24e:	4293      	cmp	r3, r2
 800f250:	d004      	beq.n	800f25c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f252:	697b      	ldr	r3, [r7, #20]
 800f254:	6a1b      	ldr	r3, [r3, #32]
 800f256:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f258:	4313      	orrs	r3, r2
 800f25a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f25c:	697b      	ldr	r3, [r7, #20]
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	689a      	ldr	r2, [r3, #8]
 800f262:	4baf      	ldr	r3, [pc, #700]	; (800f520 <UART_SetConfig+0x330>)
 800f264:	4013      	ands	r3, r2
 800f266:	697a      	ldr	r2, [r7, #20]
 800f268:	6812      	ldr	r2, [r2, #0]
 800f26a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f26c:	430b      	orrs	r3, r1
 800f26e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f270:	697b      	ldr	r3, [r7, #20]
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f276:	f023 010f 	bic.w	r1, r3, #15
 800f27a:	697b      	ldr	r3, [r7, #20]
 800f27c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f27e:	697b      	ldr	r3, [r7, #20]
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	430a      	orrs	r2, r1
 800f284:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f286:	697b      	ldr	r3, [r7, #20]
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	4aa6      	ldr	r2, [pc, #664]	; (800f524 <UART_SetConfig+0x334>)
 800f28c:	4293      	cmp	r3, r2
 800f28e:	d177      	bne.n	800f380 <UART_SetConfig+0x190>
 800f290:	4ba5      	ldr	r3, [pc, #660]	; (800f528 <UART_SetConfig+0x338>)
 800f292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f294:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f298:	2b28      	cmp	r3, #40	; 0x28
 800f29a:	d86d      	bhi.n	800f378 <UART_SetConfig+0x188>
 800f29c:	a201      	add	r2, pc, #4	; (adr r2, 800f2a4 <UART_SetConfig+0xb4>)
 800f29e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2a2:	bf00      	nop
 800f2a4:	0800f349 	.word	0x0800f349
 800f2a8:	0800f379 	.word	0x0800f379
 800f2ac:	0800f379 	.word	0x0800f379
 800f2b0:	0800f379 	.word	0x0800f379
 800f2b4:	0800f379 	.word	0x0800f379
 800f2b8:	0800f379 	.word	0x0800f379
 800f2bc:	0800f379 	.word	0x0800f379
 800f2c0:	0800f379 	.word	0x0800f379
 800f2c4:	0800f351 	.word	0x0800f351
 800f2c8:	0800f379 	.word	0x0800f379
 800f2cc:	0800f379 	.word	0x0800f379
 800f2d0:	0800f379 	.word	0x0800f379
 800f2d4:	0800f379 	.word	0x0800f379
 800f2d8:	0800f379 	.word	0x0800f379
 800f2dc:	0800f379 	.word	0x0800f379
 800f2e0:	0800f379 	.word	0x0800f379
 800f2e4:	0800f359 	.word	0x0800f359
 800f2e8:	0800f379 	.word	0x0800f379
 800f2ec:	0800f379 	.word	0x0800f379
 800f2f0:	0800f379 	.word	0x0800f379
 800f2f4:	0800f379 	.word	0x0800f379
 800f2f8:	0800f379 	.word	0x0800f379
 800f2fc:	0800f379 	.word	0x0800f379
 800f300:	0800f379 	.word	0x0800f379
 800f304:	0800f361 	.word	0x0800f361
 800f308:	0800f379 	.word	0x0800f379
 800f30c:	0800f379 	.word	0x0800f379
 800f310:	0800f379 	.word	0x0800f379
 800f314:	0800f379 	.word	0x0800f379
 800f318:	0800f379 	.word	0x0800f379
 800f31c:	0800f379 	.word	0x0800f379
 800f320:	0800f379 	.word	0x0800f379
 800f324:	0800f369 	.word	0x0800f369
 800f328:	0800f379 	.word	0x0800f379
 800f32c:	0800f379 	.word	0x0800f379
 800f330:	0800f379 	.word	0x0800f379
 800f334:	0800f379 	.word	0x0800f379
 800f338:	0800f379 	.word	0x0800f379
 800f33c:	0800f379 	.word	0x0800f379
 800f340:	0800f379 	.word	0x0800f379
 800f344:	0800f371 	.word	0x0800f371
 800f348:	2301      	movs	r3, #1
 800f34a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f34e:	e326      	b.n	800f99e <UART_SetConfig+0x7ae>
 800f350:	2304      	movs	r3, #4
 800f352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f356:	e322      	b.n	800f99e <UART_SetConfig+0x7ae>
 800f358:	2308      	movs	r3, #8
 800f35a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f35e:	e31e      	b.n	800f99e <UART_SetConfig+0x7ae>
 800f360:	2310      	movs	r3, #16
 800f362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f366:	e31a      	b.n	800f99e <UART_SetConfig+0x7ae>
 800f368:	2320      	movs	r3, #32
 800f36a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f36e:	e316      	b.n	800f99e <UART_SetConfig+0x7ae>
 800f370:	2340      	movs	r3, #64	; 0x40
 800f372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f376:	e312      	b.n	800f99e <UART_SetConfig+0x7ae>
 800f378:	2380      	movs	r3, #128	; 0x80
 800f37a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f37e:	e30e      	b.n	800f99e <UART_SetConfig+0x7ae>
 800f380:	697b      	ldr	r3, [r7, #20]
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	4a69      	ldr	r2, [pc, #420]	; (800f52c <UART_SetConfig+0x33c>)
 800f386:	4293      	cmp	r3, r2
 800f388:	d130      	bne.n	800f3ec <UART_SetConfig+0x1fc>
 800f38a:	4b67      	ldr	r3, [pc, #412]	; (800f528 <UART_SetConfig+0x338>)
 800f38c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f38e:	f003 0307 	and.w	r3, r3, #7
 800f392:	2b05      	cmp	r3, #5
 800f394:	d826      	bhi.n	800f3e4 <UART_SetConfig+0x1f4>
 800f396:	a201      	add	r2, pc, #4	; (adr r2, 800f39c <UART_SetConfig+0x1ac>)
 800f398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f39c:	0800f3b5 	.word	0x0800f3b5
 800f3a0:	0800f3bd 	.word	0x0800f3bd
 800f3a4:	0800f3c5 	.word	0x0800f3c5
 800f3a8:	0800f3cd 	.word	0x0800f3cd
 800f3ac:	0800f3d5 	.word	0x0800f3d5
 800f3b0:	0800f3dd 	.word	0x0800f3dd
 800f3b4:	2300      	movs	r3, #0
 800f3b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f3ba:	e2f0      	b.n	800f99e <UART_SetConfig+0x7ae>
 800f3bc:	2304      	movs	r3, #4
 800f3be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f3c2:	e2ec      	b.n	800f99e <UART_SetConfig+0x7ae>
 800f3c4:	2308      	movs	r3, #8
 800f3c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f3ca:	e2e8      	b.n	800f99e <UART_SetConfig+0x7ae>
 800f3cc:	2310      	movs	r3, #16
 800f3ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f3d2:	e2e4      	b.n	800f99e <UART_SetConfig+0x7ae>
 800f3d4:	2320      	movs	r3, #32
 800f3d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f3da:	e2e0      	b.n	800f99e <UART_SetConfig+0x7ae>
 800f3dc:	2340      	movs	r3, #64	; 0x40
 800f3de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f3e2:	e2dc      	b.n	800f99e <UART_SetConfig+0x7ae>
 800f3e4:	2380      	movs	r3, #128	; 0x80
 800f3e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f3ea:	e2d8      	b.n	800f99e <UART_SetConfig+0x7ae>
 800f3ec:	697b      	ldr	r3, [r7, #20]
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	4a4f      	ldr	r2, [pc, #316]	; (800f530 <UART_SetConfig+0x340>)
 800f3f2:	4293      	cmp	r3, r2
 800f3f4:	d130      	bne.n	800f458 <UART_SetConfig+0x268>
 800f3f6:	4b4c      	ldr	r3, [pc, #304]	; (800f528 <UART_SetConfig+0x338>)
 800f3f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f3fa:	f003 0307 	and.w	r3, r3, #7
 800f3fe:	2b05      	cmp	r3, #5
 800f400:	d826      	bhi.n	800f450 <UART_SetConfig+0x260>
 800f402:	a201      	add	r2, pc, #4	; (adr r2, 800f408 <UART_SetConfig+0x218>)
 800f404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f408:	0800f421 	.word	0x0800f421
 800f40c:	0800f429 	.word	0x0800f429
 800f410:	0800f431 	.word	0x0800f431
 800f414:	0800f439 	.word	0x0800f439
 800f418:	0800f441 	.word	0x0800f441
 800f41c:	0800f449 	.word	0x0800f449
 800f420:	2300      	movs	r3, #0
 800f422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f426:	e2ba      	b.n	800f99e <UART_SetConfig+0x7ae>
 800f428:	2304      	movs	r3, #4
 800f42a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f42e:	e2b6      	b.n	800f99e <UART_SetConfig+0x7ae>
 800f430:	2308      	movs	r3, #8
 800f432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f436:	e2b2      	b.n	800f99e <UART_SetConfig+0x7ae>
 800f438:	2310      	movs	r3, #16
 800f43a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f43e:	e2ae      	b.n	800f99e <UART_SetConfig+0x7ae>
 800f440:	2320      	movs	r3, #32
 800f442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f446:	e2aa      	b.n	800f99e <UART_SetConfig+0x7ae>
 800f448:	2340      	movs	r3, #64	; 0x40
 800f44a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f44e:	e2a6      	b.n	800f99e <UART_SetConfig+0x7ae>
 800f450:	2380      	movs	r3, #128	; 0x80
 800f452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f456:	e2a2      	b.n	800f99e <UART_SetConfig+0x7ae>
 800f458:	697b      	ldr	r3, [r7, #20]
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	4a35      	ldr	r2, [pc, #212]	; (800f534 <UART_SetConfig+0x344>)
 800f45e:	4293      	cmp	r3, r2
 800f460:	d130      	bne.n	800f4c4 <UART_SetConfig+0x2d4>
 800f462:	4b31      	ldr	r3, [pc, #196]	; (800f528 <UART_SetConfig+0x338>)
 800f464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f466:	f003 0307 	and.w	r3, r3, #7
 800f46a:	2b05      	cmp	r3, #5
 800f46c:	d826      	bhi.n	800f4bc <UART_SetConfig+0x2cc>
 800f46e:	a201      	add	r2, pc, #4	; (adr r2, 800f474 <UART_SetConfig+0x284>)
 800f470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f474:	0800f48d 	.word	0x0800f48d
 800f478:	0800f495 	.word	0x0800f495
 800f47c:	0800f49d 	.word	0x0800f49d
 800f480:	0800f4a5 	.word	0x0800f4a5
 800f484:	0800f4ad 	.word	0x0800f4ad
 800f488:	0800f4b5 	.word	0x0800f4b5
 800f48c:	2300      	movs	r3, #0
 800f48e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f492:	e284      	b.n	800f99e <UART_SetConfig+0x7ae>
 800f494:	2304      	movs	r3, #4
 800f496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f49a:	e280      	b.n	800f99e <UART_SetConfig+0x7ae>
 800f49c:	2308      	movs	r3, #8
 800f49e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f4a2:	e27c      	b.n	800f99e <UART_SetConfig+0x7ae>
 800f4a4:	2310      	movs	r3, #16
 800f4a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f4aa:	e278      	b.n	800f99e <UART_SetConfig+0x7ae>
 800f4ac:	2320      	movs	r3, #32
 800f4ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f4b2:	e274      	b.n	800f99e <UART_SetConfig+0x7ae>
 800f4b4:	2340      	movs	r3, #64	; 0x40
 800f4b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f4ba:	e270      	b.n	800f99e <UART_SetConfig+0x7ae>
 800f4bc:	2380      	movs	r3, #128	; 0x80
 800f4be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f4c2:	e26c      	b.n	800f99e <UART_SetConfig+0x7ae>
 800f4c4:	697b      	ldr	r3, [r7, #20]
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	4a1b      	ldr	r2, [pc, #108]	; (800f538 <UART_SetConfig+0x348>)
 800f4ca:	4293      	cmp	r3, r2
 800f4cc:	d142      	bne.n	800f554 <UART_SetConfig+0x364>
 800f4ce:	4b16      	ldr	r3, [pc, #88]	; (800f528 <UART_SetConfig+0x338>)
 800f4d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f4d2:	f003 0307 	and.w	r3, r3, #7
 800f4d6:	2b05      	cmp	r3, #5
 800f4d8:	d838      	bhi.n	800f54c <UART_SetConfig+0x35c>
 800f4da:	a201      	add	r2, pc, #4	; (adr r2, 800f4e0 <UART_SetConfig+0x2f0>)
 800f4dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4e0:	0800f4f9 	.word	0x0800f4f9
 800f4e4:	0800f501 	.word	0x0800f501
 800f4e8:	0800f509 	.word	0x0800f509
 800f4ec:	0800f511 	.word	0x0800f511
 800f4f0:	0800f53d 	.word	0x0800f53d
 800f4f4:	0800f545 	.word	0x0800f545
 800f4f8:	2300      	movs	r3, #0
 800f4fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f4fe:	e24e      	b.n	800f99e <UART_SetConfig+0x7ae>
 800f500:	2304      	movs	r3, #4
 800f502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f506:	e24a      	b.n	800f99e <UART_SetConfig+0x7ae>
 800f508:	2308      	movs	r3, #8
 800f50a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f50e:	e246      	b.n	800f99e <UART_SetConfig+0x7ae>
 800f510:	2310      	movs	r3, #16
 800f512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f516:	e242      	b.n	800f99e <UART_SetConfig+0x7ae>
 800f518:	cfff69f3 	.word	0xcfff69f3
 800f51c:	58000c00 	.word	0x58000c00
 800f520:	11fff4ff 	.word	0x11fff4ff
 800f524:	40011000 	.word	0x40011000
 800f528:	58024400 	.word	0x58024400
 800f52c:	40004400 	.word	0x40004400
 800f530:	40004800 	.word	0x40004800
 800f534:	40004c00 	.word	0x40004c00
 800f538:	40005000 	.word	0x40005000
 800f53c:	2320      	movs	r3, #32
 800f53e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f542:	e22c      	b.n	800f99e <UART_SetConfig+0x7ae>
 800f544:	2340      	movs	r3, #64	; 0x40
 800f546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f54a:	e228      	b.n	800f99e <UART_SetConfig+0x7ae>
 800f54c:	2380      	movs	r3, #128	; 0x80
 800f54e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f552:	e224      	b.n	800f99e <UART_SetConfig+0x7ae>
 800f554:	697b      	ldr	r3, [r7, #20]
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	4ab1      	ldr	r2, [pc, #708]	; (800f820 <UART_SetConfig+0x630>)
 800f55a:	4293      	cmp	r3, r2
 800f55c:	d176      	bne.n	800f64c <UART_SetConfig+0x45c>
 800f55e:	4bb1      	ldr	r3, [pc, #708]	; (800f824 <UART_SetConfig+0x634>)
 800f560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f562:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f566:	2b28      	cmp	r3, #40	; 0x28
 800f568:	d86c      	bhi.n	800f644 <UART_SetConfig+0x454>
 800f56a:	a201      	add	r2, pc, #4	; (adr r2, 800f570 <UART_SetConfig+0x380>)
 800f56c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f570:	0800f615 	.word	0x0800f615
 800f574:	0800f645 	.word	0x0800f645
 800f578:	0800f645 	.word	0x0800f645
 800f57c:	0800f645 	.word	0x0800f645
 800f580:	0800f645 	.word	0x0800f645
 800f584:	0800f645 	.word	0x0800f645
 800f588:	0800f645 	.word	0x0800f645
 800f58c:	0800f645 	.word	0x0800f645
 800f590:	0800f61d 	.word	0x0800f61d
 800f594:	0800f645 	.word	0x0800f645
 800f598:	0800f645 	.word	0x0800f645
 800f59c:	0800f645 	.word	0x0800f645
 800f5a0:	0800f645 	.word	0x0800f645
 800f5a4:	0800f645 	.word	0x0800f645
 800f5a8:	0800f645 	.word	0x0800f645
 800f5ac:	0800f645 	.word	0x0800f645
 800f5b0:	0800f625 	.word	0x0800f625
 800f5b4:	0800f645 	.word	0x0800f645
 800f5b8:	0800f645 	.word	0x0800f645
 800f5bc:	0800f645 	.word	0x0800f645
 800f5c0:	0800f645 	.word	0x0800f645
 800f5c4:	0800f645 	.word	0x0800f645
 800f5c8:	0800f645 	.word	0x0800f645
 800f5cc:	0800f645 	.word	0x0800f645
 800f5d0:	0800f62d 	.word	0x0800f62d
 800f5d4:	0800f645 	.word	0x0800f645
 800f5d8:	0800f645 	.word	0x0800f645
 800f5dc:	0800f645 	.word	0x0800f645
 800f5e0:	0800f645 	.word	0x0800f645
 800f5e4:	0800f645 	.word	0x0800f645
 800f5e8:	0800f645 	.word	0x0800f645
 800f5ec:	0800f645 	.word	0x0800f645
 800f5f0:	0800f635 	.word	0x0800f635
 800f5f4:	0800f645 	.word	0x0800f645
 800f5f8:	0800f645 	.word	0x0800f645
 800f5fc:	0800f645 	.word	0x0800f645
 800f600:	0800f645 	.word	0x0800f645
 800f604:	0800f645 	.word	0x0800f645
 800f608:	0800f645 	.word	0x0800f645
 800f60c:	0800f645 	.word	0x0800f645
 800f610:	0800f63d 	.word	0x0800f63d
 800f614:	2301      	movs	r3, #1
 800f616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f61a:	e1c0      	b.n	800f99e <UART_SetConfig+0x7ae>
 800f61c:	2304      	movs	r3, #4
 800f61e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f622:	e1bc      	b.n	800f99e <UART_SetConfig+0x7ae>
 800f624:	2308      	movs	r3, #8
 800f626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f62a:	e1b8      	b.n	800f99e <UART_SetConfig+0x7ae>
 800f62c:	2310      	movs	r3, #16
 800f62e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f632:	e1b4      	b.n	800f99e <UART_SetConfig+0x7ae>
 800f634:	2320      	movs	r3, #32
 800f636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f63a:	e1b0      	b.n	800f99e <UART_SetConfig+0x7ae>
 800f63c:	2340      	movs	r3, #64	; 0x40
 800f63e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f642:	e1ac      	b.n	800f99e <UART_SetConfig+0x7ae>
 800f644:	2380      	movs	r3, #128	; 0x80
 800f646:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f64a:	e1a8      	b.n	800f99e <UART_SetConfig+0x7ae>
 800f64c:	697b      	ldr	r3, [r7, #20]
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	4a75      	ldr	r2, [pc, #468]	; (800f828 <UART_SetConfig+0x638>)
 800f652:	4293      	cmp	r3, r2
 800f654:	d130      	bne.n	800f6b8 <UART_SetConfig+0x4c8>
 800f656:	4b73      	ldr	r3, [pc, #460]	; (800f824 <UART_SetConfig+0x634>)
 800f658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f65a:	f003 0307 	and.w	r3, r3, #7
 800f65e:	2b05      	cmp	r3, #5
 800f660:	d826      	bhi.n	800f6b0 <UART_SetConfig+0x4c0>
 800f662:	a201      	add	r2, pc, #4	; (adr r2, 800f668 <UART_SetConfig+0x478>)
 800f664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f668:	0800f681 	.word	0x0800f681
 800f66c:	0800f689 	.word	0x0800f689
 800f670:	0800f691 	.word	0x0800f691
 800f674:	0800f699 	.word	0x0800f699
 800f678:	0800f6a1 	.word	0x0800f6a1
 800f67c:	0800f6a9 	.word	0x0800f6a9
 800f680:	2300      	movs	r3, #0
 800f682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f686:	e18a      	b.n	800f99e <UART_SetConfig+0x7ae>
 800f688:	2304      	movs	r3, #4
 800f68a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f68e:	e186      	b.n	800f99e <UART_SetConfig+0x7ae>
 800f690:	2308      	movs	r3, #8
 800f692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f696:	e182      	b.n	800f99e <UART_SetConfig+0x7ae>
 800f698:	2310      	movs	r3, #16
 800f69a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f69e:	e17e      	b.n	800f99e <UART_SetConfig+0x7ae>
 800f6a0:	2320      	movs	r3, #32
 800f6a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f6a6:	e17a      	b.n	800f99e <UART_SetConfig+0x7ae>
 800f6a8:	2340      	movs	r3, #64	; 0x40
 800f6aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f6ae:	e176      	b.n	800f99e <UART_SetConfig+0x7ae>
 800f6b0:	2380      	movs	r3, #128	; 0x80
 800f6b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f6b6:	e172      	b.n	800f99e <UART_SetConfig+0x7ae>
 800f6b8:	697b      	ldr	r3, [r7, #20]
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	4a5b      	ldr	r2, [pc, #364]	; (800f82c <UART_SetConfig+0x63c>)
 800f6be:	4293      	cmp	r3, r2
 800f6c0:	d130      	bne.n	800f724 <UART_SetConfig+0x534>
 800f6c2:	4b58      	ldr	r3, [pc, #352]	; (800f824 <UART_SetConfig+0x634>)
 800f6c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f6c6:	f003 0307 	and.w	r3, r3, #7
 800f6ca:	2b05      	cmp	r3, #5
 800f6cc:	d826      	bhi.n	800f71c <UART_SetConfig+0x52c>
 800f6ce:	a201      	add	r2, pc, #4	; (adr r2, 800f6d4 <UART_SetConfig+0x4e4>)
 800f6d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6d4:	0800f6ed 	.word	0x0800f6ed
 800f6d8:	0800f6f5 	.word	0x0800f6f5
 800f6dc:	0800f6fd 	.word	0x0800f6fd
 800f6e0:	0800f705 	.word	0x0800f705
 800f6e4:	0800f70d 	.word	0x0800f70d
 800f6e8:	0800f715 	.word	0x0800f715
 800f6ec:	2300      	movs	r3, #0
 800f6ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f6f2:	e154      	b.n	800f99e <UART_SetConfig+0x7ae>
 800f6f4:	2304      	movs	r3, #4
 800f6f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f6fa:	e150      	b.n	800f99e <UART_SetConfig+0x7ae>
 800f6fc:	2308      	movs	r3, #8
 800f6fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f702:	e14c      	b.n	800f99e <UART_SetConfig+0x7ae>
 800f704:	2310      	movs	r3, #16
 800f706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f70a:	e148      	b.n	800f99e <UART_SetConfig+0x7ae>
 800f70c:	2320      	movs	r3, #32
 800f70e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f712:	e144      	b.n	800f99e <UART_SetConfig+0x7ae>
 800f714:	2340      	movs	r3, #64	; 0x40
 800f716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f71a:	e140      	b.n	800f99e <UART_SetConfig+0x7ae>
 800f71c:	2380      	movs	r3, #128	; 0x80
 800f71e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f722:	e13c      	b.n	800f99e <UART_SetConfig+0x7ae>
 800f724:	697b      	ldr	r3, [r7, #20]
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	4a41      	ldr	r2, [pc, #260]	; (800f830 <UART_SetConfig+0x640>)
 800f72a:	4293      	cmp	r3, r2
 800f72c:	f040 8082 	bne.w	800f834 <UART_SetConfig+0x644>
 800f730:	4b3c      	ldr	r3, [pc, #240]	; (800f824 <UART_SetConfig+0x634>)
 800f732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f734:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f738:	2b28      	cmp	r3, #40	; 0x28
 800f73a:	d86d      	bhi.n	800f818 <UART_SetConfig+0x628>
 800f73c:	a201      	add	r2, pc, #4	; (adr r2, 800f744 <UART_SetConfig+0x554>)
 800f73e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f742:	bf00      	nop
 800f744:	0800f7e9 	.word	0x0800f7e9
 800f748:	0800f819 	.word	0x0800f819
 800f74c:	0800f819 	.word	0x0800f819
 800f750:	0800f819 	.word	0x0800f819
 800f754:	0800f819 	.word	0x0800f819
 800f758:	0800f819 	.word	0x0800f819
 800f75c:	0800f819 	.word	0x0800f819
 800f760:	0800f819 	.word	0x0800f819
 800f764:	0800f7f1 	.word	0x0800f7f1
 800f768:	0800f819 	.word	0x0800f819
 800f76c:	0800f819 	.word	0x0800f819
 800f770:	0800f819 	.word	0x0800f819
 800f774:	0800f819 	.word	0x0800f819
 800f778:	0800f819 	.word	0x0800f819
 800f77c:	0800f819 	.word	0x0800f819
 800f780:	0800f819 	.word	0x0800f819
 800f784:	0800f7f9 	.word	0x0800f7f9
 800f788:	0800f819 	.word	0x0800f819
 800f78c:	0800f819 	.word	0x0800f819
 800f790:	0800f819 	.word	0x0800f819
 800f794:	0800f819 	.word	0x0800f819
 800f798:	0800f819 	.word	0x0800f819
 800f79c:	0800f819 	.word	0x0800f819
 800f7a0:	0800f819 	.word	0x0800f819
 800f7a4:	0800f801 	.word	0x0800f801
 800f7a8:	0800f819 	.word	0x0800f819
 800f7ac:	0800f819 	.word	0x0800f819
 800f7b0:	0800f819 	.word	0x0800f819
 800f7b4:	0800f819 	.word	0x0800f819
 800f7b8:	0800f819 	.word	0x0800f819
 800f7bc:	0800f819 	.word	0x0800f819
 800f7c0:	0800f819 	.word	0x0800f819
 800f7c4:	0800f809 	.word	0x0800f809
 800f7c8:	0800f819 	.word	0x0800f819
 800f7cc:	0800f819 	.word	0x0800f819
 800f7d0:	0800f819 	.word	0x0800f819
 800f7d4:	0800f819 	.word	0x0800f819
 800f7d8:	0800f819 	.word	0x0800f819
 800f7dc:	0800f819 	.word	0x0800f819
 800f7e0:	0800f819 	.word	0x0800f819
 800f7e4:	0800f811 	.word	0x0800f811
 800f7e8:	2301      	movs	r3, #1
 800f7ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7ee:	e0d6      	b.n	800f99e <UART_SetConfig+0x7ae>
 800f7f0:	2304      	movs	r3, #4
 800f7f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7f6:	e0d2      	b.n	800f99e <UART_SetConfig+0x7ae>
 800f7f8:	2308      	movs	r3, #8
 800f7fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7fe:	e0ce      	b.n	800f99e <UART_SetConfig+0x7ae>
 800f800:	2310      	movs	r3, #16
 800f802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f806:	e0ca      	b.n	800f99e <UART_SetConfig+0x7ae>
 800f808:	2320      	movs	r3, #32
 800f80a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f80e:	e0c6      	b.n	800f99e <UART_SetConfig+0x7ae>
 800f810:	2340      	movs	r3, #64	; 0x40
 800f812:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f816:	e0c2      	b.n	800f99e <UART_SetConfig+0x7ae>
 800f818:	2380      	movs	r3, #128	; 0x80
 800f81a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f81e:	e0be      	b.n	800f99e <UART_SetConfig+0x7ae>
 800f820:	40011400 	.word	0x40011400
 800f824:	58024400 	.word	0x58024400
 800f828:	40007800 	.word	0x40007800
 800f82c:	40007c00 	.word	0x40007c00
 800f830:	40011800 	.word	0x40011800
 800f834:	697b      	ldr	r3, [r7, #20]
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	4aad      	ldr	r2, [pc, #692]	; (800faf0 <UART_SetConfig+0x900>)
 800f83a:	4293      	cmp	r3, r2
 800f83c:	d176      	bne.n	800f92c <UART_SetConfig+0x73c>
 800f83e:	4bad      	ldr	r3, [pc, #692]	; (800faf4 <UART_SetConfig+0x904>)
 800f840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f842:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f846:	2b28      	cmp	r3, #40	; 0x28
 800f848:	d86c      	bhi.n	800f924 <UART_SetConfig+0x734>
 800f84a:	a201      	add	r2, pc, #4	; (adr r2, 800f850 <UART_SetConfig+0x660>)
 800f84c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f850:	0800f8f5 	.word	0x0800f8f5
 800f854:	0800f925 	.word	0x0800f925
 800f858:	0800f925 	.word	0x0800f925
 800f85c:	0800f925 	.word	0x0800f925
 800f860:	0800f925 	.word	0x0800f925
 800f864:	0800f925 	.word	0x0800f925
 800f868:	0800f925 	.word	0x0800f925
 800f86c:	0800f925 	.word	0x0800f925
 800f870:	0800f8fd 	.word	0x0800f8fd
 800f874:	0800f925 	.word	0x0800f925
 800f878:	0800f925 	.word	0x0800f925
 800f87c:	0800f925 	.word	0x0800f925
 800f880:	0800f925 	.word	0x0800f925
 800f884:	0800f925 	.word	0x0800f925
 800f888:	0800f925 	.word	0x0800f925
 800f88c:	0800f925 	.word	0x0800f925
 800f890:	0800f905 	.word	0x0800f905
 800f894:	0800f925 	.word	0x0800f925
 800f898:	0800f925 	.word	0x0800f925
 800f89c:	0800f925 	.word	0x0800f925
 800f8a0:	0800f925 	.word	0x0800f925
 800f8a4:	0800f925 	.word	0x0800f925
 800f8a8:	0800f925 	.word	0x0800f925
 800f8ac:	0800f925 	.word	0x0800f925
 800f8b0:	0800f90d 	.word	0x0800f90d
 800f8b4:	0800f925 	.word	0x0800f925
 800f8b8:	0800f925 	.word	0x0800f925
 800f8bc:	0800f925 	.word	0x0800f925
 800f8c0:	0800f925 	.word	0x0800f925
 800f8c4:	0800f925 	.word	0x0800f925
 800f8c8:	0800f925 	.word	0x0800f925
 800f8cc:	0800f925 	.word	0x0800f925
 800f8d0:	0800f915 	.word	0x0800f915
 800f8d4:	0800f925 	.word	0x0800f925
 800f8d8:	0800f925 	.word	0x0800f925
 800f8dc:	0800f925 	.word	0x0800f925
 800f8e0:	0800f925 	.word	0x0800f925
 800f8e4:	0800f925 	.word	0x0800f925
 800f8e8:	0800f925 	.word	0x0800f925
 800f8ec:	0800f925 	.word	0x0800f925
 800f8f0:	0800f91d 	.word	0x0800f91d
 800f8f4:	2301      	movs	r3, #1
 800f8f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8fa:	e050      	b.n	800f99e <UART_SetConfig+0x7ae>
 800f8fc:	2304      	movs	r3, #4
 800f8fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f902:	e04c      	b.n	800f99e <UART_SetConfig+0x7ae>
 800f904:	2308      	movs	r3, #8
 800f906:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f90a:	e048      	b.n	800f99e <UART_SetConfig+0x7ae>
 800f90c:	2310      	movs	r3, #16
 800f90e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f912:	e044      	b.n	800f99e <UART_SetConfig+0x7ae>
 800f914:	2320      	movs	r3, #32
 800f916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f91a:	e040      	b.n	800f99e <UART_SetConfig+0x7ae>
 800f91c:	2340      	movs	r3, #64	; 0x40
 800f91e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f922:	e03c      	b.n	800f99e <UART_SetConfig+0x7ae>
 800f924:	2380      	movs	r3, #128	; 0x80
 800f926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f92a:	e038      	b.n	800f99e <UART_SetConfig+0x7ae>
 800f92c:	697b      	ldr	r3, [r7, #20]
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	4a71      	ldr	r2, [pc, #452]	; (800faf8 <UART_SetConfig+0x908>)
 800f932:	4293      	cmp	r3, r2
 800f934:	d130      	bne.n	800f998 <UART_SetConfig+0x7a8>
 800f936:	4b6f      	ldr	r3, [pc, #444]	; (800faf4 <UART_SetConfig+0x904>)
 800f938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f93a:	f003 0307 	and.w	r3, r3, #7
 800f93e:	2b05      	cmp	r3, #5
 800f940:	d826      	bhi.n	800f990 <UART_SetConfig+0x7a0>
 800f942:	a201      	add	r2, pc, #4	; (adr r2, 800f948 <UART_SetConfig+0x758>)
 800f944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f948:	0800f961 	.word	0x0800f961
 800f94c:	0800f969 	.word	0x0800f969
 800f950:	0800f971 	.word	0x0800f971
 800f954:	0800f979 	.word	0x0800f979
 800f958:	0800f981 	.word	0x0800f981
 800f95c:	0800f989 	.word	0x0800f989
 800f960:	2302      	movs	r3, #2
 800f962:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f966:	e01a      	b.n	800f99e <UART_SetConfig+0x7ae>
 800f968:	2304      	movs	r3, #4
 800f96a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f96e:	e016      	b.n	800f99e <UART_SetConfig+0x7ae>
 800f970:	2308      	movs	r3, #8
 800f972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f976:	e012      	b.n	800f99e <UART_SetConfig+0x7ae>
 800f978:	2310      	movs	r3, #16
 800f97a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f97e:	e00e      	b.n	800f99e <UART_SetConfig+0x7ae>
 800f980:	2320      	movs	r3, #32
 800f982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f986:	e00a      	b.n	800f99e <UART_SetConfig+0x7ae>
 800f988:	2340      	movs	r3, #64	; 0x40
 800f98a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f98e:	e006      	b.n	800f99e <UART_SetConfig+0x7ae>
 800f990:	2380      	movs	r3, #128	; 0x80
 800f992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f996:	e002      	b.n	800f99e <UART_SetConfig+0x7ae>
 800f998:	2380      	movs	r3, #128	; 0x80
 800f99a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f99e:	697b      	ldr	r3, [r7, #20]
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	4a55      	ldr	r2, [pc, #340]	; (800faf8 <UART_SetConfig+0x908>)
 800f9a4:	4293      	cmp	r3, r2
 800f9a6:	f040 80f8 	bne.w	800fb9a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f9aa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f9ae:	2b20      	cmp	r3, #32
 800f9b0:	dc46      	bgt.n	800fa40 <UART_SetConfig+0x850>
 800f9b2:	2b02      	cmp	r3, #2
 800f9b4:	db75      	blt.n	800faa2 <UART_SetConfig+0x8b2>
 800f9b6:	3b02      	subs	r3, #2
 800f9b8:	2b1e      	cmp	r3, #30
 800f9ba:	d872      	bhi.n	800faa2 <UART_SetConfig+0x8b2>
 800f9bc:	a201      	add	r2, pc, #4	; (adr r2, 800f9c4 <UART_SetConfig+0x7d4>)
 800f9be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9c2:	bf00      	nop
 800f9c4:	0800fa47 	.word	0x0800fa47
 800f9c8:	0800faa3 	.word	0x0800faa3
 800f9cc:	0800fa4f 	.word	0x0800fa4f
 800f9d0:	0800faa3 	.word	0x0800faa3
 800f9d4:	0800faa3 	.word	0x0800faa3
 800f9d8:	0800faa3 	.word	0x0800faa3
 800f9dc:	0800fa5f 	.word	0x0800fa5f
 800f9e0:	0800faa3 	.word	0x0800faa3
 800f9e4:	0800faa3 	.word	0x0800faa3
 800f9e8:	0800faa3 	.word	0x0800faa3
 800f9ec:	0800faa3 	.word	0x0800faa3
 800f9f0:	0800faa3 	.word	0x0800faa3
 800f9f4:	0800faa3 	.word	0x0800faa3
 800f9f8:	0800faa3 	.word	0x0800faa3
 800f9fc:	0800fa6f 	.word	0x0800fa6f
 800fa00:	0800faa3 	.word	0x0800faa3
 800fa04:	0800faa3 	.word	0x0800faa3
 800fa08:	0800faa3 	.word	0x0800faa3
 800fa0c:	0800faa3 	.word	0x0800faa3
 800fa10:	0800faa3 	.word	0x0800faa3
 800fa14:	0800faa3 	.word	0x0800faa3
 800fa18:	0800faa3 	.word	0x0800faa3
 800fa1c:	0800faa3 	.word	0x0800faa3
 800fa20:	0800faa3 	.word	0x0800faa3
 800fa24:	0800faa3 	.word	0x0800faa3
 800fa28:	0800faa3 	.word	0x0800faa3
 800fa2c:	0800faa3 	.word	0x0800faa3
 800fa30:	0800faa3 	.word	0x0800faa3
 800fa34:	0800faa3 	.word	0x0800faa3
 800fa38:	0800faa3 	.word	0x0800faa3
 800fa3c:	0800fa95 	.word	0x0800fa95
 800fa40:	2b40      	cmp	r3, #64	; 0x40
 800fa42:	d02a      	beq.n	800fa9a <UART_SetConfig+0x8aa>
 800fa44:	e02d      	b.n	800faa2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800fa46:	f7fc fc99 	bl	800c37c <HAL_RCCEx_GetD3PCLK1Freq>
 800fa4a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fa4c:	e02f      	b.n	800faae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fa4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fa52:	4618      	mov	r0, r3
 800fa54:	f7fc fca8 	bl	800c3a8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fa58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fa5c:	e027      	b.n	800faae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fa5e:	f107 0318 	add.w	r3, r7, #24
 800fa62:	4618      	mov	r0, r3
 800fa64:	f7fc fdf4 	bl	800c650 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fa68:	69fb      	ldr	r3, [r7, #28]
 800fa6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fa6c:	e01f      	b.n	800faae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fa6e:	4b21      	ldr	r3, [pc, #132]	; (800faf4 <UART_SetConfig+0x904>)
 800fa70:	681b      	ldr	r3, [r3, #0]
 800fa72:	f003 0320 	and.w	r3, r3, #32
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d009      	beq.n	800fa8e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fa7a:	4b1e      	ldr	r3, [pc, #120]	; (800faf4 <UART_SetConfig+0x904>)
 800fa7c:	681b      	ldr	r3, [r3, #0]
 800fa7e:	08db      	lsrs	r3, r3, #3
 800fa80:	f003 0303 	and.w	r3, r3, #3
 800fa84:	4a1d      	ldr	r2, [pc, #116]	; (800fafc <UART_SetConfig+0x90c>)
 800fa86:	fa22 f303 	lsr.w	r3, r2, r3
 800fa8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fa8c:	e00f      	b.n	800faae <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800fa8e:	4b1b      	ldr	r3, [pc, #108]	; (800fafc <UART_SetConfig+0x90c>)
 800fa90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fa92:	e00c      	b.n	800faae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fa94:	4b1a      	ldr	r3, [pc, #104]	; (800fb00 <UART_SetConfig+0x910>)
 800fa96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fa98:	e009      	b.n	800faae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fa9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fa9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800faa0:	e005      	b.n	800faae <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800faa2:	2300      	movs	r3, #0
 800faa4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800faa6:	2301      	movs	r3, #1
 800faa8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800faac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800faae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	f000 81ee 	beq.w	800fe92 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800fab6:	697b      	ldr	r3, [r7, #20]
 800fab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800faba:	4a12      	ldr	r2, [pc, #72]	; (800fb04 <UART_SetConfig+0x914>)
 800fabc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fac0:	461a      	mov	r2, r3
 800fac2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fac4:	fbb3 f3f2 	udiv	r3, r3, r2
 800fac8:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800faca:	697b      	ldr	r3, [r7, #20]
 800facc:	685a      	ldr	r2, [r3, #4]
 800face:	4613      	mov	r3, r2
 800fad0:	005b      	lsls	r3, r3, #1
 800fad2:	4413      	add	r3, r2
 800fad4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fad6:	429a      	cmp	r2, r3
 800fad8:	d305      	bcc.n	800fae6 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800fada:	697b      	ldr	r3, [r7, #20]
 800fadc:	685b      	ldr	r3, [r3, #4]
 800fade:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fae0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fae2:	429a      	cmp	r2, r3
 800fae4:	d910      	bls.n	800fb08 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800fae6:	2301      	movs	r3, #1
 800fae8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800faec:	e1d1      	b.n	800fe92 <UART_SetConfig+0xca2>
 800faee:	bf00      	nop
 800faf0:	40011c00 	.word	0x40011c00
 800faf4:	58024400 	.word	0x58024400
 800faf8:	58000c00 	.word	0x58000c00
 800fafc:	03d09000 	.word	0x03d09000
 800fb00:	003d0900 	.word	0x003d0900
 800fb04:	08011c70 	.word	0x08011c70
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fb08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb0a:	2200      	movs	r2, #0
 800fb0c:	60bb      	str	r3, [r7, #8]
 800fb0e:	60fa      	str	r2, [r7, #12]
 800fb10:	697b      	ldr	r3, [r7, #20]
 800fb12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb14:	4ac0      	ldr	r2, [pc, #768]	; (800fe18 <UART_SetConfig+0xc28>)
 800fb16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fb1a:	b29b      	uxth	r3, r3
 800fb1c:	2200      	movs	r2, #0
 800fb1e:	603b      	str	r3, [r7, #0]
 800fb20:	607a      	str	r2, [r7, #4]
 800fb22:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fb26:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800fb2a:	f7f0 fbf9 	bl	8000320 <__aeabi_uldivmod>
 800fb2e:	4602      	mov	r2, r0
 800fb30:	460b      	mov	r3, r1
 800fb32:	4610      	mov	r0, r2
 800fb34:	4619      	mov	r1, r3
 800fb36:	f04f 0200 	mov.w	r2, #0
 800fb3a:	f04f 0300 	mov.w	r3, #0
 800fb3e:	020b      	lsls	r3, r1, #8
 800fb40:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800fb44:	0202      	lsls	r2, r0, #8
 800fb46:	6979      	ldr	r1, [r7, #20]
 800fb48:	6849      	ldr	r1, [r1, #4]
 800fb4a:	0849      	lsrs	r1, r1, #1
 800fb4c:	2000      	movs	r0, #0
 800fb4e:	460c      	mov	r4, r1
 800fb50:	4605      	mov	r5, r0
 800fb52:	eb12 0804 	adds.w	r8, r2, r4
 800fb56:	eb43 0905 	adc.w	r9, r3, r5
 800fb5a:	697b      	ldr	r3, [r7, #20]
 800fb5c:	685b      	ldr	r3, [r3, #4]
 800fb5e:	2200      	movs	r2, #0
 800fb60:	469a      	mov	sl, r3
 800fb62:	4693      	mov	fp, r2
 800fb64:	4652      	mov	r2, sl
 800fb66:	465b      	mov	r3, fp
 800fb68:	4640      	mov	r0, r8
 800fb6a:	4649      	mov	r1, r9
 800fb6c:	f7f0 fbd8 	bl	8000320 <__aeabi_uldivmod>
 800fb70:	4602      	mov	r2, r0
 800fb72:	460b      	mov	r3, r1
 800fb74:	4613      	mov	r3, r2
 800fb76:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800fb78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fb7e:	d308      	bcc.n	800fb92 <UART_SetConfig+0x9a2>
 800fb80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fb86:	d204      	bcs.n	800fb92 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800fb88:	697b      	ldr	r3, [r7, #20]
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fb8e:	60da      	str	r2, [r3, #12]
 800fb90:	e17f      	b.n	800fe92 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800fb92:	2301      	movs	r3, #1
 800fb94:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800fb98:	e17b      	b.n	800fe92 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fb9a:	697b      	ldr	r3, [r7, #20]
 800fb9c:	69db      	ldr	r3, [r3, #28]
 800fb9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fba2:	f040 80bd 	bne.w	800fd20 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800fba6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800fbaa:	2b20      	cmp	r3, #32
 800fbac:	dc48      	bgt.n	800fc40 <UART_SetConfig+0xa50>
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	db7b      	blt.n	800fcaa <UART_SetConfig+0xaba>
 800fbb2:	2b20      	cmp	r3, #32
 800fbb4:	d879      	bhi.n	800fcaa <UART_SetConfig+0xaba>
 800fbb6:	a201      	add	r2, pc, #4	; (adr r2, 800fbbc <UART_SetConfig+0x9cc>)
 800fbb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbbc:	0800fc47 	.word	0x0800fc47
 800fbc0:	0800fc4f 	.word	0x0800fc4f
 800fbc4:	0800fcab 	.word	0x0800fcab
 800fbc8:	0800fcab 	.word	0x0800fcab
 800fbcc:	0800fc57 	.word	0x0800fc57
 800fbd0:	0800fcab 	.word	0x0800fcab
 800fbd4:	0800fcab 	.word	0x0800fcab
 800fbd8:	0800fcab 	.word	0x0800fcab
 800fbdc:	0800fc67 	.word	0x0800fc67
 800fbe0:	0800fcab 	.word	0x0800fcab
 800fbe4:	0800fcab 	.word	0x0800fcab
 800fbe8:	0800fcab 	.word	0x0800fcab
 800fbec:	0800fcab 	.word	0x0800fcab
 800fbf0:	0800fcab 	.word	0x0800fcab
 800fbf4:	0800fcab 	.word	0x0800fcab
 800fbf8:	0800fcab 	.word	0x0800fcab
 800fbfc:	0800fc77 	.word	0x0800fc77
 800fc00:	0800fcab 	.word	0x0800fcab
 800fc04:	0800fcab 	.word	0x0800fcab
 800fc08:	0800fcab 	.word	0x0800fcab
 800fc0c:	0800fcab 	.word	0x0800fcab
 800fc10:	0800fcab 	.word	0x0800fcab
 800fc14:	0800fcab 	.word	0x0800fcab
 800fc18:	0800fcab 	.word	0x0800fcab
 800fc1c:	0800fcab 	.word	0x0800fcab
 800fc20:	0800fcab 	.word	0x0800fcab
 800fc24:	0800fcab 	.word	0x0800fcab
 800fc28:	0800fcab 	.word	0x0800fcab
 800fc2c:	0800fcab 	.word	0x0800fcab
 800fc30:	0800fcab 	.word	0x0800fcab
 800fc34:	0800fcab 	.word	0x0800fcab
 800fc38:	0800fcab 	.word	0x0800fcab
 800fc3c:	0800fc9d 	.word	0x0800fc9d
 800fc40:	2b40      	cmp	r3, #64	; 0x40
 800fc42:	d02e      	beq.n	800fca2 <UART_SetConfig+0xab2>
 800fc44:	e031      	b.n	800fcaa <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fc46:	f7fb fc73 	bl	800b530 <HAL_RCC_GetPCLK1Freq>
 800fc4a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fc4c:	e033      	b.n	800fcb6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fc4e:	f7fb fc85 	bl	800b55c <HAL_RCC_GetPCLK2Freq>
 800fc52:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fc54:	e02f      	b.n	800fcb6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fc56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fc5a:	4618      	mov	r0, r3
 800fc5c:	f7fc fba4 	bl	800c3a8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fc60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fc64:	e027      	b.n	800fcb6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fc66:	f107 0318 	add.w	r3, r7, #24
 800fc6a:	4618      	mov	r0, r3
 800fc6c:	f7fc fcf0 	bl	800c650 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fc70:	69fb      	ldr	r3, [r7, #28]
 800fc72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fc74:	e01f      	b.n	800fcb6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fc76:	4b69      	ldr	r3, [pc, #420]	; (800fe1c <UART_SetConfig+0xc2c>)
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	f003 0320 	and.w	r3, r3, #32
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d009      	beq.n	800fc96 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fc82:	4b66      	ldr	r3, [pc, #408]	; (800fe1c <UART_SetConfig+0xc2c>)
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	08db      	lsrs	r3, r3, #3
 800fc88:	f003 0303 	and.w	r3, r3, #3
 800fc8c:	4a64      	ldr	r2, [pc, #400]	; (800fe20 <UART_SetConfig+0xc30>)
 800fc8e:	fa22 f303 	lsr.w	r3, r2, r3
 800fc92:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fc94:	e00f      	b.n	800fcb6 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800fc96:	4b62      	ldr	r3, [pc, #392]	; (800fe20 <UART_SetConfig+0xc30>)
 800fc98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fc9a:	e00c      	b.n	800fcb6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fc9c:	4b61      	ldr	r3, [pc, #388]	; (800fe24 <UART_SetConfig+0xc34>)
 800fc9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fca0:	e009      	b.n	800fcb6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fca2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fca6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fca8:	e005      	b.n	800fcb6 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800fcaa:	2300      	movs	r3, #0
 800fcac:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800fcae:	2301      	movs	r3, #1
 800fcb0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800fcb4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800fcb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	f000 80ea 	beq.w	800fe92 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fcbe:	697b      	ldr	r3, [r7, #20]
 800fcc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcc2:	4a55      	ldr	r2, [pc, #340]	; (800fe18 <UART_SetConfig+0xc28>)
 800fcc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fcc8:	461a      	mov	r2, r3
 800fcca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fccc:	fbb3 f3f2 	udiv	r3, r3, r2
 800fcd0:	005a      	lsls	r2, r3, #1
 800fcd2:	697b      	ldr	r3, [r7, #20]
 800fcd4:	685b      	ldr	r3, [r3, #4]
 800fcd6:	085b      	lsrs	r3, r3, #1
 800fcd8:	441a      	add	r2, r3
 800fcda:	697b      	ldr	r3, [r7, #20]
 800fcdc:	685b      	ldr	r3, [r3, #4]
 800fcde:	fbb2 f3f3 	udiv	r3, r2, r3
 800fce2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fce6:	2b0f      	cmp	r3, #15
 800fce8:	d916      	bls.n	800fd18 <UART_SetConfig+0xb28>
 800fcea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fcf0:	d212      	bcs.n	800fd18 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800fcf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcf4:	b29b      	uxth	r3, r3
 800fcf6:	f023 030f 	bic.w	r3, r3, #15
 800fcfa:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800fcfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcfe:	085b      	lsrs	r3, r3, #1
 800fd00:	b29b      	uxth	r3, r3
 800fd02:	f003 0307 	and.w	r3, r3, #7
 800fd06:	b29a      	uxth	r2, r3
 800fd08:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fd0a:	4313      	orrs	r3, r2
 800fd0c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800fd0e:	697b      	ldr	r3, [r7, #20]
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800fd14:	60da      	str	r2, [r3, #12]
 800fd16:	e0bc      	b.n	800fe92 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800fd18:	2301      	movs	r3, #1
 800fd1a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800fd1e:	e0b8      	b.n	800fe92 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800fd20:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800fd24:	2b20      	cmp	r3, #32
 800fd26:	dc4b      	bgt.n	800fdc0 <UART_SetConfig+0xbd0>
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	f2c0 8087 	blt.w	800fe3c <UART_SetConfig+0xc4c>
 800fd2e:	2b20      	cmp	r3, #32
 800fd30:	f200 8084 	bhi.w	800fe3c <UART_SetConfig+0xc4c>
 800fd34:	a201      	add	r2, pc, #4	; (adr r2, 800fd3c <UART_SetConfig+0xb4c>)
 800fd36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd3a:	bf00      	nop
 800fd3c:	0800fdc7 	.word	0x0800fdc7
 800fd40:	0800fdcf 	.word	0x0800fdcf
 800fd44:	0800fe3d 	.word	0x0800fe3d
 800fd48:	0800fe3d 	.word	0x0800fe3d
 800fd4c:	0800fdd7 	.word	0x0800fdd7
 800fd50:	0800fe3d 	.word	0x0800fe3d
 800fd54:	0800fe3d 	.word	0x0800fe3d
 800fd58:	0800fe3d 	.word	0x0800fe3d
 800fd5c:	0800fde7 	.word	0x0800fde7
 800fd60:	0800fe3d 	.word	0x0800fe3d
 800fd64:	0800fe3d 	.word	0x0800fe3d
 800fd68:	0800fe3d 	.word	0x0800fe3d
 800fd6c:	0800fe3d 	.word	0x0800fe3d
 800fd70:	0800fe3d 	.word	0x0800fe3d
 800fd74:	0800fe3d 	.word	0x0800fe3d
 800fd78:	0800fe3d 	.word	0x0800fe3d
 800fd7c:	0800fdf7 	.word	0x0800fdf7
 800fd80:	0800fe3d 	.word	0x0800fe3d
 800fd84:	0800fe3d 	.word	0x0800fe3d
 800fd88:	0800fe3d 	.word	0x0800fe3d
 800fd8c:	0800fe3d 	.word	0x0800fe3d
 800fd90:	0800fe3d 	.word	0x0800fe3d
 800fd94:	0800fe3d 	.word	0x0800fe3d
 800fd98:	0800fe3d 	.word	0x0800fe3d
 800fd9c:	0800fe3d 	.word	0x0800fe3d
 800fda0:	0800fe3d 	.word	0x0800fe3d
 800fda4:	0800fe3d 	.word	0x0800fe3d
 800fda8:	0800fe3d 	.word	0x0800fe3d
 800fdac:	0800fe3d 	.word	0x0800fe3d
 800fdb0:	0800fe3d 	.word	0x0800fe3d
 800fdb4:	0800fe3d 	.word	0x0800fe3d
 800fdb8:	0800fe3d 	.word	0x0800fe3d
 800fdbc:	0800fe2f 	.word	0x0800fe2f
 800fdc0:	2b40      	cmp	r3, #64	; 0x40
 800fdc2:	d037      	beq.n	800fe34 <UART_SetConfig+0xc44>
 800fdc4:	e03a      	b.n	800fe3c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fdc6:	f7fb fbb3 	bl	800b530 <HAL_RCC_GetPCLK1Freq>
 800fdca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fdcc:	e03c      	b.n	800fe48 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fdce:	f7fb fbc5 	bl	800b55c <HAL_RCC_GetPCLK2Freq>
 800fdd2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fdd4:	e038      	b.n	800fe48 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fdd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fdda:	4618      	mov	r0, r3
 800fddc:	f7fc fae4 	bl	800c3a8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fde0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fde2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fde4:	e030      	b.n	800fe48 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fde6:	f107 0318 	add.w	r3, r7, #24
 800fdea:	4618      	mov	r0, r3
 800fdec:	f7fc fc30 	bl	800c650 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fdf0:	69fb      	ldr	r3, [r7, #28]
 800fdf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fdf4:	e028      	b.n	800fe48 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fdf6:	4b09      	ldr	r3, [pc, #36]	; (800fe1c <UART_SetConfig+0xc2c>)
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	f003 0320 	and.w	r3, r3, #32
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d012      	beq.n	800fe28 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fe02:	4b06      	ldr	r3, [pc, #24]	; (800fe1c <UART_SetConfig+0xc2c>)
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	08db      	lsrs	r3, r3, #3
 800fe08:	f003 0303 	and.w	r3, r3, #3
 800fe0c:	4a04      	ldr	r2, [pc, #16]	; (800fe20 <UART_SetConfig+0xc30>)
 800fe0e:	fa22 f303 	lsr.w	r3, r2, r3
 800fe12:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fe14:	e018      	b.n	800fe48 <UART_SetConfig+0xc58>
 800fe16:	bf00      	nop
 800fe18:	08011c70 	.word	0x08011c70
 800fe1c:	58024400 	.word	0x58024400
 800fe20:	03d09000 	.word	0x03d09000
 800fe24:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800fe28:	4b24      	ldr	r3, [pc, #144]	; (800febc <UART_SetConfig+0xccc>)
 800fe2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fe2c:	e00c      	b.n	800fe48 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fe2e:	4b24      	ldr	r3, [pc, #144]	; (800fec0 <UART_SetConfig+0xcd0>)
 800fe30:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fe32:	e009      	b.n	800fe48 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fe34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fe38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fe3a:	e005      	b.n	800fe48 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800fe3c:	2300      	movs	r3, #0
 800fe3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800fe40:	2301      	movs	r3, #1
 800fe42:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800fe46:	bf00      	nop
    }

    if (pclk != 0U)
 800fe48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d021      	beq.n	800fe92 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fe4e:	697b      	ldr	r3, [r7, #20]
 800fe50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe52:	4a1c      	ldr	r2, [pc, #112]	; (800fec4 <UART_SetConfig+0xcd4>)
 800fe54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fe58:	461a      	mov	r2, r3
 800fe5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe5c:	fbb3 f2f2 	udiv	r2, r3, r2
 800fe60:	697b      	ldr	r3, [r7, #20]
 800fe62:	685b      	ldr	r3, [r3, #4]
 800fe64:	085b      	lsrs	r3, r3, #1
 800fe66:	441a      	add	r2, r3
 800fe68:	697b      	ldr	r3, [r7, #20]
 800fe6a:	685b      	ldr	r3, [r3, #4]
 800fe6c:	fbb2 f3f3 	udiv	r3, r2, r3
 800fe70:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fe72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe74:	2b0f      	cmp	r3, #15
 800fe76:	d909      	bls.n	800fe8c <UART_SetConfig+0xc9c>
 800fe78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fe7e:	d205      	bcs.n	800fe8c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800fe80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe82:	b29a      	uxth	r2, r3
 800fe84:	697b      	ldr	r3, [r7, #20]
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	60da      	str	r2, [r3, #12]
 800fe8a:	e002      	b.n	800fe92 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800fe8c:	2301      	movs	r3, #1
 800fe8e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800fe92:	697b      	ldr	r3, [r7, #20]
 800fe94:	2201      	movs	r2, #1
 800fe96:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800fe9a:	697b      	ldr	r3, [r7, #20]
 800fe9c:	2201      	movs	r2, #1
 800fe9e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800fea2:	697b      	ldr	r3, [r7, #20]
 800fea4:	2200      	movs	r2, #0
 800fea6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800fea8:	697b      	ldr	r3, [r7, #20]
 800feaa:	2200      	movs	r2, #0
 800feac:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800feae:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800feb2:	4618      	mov	r0, r3
 800feb4:	3748      	adds	r7, #72	; 0x48
 800feb6:	46bd      	mov	sp, r7
 800feb8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800febc:	03d09000 	.word	0x03d09000
 800fec0:	003d0900 	.word	0x003d0900
 800fec4:	08011c70 	.word	0x08011c70

0800fec8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800fec8:	b480      	push	{r7}
 800feca:	b083      	sub	sp, #12
 800fecc:	af00      	add	r7, sp, #0
 800fece:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fed4:	f003 0301 	and.w	r3, r3, #1
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d00a      	beq.n	800fef2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	685b      	ldr	r3, [r3, #4]
 800fee2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	430a      	orrs	r2, r1
 800fef0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fef6:	f003 0302 	and.w	r3, r3, #2
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d00a      	beq.n	800ff14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	685b      	ldr	r3, [r3, #4]
 800ff04:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	681b      	ldr	r3, [r3, #0]
 800ff10:	430a      	orrs	r2, r1
 800ff12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff18:	f003 0304 	and.w	r3, r3, #4
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d00a      	beq.n	800ff36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	685b      	ldr	r3, [r3, #4]
 800ff26:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	681b      	ldr	r3, [r3, #0]
 800ff32:	430a      	orrs	r2, r1
 800ff34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff3a:	f003 0308 	and.w	r3, r3, #8
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d00a      	beq.n	800ff58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	685b      	ldr	r3, [r3, #4]
 800ff48:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	430a      	orrs	r2, r1
 800ff56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff5c:	f003 0310 	and.w	r3, r3, #16
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d00a      	beq.n	800ff7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	689b      	ldr	r3, [r3, #8]
 800ff6a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	430a      	orrs	r2, r1
 800ff78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff7e:	f003 0320 	and.w	r3, r3, #32
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d00a      	beq.n	800ff9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	689b      	ldr	r3, [r3, #8]
 800ff8c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	430a      	orrs	r2, r1
 800ff9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ffa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d01a      	beq.n	800ffde <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	685b      	ldr	r3, [r3, #4]
 800ffae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	430a      	orrs	r2, r1
 800ffbc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ffc2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ffc6:	d10a      	bne.n	800ffde <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	685b      	ldr	r3, [r3, #4]
 800ffce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	430a      	orrs	r2, r1
 800ffdc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ffe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d00a      	beq.n	8010000 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	685b      	ldr	r3, [r3, #4]
 800fff0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	430a      	orrs	r2, r1
 800fffe:	605a      	str	r2, [r3, #4]
  }
}
 8010000:	bf00      	nop
 8010002:	370c      	adds	r7, #12
 8010004:	46bd      	mov	sp, r7
 8010006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801000a:	4770      	bx	lr

0801000c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801000c:	b580      	push	{r7, lr}
 801000e:	b086      	sub	sp, #24
 8010010:	af02      	add	r7, sp, #8
 8010012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	2200      	movs	r2, #0
 8010018:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801001c:	f7f6 ff26 	bl	8006e6c <HAL_GetTick>
 8010020:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	f003 0308 	and.w	r3, r3, #8
 801002c:	2b08      	cmp	r3, #8
 801002e:	d10e      	bne.n	801004e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010030:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010034:	9300      	str	r3, [sp, #0]
 8010036:	68fb      	ldr	r3, [r7, #12]
 8010038:	2200      	movs	r2, #0
 801003a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801003e:	6878      	ldr	r0, [r7, #4]
 8010040:	f000 f82f 	bl	80100a2 <UART_WaitOnFlagUntilTimeout>
 8010044:	4603      	mov	r3, r0
 8010046:	2b00      	cmp	r3, #0
 8010048:	d001      	beq.n	801004e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801004a:	2303      	movs	r3, #3
 801004c:	e025      	b.n	801009a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	f003 0304 	and.w	r3, r3, #4
 8010058:	2b04      	cmp	r3, #4
 801005a:	d10e      	bne.n	801007a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801005c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010060:	9300      	str	r3, [sp, #0]
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	2200      	movs	r2, #0
 8010066:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801006a:	6878      	ldr	r0, [r7, #4]
 801006c:	f000 f819 	bl	80100a2 <UART_WaitOnFlagUntilTimeout>
 8010070:	4603      	mov	r3, r0
 8010072:	2b00      	cmp	r3, #0
 8010074:	d001      	beq.n	801007a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010076:	2303      	movs	r3, #3
 8010078:	e00f      	b.n	801009a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	2220      	movs	r2, #32
 801007e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	2220      	movs	r2, #32
 8010086:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	2200      	movs	r2, #0
 801008e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	2200      	movs	r2, #0
 8010094:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010098:	2300      	movs	r3, #0
}
 801009a:	4618      	mov	r0, r3
 801009c:	3710      	adds	r7, #16
 801009e:	46bd      	mov	sp, r7
 80100a0:	bd80      	pop	{r7, pc}

080100a2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80100a2:	b580      	push	{r7, lr}
 80100a4:	b09c      	sub	sp, #112	; 0x70
 80100a6:	af00      	add	r7, sp, #0
 80100a8:	60f8      	str	r0, [r7, #12]
 80100aa:	60b9      	str	r1, [r7, #8]
 80100ac:	603b      	str	r3, [r7, #0]
 80100ae:	4613      	mov	r3, r2
 80100b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80100b2:	e0a9      	b.n	8010208 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80100b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80100b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100ba:	f000 80a5 	beq.w	8010208 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80100be:	f7f6 fed5 	bl	8006e6c <HAL_GetTick>
 80100c2:	4602      	mov	r2, r0
 80100c4:	683b      	ldr	r3, [r7, #0]
 80100c6:	1ad3      	subs	r3, r2, r3
 80100c8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80100ca:	429a      	cmp	r2, r3
 80100cc:	d302      	bcc.n	80100d4 <UART_WaitOnFlagUntilTimeout+0x32>
 80100ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d140      	bne.n	8010156 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80100d4:	68fb      	ldr	r3, [r7, #12]
 80100d6:	681b      	ldr	r3, [r3, #0]
 80100d8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80100dc:	e853 3f00 	ldrex	r3, [r3]
 80100e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80100e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80100e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80100e8:	667b      	str	r3, [r7, #100]	; 0x64
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	681b      	ldr	r3, [r3, #0]
 80100ee:	461a      	mov	r2, r3
 80100f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80100f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80100f4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100f6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80100f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80100fa:	e841 2300 	strex	r3, r2, [r1]
 80100fe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8010100:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010102:	2b00      	cmp	r3, #0
 8010104:	d1e6      	bne.n	80100d4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010106:	68fb      	ldr	r3, [r7, #12]
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	3308      	adds	r3, #8
 801010c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801010e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010110:	e853 3f00 	ldrex	r3, [r3]
 8010114:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010118:	f023 0301 	bic.w	r3, r3, #1
 801011c:	663b      	str	r3, [r7, #96]	; 0x60
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	3308      	adds	r3, #8
 8010124:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010126:	64ba      	str	r2, [r7, #72]	; 0x48
 8010128:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801012a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801012c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801012e:	e841 2300 	strex	r3, r2, [r1]
 8010132:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8010134:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010136:	2b00      	cmp	r3, #0
 8010138:	d1e5      	bne.n	8010106 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	2220      	movs	r2, #32
 801013e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	2220      	movs	r2, #32
 8010146:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	2200      	movs	r2, #0
 801014e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8010152:	2303      	movs	r3, #3
 8010154:	e069      	b.n	801022a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8010156:	68fb      	ldr	r3, [r7, #12]
 8010158:	681b      	ldr	r3, [r3, #0]
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	f003 0304 	and.w	r3, r3, #4
 8010160:	2b00      	cmp	r3, #0
 8010162:	d051      	beq.n	8010208 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	69db      	ldr	r3, [r3, #28]
 801016a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801016e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010172:	d149      	bne.n	8010208 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801017c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	681b      	ldr	r3, [r3, #0]
 8010182:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010186:	e853 3f00 	ldrex	r3, [r3]
 801018a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801018c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801018e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8010192:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010194:	68fb      	ldr	r3, [r7, #12]
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	461a      	mov	r2, r3
 801019a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801019c:	637b      	str	r3, [r7, #52]	; 0x34
 801019e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80101a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80101a4:	e841 2300 	strex	r3, r2, [r1]
 80101a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80101aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d1e6      	bne.n	801017e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	3308      	adds	r3, #8
 80101b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101b8:	697b      	ldr	r3, [r7, #20]
 80101ba:	e853 3f00 	ldrex	r3, [r3]
 80101be:	613b      	str	r3, [r7, #16]
   return(result);
 80101c0:	693b      	ldr	r3, [r7, #16]
 80101c2:	f023 0301 	bic.w	r3, r3, #1
 80101c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	3308      	adds	r3, #8
 80101ce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80101d0:	623a      	str	r2, [r7, #32]
 80101d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101d4:	69f9      	ldr	r1, [r7, #28]
 80101d6:	6a3a      	ldr	r2, [r7, #32]
 80101d8:	e841 2300 	strex	r3, r2, [r1]
 80101dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80101de:	69bb      	ldr	r3, [r7, #24]
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d1e5      	bne.n	80101b0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	2220      	movs	r2, #32
 80101e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	2220      	movs	r2, #32
 80101f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80101f4:	68fb      	ldr	r3, [r7, #12]
 80101f6:	2220      	movs	r2, #32
 80101f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80101fc:	68fb      	ldr	r3, [r7, #12]
 80101fe:	2200      	movs	r2, #0
 8010200:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8010204:	2303      	movs	r3, #3
 8010206:	e010      	b.n	801022a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010208:	68fb      	ldr	r3, [r7, #12]
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	69da      	ldr	r2, [r3, #28]
 801020e:	68bb      	ldr	r3, [r7, #8]
 8010210:	4013      	ands	r3, r2
 8010212:	68ba      	ldr	r2, [r7, #8]
 8010214:	429a      	cmp	r2, r3
 8010216:	bf0c      	ite	eq
 8010218:	2301      	moveq	r3, #1
 801021a:	2300      	movne	r3, #0
 801021c:	b2db      	uxtb	r3, r3
 801021e:	461a      	mov	r2, r3
 8010220:	79fb      	ldrb	r3, [r7, #7]
 8010222:	429a      	cmp	r2, r3
 8010224:	f43f af46 	beq.w	80100b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010228:	2300      	movs	r3, #0
}
 801022a:	4618      	mov	r0, r3
 801022c:	3770      	adds	r7, #112	; 0x70
 801022e:	46bd      	mov	sp, r7
 8010230:	bd80      	pop	{r7, pc}
	...

08010234 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010234:	b580      	push	{r7, lr}
 8010236:	b096      	sub	sp, #88	; 0x58
 8010238:	af00      	add	r7, sp, #0
 801023a:	60f8      	str	r0, [r7, #12]
 801023c:	60b9      	str	r1, [r7, #8]
 801023e:	4613      	mov	r3, r2
 8010240:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	68ba      	ldr	r2, [r7, #8]
 8010246:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8010248:	68fb      	ldr	r3, [r7, #12]
 801024a:	88fa      	ldrh	r2, [r7, #6]
 801024c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010250:	68fb      	ldr	r3, [r7, #12]
 8010252:	2200      	movs	r2, #0
 8010254:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	2222      	movs	r2, #34	; 0x22
 801025c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 8010260:	68fb      	ldr	r3, [r7, #12]
 8010262:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010264:	2b00      	cmp	r3, #0
 8010266:	d02c      	beq.n	80102c2 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8010268:	68fb      	ldr	r3, [r7, #12]
 801026a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801026c:	4a42      	ldr	r2, [pc, #264]	; (8010378 <UART_Start_Receive_DMA+0x144>)
 801026e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010274:	4a41      	ldr	r2, [pc, #260]	; (801037c <UART_Start_Receive_DMA+0x148>)
 8010276:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8010278:	68fb      	ldr	r3, [r7, #12]
 801027a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801027c:	4a40      	ldr	r2, [pc, #256]	; (8010380 <UART_Start_Receive_DMA+0x14c>)
 801027e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010284:	2200      	movs	r2, #0
 8010286:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8010288:	68fb      	ldr	r3, [r7, #12]
 801028a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	681b      	ldr	r3, [r3, #0]
 8010290:	3324      	adds	r3, #36	; 0x24
 8010292:	4619      	mov	r1, r3
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010298:	461a      	mov	r2, r3
 801029a:	88fb      	ldrh	r3, [r7, #6]
 801029c:	f7f7 fc44 	bl	8007b28 <HAL_DMA_Start_IT>
 80102a0:	4603      	mov	r3, r0
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d00d      	beq.n	80102c2 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	2210      	movs	r2, #16
 80102aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	2200      	movs	r2, #0
 80102b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80102b6:	68fb      	ldr	r3, [r7, #12]
 80102b8:	2220      	movs	r2, #32
 80102ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 80102be:	2301      	movs	r3, #1
 80102c0:	e055      	b.n	801036e <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	2200      	movs	r2, #0
 80102c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80102ca:	68fb      	ldr	r3, [r7, #12]
 80102cc:	691b      	ldr	r3, [r3, #16]
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d018      	beq.n	8010304 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80102da:	e853 3f00 	ldrex	r3, [r3]
 80102de:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80102e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80102e6:	657b      	str	r3, [r7, #84]	; 0x54
 80102e8:	68fb      	ldr	r3, [r7, #12]
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	461a      	mov	r2, r3
 80102ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80102f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80102f2:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102f4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80102f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80102f8:	e841 2300 	strex	r3, r2, [r1]
 80102fc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80102fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010300:	2b00      	cmp	r3, #0
 8010302:	d1e6      	bne.n	80102d2 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	681b      	ldr	r3, [r3, #0]
 8010308:	3308      	adds	r3, #8
 801030a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801030c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801030e:	e853 3f00 	ldrex	r3, [r3]
 8010312:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010316:	f043 0301 	orr.w	r3, r3, #1
 801031a:	653b      	str	r3, [r7, #80]	; 0x50
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	3308      	adds	r3, #8
 8010322:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010324:	637a      	str	r2, [r7, #52]	; 0x34
 8010326:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010328:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801032a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801032c:	e841 2300 	strex	r3, r2, [r1]
 8010330:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8010332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010334:	2b00      	cmp	r3, #0
 8010336:	d1e5      	bne.n	8010304 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	3308      	adds	r3, #8
 801033e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010340:	697b      	ldr	r3, [r7, #20]
 8010342:	e853 3f00 	ldrex	r3, [r3]
 8010346:	613b      	str	r3, [r7, #16]
   return(result);
 8010348:	693b      	ldr	r3, [r7, #16]
 801034a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801034e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010350:	68fb      	ldr	r3, [r7, #12]
 8010352:	681b      	ldr	r3, [r3, #0]
 8010354:	3308      	adds	r3, #8
 8010356:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010358:	623a      	str	r2, [r7, #32]
 801035a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801035c:	69f9      	ldr	r1, [r7, #28]
 801035e:	6a3a      	ldr	r2, [r7, #32]
 8010360:	e841 2300 	strex	r3, r2, [r1]
 8010364:	61bb      	str	r3, [r7, #24]
   return(result);
 8010366:	69bb      	ldr	r3, [r7, #24]
 8010368:	2b00      	cmp	r3, #0
 801036a:	d1e5      	bne.n	8010338 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 801036c:	2300      	movs	r3, #0
}
 801036e:	4618      	mov	r0, r3
 8010370:	3758      	adds	r7, #88	; 0x58
 8010372:	46bd      	mov	sp, r7
 8010374:	bd80      	pop	{r7, pc}
 8010376:	bf00      	nop
 8010378:	08010587 	.word	0x08010587
 801037c:	080106a9 	.word	0x080106a9
 8010380:	080106e1 	.word	0x080106e1

08010384 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8010384:	b480      	push	{r7}
 8010386:	b08f      	sub	sp, #60	; 0x3c
 8010388:	af00      	add	r7, sp, #0
 801038a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010392:	6a3b      	ldr	r3, [r7, #32]
 8010394:	e853 3f00 	ldrex	r3, [r3]
 8010398:	61fb      	str	r3, [r7, #28]
   return(result);
 801039a:	69fb      	ldr	r3, [r7, #28]
 801039c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80103a0:	637b      	str	r3, [r7, #52]	; 0x34
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	681b      	ldr	r3, [r3, #0]
 80103a6:	461a      	mov	r2, r3
 80103a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80103ac:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80103b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80103b2:	e841 2300 	strex	r3, r2, [r1]
 80103b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80103b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d1e6      	bne.n	801038c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	681b      	ldr	r3, [r3, #0]
 80103c2:	3308      	adds	r3, #8
 80103c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103c6:	68fb      	ldr	r3, [r7, #12]
 80103c8:	e853 3f00 	ldrex	r3, [r3]
 80103cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80103ce:	68bb      	ldr	r3, [r7, #8]
 80103d0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80103d4:	633b      	str	r3, [r7, #48]	; 0x30
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	3308      	adds	r3, #8
 80103dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80103de:	61ba      	str	r2, [r7, #24]
 80103e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103e2:	6979      	ldr	r1, [r7, #20]
 80103e4:	69ba      	ldr	r2, [r7, #24]
 80103e6:	e841 2300 	strex	r3, r2, [r1]
 80103ea:	613b      	str	r3, [r7, #16]
   return(result);
 80103ec:	693b      	ldr	r3, [r7, #16]
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d1e5      	bne.n	80103be <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	2220      	movs	r2, #32
 80103f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 80103fa:	bf00      	nop
 80103fc:	373c      	adds	r7, #60	; 0x3c
 80103fe:	46bd      	mov	sp, r7
 8010400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010404:	4770      	bx	lr
	...

08010408 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010408:	b480      	push	{r7}
 801040a:	b095      	sub	sp, #84	; 0x54
 801040c:	af00      	add	r7, sp, #0
 801040e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	681b      	ldr	r3, [r3, #0]
 8010414:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010418:	e853 3f00 	ldrex	r3, [r3]
 801041c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801041e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010420:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010424:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	461a      	mov	r2, r3
 801042c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801042e:	643b      	str	r3, [r7, #64]	; 0x40
 8010430:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010432:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010434:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010436:	e841 2300 	strex	r3, r2, [r1]
 801043a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801043c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801043e:	2b00      	cmp	r3, #0
 8010440:	d1e6      	bne.n	8010410 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	681b      	ldr	r3, [r3, #0]
 8010446:	3308      	adds	r3, #8
 8010448:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801044a:	6a3b      	ldr	r3, [r7, #32]
 801044c:	e853 3f00 	ldrex	r3, [r3]
 8010450:	61fb      	str	r3, [r7, #28]
   return(result);
 8010452:	69fa      	ldr	r2, [r7, #28]
 8010454:	4b1e      	ldr	r3, [pc, #120]	; (80104d0 <UART_EndRxTransfer+0xc8>)
 8010456:	4013      	ands	r3, r2
 8010458:	64bb      	str	r3, [r7, #72]	; 0x48
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	681b      	ldr	r3, [r3, #0]
 801045e:	3308      	adds	r3, #8
 8010460:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010462:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010464:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010466:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010468:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801046a:	e841 2300 	strex	r3, r2, [r1]
 801046e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010472:	2b00      	cmp	r3, #0
 8010474:	d1e5      	bne.n	8010442 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801047a:	2b01      	cmp	r3, #1
 801047c:	d118      	bne.n	80104b0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	681b      	ldr	r3, [r3, #0]
 8010482:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010484:	68fb      	ldr	r3, [r7, #12]
 8010486:	e853 3f00 	ldrex	r3, [r3]
 801048a:	60bb      	str	r3, [r7, #8]
   return(result);
 801048c:	68bb      	ldr	r3, [r7, #8]
 801048e:	f023 0310 	bic.w	r3, r3, #16
 8010492:	647b      	str	r3, [r7, #68]	; 0x44
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	461a      	mov	r2, r3
 801049a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801049c:	61bb      	str	r3, [r7, #24]
 801049e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104a0:	6979      	ldr	r1, [r7, #20]
 80104a2:	69ba      	ldr	r2, [r7, #24]
 80104a4:	e841 2300 	strex	r3, r2, [r1]
 80104a8:	613b      	str	r3, [r7, #16]
   return(result);
 80104aa:	693b      	ldr	r3, [r7, #16]
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d1e6      	bne.n	801047e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	2220      	movs	r2, #32
 80104b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	2200      	movs	r2, #0
 80104bc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	2200      	movs	r2, #0
 80104c2:	671a      	str	r2, [r3, #112]	; 0x70
}
 80104c4:	bf00      	nop
 80104c6:	3754      	adds	r7, #84	; 0x54
 80104c8:	46bd      	mov	sp, r7
 80104ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ce:	4770      	bx	lr
 80104d0:	effffffe 	.word	0xeffffffe

080104d4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80104d4:	b580      	push	{r7, lr}
 80104d6:	b090      	sub	sp, #64	; 0x40
 80104d8:	af00      	add	r7, sp, #0
 80104da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80104e0:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	69db      	ldr	r3, [r3, #28]
 80104e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80104ea:	d037      	beq.n	801055c <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 80104ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80104ee:	2200      	movs	r2, #0
 80104f0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80104f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80104f6:	681b      	ldr	r3, [r3, #0]
 80104f8:	3308      	adds	r3, #8
 80104fa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104fe:	e853 3f00 	ldrex	r3, [r3]
 8010502:	623b      	str	r3, [r7, #32]
   return(result);
 8010504:	6a3b      	ldr	r3, [r7, #32]
 8010506:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801050a:	63bb      	str	r3, [r7, #56]	; 0x38
 801050c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	3308      	adds	r3, #8
 8010512:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010514:	633a      	str	r2, [r7, #48]	; 0x30
 8010516:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010518:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801051a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801051c:	e841 2300 	strex	r3, r2, [r1]
 8010520:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010524:	2b00      	cmp	r3, #0
 8010526:	d1e5      	bne.n	80104f4 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010528:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801052e:	693b      	ldr	r3, [r7, #16]
 8010530:	e853 3f00 	ldrex	r3, [r3]
 8010534:	60fb      	str	r3, [r7, #12]
   return(result);
 8010536:	68fb      	ldr	r3, [r7, #12]
 8010538:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801053c:	637b      	str	r3, [r7, #52]	; 0x34
 801053e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010540:	681b      	ldr	r3, [r3, #0]
 8010542:	461a      	mov	r2, r3
 8010544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010546:	61fb      	str	r3, [r7, #28]
 8010548:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801054a:	69b9      	ldr	r1, [r7, #24]
 801054c:	69fa      	ldr	r2, [r7, #28]
 801054e:	e841 2300 	strex	r3, r2, [r1]
 8010552:	617b      	str	r3, [r7, #20]
   return(result);
 8010554:	697b      	ldr	r3, [r7, #20]
 8010556:	2b00      	cmp	r3, #0
 8010558:	d1e6      	bne.n	8010528 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801055a:	e002      	b.n	8010562 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 801055c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801055e:	f7f3 fcf7 	bl	8003f50 <HAL_UART_TxCpltCallback>
}
 8010562:	bf00      	nop
 8010564:	3740      	adds	r7, #64	; 0x40
 8010566:	46bd      	mov	sp, r7
 8010568:	bd80      	pop	{r7, pc}

0801056a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801056a:	b580      	push	{r7, lr}
 801056c:	b084      	sub	sp, #16
 801056e:	af00      	add	r7, sp, #0
 8010570:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010576:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8010578:	68f8      	ldr	r0, [r7, #12]
 801057a:	f7fe fe0f 	bl	800f19c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801057e:	bf00      	nop
 8010580:	3710      	adds	r7, #16
 8010582:	46bd      	mov	sp, r7
 8010584:	bd80      	pop	{r7, pc}

08010586 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010586:	b580      	push	{r7, lr}
 8010588:	b09c      	sub	sp, #112	; 0x70
 801058a:	af00      	add	r7, sp, #0
 801058c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010592:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	69db      	ldr	r3, [r3, #28]
 8010598:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801059c:	d071      	beq.n	8010682 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 801059e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80105a0:	2200      	movs	r2, #0
 80105a2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80105a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80105a8:	681b      	ldr	r3, [r3, #0]
 80105aa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80105ae:	e853 3f00 	ldrex	r3, [r3]
 80105b2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80105b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80105b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80105ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80105bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	461a      	mov	r2, r3
 80105c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80105c4:	65bb      	str	r3, [r7, #88]	; 0x58
 80105c6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80105ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80105cc:	e841 2300 	strex	r3, r2, [r1]
 80105d0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80105d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d1e6      	bne.n	80105a6 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80105d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	3308      	adds	r3, #8
 80105de:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105e2:	e853 3f00 	ldrex	r3, [r3]
 80105e6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80105e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105ea:	f023 0301 	bic.w	r3, r3, #1
 80105ee:	667b      	str	r3, [r7, #100]	; 0x64
 80105f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	3308      	adds	r3, #8
 80105f6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80105f8:	647a      	str	r2, [r7, #68]	; 0x44
 80105fa:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105fc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80105fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010600:	e841 2300 	strex	r3, r2, [r1]
 8010604:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010606:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010608:	2b00      	cmp	r3, #0
 801060a:	d1e5      	bne.n	80105d8 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801060c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	3308      	adds	r3, #8
 8010612:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010616:	e853 3f00 	ldrex	r3, [r3]
 801061a:	623b      	str	r3, [r7, #32]
   return(result);
 801061c:	6a3b      	ldr	r3, [r7, #32]
 801061e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010622:	663b      	str	r3, [r7, #96]	; 0x60
 8010624:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	3308      	adds	r3, #8
 801062a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801062c:	633a      	str	r2, [r7, #48]	; 0x30
 801062e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010630:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010632:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010634:	e841 2300 	strex	r3, r2, [r1]
 8010638:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801063a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801063c:	2b00      	cmp	r3, #0
 801063e:	d1e5      	bne.n	801060c <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010640:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010642:	2220      	movs	r2, #32
 8010644:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010648:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801064a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801064c:	2b01      	cmp	r3, #1
 801064e:	d118      	bne.n	8010682 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010650:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010652:	681b      	ldr	r3, [r3, #0]
 8010654:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010656:	693b      	ldr	r3, [r7, #16]
 8010658:	e853 3f00 	ldrex	r3, [r3]
 801065c:	60fb      	str	r3, [r7, #12]
   return(result);
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	f023 0310 	bic.w	r3, r3, #16
 8010664:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010666:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	461a      	mov	r2, r3
 801066c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801066e:	61fb      	str	r3, [r7, #28]
 8010670:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010672:	69b9      	ldr	r1, [r7, #24]
 8010674:	69fa      	ldr	r2, [r7, #28]
 8010676:	e841 2300 	strex	r3, r2, [r1]
 801067a:	617b      	str	r3, [r7, #20]
   return(result);
 801067c:	697b      	ldr	r3, [r7, #20]
 801067e:	2b00      	cmp	r3, #0
 8010680:	d1e6      	bne.n	8010650 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010682:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010684:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010686:	2b01      	cmp	r3, #1
 8010688:	d107      	bne.n	801069a <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801068a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801068c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010690:	4619      	mov	r1, r3
 8010692:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8010694:	f7fe fda0 	bl	800f1d8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010698:	e002      	b.n	80106a0 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 801069a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801069c:	f7fe fd88 	bl	800f1b0 <HAL_UART_RxCpltCallback>
}
 80106a0:	bf00      	nop
 80106a2:	3770      	adds	r7, #112	; 0x70
 80106a4:	46bd      	mov	sp, r7
 80106a6:	bd80      	pop	{r7, pc}

080106a8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80106a8:	b580      	push	{r7, lr}
 80106aa:	b084      	sub	sp, #16
 80106ac:	af00      	add	r7, sp, #0
 80106ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80106b4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80106ba:	2b01      	cmp	r3, #1
 80106bc:	d109      	bne.n	80106d2 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80106c4:	085b      	lsrs	r3, r3, #1
 80106c6:	b29b      	uxth	r3, r3
 80106c8:	4619      	mov	r1, r3
 80106ca:	68f8      	ldr	r0, [r7, #12]
 80106cc:	f7fe fd84 	bl	800f1d8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80106d0:	e002      	b.n	80106d8 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 80106d2:	68f8      	ldr	r0, [r7, #12]
 80106d4:	f7fe fd76 	bl	800f1c4 <HAL_UART_RxHalfCpltCallback>
}
 80106d8:	bf00      	nop
 80106da:	3710      	adds	r7, #16
 80106dc:	46bd      	mov	sp, r7
 80106de:	bd80      	pop	{r7, pc}

080106e0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80106e0:	b580      	push	{r7, lr}
 80106e2:	b086      	sub	sp, #24
 80106e4:	af00      	add	r7, sp, #0
 80106e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80106ec:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80106ee:	697b      	ldr	r3, [r7, #20]
 80106f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80106f4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80106f6:	697b      	ldr	r3, [r7, #20]
 80106f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80106fc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80106fe:	697b      	ldr	r3, [r7, #20]
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	689b      	ldr	r3, [r3, #8]
 8010704:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010708:	2b80      	cmp	r3, #128	; 0x80
 801070a:	d109      	bne.n	8010720 <UART_DMAError+0x40>
 801070c:	693b      	ldr	r3, [r7, #16]
 801070e:	2b21      	cmp	r3, #33	; 0x21
 8010710:	d106      	bne.n	8010720 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8010712:	697b      	ldr	r3, [r7, #20]
 8010714:	2200      	movs	r2, #0
 8010716:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 801071a:	6978      	ldr	r0, [r7, #20]
 801071c:	f7ff fe32 	bl	8010384 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8010720:	697b      	ldr	r3, [r7, #20]
 8010722:	681b      	ldr	r3, [r3, #0]
 8010724:	689b      	ldr	r3, [r3, #8]
 8010726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801072a:	2b40      	cmp	r3, #64	; 0x40
 801072c:	d109      	bne.n	8010742 <UART_DMAError+0x62>
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	2b22      	cmp	r3, #34	; 0x22
 8010732:	d106      	bne.n	8010742 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8010734:	697b      	ldr	r3, [r7, #20]
 8010736:	2200      	movs	r2, #0
 8010738:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 801073c:	6978      	ldr	r0, [r7, #20]
 801073e:	f7ff fe63 	bl	8010408 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8010742:	697b      	ldr	r3, [r7, #20]
 8010744:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010748:	f043 0210 	orr.w	r2, r3, #16
 801074c:	697b      	ldr	r3, [r7, #20]
 801074e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010752:	6978      	ldr	r0, [r7, #20]
 8010754:	f7f3 fc0e 	bl	8003f74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010758:	bf00      	nop
 801075a:	3718      	adds	r7, #24
 801075c:	46bd      	mov	sp, r7
 801075e:	bd80      	pop	{r7, pc}

08010760 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010760:	b580      	push	{r7, lr}
 8010762:	b084      	sub	sp, #16
 8010764:	af00      	add	r7, sp, #0
 8010766:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801076c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801076e:	68fb      	ldr	r3, [r7, #12]
 8010770:	2200      	movs	r2, #0
 8010772:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8010776:	68fb      	ldr	r3, [r7, #12]
 8010778:	2200      	movs	r2, #0
 801077a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801077e:	68f8      	ldr	r0, [r7, #12]
 8010780:	f7f3 fbf8 	bl	8003f74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010784:	bf00      	nop
 8010786:	3710      	adds	r7, #16
 8010788:	46bd      	mov	sp, r7
 801078a:	bd80      	pop	{r7, pc}

0801078c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801078c:	b580      	push	{r7, lr}
 801078e:	b088      	sub	sp, #32
 8010790:	af00      	add	r7, sp, #0
 8010792:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	681b      	ldr	r3, [r3, #0]
 8010798:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801079a:	68fb      	ldr	r3, [r7, #12]
 801079c:	e853 3f00 	ldrex	r3, [r3]
 80107a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80107a2:	68bb      	ldr	r3, [r7, #8]
 80107a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80107a8:	61fb      	str	r3, [r7, #28]
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	681b      	ldr	r3, [r3, #0]
 80107ae:	461a      	mov	r2, r3
 80107b0:	69fb      	ldr	r3, [r7, #28]
 80107b2:	61bb      	str	r3, [r7, #24]
 80107b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107b6:	6979      	ldr	r1, [r7, #20]
 80107b8:	69ba      	ldr	r2, [r7, #24]
 80107ba:	e841 2300 	strex	r3, r2, [r1]
 80107be:	613b      	str	r3, [r7, #16]
   return(result);
 80107c0:	693b      	ldr	r3, [r7, #16]
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	d1e6      	bne.n	8010794 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	2220      	movs	r2, #32
 80107ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	2200      	movs	r2, #0
 80107d2:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80107d4:	6878      	ldr	r0, [r7, #4]
 80107d6:	f7f3 fbbb 	bl	8003f50 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80107da:	bf00      	nop
 80107dc:	3720      	adds	r7, #32
 80107de:	46bd      	mov	sp, r7
 80107e0:	bd80      	pop	{r7, pc}

080107e2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80107e2:	b480      	push	{r7}
 80107e4:	b083      	sub	sp, #12
 80107e6:	af00      	add	r7, sp, #0
 80107e8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80107ea:	bf00      	nop
 80107ec:	370c      	adds	r7, #12
 80107ee:	46bd      	mov	sp, r7
 80107f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107f4:	4770      	bx	lr

080107f6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80107f6:	b480      	push	{r7}
 80107f8:	b083      	sub	sp, #12
 80107fa:	af00      	add	r7, sp, #0
 80107fc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80107fe:	bf00      	nop
 8010800:	370c      	adds	r7, #12
 8010802:	46bd      	mov	sp, r7
 8010804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010808:	4770      	bx	lr

0801080a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801080a:	b480      	push	{r7}
 801080c:	b083      	sub	sp, #12
 801080e:	af00      	add	r7, sp, #0
 8010810:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8010812:	bf00      	nop
 8010814:	370c      	adds	r7, #12
 8010816:	46bd      	mov	sp, r7
 8010818:	f85d 7b04 	ldr.w	r7, [sp], #4
 801081c:	4770      	bx	lr

0801081e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801081e:	b480      	push	{r7}
 8010820:	b085      	sub	sp, #20
 8010822:	af00      	add	r7, sp, #0
 8010824:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801082c:	2b01      	cmp	r3, #1
 801082e:	d101      	bne.n	8010834 <HAL_UARTEx_DisableFifoMode+0x16>
 8010830:	2302      	movs	r3, #2
 8010832:	e027      	b.n	8010884 <HAL_UARTEx_DisableFifoMode+0x66>
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	2201      	movs	r2, #1
 8010838:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	2224      	movs	r2, #36	; 0x24
 8010840:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	681b      	ldr	r3, [r3, #0]
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	681a      	ldr	r2, [r3, #0]
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	f022 0201 	bic.w	r2, r2, #1
 801085a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801085c:	68fb      	ldr	r3, [r7, #12]
 801085e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8010862:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	2200      	movs	r2, #0
 8010868:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	68fa      	ldr	r2, [r7, #12]
 8010870:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	2220      	movs	r2, #32
 8010876:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	2200      	movs	r2, #0
 801087e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010882:	2300      	movs	r3, #0
}
 8010884:	4618      	mov	r0, r3
 8010886:	3714      	adds	r7, #20
 8010888:	46bd      	mov	sp, r7
 801088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801088e:	4770      	bx	lr

08010890 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010890:	b580      	push	{r7, lr}
 8010892:	b084      	sub	sp, #16
 8010894:	af00      	add	r7, sp, #0
 8010896:	6078      	str	r0, [r7, #4]
 8010898:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80108a0:	2b01      	cmp	r3, #1
 80108a2:	d101      	bne.n	80108a8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80108a4:	2302      	movs	r3, #2
 80108a6:	e02d      	b.n	8010904 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	2201      	movs	r2, #1
 80108ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	2224      	movs	r2, #36	; 0x24
 80108b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	681a      	ldr	r2, [r3, #0]
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	681b      	ldr	r3, [r3, #0]
 80108ca:	f022 0201 	bic.w	r2, r2, #1
 80108ce:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	681b      	ldr	r3, [r3, #0]
 80108d4:	689b      	ldr	r3, [r3, #8]
 80108d6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	681b      	ldr	r3, [r3, #0]
 80108de:	683a      	ldr	r2, [r7, #0]
 80108e0:	430a      	orrs	r2, r1
 80108e2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80108e4:	6878      	ldr	r0, [r7, #4]
 80108e6:	f000 f84f 	bl	8010988 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	68fa      	ldr	r2, [r7, #12]
 80108f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	2220      	movs	r2, #32
 80108f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	2200      	movs	r2, #0
 80108fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010902:	2300      	movs	r3, #0
}
 8010904:	4618      	mov	r0, r3
 8010906:	3710      	adds	r7, #16
 8010908:	46bd      	mov	sp, r7
 801090a:	bd80      	pop	{r7, pc}

0801090c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801090c:	b580      	push	{r7, lr}
 801090e:	b084      	sub	sp, #16
 8010910:	af00      	add	r7, sp, #0
 8010912:	6078      	str	r0, [r7, #4]
 8010914:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801091c:	2b01      	cmp	r3, #1
 801091e:	d101      	bne.n	8010924 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010920:	2302      	movs	r3, #2
 8010922:	e02d      	b.n	8010980 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	2201      	movs	r2, #1
 8010928:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	2224      	movs	r2, #36	; 0x24
 8010930:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	681a      	ldr	r2, [r3, #0]
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	681b      	ldr	r3, [r3, #0]
 8010946:	f022 0201 	bic.w	r2, r2, #1
 801094a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	689b      	ldr	r3, [r3, #8]
 8010952:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	681b      	ldr	r3, [r3, #0]
 801095a:	683a      	ldr	r2, [r7, #0]
 801095c:	430a      	orrs	r2, r1
 801095e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010960:	6878      	ldr	r0, [r7, #4]
 8010962:	f000 f811 	bl	8010988 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	681b      	ldr	r3, [r3, #0]
 801096a:	68fa      	ldr	r2, [r7, #12]
 801096c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	2220      	movs	r2, #32
 8010972:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	2200      	movs	r2, #0
 801097a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801097e:	2300      	movs	r3, #0
}
 8010980:	4618      	mov	r0, r3
 8010982:	3710      	adds	r7, #16
 8010984:	46bd      	mov	sp, r7
 8010986:	bd80      	pop	{r7, pc}

08010988 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010988:	b480      	push	{r7}
 801098a:	b085      	sub	sp, #20
 801098c:	af00      	add	r7, sp, #0
 801098e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010994:	2b00      	cmp	r3, #0
 8010996:	d108      	bne.n	80109aa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	2201      	movs	r2, #1
 801099c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	2201      	movs	r2, #1
 80109a4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80109a8:	e031      	b.n	8010a0e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80109aa:	2310      	movs	r3, #16
 80109ac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80109ae:	2310      	movs	r3, #16
 80109b0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	689b      	ldr	r3, [r3, #8]
 80109b8:	0e5b      	lsrs	r3, r3, #25
 80109ba:	b2db      	uxtb	r3, r3
 80109bc:	f003 0307 	and.w	r3, r3, #7
 80109c0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	681b      	ldr	r3, [r3, #0]
 80109c6:	689b      	ldr	r3, [r3, #8]
 80109c8:	0f5b      	lsrs	r3, r3, #29
 80109ca:	b2db      	uxtb	r3, r3
 80109cc:	f003 0307 	and.w	r3, r3, #7
 80109d0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80109d2:	7bbb      	ldrb	r3, [r7, #14]
 80109d4:	7b3a      	ldrb	r2, [r7, #12]
 80109d6:	4911      	ldr	r1, [pc, #68]	; (8010a1c <UARTEx_SetNbDataToProcess+0x94>)
 80109d8:	5c8a      	ldrb	r2, [r1, r2]
 80109da:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80109de:	7b3a      	ldrb	r2, [r7, #12]
 80109e0:	490f      	ldr	r1, [pc, #60]	; (8010a20 <UARTEx_SetNbDataToProcess+0x98>)
 80109e2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80109e4:	fb93 f3f2 	sdiv	r3, r3, r2
 80109e8:	b29a      	uxth	r2, r3
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80109f0:	7bfb      	ldrb	r3, [r7, #15]
 80109f2:	7b7a      	ldrb	r2, [r7, #13]
 80109f4:	4909      	ldr	r1, [pc, #36]	; (8010a1c <UARTEx_SetNbDataToProcess+0x94>)
 80109f6:	5c8a      	ldrb	r2, [r1, r2]
 80109f8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80109fc:	7b7a      	ldrb	r2, [r7, #13]
 80109fe:	4908      	ldr	r1, [pc, #32]	; (8010a20 <UARTEx_SetNbDataToProcess+0x98>)
 8010a00:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010a02:	fb93 f3f2 	sdiv	r3, r3, r2
 8010a06:	b29a      	uxth	r2, r3
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8010a0e:	bf00      	nop
 8010a10:	3714      	adds	r7, #20
 8010a12:	46bd      	mov	sp, r7
 8010a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a18:	4770      	bx	lr
 8010a1a:	bf00      	nop
 8010a1c:	08011c88 	.word	0x08011c88
 8010a20:	08011c90 	.word	0x08011c90

08010a24 <__cxa_pure_virtual>:
 8010a24:	b508      	push	{r3, lr}
 8010a26:	f000 f80d 	bl	8010a44 <_ZSt9terminatev>

08010a2a <_ZN10__cxxabiv111__terminateEPFvvE>:
 8010a2a:	b508      	push	{r3, lr}
 8010a2c:	4780      	blx	r0
 8010a2e:	f000 fd93 	bl	8011558 <abort>
	...

08010a34 <_ZSt13get_terminatev>:
 8010a34:	4b02      	ldr	r3, [pc, #8]	; (8010a40 <_ZSt13get_terminatev+0xc>)
 8010a36:	6818      	ldr	r0, [r3, #0]
 8010a38:	f3bf 8f5b 	dmb	ish
 8010a3c:	4770      	bx	lr
 8010a3e:	bf00      	nop
 8010a40:	24000014 	.word	0x24000014

08010a44 <_ZSt9terminatev>:
 8010a44:	b508      	push	{r3, lr}
 8010a46:	f7ff fff5 	bl	8010a34 <_ZSt13get_terminatev>
 8010a4a:	f7ff ffee 	bl	8010a2a <_ZN10__cxxabiv111__terminateEPFvvE>

08010a4e <checkint>:
 8010a4e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8010a52:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8010a56:	429a      	cmp	r2, r3
 8010a58:	b570      	push	{r4, r5, r6, lr}
 8010a5a:	dd2a      	ble.n	8010ab2 <checkint+0x64>
 8010a5c:	f240 4333 	movw	r3, #1075	; 0x433
 8010a60:	429a      	cmp	r2, r3
 8010a62:	dc24      	bgt.n	8010aae <checkint+0x60>
 8010a64:	1a9b      	subs	r3, r3, r2
 8010a66:	f1a3 0620 	sub.w	r6, r3, #32
 8010a6a:	f04f 32ff 	mov.w	r2, #4294967295
 8010a6e:	fa02 f403 	lsl.w	r4, r2, r3
 8010a72:	fa02 f606 	lsl.w	r6, r2, r6
 8010a76:	f1c3 0520 	rsb	r5, r3, #32
 8010a7a:	fa22 f505 	lsr.w	r5, r2, r5
 8010a7e:	4334      	orrs	r4, r6
 8010a80:	432c      	orrs	r4, r5
 8010a82:	409a      	lsls	r2, r3
 8010a84:	ea20 0202 	bic.w	r2, r0, r2
 8010a88:	ea21 0404 	bic.w	r4, r1, r4
 8010a8c:	4322      	orrs	r2, r4
 8010a8e:	f1a3 0420 	sub.w	r4, r3, #32
 8010a92:	f1c3 0220 	rsb	r2, r3, #32
 8010a96:	d10c      	bne.n	8010ab2 <checkint+0x64>
 8010a98:	40d8      	lsrs	r0, r3
 8010a9a:	fa01 f302 	lsl.w	r3, r1, r2
 8010a9e:	4318      	orrs	r0, r3
 8010aa0:	40e1      	lsrs	r1, r4
 8010aa2:	4308      	orrs	r0, r1
 8010aa4:	f000 0001 	and.w	r0, r0, #1
 8010aa8:	f1d0 0002 	rsbs	r0, r0, #2
 8010aac:	bd70      	pop	{r4, r5, r6, pc}
 8010aae:	2002      	movs	r0, #2
 8010ab0:	e7fc      	b.n	8010aac <checkint+0x5e>
 8010ab2:	2000      	movs	r0, #0
 8010ab4:	e7fa      	b.n	8010aac <checkint+0x5e>
	...

08010ab8 <pow>:
 8010ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010abc:	ee10 4a90 	vmov	r4, s1
 8010ac0:	ed2d 8b0a 	vpush	{d8-d12}
 8010ac4:	ea4f 5a14 	mov.w	sl, r4, lsr #20
 8010ac8:	ee11 7a90 	vmov	r7, s3
 8010acc:	f10a 32ff 	add.w	r2, sl, #4294967295
 8010ad0:	f240 73fd 	movw	r3, #2045	; 0x7fd
 8010ad4:	429a      	cmp	r2, r3
 8010ad6:	ee10 6a10 	vmov	r6, s0
 8010ada:	ee11 0a10 	vmov	r0, s2
 8010ade:	b086      	sub	sp, #24
 8010ae0:	46d4      	mov	ip, sl
 8010ae2:	ea4f 5517 	mov.w	r5, r7, lsr #20
 8010ae6:	d806      	bhi.n	8010af6 <pow+0x3e>
 8010ae8:	f3c5 030a 	ubfx	r3, r5, #0, #11
 8010aec:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 8010af0:	2b7f      	cmp	r3, #127	; 0x7f
 8010af2:	f240 8156 	bls.w	8010da2 <pow+0x2ea>
 8010af6:	1802      	adds	r2, r0, r0
 8010af8:	eb47 0107 	adc.w	r1, r7, r7
 8010afc:	f06f 0e01 	mvn.w	lr, #1
 8010b00:	f112 39ff 	adds.w	r9, r2, #4294967295
 8010b04:	f141 38ff 	adc.w	r8, r1, #4294967295
 8010b08:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 8010b0c:	45ce      	cmp	lr, r9
 8010b0e:	eb73 0808 	sbcs.w	r8, r3, r8
 8010b12:	d23f      	bcs.n	8010b94 <pow+0xdc>
 8010b14:	ea52 0301 	orrs.w	r3, r2, r1
 8010b18:	f04f 0300 	mov.w	r3, #0
 8010b1c:	d10c      	bne.n	8010b38 <pow+0x80>
 8010b1e:	19b6      	adds	r6, r6, r6
 8010b20:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 8010b24:	4164      	adcs	r4, r4
 8010b26:	42b3      	cmp	r3, r6
 8010b28:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8010b2c:	41a3      	sbcs	r3, r4
 8010b2e:	f0c0 808c 	bcc.w	8010c4a <pow+0x192>
 8010b32:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8010b36:	e028      	b.n	8010b8a <pow+0xd2>
 8010b38:	4da3      	ldr	r5, [pc, #652]	; (8010dc8 <pow+0x310>)
 8010b3a:	42ac      	cmp	r4, r5
 8010b3c:	bf08      	it	eq
 8010b3e:	429e      	cmpeq	r6, r3
 8010b40:	d107      	bne.n	8010b52 <pow+0x9a>
 8010b42:	1800      	adds	r0, r0, r0
 8010b44:	f487 2700 	eor.w	r7, r7, #524288	; 0x80000
 8010b48:	417f      	adcs	r7, r7
 8010b4a:	4283      	cmp	r3, r0
 8010b4c:	4b9f      	ldr	r3, [pc, #636]	; (8010dcc <pow+0x314>)
 8010b4e:	41bb      	sbcs	r3, r7
 8010b50:	e7ed      	b.n	8010b2e <pow+0x76>
 8010b52:	19b6      	adds	r6, r6, r6
 8010b54:	489e      	ldr	r0, [pc, #632]	; (8010dd0 <pow+0x318>)
 8010b56:	4164      	adcs	r4, r4
 8010b58:	42b3      	cmp	r3, r6
 8010b5a:	eb70 0504 	sbcs.w	r5, r0, r4
 8010b5e:	d374      	bcc.n	8010c4a <pow+0x192>
 8010b60:	4281      	cmp	r1, r0
 8010b62:	bf08      	it	eq
 8010b64:	429a      	cmpeq	r2, r3
 8010b66:	d170      	bne.n	8010c4a <pow+0x192>
 8010b68:	4a9a      	ldr	r2, [pc, #616]	; (8010dd4 <pow+0x31c>)
 8010b6a:	4294      	cmp	r4, r2
 8010b6c:	bf08      	it	eq
 8010b6e:	429e      	cmpeq	r6, r3
 8010b70:	d0df      	beq.n	8010b32 <pow+0x7a>
 8010b72:	4294      	cmp	r4, r2
 8010b74:	ea6f 0707 	mvn.w	r7, r7
 8010b78:	bf34      	ite	cc
 8010b7a:	2400      	movcc	r4, #0
 8010b7c:	2401      	movcs	r4, #1
 8010b7e:	0fff      	lsrs	r7, r7, #31
 8010b80:	42bc      	cmp	r4, r7
 8010b82:	f040 81d9 	bne.w	8010f38 <pow+0x480>
 8010b86:	ee21 0b01 	vmul.f64	d0, d1, d1
 8010b8a:	b006      	add	sp, #24
 8010b8c:	ecbd 8b0a 	vpop	{d8-d12}
 8010b90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b94:	eb16 0806 	adds.w	r8, r6, r6
 8010b98:	eb44 0904 	adc.w	r9, r4, r4
 8010b9c:	f118 31ff 	adds.w	r1, r8, #4294967295
 8010ba0:	f169 0200 	sbc.w	r2, r9, #0
 8010ba4:	458e      	cmp	lr, r1
 8010ba6:	4193      	sbcs	r3, r2
 8010ba8:	d223      	bcs.n	8010bf2 <pow+0x13a>
 8010baa:	ee20 0b00 	vmul.f64	d0, d0, d0
 8010bae:	2c00      	cmp	r4, #0
 8010bb0:	da12      	bge.n	8010bd8 <pow+0x120>
 8010bb2:	4639      	mov	r1, r7
 8010bb4:	f7ff ff4b 	bl	8010a4e <checkint>
 8010bb8:	2801      	cmp	r0, #1
 8010bba:	d10d      	bne.n	8010bd8 <pow+0x120>
 8010bbc:	eeb1 0b40 	vneg.f64	d0, d0
 8010bc0:	ea58 0309 	orrs.w	r3, r8, r9
 8010bc4:	d10a      	bne.n	8010bdc <pow+0x124>
 8010bc6:	2f00      	cmp	r7, #0
 8010bc8:	dadf      	bge.n	8010b8a <pow+0xd2>
 8010bca:	b006      	add	sp, #24
 8010bcc:	ecbd 8b0a 	vpop	{d8-d12}
 8010bd0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010bd4:	f000 bc74 	b.w	80114c0 <__math_divzero>
 8010bd8:	2000      	movs	r0, #0
 8010bda:	e7f1      	b.n	8010bc0 <pow+0x108>
 8010bdc:	2f00      	cmp	r7, #0
 8010bde:	dad4      	bge.n	8010b8a <pow+0xd2>
 8010be0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8010be4:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8010be8:	ed8d 7b00 	vstr	d7, [sp]
 8010bec:	ed9d 0b00 	vldr	d0, [sp]
 8010bf0:	e7cb      	b.n	8010b8a <pow+0xd2>
 8010bf2:	2c00      	cmp	r4, #0
 8010bf4:	da2c      	bge.n	8010c50 <pow+0x198>
 8010bf6:	4639      	mov	r1, r7
 8010bf8:	f7ff ff29 	bl	8010a4e <checkint>
 8010bfc:	b930      	cbnz	r0, 8010c0c <pow+0x154>
 8010bfe:	b006      	add	sp, #24
 8010c00:	ecbd 8b0a 	vpop	{d8-d12}
 8010c04:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c08:	f000 bc72 	b.w	80114f0 <__math_invalid>
 8010c0c:	2801      	cmp	r0, #1
 8010c0e:	bf14      	ite	ne
 8010c10:	2000      	movne	r0, #0
 8010c12:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 8010c16:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8010c1a:	f3ca 0c0a 	ubfx	ip, sl, #0, #11
 8010c1e:	f3c5 020a 	ubfx	r2, r5, #0, #11
 8010c22:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 8010c26:	2b7f      	cmp	r3, #127	; 0x7f
 8010c28:	d92d      	bls.n	8010c86 <pow+0x1ce>
 8010c2a:	4b67      	ldr	r3, [pc, #412]	; (8010dc8 <pow+0x310>)
 8010c2c:	2000      	movs	r0, #0
 8010c2e:	429c      	cmp	r4, r3
 8010c30:	bf08      	it	eq
 8010c32:	4286      	cmpeq	r6, r0
 8010c34:	f43f af7d 	beq.w	8010b32 <pow+0x7a>
 8010c38:	f240 31bd 	movw	r1, #957	; 0x3bd
 8010c3c:	428a      	cmp	r2, r1
 8010c3e:	d80c      	bhi.n	8010c5a <pow+0x1a2>
 8010c40:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8010c44:	42b0      	cmp	r0, r6
 8010c46:	41a3      	sbcs	r3, r4
 8010c48:	d204      	bcs.n	8010c54 <pow+0x19c>
 8010c4a:	ee31 0b00 	vadd.f64	d0, d1, d0
 8010c4e:	e79c      	b.n	8010b8a <pow+0xd2>
 8010c50:	2000      	movs	r0, #0
 8010c52:	e7e4      	b.n	8010c1e <pow+0x166>
 8010c54:	ee30 0b41 	vsub.f64	d0, d0, d1
 8010c58:	e797      	b.n	8010b8a <pow+0xd2>
 8010c5a:	2e01      	cmp	r6, #1
 8010c5c:	eb74 0303 	sbcs.w	r3, r4, r3
 8010c60:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8010c64:	bf34      	ite	cc
 8010c66:	2301      	movcc	r3, #1
 8010c68:	2300      	movcs	r3, #0
 8010c6a:	4295      	cmp	r5, r2
 8010c6c:	bf8c      	ite	hi
 8010c6e:	2500      	movhi	r5, #0
 8010c70:	2501      	movls	r5, #1
 8010c72:	42ab      	cmp	r3, r5
 8010c74:	f000 809d 	beq.w	8010db2 <pow+0x2fa>
 8010c78:	b006      	add	sp, #24
 8010c7a:	ecbd 8b0a 	vpop	{d8-d12}
 8010c7e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c82:	f000 bc15 	b.w	80114b0 <__math_oflow>
 8010c86:	f1bc 0f00 	cmp.w	ip, #0
 8010c8a:	d10b      	bne.n	8010ca4 <pow+0x1ec>
 8010c8c:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8010dc0 <pow+0x308>
 8010c90:	ee20 7b07 	vmul.f64	d7, d0, d7
 8010c94:	ec53 2b17 	vmov	r2, r3, d7
 8010c98:	ee17 6a10 	vmov	r6, s14
 8010c9c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8010ca0:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 8010ca4:	4b4c      	ldr	r3, [pc, #304]	; (8010dd8 <pow+0x320>)
 8010ca6:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8010caa:	4423      	add	r3, r4
 8010cac:	f3c3 3246 	ubfx	r2, r3, #13, #7
 8010cb0:	1519      	asrs	r1, r3, #20
 8010cb2:	0d1b      	lsrs	r3, r3, #20
 8010cb4:	051b      	lsls	r3, r3, #20
 8010cb6:	eba4 0903 	sub.w	r9, r4, r3
 8010cba:	4b48      	ldr	r3, [pc, #288]	; (8010ddc <pow+0x324>)
 8010cbc:	ee04 1a10 	vmov	s8, r1
 8010cc0:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 8010cc4:	f1b6 0800 	subs.w	r8, r6, #0
 8010cc8:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 8010ccc:	ec49 8b15 	vmov	d5, r8, r9
 8010cd0:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 8010cd4:	eea5 6b07 	vfma.f64	d6, d5, d7
 8010cd8:	ed93 7b00 	vldr	d7, [r3]
 8010cdc:	ed93 5b02 	vldr	d5, [r3, #8]
 8010ce0:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
 8010ce4:	eea4 2b07 	vfma.f64	d2, d4, d7
 8010ce8:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 8010cec:	ee36 ab02 	vadd.f64	d10, d6, d2
 8010cf0:	ee32 2b4a 	vsub.f64	d2, d2, d10
 8010cf4:	eea4 7b05 	vfma.f64	d7, d4, d5
 8010cf8:	ed93 5b04 	vldr	d5, [r3, #16]
 8010cfc:	ee32 2b06 	vadd.f64	d2, d2, d6
 8010d00:	ee37 7b02 	vadd.f64	d7, d7, d2
 8010d04:	ee26 5b05 	vmul.f64	d5, d6, d5
 8010d08:	ed93 4b08 	vldr	d4, [r3, #32]
 8010d0c:	ee26 0b05 	vmul.f64	d0, d6, d5
 8010d10:	eeb0 9b40 	vmov.f64	d9, d0
 8010d14:	ee95 9b06 	vfnms.f64	d9, d5, d6
 8010d18:	ed93 5b06 	vldr	d5, [r3, #24]
 8010d1c:	ee3a 8b00 	vadd.f64	d8, d10, d0
 8010d20:	ee26 bb00 	vmul.f64	d11, d6, d0
 8010d24:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 8010d28:	eea6 5b04 	vfma.f64	d5, d6, d4
 8010d2c:	ee3a ab48 	vsub.f64	d10, d10, d8
 8010d30:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 8010d34:	ee37 9b09 	vadd.f64	d9, d7, d9
 8010d38:	ee3a ab00 	vadd.f64	d10, d10, d0
 8010d3c:	eea6 4b03 	vfma.f64	d4, d6, d3
 8010d40:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 8010d44:	ee39 ab0a 	vadd.f64	d10, d9, d10
 8010d48:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 8010d4c:	eea6 3b0c 	vfma.f64	d3, d6, d12
 8010d50:	eea0 4b03 	vfma.f64	d4, d0, d3
 8010d54:	eea0 5b04 	vfma.f64	d5, d0, d4
 8010d58:	eeab ab05 	vfma.f64	d10, d11, d5
 8010d5c:	ee38 6b0a 	vadd.f64	d6, d8, d10
 8010d60:	ee21 7b06 	vmul.f64	d7, d1, d6
 8010d64:	ee17 3a90 	vmov	r3, s15
 8010d68:	eeb0 5b47 	vmov.f64	d5, d7
 8010d6c:	f3c3 560a 	ubfx	r6, r3, #20, #11
 8010d70:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 8010d74:	18b2      	adds	r2, r6, r2
 8010d76:	2a3e      	cmp	r2, #62	; 0x3e
 8010d78:	ee91 5b06 	vfnms.f64	d5, d1, d6
 8010d7c:	ee38 8b46 	vsub.f64	d8, d8, d6
 8010d80:	ee38 ab0a 	vadd.f64	d10, d8, d10
 8010d84:	eea1 5b0a 	vfma.f64	d5, d1, d10
 8010d88:	d92b      	bls.n	8010de2 <pow+0x32a>
 8010d8a:	2a00      	cmp	r2, #0
 8010d8c:	da0b      	bge.n	8010da6 <pow+0x2ee>
 8010d8e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8010d92:	ee37 0b00 	vadd.f64	d0, d7, d0
 8010d96:	2800      	cmp	r0, #0
 8010d98:	f43f aef7 	beq.w	8010b8a <pow+0xd2>
 8010d9c:	eeb1 0b40 	vneg.f64	d0, d0
 8010da0:	e6f3      	b.n	8010b8a <pow+0xd2>
 8010da2:	2000      	movs	r0, #0
 8010da4:	e77e      	b.n	8010ca4 <pow+0x1ec>
 8010da6:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 8010daa:	d919      	bls.n	8010de0 <pow+0x328>
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	f6bf af63 	bge.w	8010c78 <pow+0x1c0>
 8010db2:	b006      	add	sp, #24
 8010db4:	ecbd 8b0a 	vpop	{d8-d12}
 8010db8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010dbc:	f000 bb70 	b.w	80114a0 <__math_uflow>
 8010dc0:	00000000 	.word	0x00000000
 8010dc4:	43300000 	.word	0x43300000
 8010dc8:	3ff00000 	.word	0x3ff00000
 8010dcc:	fff00000 	.word	0xfff00000
 8010dd0:	ffe00000 	.word	0xffe00000
 8010dd4:	7fe00000 	.word	0x7fe00000
 8010dd8:	c0196aab 	.word	0xc0196aab
 8010ddc:	08011c98 	.word	0x08011c98
 8010de0:	2600      	movs	r6, #0
 8010de2:	495d      	ldr	r1, [pc, #372]	; (8010f58 <pow+0x4a0>)
 8010de4:	ed91 4b02 	vldr	d4, [r1, #8]
 8010de8:	ed91 3b00 	vldr	d3, [r1]
 8010dec:	eeb0 6b44 	vmov.f64	d6, d4
 8010df0:	eea7 6b03 	vfma.f64	d6, d7, d3
 8010df4:	ee16 5a10 	vmov	r5, s12
 8010df8:	ee36 6b44 	vsub.f64	d6, d6, d4
 8010dfc:	ed91 4b04 	vldr	d4, [r1, #16]
 8010e00:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 8010e04:	eea6 7b04 	vfma.f64	d7, d6, d4
 8010e08:	eeb0 0b47 	vmov.f64	d0, d7
 8010e0c:	ed91 7b06 	vldr	d7, [r1, #24]
 8010e10:	18dc      	adds	r4, r3, r3
 8010e12:	f104 030f 	add.w	r3, r4, #15
 8010e16:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8010e1a:	eea6 0b07 	vfma.f64	d0, d6, d7
 8010e1e:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 8010e22:	ee35 0b00 	vadd.f64	d0, d5, d0
 8010e26:	ee20 6b00 	vmul.f64	d6, d0, d0
 8010e2a:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 8010e2e:	ed91 5b08 	vldr	d5, [r1, #32]
 8010e32:	ee30 7b07 	vadd.f64	d7, d0, d7
 8010e36:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8010e3a:	eea0 5b04 	vfma.f64	d5, d0, d4
 8010e3e:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 8010e42:	eea6 7b05 	vfma.f64	d7, d6, d5
 8010e46:	ee26 6b06 	vmul.f64	d6, d6, d6
 8010e4a:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 8010e4e:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 8010e52:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8010e56:	eea0 5b04 	vfma.f64	d5, d0, d4
 8010e5a:	1940      	adds	r0, r0, r5
 8010e5c:	2700      	movs	r7, #0
 8010e5e:	eb17 020c 	adds.w	r2, r7, ip
 8010e62:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 8010e66:	eea6 7b05 	vfma.f64	d7, d6, d5
 8010e6a:	2e00      	cmp	r6, #0
 8010e6c:	d15f      	bne.n	8010f2e <pow+0x476>
 8010e6e:	42bd      	cmp	r5, r7
 8010e70:	db13      	blt.n	8010e9a <pow+0x3e2>
 8010e72:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 8010e76:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 8010e7a:	4610      	mov	r0, r2
 8010e7c:	ec41 0b10 	vmov	d0, r0, r1
 8010e80:	eea7 0b00 	vfma.f64	d0, d7, d0
 8010e84:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8010f40 <pow+0x488>
 8010e88:	ee20 0b07 	vmul.f64	d0, d0, d7
 8010e8c:	b006      	add	sp, #24
 8010e8e:	ecbd 8b0a 	vpop	{d8-d12}
 8010e92:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e96:	f000 bb43 	b.w	8011520 <__math_check_oflow>
 8010e9a:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8010e9e:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 8010ea2:	4610      	mov	r0, r2
 8010ea4:	ec41 0b15 	vmov	d5, r0, r1
 8010ea8:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8010eac:	ee27 6b05 	vmul.f64	d6, d7, d5
 8010eb0:	ee35 7b06 	vadd.f64	d7, d5, d6
 8010eb4:	eeb0 3bc7 	vabs.f64	d3, d7
 8010eb8:	eeb4 3bc4 	vcmpe.f64	d3, d4
 8010ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ec0:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8010f48 <pow+0x490>
 8010ec4:	d52a      	bpl.n	8010f1c <pow+0x464>
 8010ec6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8010eca:	ee35 5b47 	vsub.f64	d5, d5, d7
 8010ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ed2:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 8010ed6:	ee35 6b06 	vadd.f64	d6, d5, d6
 8010eda:	bf48      	it	mi
 8010edc:	eeb0 4b43 	vmovmi.f64	d4, d3
 8010ee0:	ee37 3b04 	vadd.f64	d3, d7, d4
 8010ee4:	ee34 5b43 	vsub.f64	d5, d4, d3
 8010ee8:	ee35 7b07 	vadd.f64	d7, d5, d7
 8010eec:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010ef0:	ee37 7b03 	vadd.f64	d7, d7, d3
 8010ef4:	ee37 7b44 	vsub.f64	d7, d7, d4
 8010ef8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010efc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f00:	d104      	bne.n	8010f0c <pow+0x454>
 8010f02:	4632      	mov	r2, r6
 8010f04:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8010f08:	ec43 2b17 	vmov	d7, r2, r3
 8010f0c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010f10:	ed9d 6b02 	vldr	d6, [sp, #8]
 8010f14:	ee26 6b00 	vmul.f64	d6, d6, d0
 8010f18:	ed8d 6b04 	vstr	d6, [sp, #16]
 8010f1c:	ee27 0b00 	vmul.f64	d0, d7, d0
 8010f20:	b006      	add	sp, #24
 8010f22:	ecbd 8b0a 	vpop	{d8-d12}
 8010f26:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010f2a:	f000 baf0 	b.w	801150e <__math_check_uflow>
 8010f2e:	ec43 2b10 	vmov	d0, r2, r3
 8010f32:	eea7 0b00 	vfma.f64	d0, d7, d0
 8010f36:	e628      	b.n	8010b8a <pow+0xd2>
 8010f38:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8010f50 <pow+0x498>
 8010f3c:	e625      	b.n	8010b8a <pow+0xd2>
 8010f3e:	bf00      	nop
 8010f40:	00000000 	.word	0x00000000
 8010f44:	7f000000 	.word	0x7f000000
 8010f48:	00000000 	.word	0x00000000
 8010f4c:	00100000 	.word	0x00100000
	...
 8010f58:	08012d28 	.word	0x08012d28
 8010f5c:	00000000 	.word	0x00000000

08010f60 <atan>:
 8010f60:	b538      	push	{r3, r4, r5, lr}
 8010f62:	eeb0 7b40 	vmov.f64	d7, d0
 8010f66:	ee17 5a90 	vmov	r5, s15
 8010f6a:	4b73      	ldr	r3, [pc, #460]	; (8011138 <atan+0x1d8>)
 8010f6c:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8010f70:	429c      	cmp	r4, r3
 8010f72:	dd13      	ble.n	8010f9c <atan+0x3c>
 8010f74:	4b71      	ldr	r3, [pc, #452]	; (801113c <atan+0x1dc>)
 8010f76:	429c      	cmp	r4, r3
 8010f78:	dc03      	bgt.n	8010f82 <atan+0x22>
 8010f7a:	d107      	bne.n	8010f8c <atan+0x2c>
 8010f7c:	ee10 3a10 	vmov	r3, s0
 8010f80:	b123      	cbz	r3, 8010f8c <atan+0x2c>
 8010f82:	ee37 7b07 	vadd.f64	d7, d7, d7
 8010f86:	eeb0 0b47 	vmov.f64	d0, d7
 8010f8a:	bd38      	pop	{r3, r4, r5, pc}
 8010f8c:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 80110c8 <atan+0x168>
 8010f90:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 80110d0 <atan+0x170>
 8010f94:	2d00      	cmp	r5, #0
 8010f96:	fe36 7b07 	vselgt.f64	d7, d6, d7
 8010f9a:	e7f4      	b.n	8010f86 <atan+0x26>
 8010f9c:	4b68      	ldr	r3, [pc, #416]	; (8011140 <atan+0x1e0>)
 8010f9e:	429c      	cmp	r4, r3
 8010fa0:	dc11      	bgt.n	8010fc6 <atan+0x66>
 8010fa2:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8010fa6:	429c      	cmp	r4, r3
 8010fa8:	dc0a      	bgt.n	8010fc0 <atan+0x60>
 8010faa:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8010fae:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 80110d8 <atan+0x178>
 8010fb2:	ee30 6b06 	vadd.f64	d6, d0, d6
 8010fb6:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8010fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fbe:	dce2      	bgt.n	8010f86 <atan+0x26>
 8010fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8010fc4:	e013      	b.n	8010fee <atan+0x8e>
 8010fc6:	f000 f8c5 	bl	8011154 <fabs>
 8010fca:	4b5e      	ldr	r3, [pc, #376]	; (8011144 <atan+0x1e4>)
 8010fcc:	429c      	cmp	r4, r3
 8010fce:	dc4f      	bgt.n	8011070 <atan+0x110>
 8010fd0:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8010fd4:	429c      	cmp	r4, r3
 8010fd6:	dc41      	bgt.n	801105c <atan+0xfc>
 8010fd8:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8010fdc:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8010fe0:	2300      	movs	r3, #0
 8010fe2:	eea0 6b07 	vfma.f64	d6, d0, d7
 8010fe6:	ee30 0b07 	vadd.f64	d0, d0, d7
 8010fea:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8010fee:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 80110e0 <atan+0x180>
 8010ff2:	ee27 4b07 	vmul.f64	d4, d7, d7
 8010ff6:	ee24 5b04 	vmul.f64	d5, d4, d4
 8010ffa:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 80110e8 <atan+0x188>
 8010ffe:	eea5 3b06 	vfma.f64	d3, d5, d6
 8011002:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 80110f0 <atan+0x190>
 8011006:	eea3 6b05 	vfma.f64	d6, d3, d5
 801100a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 80110f8 <atan+0x198>
 801100e:	eea6 3b05 	vfma.f64	d3, d6, d5
 8011012:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8011100 <atan+0x1a0>
 8011016:	eea3 6b05 	vfma.f64	d6, d3, d5
 801101a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8011108 <atan+0x1a8>
 801101e:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8011110 <atan+0x1b0>
 8011022:	eea6 3b05 	vfma.f64	d3, d6, d5
 8011026:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8011118 <atan+0x1b8>
 801102a:	eea5 2b06 	vfma.f64	d2, d5, d6
 801102e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8011120 <atan+0x1c0>
 8011032:	eea2 6b05 	vfma.f64	d6, d2, d5
 8011036:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8011128 <atan+0x1c8>
 801103a:	eea6 2b05 	vfma.f64	d2, d6, d5
 801103e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8011130 <atan+0x1d0>
 8011042:	1c5a      	adds	r2, r3, #1
 8011044:	eea2 6b05 	vfma.f64	d6, d2, d5
 8011048:	ee26 6b05 	vmul.f64	d6, d6, d5
 801104c:	eea3 6b04 	vfma.f64	d6, d3, d4
 8011050:	ee27 6b06 	vmul.f64	d6, d7, d6
 8011054:	d121      	bne.n	801109a <atan+0x13a>
 8011056:	ee37 7b46 	vsub.f64	d7, d7, d6
 801105a:	e794      	b.n	8010f86 <atan+0x26>
 801105c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8011060:	2301      	movs	r3, #1
 8011062:	ee30 6b47 	vsub.f64	d6, d0, d7
 8011066:	ee30 0b07 	vadd.f64	d0, d0, d7
 801106a:	ee86 7b00 	vdiv.f64	d7, d6, d0
 801106e:	e7be      	b.n	8010fee <atan+0x8e>
 8011070:	4b35      	ldr	r3, [pc, #212]	; (8011148 <atan+0x1e8>)
 8011072:	429c      	cmp	r4, r3
 8011074:	da0b      	bge.n	801108e <atan+0x12e>
 8011076:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 801107a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801107e:	ee30 5b47 	vsub.f64	d5, d0, d7
 8011082:	eea0 6b07 	vfma.f64	d6, d0, d7
 8011086:	2302      	movs	r3, #2
 8011088:	ee85 7b06 	vdiv.f64	d7, d5, d6
 801108c:	e7af      	b.n	8010fee <atan+0x8e>
 801108e:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8011092:	2303      	movs	r3, #3
 8011094:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8011098:	e7a9      	b.n	8010fee <atan+0x8e>
 801109a:	4a2c      	ldr	r2, [pc, #176]	; (801114c <atan+0x1ec>)
 801109c:	492c      	ldr	r1, [pc, #176]	; (8011150 <atan+0x1f0>)
 801109e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80110a2:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 80110a6:	ed93 5b00 	vldr	d5, [r3]
 80110aa:	ee36 6b45 	vsub.f64	d6, d6, d5
 80110ae:	ee36 7b47 	vsub.f64	d7, d6, d7
 80110b2:	ed92 6b00 	vldr	d6, [r2]
 80110b6:	2d00      	cmp	r5, #0
 80110b8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80110bc:	bfb8      	it	lt
 80110be:	eeb1 7b47 	vneglt.f64	d7, d7
 80110c2:	e760      	b.n	8010f86 <atan+0x26>
 80110c4:	f3af 8000 	nop.w
 80110c8:	54442d18 	.word	0x54442d18
 80110cc:	3ff921fb 	.word	0x3ff921fb
 80110d0:	54442d18 	.word	0x54442d18
 80110d4:	bff921fb 	.word	0xbff921fb
 80110d8:	8800759c 	.word	0x8800759c
 80110dc:	7e37e43c 	.word	0x7e37e43c
 80110e0:	e322da11 	.word	0xe322da11
 80110e4:	3f90ad3a 	.word	0x3f90ad3a
 80110e8:	24760deb 	.word	0x24760deb
 80110ec:	3fa97b4b 	.word	0x3fa97b4b
 80110f0:	a0d03d51 	.word	0xa0d03d51
 80110f4:	3fb10d66 	.word	0x3fb10d66
 80110f8:	c54c206e 	.word	0xc54c206e
 80110fc:	3fb745cd 	.word	0x3fb745cd
 8011100:	920083ff 	.word	0x920083ff
 8011104:	3fc24924 	.word	0x3fc24924
 8011108:	5555550d 	.word	0x5555550d
 801110c:	3fd55555 	.word	0x3fd55555
 8011110:	52defd9a 	.word	0x52defd9a
 8011114:	bfadde2d 	.word	0xbfadde2d
 8011118:	2c6a6c2f 	.word	0x2c6a6c2f
 801111c:	bfa2b444 	.word	0xbfa2b444
 8011120:	af749a6d 	.word	0xaf749a6d
 8011124:	bfb3b0f2 	.word	0xbfb3b0f2
 8011128:	fe231671 	.word	0xfe231671
 801112c:	bfbc71c6 	.word	0xbfbc71c6
 8011130:	9998ebc4 	.word	0x9998ebc4
 8011134:	bfc99999 	.word	0xbfc99999
 8011138:	440fffff 	.word	0x440fffff
 801113c:	7ff00000 	.word	0x7ff00000
 8011140:	3fdbffff 	.word	0x3fdbffff
 8011144:	3ff2ffff 	.word	0x3ff2ffff
 8011148:	40038000 	.word	0x40038000
 801114c:	08012ce0 	.word	0x08012ce0
 8011150:	08012d00 	.word	0x08012d00

08011154 <fabs>:
 8011154:	ec51 0b10 	vmov	r0, r1, d0
 8011158:	ee10 2a10 	vmov	r2, s0
 801115c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011160:	ec43 2b10 	vmov	d0, r2, r3
 8011164:	4770      	bx	lr
	...

08011168 <acos>:
 8011168:	b508      	push	{r3, lr}
 801116a:	ed2d 8b04 	vpush	{d8-d9}
 801116e:	eeb0 8b40 	vmov.f64	d8, d0
 8011172:	f000 f845 	bl	8011200 <__ieee754_acos>
 8011176:	eeb4 8b48 	vcmp.f64	d8, d8
 801117a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801117e:	eeb0 9b40 	vmov.f64	d9, d0
 8011182:	d615      	bvs.n	80111b0 <acos+0x48>
 8011184:	eeb0 0b48 	vmov.f64	d0, d8
 8011188:	f7ff ffe4 	bl	8011154 <fabs>
 801118c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8011190:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8011194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011198:	dd0a      	ble.n	80111b0 <acos+0x48>
 801119a:	f000 f9e5 	bl	8011568 <__errno>
 801119e:	ecbd 8b04 	vpop	{d8-d9}
 80111a2:	2321      	movs	r3, #33	; 0x21
 80111a4:	6003      	str	r3, [r0, #0]
 80111a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80111aa:	4804      	ldr	r0, [pc, #16]	; (80111bc <acos+0x54>)
 80111ac:	f000 b9cc 	b.w	8011548 <nan>
 80111b0:	eeb0 0b49 	vmov.f64	d0, d9
 80111b4:	ecbd 8b04 	vpop	{d8-d9}
 80111b8:	bd08      	pop	{r3, pc}
 80111ba:	bf00      	nop
 80111bc:	08012d20 	.word	0x08012d20

080111c0 <sqrt>:
 80111c0:	b508      	push	{r3, lr}
 80111c2:	ed2d 8b04 	vpush	{d8-d9}
 80111c6:	eeb0 8b40 	vmov.f64	d8, d0
 80111ca:	f000 f947 	bl	801145c <__ieee754_sqrt>
 80111ce:	eeb4 8b48 	vcmp.f64	d8, d8
 80111d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111d6:	d60c      	bvs.n	80111f2 <sqrt+0x32>
 80111d8:	ed9f 9b07 	vldr	d9, [pc, #28]	; 80111f8 <sqrt+0x38>
 80111dc:	eeb4 8bc9 	vcmpe.f64	d8, d9
 80111e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111e4:	d505      	bpl.n	80111f2 <sqrt+0x32>
 80111e6:	f000 f9bf 	bl	8011568 <__errno>
 80111ea:	ee89 0b09 	vdiv.f64	d0, d9, d9
 80111ee:	2321      	movs	r3, #33	; 0x21
 80111f0:	6003      	str	r3, [r0, #0]
 80111f2:	ecbd 8b04 	vpop	{d8-d9}
 80111f6:	bd08      	pop	{r3, pc}
	...

08011200 <__ieee754_acos>:
 8011200:	b500      	push	{lr}
 8011202:	ee10 2a90 	vmov	r2, s1
 8011206:	ed2d 8b10 	vpush	{d8-d15}
 801120a:	4991      	ldr	r1, [pc, #580]	; (8011450 <__ieee754_acos+0x250>)
 801120c:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8011210:	428b      	cmp	r3, r1
 8011212:	b087      	sub	sp, #28
 8011214:	dd18      	ble.n	8011248 <__ieee754_acos+0x48>
 8011216:	ee10 1a10 	vmov	r1, s0
 801121a:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 801121e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8011222:	430b      	orrs	r3, r1
 8011224:	d10b      	bne.n	801123e <__ieee754_acos+0x3e>
 8011226:	ed9f 0b6c 	vldr	d0, [pc, #432]	; 80113d8 <__ieee754_acos+0x1d8>
 801122a:	ed9f 7b6d 	vldr	d7, [pc, #436]	; 80113e0 <__ieee754_acos+0x1e0>
 801122e:	2a00      	cmp	r2, #0
 8011230:	fe30 0b07 	vselgt.f64	d0, d0, d7
 8011234:	b007      	add	sp, #28
 8011236:	ecbd 8b10 	vpop	{d8-d15}
 801123a:	f85d fb04 	ldr.w	pc, [sp], #4
 801123e:	ee30 8b40 	vsub.f64	d8, d0, d0
 8011242:	ee88 0b08 	vdiv.f64	d0, d8, d8
 8011246:	e7f5      	b.n	8011234 <__ieee754_acos+0x34>
 8011248:	4982      	ldr	r1, [pc, #520]	; (8011454 <__ieee754_acos+0x254>)
 801124a:	428b      	cmp	r3, r1
 801124c:	dc3c      	bgt.n	80112c8 <__ieee754_acos+0xc8>
 801124e:	4a82      	ldr	r2, [pc, #520]	; (8011458 <__ieee754_acos+0x258>)
 8011250:	4293      	cmp	r3, r2
 8011252:	ed9f 7b65 	vldr	d7, [pc, #404]	; 80113e8 <__ieee754_acos+0x1e8>
 8011256:	f340 80bc 	ble.w	80113d2 <__ieee754_acos+0x1d2>
 801125a:	ee20 6b00 	vmul.f64	d6, d0, d0
 801125e:	ed9f 4b64 	vldr	d4, [pc, #400]	; 80113f0 <__ieee754_acos+0x1f0>
 8011262:	ed9f 5b65 	vldr	d5, [pc, #404]	; 80113f8 <__ieee754_acos+0x1f8>
 8011266:	eea6 5b04 	vfma.f64	d5, d6, d4
 801126a:	ed9f 4b65 	vldr	d4, [pc, #404]	; 8011400 <__ieee754_acos+0x200>
 801126e:	eea5 4b06 	vfma.f64	d4, d5, d6
 8011272:	ed9f 5b65 	vldr	d5, [pc, #404]	; 8011408 <__ieee754_acos+0x208>
 8011276:	eea4 5b06 	vfma.f64	d5, d4, d6
 801127a:	ed9f 4b65 	vldr	d4, [pc, #404]	; 8011410 <__ieee754_acos+0x210>
 801127e:	eea5 4b06 	vfma.f64	d4, d5, d6
 8011282:	ed9f 5b65 	vldr	d5, [pc, #404]	; 8011418 <__ieee754_acos+0x218>
 8011286:	ed9f 3b66 	vldr	d3, [pc, #408]	; 8011420 <__ieee754_acos+0x220>
 801128a:	eea4 5b06 	vfma.f64	d5, d4, d6
 801128e:	ee25 5b06 	vmul.f64	d5, d5, d6
 8011292:	ed9f 4b65 	vldr	d4, [pc, #404]	; 8011428 <__ieee754_acos+0x228>
 8011296:	eea6 3b04 	vfma.f64	d3, d6, d4
 801129a:	ed9f 4b65 	vldr	d4, [pc, #404]	; 8011430 <__ieee754_acos+0x230>
 801129e:	ed9f 8b66 	vldr	d8, [pc, #408]	; 8011438 <__ieee754_acos+0x238>
 80112a2:	eea3 4b06 	vfma.f64	d4, d3, d6
 80112a6:	ed9f 3b66 	vldr	d3, [pc, #408]	; 8011440 <__ieee754_acos+0x240>
 80112aa:	eea4 3b06 	vfma.f64	d3, d4, d6
 80112ae:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 80112b2:	eea3 4b06 	vfma.f64	d4, d3, d6
 80112b6:	ee85 6b04 	vdiv.f64	d6, d5, d4
 80112ba:	eea0 8b46 	vfms.f64	d8, d0, d6
 80112be:	ee30 0b48 	vsub.f64	d0, d0, d8
 80112c2:	ee37 0b40 	vsub.f64	d0, d7, d0
 80112c6:	e7b5      	b.n	8011234 <__ieee754_acos+0x34>
 80112c8:	2a00      	cmp	r2, #0
 80112ca:	ed9f eb49 	vldr	d14, [pc, #292]	; 80113f0 <__ieee754_acos+0x1f0>
 80112ce:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
 80112d2:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 80112d6:	ed9f db48 	vldr	d13, [pc, #288]	; 80113f8 <__ieee754_acos+0x1f8>
 80112da:	ed9f cb49 	vldr	d12, [pc, #292]	; 8011400 <__ieee754_acos+0x200>
 80112de:	ed9f bb4a 	vldr	d11, [pc, #296]	; 8011408 <__ieee754_acos+0x208>
 80112e2:	ed9f ab4b 	vldr	d10, [pc, #300]	; 8011410 <__ieee754_acos+0x210>
 80112e6:	ed9f fb4c 	vldr	d15, [pc, #304]	; 8011418 <__ieee754_acos+0x218>
 80112ea:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 8011420 <__ieee754_acos+0x220>
 80112ee:	ed9f 2b50 	vldr	d2, [pc, #320]	; 8011430 <__ieee754_acos+0x230>
 80112f2:	ed9f 1b53 	vldr	d1, [pc, #332]	; 8011440 <__ieee754_acos+0x240>
 80112f6:	da2a      	bge.n	801134e <__ieee754_acos+0x14e>
 80112f8:	ee30 0b09 	vadd.f64	d0, d0, d9
 80112fc:	ee20 0b08 	vmul.f64	d0, d0, d8
 8011300:	ed9f 7b49 	vldr	d7, [pc, #292]	; 8011428 <__ieee754_acos+0x228>
 8011304:	eea0 db0e 	vfma.f64	d13, d0, d14
 8011308:	eead cb00 	vfma.f64	d12, d13, d0
 801130c:	eea0 3b07 	vfma.f64	d3, d0, d7
 8011310:	eeac bb00 	vfma.f64	d11, d12, d0
 8011314:	eea3 2b00 	vfma.f64	d2, d3, d0
 8011318:	eeab ab00 	vfma.f64	d10, d11, d0
 801131c:	eea2 1b00 	vfma.f64	d1, d2, d0
 8011320:	eeaa fb00 	vfma.f64	d15, d10, d0
 8011324:	eea1 9b00 	vfma.f64	d9, d1, d0
 8011328:	ee2f fb00 	vmul.f64	d15, d15, d0
 801132c:	f000 f896 	bl	801145c <__ieee754_sqrt>
 8011330:	ee8f 6b09 	vdiv.f64	d6, d15, d9
 8011334:	ed9f 7b44 	vldr	d7, [pc, #272]	; 8011448 <__ieee754_acos+0x248>
 8011338:	eea0 7b06 	vfma.f64	d7, d0, d6
 801133c:	ee37 7b00 	vadd.f64	d7, d7, d0
 8011340:	ed9f 0b27 	vldr	d0, [pc, #156]	; 80113e0 <__ieee754_acos+0x1e0>
 8011344:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 8011348:	eea7 0b46 	vfms.f64	d0, d7, d6
 801134c:	e772      	b.n	8011234 <__ieee754_acos+0x34>
 801134e:	ee39 0b40 	vsub.f64	d0, d9, d0
 8011352:	ee20 8b08 	vmul.f64	d8, d0, d8
 8011356:	eeb0 0b48 	vmov.f64	d0, d8
 801135a:	ed8d 1b04 	vstr	d1, [sp, #16]
 801135e:	ed8d 2b02 	vstr	d2, [sp, #8]
 8011362:	ed8d 3b00 	vstr	d3, [sp]
 8011366:	f000 f879 	bl	801145c <__ieee754_sqrt>
 801136a:	eeb0 5b48 	vmov.f64	d5, d8
 801136e:	eea8 db0e 	vfma.f64	d13, d8, d14
 8011372:	ec53 2b10 	vmov	r2, r3, d0
 8011376:	eead cb08 	vfma.f64	d12, d13, d8
 801137a:	2200      	movs	r2, #0
 801137c:	ec43 2b17 	vmov	d7, r2, r3
 8011380:	eeac bb08 	vfma.f64	d11, d12, d8
 8011384:	ee30 6b07 	vadd.f64	d6, d0, d7
 8011388:	eea7 5b47 	vfms.f64	d5, d7, d7
 801138c:	ed9d 3b00 	vldr	d3, [sp]
 8011390:	ee85 4b06 	vdiv.f64	d4, d5, d6
 8011394:	eeab ab08 	vfma.f64	d10, d11, d8
 8011398:	ed9f 6b23 	vldr	d6, [pc, #140]	; 8011428 <__ieee754_acos+0x228>
 801139c:	eeaa fb08 	vfma.f64	d15, d10, d8
 80113a0:	ee2f fb08 	vmul.f64	d15, d15, d8
 80113a4:	ed9d 2b02 	vldr	d2, [sp, #8]
 80113a8:	eea8 3b06 	vfma.f64	d3, d8, d6
 80113ac:	eeb0 6b44 	vmov.f64	d6, d4
 80113b0:	ed9d 1b04 	vldr	d1, [sp, #16]
 80113b4:	eea3 2b08 	vfma.f64	d2, d3, d8
 80113b8:	eea2 1b08 	vfma.f64	d1, d2, d8
 80113bc:	eea1 9b08 	vfma.f64	d9, d1, d8
 80113c0:	ee8f 5b09 	vdiv.f64	d5, d15, d9
 80113c4:	eea0 6b05 	vfma.f64	d6, d0, d5
 80113c8:	ee37 0b06 	vadd.f64	d0, d7, d6
 80113cc:	ee30 0b00 	vadd.f64	d0, d0, d0
 80113d0:	e730      	b.n	8011234 <__ieee754_acos+0x34>
 80113d2:	eeb0 0b47 	vmov.f64	d0, d7
 80113d6:	e72d      	b.n	8011234 <__ieee754_acos+0x34>
	...
 80113e0:	54442d18 	.word	0x54442d18
 80113e4:	400921fb 	.word	0x400921fb
 80113e8:	54442d18 	.word	0x54442d18
 80113ec:	3ff921fb 	.word	0x3ff921fb
 80113f0:	0dfdf709 	.word	0x0dfdf709
 80113f4:	3f023de1 	.word	0x3f023de1
 80113f8:	7501b288 	.word	0x7501b288
 80113fc:	3f49efe0 	.word	0x3f49efe0
 8011400:	b5688f3b 	.word	0xb5688f3b
 8011404:	bfa48228 	.word	0xbfa48228
 8011408:	0e884455 	.word	0x0e884455
 801140c:	3fc9c155 	.word	0x3fc9c155
 8011410:	03eb6f7d 	.word	0x03eb6f7d
 8011414:	bfd4d612 	.word	0xbfd4d612
 8011418:	55555555 	.word	0x55555555
 801141c:	3fc55555 	.word	0x3fc55555
 8011420:	1b8d0159 	.word	0x1b8d0159
 8011424:	bfe6066c 	.word	0xbfe6066c
 8011428:	b12e9282 	.word	0xb12e9282
 801142c:	3fb3b8c5 	.word	0x3fb3b8c5
 8011430:	9c598ac8 	.word	0x9c598ac8
 8011434:	40002ae5 	.word	0x40002ae5
 8011438:	33145c07 	.word	0x33145c07
 801143c:	3c91a626 	.word	0x3c91a626
 8011440:	1c8a2d4b 	.word	0x1c8a2d4b
 8011444:	c0033a27 	.word	0xc0033a27
 8011448:	33145c07 	.word	0x33145c07
 801144c:	bc91a626 	.word	0xbc91a626
 8011450:	3fefffff 	.word	0x3fefffff
 8011454:	3fdfffff 	.word	0x3fdfffff
 8011458:	3c600000 	.word	0x3c600000

0801145c <__ieee754_sqrt>:
 801145c:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8011460:	4770      	bx	lr

08011462 <with_errno>:
 8011462:	b513      	push	{r0, r1, r4, lr}
 8011464:	4604      	mov	r4, r0
 8011466:	ed8d 0b00 	vstr	d0, [sp]
 801146a:	f000 f87d 	bl	8011568 <__errno>
 801146e:	ed9d 0b00 	vldr	d0, [sp]
 8011472:	6004      	str	r4, [r0, #0]
 8011474:	b002      	add	sp, #8
 8011476:	bd10      	pop	{r4, pc}

08011478 <xflow>:
 8011478:	b082      	sub	sp, #8
 801147a:	b158      	cbz	r0, 8011494 <xflow+0x1c>
 801147c:	eeb1 7b40 	vneg.f64	d7, d0
 8011480:	ed8d 7b00 	vstr	d7, [sp]
 8011484:	ed9d 7b00 	vldr	d7, [sp]
 8011488:	2022      	movs	r0, #34	; 0x22
 801148a:	ee20 0b07 	vmul.f64	d0, d0, d7
 801148e:	b002      	add	sp, #8
 8011490:	f7ff bfe7 	b.w	8011462 <with_errno>
 8011494:	eeb0 7b40 	vmov.f64	d7, d0
 8011498:	e7f2      	b.n	8011480 <xflow+0x8>
 801149a:	0000      	movs	r0, r0
 801149c:	0000      	movs	r0, r0
	...

080114a0 <__math_uflow>:
 80114a0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80114a8 <__math_uflow+0x8>
 80114a4:	f7ff bfe8 	b.w	8011478 <xflow>
 80114a8:	00000000 	.word	0x00000000
 80114ac:	10000000 	.word	0x10000000

080114b0 <__math_oflow>:
 80114b0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80114b8 <__math_oflow+0x8>
 80114b4:	f7ff bfe0 	b.w	8011478 <xflow>
 80114b8:	00000000 	.word	0x00000000
 80114bc:	70000000 	.word	0x70000000

080114c0 <__math_divzero>:
 80114c0:	b082      	sub	sp, #8
 80114c2:	2800      	cmp	r0, #0
 80114c4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80114c8:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 80114cc:	fe06 7b07 	vseleq.f64	d7, d6, d7
 80114d0:	ed8d 7b00 	vstr	d7, [sp]
 80114d4:	ed9d 0b00 	vldr	d0, [sp]
 80114d8:	ed9f 7b03 	vldr	d7, [pc, #12]	; 80114e8 <__math_divzero+0x28>
 80114dc:	2022      	movs	r0, #34	; 0x22
 80114de:	ee80 0b07 	vdiv.f64	d0, d0, d7
 80114e2:	b002      	add	sp, #8
 80114e4:	f7ff bfbd 	b.w	8011462 <with_errno>
	...

080114f0 <__math_invalid>:
 80114f0:	eeb0 7b40 	vmov.f64	d7, d0
 80114f4:	eeb4 7b47 	vcmp.f64	d7, d7
 80114f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114fc:	ee30 6b40 	vsub.f64	d6, d0, d0
 8011500:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8011504:	d602      	bvs.n	801150c <__math_invalid+0x1c>
 8011506:	2021      	movs	r0, #33	; 0x21
 8011508:	f7ff bfab 	b.w	8011462 <with_errno>
 801150c:	4770      	bx	lr

0801150e <__math_check_uflow>:
 801150e:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8011512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011516:	d102      	bne.n	801151e <__math_check_uflow+0x10>
 8011518:	2022      	movs	r0, #34	; 0x22
 801151a:	f7ff bfa2 	b.w	8011462 <with_errno>
 801151e:	4770      	bx	lr

08011520 <__math_check_oflow>:
 8011520:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8011540 <__math_check_oflow+0x20>
 8011524:	eeb0 7bc0 	vabs.f64	d7, d0
 8011528:	eeb4 7b46 	vcmp.f64	d7, d6
 801152c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011530:	dd02      	ble.n	8011538 <__math_check_oflow+0x18>
 8011532:	2022      	movs	r0, #34	; 0x22
 8011534:	f7ff bf95 	b.w	8011462 <with_errno>
 8011538:	4770      	bx	lr
 801153a:	bf00      	nop
 801153c:	f3af 8000 	nop.w
 8011540:	ffffffff 	.word	0xffffffff
 8011544:	7fefffff 	.word	0x7fefffff

08011548 <nan>:
 8011548:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011550 <nan+0x8>
 801154c:	4770      	bx	lr
 801154e:	bf00      	nop
 8011550:	00000000 	.word	0x00000000
 8011554:	7ff80000 	.word	0x7ff80000

08011558 <abort>:
 8011558:	b508      	push	{r3, lr}
 801155a:	2006      	movs	r0, #6
 801155c:	f000 f874 	bl	8011648 <raise>
 8011560:	2001      	movs	r0, #1
 8011562:	f7f5 f8db 	bl	800671c <_exit>
	...

08011568 <__errno>:
 8011568:	4b01      	ldr	r3, [pc, #4]	; (8011570 <__errno+0x8>)
 801156a:	6818      	ldr	r0, [r3, #0]
 801156c:	4770      	bx	lr
 801156e:	bf00      	nop
 8011570:	24000018 	.word	0x24000018

08011574 <__libc_init_array>:
 8011574:	b570      	push	{r4, r5, r6, lr}
 8011576:	4d0d      	ldr	r5, [pc, #52]	; (80115ac <__libc_init_array+0x38>)
 8011578:	4c0d      	ldr	r4, [pc, #52]	; (80115b0 <__libc_init_array+0x3c>)
 801157a:	1b64      	subs	r4, r4, r5
 801157c:	10a4      	asrs	r4, r4, #2
 801157e:	2600      	movs	r6, #0
 8011580:	42a6      	cmp	r6, r4
 8011582:	d109      	bne.n	8011598 <__libc_init_array+0x24>
 8011584:	4d0b      	ldr	r5, [pc, #44]	; (80115b4 <__libc_init_array+0x40>)
 8011586:	4c0c      	ldr	r4, [pc, #48]	; (80115b8 <__libc_init_array+0x44>)
 8011588:	f000 f9b0 	bl	80118ec <_init>
 801158c:	1b64      	subs	r4, r4, r5
 801158e:	10a4      	asrs	r4, r4, #2
 8011590:	2600      	movs	r6, #0
 8011592:	42a6      	cmp	r6, r4
 8011594:	d105      	bne.n	80115a2 <__libc_init_array+0x2e>
 8011596:	bd70      	pop	{r4, r5, r6, pc}
 8011598:	f855 3b04 	ldr.w	r3, [r5], #4
 801159c:	4798      	blx	r3
 801159e:	3601      	adds	r6, #1
 80115a0:	e7ee      	b.n	8011580 <__libc_init_array+0xc>
 80115a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80115a6:	4798      	blx	r3
 80115a8:	3601      	adds	r6, #1
 80115aa:	e7f2      	b.n	8011592 <__libc_init_array+0x1e>
 80115ac:	080135a0 	.word	0x080135a0
 80115b0:	080135a0 	.word	0x080135a0
 80115b4:	080135a0 	.word	0x080135a0
 80115b8:	080135b4 	.word	0x080135b4

080115bc <memcpy>:
 80115bc:	440a      	add	r2, r1
 80115be:	4291      	cmp	r1, r2
 80115c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80115c4:	d100      	bne.n	80115c8 <memcpy+0xc>
 80115c6:	4770      	bx	lr
 80115c8:	b510      	push	{r4, lr}
 80115ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80115ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80115d2:	4291      	cmp	r1, r2
 80115d4:	d1f9      	bne.n	80115ca <memcpy+0xe>
 80115d6:	bd10      	pop	{r4, pc}

080115d8 <memset>:
 80115d8:	4402      	add	r2, r0
 80115da:	4603      	mov	r3, r0
 80115dc:	4293      	cmp	r3, r2
 80115de:	d100      	bne.n	80115e2 <memset+0xa>
 80115e0:	4770      	bx	lr
 80115e2:	f803 1b01 	strb.w	r1, [r3], #1
 80115e6:	e7f9      	b.n	80115dc <memset+0x4>

080115e8 <realloc>:
 80115e8:	4b02      	ldr	r3, [pc, #8]	; (80115f4 <realloc+0xc>)
 80115ea:	460a      	mov	r2, r1
 80115ec:	4601      	mov	r1, r0
 80115ee:	6818      	ldr	r0, [r3, #0]
 80115f0:	f000 b8da 	b.w	80117a8 <_realloc_r>
 80115f4:	24000018 	.word	0x24000018

080115f8 <_raise_r>:
 80115f8:	291f      	cmp	r1, #31
 80115fa:	b538      	push	{r3, r4, r5, lr}
 80115fc:	4604      	mov	r4, r0
 80115fe:	460d      	mov	r5, r1
 8011600:	d904      	bls.n	801160c <_raise_r+0x14>
 8011602:	2316      	movs	r3, #22
 8011604:	6003      	str	r3, [r0, #0]
 8011606:	f04f 30ff 	mov.w	r0, #4294967295
 801160a:	bd38      	pop	{r3, r4, r5, pc}
 801160c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801160e:	b112      	cbz	r2, 8011616 <_raise_r+0x1e>
 8011610:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011614:	b94b      	cbnz	r3, 801162a <_raise_r+0x32>
 8011616:	4620      	mov	r0, r4
 8011618:	f000 f830 	bl	801167c <_getpid_r>
 801161c:	462a      	mov	r2, r5
 801161e:	4601      	mov	r1, r0
 8011620:	4620      	mov	r0, r4
 8011622:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011626:	f000 b817 	b.w	8011658 <_kill_r>
 801162a:	2b01      	cmp	r3, #1
 801162c:	d00a      	beq.n	8011644 <_raise_r+0x4c>
 801162e:	1c59      	adds	r1, r3, #1
 8011630:	d103      	bne.n	801163a <_raise_r+0x42>
 8011632:	2316      	movs	r3, #22
 8011634:	6003      	str	r3, [r0, #0]
 8011636:	2001      	movs	r0, #1
 8011638:	e7e7      	b.n	801160a <_raise_r+0x12>
 801163a:	2400      	movs	r4, #0
 801163c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011640:	4628      	mov	r0, r5
 8011642:	4798      	blx	r3
 8011644:	2000      	movs	r0, #0
 8011646:	e7e0      	b.n	801160a <_raise_r+0x12>

08011648 <raise>:
 8011648:	4b02      	ldr	r3, [pc, #8]	; (8011654 <raise+0xc>)
 801164a:	4601      	mov	r1, r0
 801164c:	6818      	ldr	r0, [r3, #0]
 801164e:	f7ff bfd3 	b.w	80115f8 <_raise_r>
 8011652:	bf00      	nop
 8011654:	24000018 	.word	0x24000018

08011658 <_kill_r>:
 8011658:	b538      	push	{r3, r4, r5, lr}
 801165a:	4d07      	ldr	r5, [pc, #28]	; (8011678 <_kill_r+0x20>)
 801165c:	2300      	movs	r3, #0
 801165e:	4604      	mov	r4, r0
 8011660:	4608      	mov	r0, r1
 8011662:	4611      	mov	r1, r2
 8011664:	602b      	str	r3, [r5, #0]
 8011666:	f7f5 f849 	bl	80066fc <_kill>
 801166a:	1c43      	adds	r3, r0, #1
 801166c:	d102      	bne.n	8011674 <_kill_r+0x1c>
 801166e:	682b      	ldr	r3, [r5, #0]
 8011670:	b103      	cbz	r3, 8011674 <_kill_r+0x1c>
 8011672:	6023      	str	r3, [r4, #0]
 8011674:	bd38      	pop	{r3, r4, r5, pc}
 8011676:	bf00      	nop
 8011678:	2400234c 	.word	0x2400234c

0801167c <_getpid_r>:
 801167c:	f7f5 b836 	b.w	80066ec <_getpid>

08011680 <sbrk_aligned>:
 8011680:	b570      	push	{r4, r5, r6, lr}
 8011682:	4e0e      	ldr	r6, [pc, #56]	; (80116bc <sbrk_aligned+0x3c>)
 8011684:	460c      	mov	r4, r1
 8011686:	6831      	ldr	r1, [r6, #0]
 8011688:	4605      	mov	r5, r0
 801168a:	b911      	cbnz	r1, 8011692 <sbrk_aligned+0x12>
 801168c:	f000 f8bc 	bl	8011808 <_sbrk_r>
 8011690:	6030      	str	r0, [r6, #0]
 8011692:	4621      	mov	r1, r4
 8011694:	4628      	mov	r0, r5
 8011696:	f000 f8b7 	bl	8011808 <_sbrk_r>
 801169a:	1c43      	adds	r3, r0, #1
 801169c:	d00a      	beq.n	80116b4 <sbrk_aligned+0x34>
 801169e:	1cc4      	adds	r4, r0, #3
 80116a0:	f024 0403 	bic.w	r4, r4, #3
 80116a4:	42a0      	cmp	r0, r4
 80116a6:	d007      	beq.n	80116b8 <sbrk_aligned+0x38>
 80116a8:	1a21      	subs	r1, r4, r0
 80116aa:	4628      	mov	r0, r5
 80116ac:	f000 f8ac 	bl	8011808 <_sbrk_r>
 80116b0:	3001      	adds	r0, #1
 80116b2:	d101      	bne.n	80116b8 <sbrk_aligned+0x38>
 80116b4:	f04f 34ff 	mov.w	r4, #4294967295
 80116b8:	4620      	mov	r0, r4
 80116ba:	bd70      	pop	{r4, r5, r6, pc}
 80116bc:	24002348 	.word	0x24002348

080116c0 <_malloc_r>:
 80116c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80116c4:	1ccd      	adds	r5, r1, #3
 80116c6:	f025 0503 	bic.w	r5, r5, #3
 80116ca:	3508      	adds	r5, #8
 80116cc:	2d0c      	cmp	r5, #12
 80116ce:	bf38      	it	cc
 80116d0:	250c      	movcc	r5, #12
 80116d2:	2d00      	cmp	r5, #0
 80116d4:	4607      	mov	r7, r0
 80116d6:	db01      	blt.n	80116dc <_malloc_r+0x1c>
 80116d8:	42a9      	cmp	r1, r5
 80116da:	d905      	bls.n	80116e8 <_malloc_r+0x28>
 80116dc:	230c      	movs	r3, #12
 80116de:	603b      	str	r3, [r7, #0]
 80116e0:	2600      	movs	r6, #0
 80116e2:	4630      	mov	r0, r6
 80116e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116e8:	4e2e      	ldr	r6, [pc, #184]	; (80117a4 <_malloc_r+0xe4>)
 80116ea:	f000 f89d 	bl	8011828 <__malloc_lock>
 80116ee:	6833      	ldr	r3, [r6, #0]
 80116f0:	461c      	mov	r4, r3
 80116f2:	bb34      	cbnz	r4, 8011742 <_malloc_r+0x82>
 80116f4:	4629      	mov	r1, r5
 80116f6:	4638      	mov	r0, r7
 80116f8:	f7ff ffc2 	bl	8011680 <sbrk_aligned>
 80116fc:	1c43      	adds	r3, r0, #1
 80116fe:	4604      	mov	r4, r0
 8011700:	d14d      	bne.n	801179e <_malloc_r+0xde>
 8011702:	6834      	ldr	r4, [r6, #0]
 8011704:	4626      	mov	r6, r4
 8011706:	2e00      	cmp	r6, #0
 8011708:	d140      	bne.n	801178c <_malloc_r+0xcc>
 801170a:	6823      	ldr	r3, [r4, #0]
 801170c:	4631      	mov	r1, r6
 801170e:	4638      	mov	r0, r7
 8011710:	eb04 0803 	add.w	r8, r4, r3
 8011714:	f000 f878 	bl	8011808 <_sbrk_r>
 8011718:	4580      	cmp	r8, r0
 801171a:	d13a      	bne.n	8011792 <_malloc_r+0xd2>
 801171c:	6821      	ldr	r1, [r4, #0]
 801171e:	3503      	adds	r5, #3
 8011720:	1a6d      	subs	r5, r5, r1
 8011722:	f025 0503 	bic.w	r5, r5, #3
 8011726:	3508      	adds	r5, #8
 8011728:	2d0c      	cmp	r5, #12
 801172a:	bf38      	it	cc
 801172c:	250c      	movcc	r5, #12
 801172e:	4629      	mov	r1, r5
 8011730:	4638      	mov	r0, r7
 8011732:	f7ff ffa5 	bl	8011680 <sbrk_aligned>
 8011736:	3001      	adds	r0, #1
 8011738:	d02b      	beq.n	8011792 <_malloc_r+0xd2>
 801173a:	6823      	ldr	r3, [r4, #0]
 801173c:	442b      	add	r3, r5
 801173e:	6023      	str	r3, [r4, #0]
 8011740:	e00e      	b.n	8011760 <_malloc_r+0xa0>
 8011742:	6822      	ldr	r2, [r4, #0]
 8011744:	1b52      	subs	r2, r2, r5
 8011746:	d41e      	bmi.n	8011786 <_malloc_r+0xc6>
 8011748:	2a0b      	cmp	r2, #11
 801174a:	d916      	bls.n	801177a <_malloc_r+0xba>
 801174c:	1961      	adds	r1, r4, r5
 801174e:	42a3      	cmp	r3, r4
 8011750:	6025      	str	r5, [r4, #0]
 8011752:	bf18      	it	ne
 8011754:	6059      	strne	r1, [r3, #4]
 8011756:	6863      	ldr	r3, [r4, #4]
 8011758:	bf08      	it	eq
 801175a:	6031      	streq	r1, [r6, #0]
 801175c:	5162      	str	r2, [r4, r5]
 801175e:	604b      	str	r3, [r1, #4]
 8011760:	4638      	mov	r0, r7
 8011762:	f104 060b 	add.w	r6, r4, #11
 8011766:	f000 f865 	bl	8011834 <__malloc_unlock>
 801176a:	f026 0607 	bic.w	r6, r6, #7
 801176e:	1d23      	adds	r3, r4, #4
 8011770:	1af2      	subs	r2, r6, r3
 8011772:	d0b6      	beq.n	80116e2 <_malloc_r+0x22>
 8011774:	1b9b      	subs	r3, r3, r6
 8011776:	50a3      	str	r3, [r4, r2]
 8011778:	e7b3      	b.n	80116e2 <_malloc_r+0x22>
 801177a:	6862      	ldr	r2, [r4, #4]
 801177c:	42a3      	cmp	r3, r4
 801177e:	bf0c      	ite	eq
 8011780:	6032      	streq	r2, [r6, #0]
 8011782:	605a      	strne	r2, [r3, #4]
 8011784:	e7ec      	b.n	8011760 <_malloc_r+0xa0>
 8011786:	4623      	mov	r3, r4
 8011788:	6864      	ldr	r4, [r4, #4]
 801178a:	e7b2      	b.n	80116f2 <_malloc_r+0x32>
 801178c:	4634      	mov	r4, r6
 801178e:	6876      	ldr	r6, [r6, #4]
 8011790:	e7b9      	b.n	8011706 <_malloc_r+0x46>
 8011792:	230c      	movs	r3, #12
 8011794:	603b      	str	r3, [r7, #0]
 8011796:	4638      	mov	r0, r7
 8011798:	f000 f84c 	bl	8011834 <__malloc_unlock>
 801179c:	e7a1      	b.n	80116e2 <_malloc_r+0x22>
 801179e:	6025      	str	r5, [r4, #0]
 80117a0:	e7de      	b.n	8011760 <_malloc_r+0xa0>
 80117a2:	bf00      	nop
 80117a4:	24002344 	.word	0x24002344

080117a8 <_realloc_r>:
 80117a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117ac:	4680      	mov	r8, r0
 80117ae:	4614      	mov	r4, r2
 80117b0:	460e      	mov	r6, r1
 80117b2:	b921      	cbnz	r1, 80117be <_realloc_r+0x16>
 80117b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80117b8:	4611      	mov	r1, r2
 80117ba:	f7ff bf81 	b.w	80116c0 <_malloc_r>
 80117be:	b92a      	cbnz	r2, 80117cc <_realloc_r+0x24>
 80117c0:	f000 f83e 	bl	8011840 <_free_r>
 80117c4:	4625      	mov	r5, r4
 80117c6:	4628      	mov	r0, r5
 80117c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80117cc:	f000 f884 	bl	80118d8 <_malloc_usable_size_r>
 80117d0:	4284      	cmp	r4, r0
 80117d2:	4607      	mov	r7, r0
 80117d4:	d802      	bhi.n	80117dc <_realloc_r+0x34>
 80117d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80117da:	d812      	bhi.n	8011802 <_realloc_r+0x5a>
 80117dc:	4621      	mov	r1, r4
 80117de:	4640      	mov	r0, r8
 80117e0:	f7ff ff6e 	bl	80116c0 <_malloc_r>
 80117e4:	4605      	mov	r5, r0
 80117e6:	2800      	cmp	r0, #0
 80117e8:	d0ed      	beq.n	80117c6 <_realloc_r+0x1e>
 80117ea:	42bc      	cmp	r4, r7
 80117ec:	4622      	mov	r2, r4
 80117ee:	4631      	mov	r1, r6
 80117f0:	bf28      	it	cs
 80117f2:	463a      	movcs	r2, r7
 80117f4:	f7ff fee2 	bl	80115bc <memcpy>
 80117f8:	4631      	mov	r1, r6
 80117fa:	4640      	mov	r0, r8
 80117fc:	f000 f820 	bl	8011840 <_free_r>
 8011800:	e7e1      	b.n	80117c6 <_realloc_r+0x1e>
 8011802:	4635      	mov	r5, r6
 8011804:	e7df      	b.n	80117c6 <_realloc_r+0x1e>
	...

08011808 <_sbrk_r>:
 8011808:	b538      	push	{r3, r4, r5, lr}
 801180a:	4d06      	ldr	r5, [pc, #24]	; (8011824 <_sbrk_r+0x1c>)
 801180c:	2300      	movs	r3, #0
 801180e:	4604      	mov	r4, r0
 8011810:	4608      	mov	r0, r1
 8011812:	602b      	str	r3, [r5, #0]
 8011814:	f7f4 ff8c 	bl	8006730 <_sbrk>
 8011818:	1c43      	adds	r3, r0, #1
 801181a:	d102      	bne.n	8011822 <_sbrk_r+0x1a>
 801181c:	682b      	ldr	r3, [r5, #0]
 801181e:	b103      	cbz	r3, 8011822 <_sbrk_r+0x1a>
 8011820:	6023      	str	r3, [r4, #0]
 8011822:	bd38      	pop	{r3, r4, r5, pc}
 8011824:	2400234c 	.word	0x2400234c

08011828 <__malloc_lock>:
 8011828:	4801      	ldr	r0, [pc, #4]	; (8011830 <__malloc_lock+0x8>)
 801182a:	f000 b85d 	b.w	80118e8 <__retarget_lock_acquire_recursive>
 801182e:	bf00      	nop
 8011830:	24002350 	.word	0x24002350

08011834 <__malloc_unlock>:
 8011834:	4801      	ldr	r0, [pc, #4]	; (801183c <__malloc_unlock+0x8>)
 8011836:	f000 b858 	b.w	80118ea <__retarget_lock_release_recursive>
 801183a:	bf00      	nop
 801183c:	24002350 	.word	0x24002350

08011840 <_free_r>:
 8011840:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011842:	2900      	cmp	r1, #0
 8011844:	d044      	beq.n	80118d0 <_free_r+0x90>
 8011846:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801184a:	9001      	str	r0, [sp, #4]
 801184c:	2b00      	cmp	r3, #0
 801184e:	f1a1 0404 	sub.w	r4, r1, #4
 8011852:	bfb8      	it	lt
 8011854:	18e4      	addlt	r4, r4, r3
 8011856:	f7ff ffe7 	bl	8011828 <__malloc_lock>
 801185a:	4a1e      	ldr	r2, [pc, #120]	; (80118d4 <_free_r+0x94>)
 801185c:	9801      	ldr	r0, [sp, #4]
 801185e:	6813      	ldr	r3, [r2, #0]
 8011860:	b933      	cbnz	r3, 8011870 <_free_r+0x30>
 8011862:	6063      	str	r3, [r4, #4]
 8011864:	6014      	str	r4, [r2, #0]
 8011866:	b003      	add	sp, #12
 8011868:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801186c:	f7ff bfe2 	b.w	8011834 <__malloc_unlock>
 8011870:	42a3      	cmp	r3, r4
 8011872:	d908      	bls.n	8011886 <_free_r+0x46>
 8011874:	6825      	ldr	r5, [r4, #0]
 8011876:	1961      	adds	r1, r4, r5
 8011878:	428b      	cmp	r3, r1
 801187a:	bf01      	itttt	eq
 801187c:	6819      	ldreq	r1, [r3, #0]
 801187e:	685b      	ldreq	r3, [r3, #4]
 8011880:	1949      	addeq	r1, r1, r5
 8011882:	6021      	streq	r1, [r4, #0]
 8011884:	e7ed      	b.n	8011862 <_free_r+0x22>
 8011886:	461a      	mov	r2, r3
 8011888:	685b      	ldr	r3, [r3, #4]
 801188a:	b10b      	cbz	r3, 8011890 <_free_r+0x50>
 801188c:	42a3      	cmp	r3, r4
 801188e:	d9fa      	bls.n	8011886 <_free_r+0x46>
 8011890:	6811      	ldr	r1, [r2, #0]
 8011892:	1855      	adds	r5, r2, r1
 8011894:	42a5      	cmp	r5, r4
 8011896:	d10b      	bne.n	80118b0 <_free_r+0x70>
 8011898:	6824      	ldr	r4, [r4, #0]
 801189a:	4421      	add	r1, r4
 801189c:	1854      	adds	r4, r2, r1
 801189e:	42a3      	cmp	r3, r4
 80118a0:	6011      	str	r1, [r2, #0]
 80118a2:	d1e0      	bne.n	8011866 <_free_r+0x26>
 80118a4:	681c      	ldr	r4, [r3, #0]
 80118a6:	685b      	ldr	r3, [r3, #4]
 80118a8:	6053      	str	r3, [r2, #4]
 80118aa:	4421      	add	r1, r4
 80118ac:	6011      	str	r1, [r2, #0]
 80118ae:	e7da      	b.n	8011866 <_free_r+0x26>
 80118b0:	d902      	bls.n	80118b8 <_free_r+0x78>
 80118b2:	230c      	movs	r3, #12
 80118b4:	6003      	str	r3, [r0, #0]
 80118b6:	e7d6      	b.n	8011866 <_free_r+0x26>
 80118b8:	6825      	ldr	r5, [r4, #0]
 80118ba:	1961      	adds	r1, r4, r5
 80118bc:	428b      	cmp	r3, r1
 80118be:	bf04      	itt	eq
 80118c0:	6819      	ldreq	r1, [r3, #0]
 80118c2:	685b      	ldreq	r3, [r3, #4]
 80118c4:	6063      	str	r3, [r4, #4]
 80118c6:	bf04      	itt	eq
 80118c8:	1949      	addeq	r1, r1, r5
 80118ca:	6021      	streq	r1, [r4, #0]
 80118cc:	6054      	str	r4, [r2, #4]
 80118ce:	e7ca      	b.n	8011866 <_free_r+0x26>
 80118d0:	b003      	add	sp, #12
 80118d2:	bd30      	pop	{r4, r5, pc}
 80118d4:	24002344 	.word	0x24002344

080118d8 <_malloc_usable_size_r>:
 80118d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80118dc:	1f18      	subs	r0, r3, #4
 80118de:	2b00      	cmp	r3, #0
 80118e0:	bfbc      	itt	lt
 80118e2:	580b      	ldrlt	r3, [r1, r0]
 80118e4:	18c0      	addlt	r0, r0, r3
 80118e6:	4770      	bx	lr

080118e8 <__retarget_lock_acquire_recursive>:
 80118e8:	4770      	bx	lr

080118ea <__retarget_lock_release_recursive>:
 80118ea:	4770      	bx	lr

080118ec <_init>:
 80118ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118ee:	bf00      	nop
 80118f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80118f2:	bc08      	pop	{r3}
 80118f4:	469e      	mov	lr, r3
 80118f6:	4770      	bx	lr

080118f8 <_fini>:
 80118f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118fa:	bf00      	nop
 80118fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80118fe:	bc08      	pop	{r3}
 8011900:	469e      	mov	lr, r3
 8011902:	4770      	bx	lr
